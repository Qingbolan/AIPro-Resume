// Code generated by Kitex v0.11.3. DO NOT EDIT.

package allapisservice

import (
	all_api "api_backend/kitex_gen/all_api"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"sendMessage": kitex.NewMethodInfo(
		sendMessageHandler,
		newAllAPIsServiceSendMessageArgs,
		newAllAPIsServiceSendMessageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"verifyEmail": kitex.NewMethodInfo(
		verifyEmailHandler,
		newAllAPIsServiceVerifyEmailArgs,
		newAllAPIsServiceVerifyEmailResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"fetchResumeData": kitex.NewMethodInfo(
		fetchResumeDataHandler,
		newAllAPIsServiceFetchResumeDataArgs,
		newAllAPIsServiceFetchResumeDataResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"fetchProjects": kitex.NewMethodInfo(
		fetchProjectsHandler,
		newAllAPIsServiceFetchProjectsArgs,
		newAllAPIsServiceFetchProjectsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"fetchCategories": kitex.NewMethodInfo(
		fetchCategoriesHandler,
		newAllAPIsServiceFetchCategoriesArgs,
		newAllAPIsServiceFetchCategoriesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"fetchNews": kitex.NewMethodInfo(
		fetchNewsHandler,
		newAllAPIsServiceFetchNewsArgs,
		newAllAPIsServiceFetchNewsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"getRecentMessages": kitex.NewMethodInfo(
		getRecentMessagesHandler,
		newAllAPIsServiceGetRecentMessagesArgs,
		newAllAPIsServiceGetRecentMessagesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"getRecentGoal": kitex.NewMethodInfo(
		getRecentGoalHandler,
		newAllAPIsServiceGetRecentGoalArgs,
		newAllAPIsServiceGetRecentGoalResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"getAIResponse": kitex.NewMethodInfo(
		getAIResponseHandler,
		newAllAPIsServiceGetAIResponseArgs,
		newAllAPIsServiceGetAIResponseResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	allAPIsServiceServiceInfo                = NewServiceInfo()
	allAPIsServiceServiceInfoForClient       = NewServiceInfoForClient()
	allAPIsServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return allAPIsServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return allAPIsServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return allAPIsServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "AllAPIsService"
	handlerType := (*all_api.AllAPIsService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "all_api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func sendMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*all_api.AllAPIsServiceSendMessageArgs)
	realResult := result.(*all_api.AllAPIsServiceSendMessageResult)
	success, err := handler.(all_api.AllAPIsService).SendMessage(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAllAPIsServiceSendMessageArgs() interface{} {
	return all_api.NewAllAPIsServiceSendMessageArgs()
}

func newAllAPIsServiceSendMessageResult() interface{} {
	return all_api.NewAllAPIsServiceSendMessageResult()
}

func verifyEmailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*all_api.AllAPIsServiceVerifyEmailArgs)
	realResult := result.(*all_api.AllAPIsServiceVerifyEmailResult)
	success, err := handler.(all_api.AllAPIsService).VerifyEmail(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAllAPIsServiceVerifyEmailArgs() interface{} {
	return all_api.NewAllAPIsServiceVerifyEmailArgs()
}

func newAllAPIsServiceVerifyEmailResult() interface{} {
	return all_api.NewAllAPIsServiceVerifyEmailResult()
}

func fetchResumeDataHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*all_api.AllAPIsServiceFetchResumeDataArgs)
	realResult := result.(*all_api.AllAPIsServiceFetchResumeDataResult)
	success, err := handler.(all_api.AllAPIsService).FetchResumeData(ctx, realArg.Language)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAllAPIsServiceFetchResumeDataArgs() interface{} {
	return all_api.NewAllAPIsServiceFetchResumeDataArgs()
}

func newAllAPIsServiceFetchResumeDataResult() interface{} {
	return all_api.NewAllAPIsServiceFetchResumeDataResult()
}

func fetchProjectsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*all_api.AllAPIsServiceFetchProjectsArgs)
	realResult := result.(*all_api.AllAPIsServiceFetchProjectsResult)
	success, err := handler.(all_api.AllAPIsService).FetchProjects(ctx, realArg.Language)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAllAPIsServiceFetchProjectsArgs() interface{} {
	return all_api.NewAllAPIsServiceFetchProjectsArgs()
}

func newAllAPIsServiceFetchProjectsResult() interface{} {
	return all_api.NewAllAPIsServiceFetchProjectsResult()
}

func fetchCategoriesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*all_api.AllAPIsServiceFetchCategoriesArgs)
	realResult := result.(*all_api.AllAPIsServiceFetchCategoriesResult)
	success, err := handler.(all_api.AllAPIsService).FetchCategories(ctx, realArg.Language)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAllAPIsServiceFetchCategoriesArgs() interface{} {
	return all_api.NewAllAPIsServiceFetchCategoriesArgs()
}

func newAllAPIsServiceFetchCategoriesResult() interface{} {
	return all_api.NewAllAPIsServiceFetchCategoriesResult()
}

func fetchNewsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*all_api.AllAPIsServiceFetchNewsArgs)
	realResult := result.(*all_api.AllAPIsServiceFetchNewsResult)
	success, err := handler.(all_api.AllAPIsService).FetchNews(ctx, realArg.Language)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAllAPIsServiceFetchNewsArgs() interface{} {
	return all_api.NewAllAPIsServiceFetchNewsArgs()
}

func newAllAPIsServiceFetchNewsResult() interface{} {
	return all_api.NewAllAPIsServiceFetchNewsResult()
}

func getRecentMessagesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*all_api.AllAPIsServiceGetRecentMessagesArgs)
	realResult := result.(*all_api.AllAPIsServiceGetRecentMessagesResult)
	success, err := handler.(all_api.AllAPIsService).GetRecentMessages(ctx, realArg.Language)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAllAPIsServiceGetRecentMessagesArgs() interface{} {
	return all_api.NewAllAPIsServiceGetRecentMessagesArgs()
}

func newAllAPIsServiceGetRecentMessagesResult() interface{} {
	return all_api.NewAllAPIsServiceGetRecentMessagesResult()
}

func getRecentGoalHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*all_api.AllAPIsServiceGetRecentGoalArgs)
	realResult := result.(*all_api.AllAPIsServiceGetRecentGoalResult)
	success, err := handler.(all_api.AllAPIsService).GetRecentGoal(ctx, realArg.Language)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAllAPIsServiceGetRecentGoalArgs() interface{} {
	return all_api.NewAllAPIsServiceGetRecentGoalArgs()
}

func newAllAPIsServiceGetRecentGoalResult() interface{} {
	return all_api.NewAllAPIsServiceGetRecentGoalResult()
}

func getAIResponseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*all_api.AllAPIsServiceGetAIResponseArgs)
	realResult := result.(*all_api.AllAPIsServiceGetAIResponseResult)
	success, err := handler.(all_api.AllAPIsService).GetAIResponse(ctx, realArg.Message, realArg.Language)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAllAPIsServiceGetAIResponseArgs() interface{} {
	return all_api.NewAllAPIsServiceGetAIResponseArgs()
}

func newAllAPIsServiceGetAIResponseResult() interface{} {
	return all_api.NewAllAPIsServiceGetAIResponseResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SendMessage(ctx context.Context, request *all_api.SendMessageRequest) (r *all_api.Response, err error) {
	var _args all_api.AllAPIsServiceSendMessageArgs
	_args.Request = request
	var _result all_api.AllAPIsServiceSendMessageResult
	if err = p.c.Call(ctx, "sendMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VerifyEmail(ctx context.Context, request *all_api.VerifyEmailRequest) (r *all_api.Response, err error) {
	var _args all_api.AllAPIsServiceVerifyEmailArgs
	_args.Request = request
	var _result all_api.AllAPIsServiceVerifyEmailResult
	if err = p.c.Call(ctx, "verifyEmail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FetchResumeData(ctx context.Context, language string) (r *all_api.ResumeData, err error) {
	var _args all_api.AllAPIsServiceFetchResumeDataArgs
	_args.Language = language
	var _result all_api.AllAPIsServiceFetchResumeDataResult
	if err = p.c.Call(ctx, "fetchResumeData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FetchProjects(ctx context.Context, language string) (r *all_api.FetchProjectsResponse, err error) {
	var _args all_api.AllAPIsServiceFetchProjectsArgs
	_args.Language = language
	var _result all_api.AllAPIsServiceFetchProjectsResult
	if err = p.c.Call(ctx, "fetchProjects", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FetchCategories(ctx context.Context, language string) (r *all_api.FetchCategoriesResponse, err error) {
	var _args all_api.AllAPIsServiceFetchCategoriesArgs
	_args.Language = language
	var _result all_api.AllAPIsServiceFetchCategoriesResult
	if err = p.c.Call(ctx, "fetchCategories", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FetchNews(ctx context.Context, language string) (r *all_api.FetchNewsResponse, err error) {
	var _args all_api.AllAPIsServiceFetchNewsArgs
	_args.Language = language
	var _result all_api.AllAPIsServiceFetchNewsResult
	if err = p.c.Call(ctx, "fetchNews", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRecentMessages(ctx context.Context, language string) (r *all_api.GetRecentMessagesResponse, err error) {
	var _args all_api.AllAPIsServiceGetRecentMessagesArgs
	_args.Language = language
	var _result all_api.AllAPIsServiceGetRecentMessagesResult
	if err = p.c.Call(ctx, "getRecentMessages", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRecentGoal(ctx context.Context, language string) (r *all_api.GetRecentGoalResponse, err error) {
	var _args all_api.AllAPIsServiceGetRecentGoalArgs
	_args.Language = language
	var _result all_api.AllAPIsServiceGetRecentGoalResult
	if err = p.c.Call(ctx, "getRecentGoal", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAIResponse(ctx context.Context, message string, language string) (r *all_api.AIResponse, err error) {
	var _args all_api.AllAPIsServiceGetAIResponseArgs
	_args.Message = message
	_args.Language = language
	var _result all_api.AllAPIsServiceGetAIResponseResult
	if err = p.c.Call(ctx, "getAIResponse", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
