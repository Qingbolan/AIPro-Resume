// Code generated by ent, DO NOT EDIT.

package projectimage

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLTE(FieldID, id))
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v uuid.UUID) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldProjectID, v))
}

// ImageURL applies equality check predicate on the "image_url" field. It's identical to ImageURLEQ.
func ImageURL(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldImageURL, v))
}

// AltText applies equality check predicate on the "alt_text" field. It's identical to AltTextEQ.
func AltText(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldAltText, v))
}

// Caption applies equality check predicate on the "caption" field. It's identical to CaptionEQ.
func Caption(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldCaption, v))
}

// ImageType applies equality check predicate on the "image_type" field. It's identical to ImageTypeEQ.
func ImageType(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldImageType, v))
}

// SortOrder applies equality check predicate on the "sort_order" field. It's identical to SortOrderEQ.
func SortOrder(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldSortOrder, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v uuid.UUID) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldProjectID, v))
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v uuid.UUID) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNEQ(FieldProjectID, v))
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...uuid.UUID) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIn(FieldProjectID, vs...))
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...uuid.UUID) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotIn(FieldProjectID, vs...))
}

// ImageURLEQ applies the EQ predicate on the "image_url" field.
func ImageURLEQ(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldImageURL, v))
}

// ImageURLNEQ applies the NEQ predicate on the "image_url" field.
func ImageURLNEQ(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNEQ(FieldImageURL, v))
}

// ImageURLIn applies the In predicate on the "image_url" field.
func ImageURLIn(vs ...string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIn(FieldImageURL, vs...))
}

// ImageURLNotIn applies the NotIn predicate on the "image_url" field.
func ImageURLNotIn(vs ...string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotIn(FieldImageURL, vs...))
}

// ImageURLGT applies the GT predicate on the "image_url" field.
func ImageURLGT(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGT(FieldImageURL, v))
}

// ImageURLGTE applies the GTE predicate on the "image_url" field.
func ImageURLGTE(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGTE(FieldImageURL, v))
}

// ImageURLLT applies the LT predicate on the "image_url" field.
func ImageURLLT(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLT(FieldImageURL, v))
}

// ImageURLLTE applies the LTE predicate on the "image_url" field.
func ImageURLLTE(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLTE(FieldImageURL, v))
}

// ImageURLContains applies the Contains predicate on the "image_url" field.
func ImageURLContains(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldContains(FieldImageURL, v))
}

// ImageURLHasPrefix applies the HasPrefix predicate on the "image_url" field.
func ImageURLHasPrefix(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldHasPrefix(FieldImageURL, v))
}

// ImageURLHasSuffix applies the HasSuffix predicate on the "image_url" field.
func ImageURLHasSuffix(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldHasSuffix(FieldImageURL, v))
}

// ImageURLEqualFold applies the EqualFold predicate on the "image_url" field.
func ImageURLEqualFold(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEqualFold(FieldImageURL, v))
}

// ImageURLContainsFold applies the ContainsFold predicate on the "image_url" field.
func ImageURLContainsFold(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldContainsFold(FieldImageURL, v))
}

// AltTextEQ applies the EQ predicate on the "alt_text" field.
func AltTextEQ(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldAltText, v))
}

// AltTextNEQ applies the NEQ predicate on the "alt_text" field.
func AltTextNEQ(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNEQ(FieldAltText, v))
}

// AltTextIn applies the In predicate on the "alt_text" field.
func AltTextIn(vs ...string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIn(FieldAltText, vs...))
}

// AltTextNotIn applies the NotIn predicate on the "alt_text" field.
func AltTextNotIn(vs ...string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotIn(FieldAltText, vs...))
}

// AltTextGT applies the GT predicate on the "alt_text" field.
func AltTextGT(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGT(FieldAltText, v))
}

// AltTextGTE applies the GTE predicate on the "alt_text" field.
func AltTextGTE(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGTE(FieldAltText, v))
}

// AltTextLT applies the LT predicate on the "alt_text" field.
func AltTextLT(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLT(FieldAltText, v))
}

// AltTextLTE applies the LTE predicate on the "alt_text" field.
func AltTextLTE(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLTE(FieldAltText, v))
}

// AltTextContains applies the Contains predicate on the "alt_text" field.
func AltTextContains(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldContains(FieldAltText, v))
}

// AltTextHasPrefix applies the HasPrefix predicate on the "alt_text" field.
func AltTextHasPrefix(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldHasPrefix(FieldAltText, v))
}

// AltTextHasSuffix applies the HasSuffix predicate on the "alt_text" field.
func AltTextHasSuffix(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldHasSuffix(FieldAltText, v))
}

// AltTextIsNil applies the IsNil predicate on the "alt_text" field.
func AltTextIsNil() predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIsNull(FieldAltText))
}

// AltTextNotNil applies the NotNil predicate on the "alt_text" field.
func AltTextNotNil() predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotNull(FieldAltText))
}

// AltTextEqualFold applies the EqualFold predicate on the "alt_text" field.
func AltTextEqualFold(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEqualFold(FieldAltText, v))
}

// AltTextContainsFold applies the ContainsFold predicate on the "alt_text" field.
func AltTextContainsFold(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldContainsFold(FieldAltText, v))
}

// CaptionEQ applies the EQ predicate on the "caption" field.
func CaptionEQ(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldCaption, v))
}

// CaptionNEQ applies the NEQ predicate on the "caption" field.
func CaptionNEQ(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNEQ(FieldCaption, v))
}

// CaptionIn applies the In predicate on the "caption" field.
func CaptionIn(vs ...string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIn(FieldCaption, vs...))
}

// CaptionNotIn applies the NotIn predicate on the "caption" field.
func CaptionNotIn(vs ...string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotIn(FieldCaption, vs...))
}

// CaptionGT applies the GT predicate on the "caption" field.
func CaptionGT(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGT(FieldCaption, v))
}

// CaptionGTE applies the GTE predicate on the "caption" field.
func CaptionGTE(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGTE(FieldCaption, v))
}

// CaptionLT applies the LT predicate on the "caption" field.
func CaptionLT(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLT(FieldCaption, v))
}

// CaptionLTE applies the LTE predicate on the "caption" field.
func CaptionLTE(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLTE(FieldCaption, v))
}

// CaptionContains applies the Contains predicate on the "caption" field.
func CaptionContains(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldContains(FieldCaption, v))
}

// CaptionHasPrefix applies the HasPrefix predicate on the "caption" field.
func CaptionHasPrefix(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldHasPrefix(FieldCaption, v))
}

// CaptionHasSuffix applies the HasSuffix predicate on the "caption" field.
func CaptionHasSuffix(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldHasSuffix(FieldCaption, v))
}

// CaptionIsNil applies the IsNil predicate on the "caption" field.
func CaptionIsNil() predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIsNull(FieldCaption))
}

// CaptionNotNil applies the NotNil predicate on the "caption" field.
func CaptionNotNil() predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotNull(FieldCaption))
}

// CaptionEqualFold applies the EqualFold predicate on the "caption" field.
func CaptionEqualFold(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEqualFold(FieldCaption, v))
}

// CaptionContainsFold applies the ContainsFold predicate on the "caption" field.
func CaptionContainsFold(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldContainsFold(FieldCaption, v))
}

// ImageTypeEQ applies the EQ predicate on the "image_type" field.
func ImageTypeEQ(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldImageType, v))
}

// ImageTypeNEQ applies the NEQ predicate on the "image_type" field.
func ImageTypeNEQ(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNEQ(FieldImageType, v))
}

// ImageTypeIn applies the In predicate on the "image_type" field.
func ImageTypeIn(vs ...string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIn(FieldImageType, vs...))
}

// ImageTypeNotIn applies the NotIn predicate on the "image_type" field.
func ImageTypeNotIn(vs ...string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotIn(FieldImageType, vs...))
}

// ImageTypeGT applies the GT predicate on the "image_type" field.
func ImageTypeGT(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGT(FieldImageType, v))
}

// ImageTypeGTE applies the GTE predicate on the "image_type" field.
func ImageTypeGTE(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGTE(FieldImageType, v))
}

// ImageTypeLT applies the LT predicate on the "image_type" field.
func ImageTypeLT(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLT(FieldImageType, v))
}

// ImageTypeLTE applies the LTE predicate on the "image_type" field.
func ImageTypeLTE(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLTE(FieldImageType, v))
}

// ImageTypeContains applies the Contains predicate on the "image_type" field.
func ImageTypeContains(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldContains(FieldImageType, v))
}

// ImageTypeHasPrefix applies the HasPrefix predicate on the "image_type" field.
func ImageTypeHasPrefix(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldHasPrefix(FieldImageType, v))
}

// ImageTypeHasSuffix applies the HasSuffix predicate on the "image_type" field.
func ImageTypeHasSuffix(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldHasSuffix(FieldImageType, v))
}

// ImageTypeIsNil applies the IsNil predicate on the "image_type" field.
func ImageTypeIsNil() predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIsNull(FieldImageType))
}

// ImageTypeNotNil applies the NotNil predicate on the "image_type" field.
func ImageTypeNotNil() predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotNull(FieldImageType))
}

// ImageTypeEqualFold applies the EqualFold predicate on the "image_type" field.
func ImageTypeEqualFold(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEqualFold(FieldImageType, v))
}

// ImageTypeContainsFold applies the ContainsFold predicate on the "image_type" field.
func ImageTypeContainsFold(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldContainsFold(FieldImageType, v))
}

// SortOrderEQ applies the EQ predicate on the "sort_order" field.
func SortOrderEQ(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldSortOrder, v))
}

// SortOrderNEQ applies the NEQ predicate on the "sort_order" field.
func SortOrderNEQ(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNEQ(FieldSortOrder, v))
}

// SortOrderIn applies the In predicate on the "sort_order" field.
func SortOrderIn(vs ...int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIn(FieldSortOrder, vs...))
}

// SortOrderNotIn applies the NotIn predicate on the "sort_order" field.
func SortOrderNotIn(vs ...int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotIn(FieldSortOrder, vs...))
}

// SortOrderGT applies the GT predicate on the "sort_order" field.
func SortOrderGT(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGT(FieldSortOrder, v))
}

// SortOrderGTE applies the GTE predicate on the "sort_order" field.
func SortOrderGTE(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGTE(FieldSortOrder, v))
}

// SortOrderLT applies the LT predicate on the "sort_order" field.
func SortOrderLT(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLT(FieldSortOrder, v))
}

// SortOrderLTE applies the LTE predicate on the "sort_order" field.
func SortOrderLTE(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLTE(FieldSortOrder, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.ProjectImage {
	return predicate.ProjectImage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.ProjectImage {
	return predicate.ProjectImage(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTranslations applies the HasEdge predicate on the "translations" edge.
func HasTranslations() predicate.ProjectImage {
	return predicate.ProjectImage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TranslationsTable, TranslationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTranslationsWith applies the HasEdge predicate on the "translations" edge with a given conditions (other predicates).
func HasTranslationsWith(preds ...predicate.ProjectImageTranslation) predicate.ProjectImage {
	return predicate.ProjectImage(func(s *sql.Selector) {
		step := newTranslationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProjectImage) predicate.ProjectImage {
	return predicate.ProjectImage(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProjectImage) predicate.ProjectImage {
	return predicate.ProjectImage(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProjectImage) predicate.ProjectImage {
	return predicate.ProjectImage(sql.NotPredicates(p))
}
