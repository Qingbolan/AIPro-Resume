// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/recentupdate"
	"silan-backend/internal/ent/recentupdatetranslation"
	"silan-backend/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// RecentUpdateCreate is the builder for creating a RecentUpdate entity.
type RecentUpdateCreate struct {
	config
	mutation *RecentUpdateMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (ruc *RecentUpdateCreate) SetUserID(u uuid.UUID) *RecentUpdateCreate {
	ruc.mutation.SetUserID(u)
	return ruc
}

// SetType sets the "type" field.
func (ruc *RecentUpdateCreate) SetType(r recentupdate.Type) *RecentUpdateCreate {
	ruc.mutation.SetType(r)
	return ruc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ruc *RecentUpdateCreate) SetNillableType(r *recentupdate.Type) *RecentUpdateCreate {
	if r != nil {
		ruc.SetType(*r)
	}
	return ruc
}

// SetTitle sets the "title" field.
func (ruc *RecentUpdateCreate) SetTitle(s string) *RecentUpdateCreate {
	ruc.mutation.SetTitle(s)
	return ruc
}

// SetDescription sets the "description" field.
func (ruc *RecentUpdateCreate) SetDescription(s string) *RecentUpdateCreate {
	ruc.mutation.SetDescription(s)
	return ruc
}

// SetDate sets the "date" field.
func (ruc *RecentUpdateCreate) SetDate(t time.Time) *RecentUpdateCreate {
	ruc.mutation.SetDate(t)
	return ruc
}

// SetTags sets the "tags" field.
func (ruc *RecentUpdateCreate) SetTags(s []string) *RecentUpdateCreate {
	ruc.mutation.SetTags(s)
	return ruc
}

// SetStatus sets the "status" field.
func (ruc *RecentUpdateCreate) SetStatus(r recentupdate.Status) *RecentUpdateCreate {
	ruc.mutation.SetStatus(r)
	return ruc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruc *RecentUpdateCreate) SetNillableStatus(r *recentupdate.Status) *RecentUpdateCreate {
	if r != nil {
		ruc.SetStatus(*r)
	}
	return ruc
}

// SetPriority sets the "priority" field.
func (ruc *RecentUpdateCreate) SetPriority(r recentupdate.Priority) *RecentUpdateCreate {
	ruc.mutation.SetPriority(r)
	return ruc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (ruc *RecentUpdateCreate) SetNillablePriority(r *recentupdate.Priority) *RecentUpdateCreate {
	if r != nil {
		ruc.SetPriority(*r)
	}
	return ruc
}

// SetExternalID sets the "external_id" field.
func (ruc *RecentUpdateCreate) SetExternalID(s string) *RecentUpdateCreate {
	ruc.mutation.SetExternalID(s)
	return ruc
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (ruc *RecentUpdateCreate) SetNillableExternalID(s *string) *RecentUpdateCreate {
	if s != nil {
		ruc.SetExternalID(*s)
	}
	return ruc
}

// SetImageURL sets the "image_url" field.
func (ruc *RecentUpdateCreate) SetImageURL(s string) *RecentUpdateCreate {
	ruc.mutation.SetImageURL(s)
	return ruc
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (ruc *RecentUpdateCreate) SetNillableImageURL(s *string) *RecentUpdateCreate {
	if s != nil {
		ruc.SetImageURL(*s)
	}
	return ruc
}

// SetVideoURL sets the "video_url" field.
func (ruc *RecentUpdateCreate) SetVideoURL(s string) *RecentUpdateCreate {
	ruc.mutation.SetVideoURL(s)
	return ruc
}

// SetNillableVideoURL sets the "video_url" field if the given value is not nil.
func (ruc *RecentUpdateCreate) SetNillableVideoURL(s *string) *RecentUpdateCreate {
	if s != nil {
		ruc.SetVideoURL(*s)
	}
	return ruc
}

// SetDocumentURL sets the "document_url" field.
func (ruc *RecentUpdateCreate) SetDocumentURL(s string) *RecentUpdateCreate {
	ruc.mutation.SetDocumentURL(s)
	return ruc
}

// SetNillableDocumentURL sets the "document_url" field if the given value is not nil.
func (ruc *RecentUpdateCreate) SetNillableDocumentURL(s *string) *RecentUpdateCreate {
	if s != nil {
		ruc.SetDocumentURL(*s)
	}
	return ruc
}

// SetGallery sets the "gallery" field.
func (ruc *RecentUpdateCreate) SetGallery(s []string) *RecentUpdateCreate {
	ruc.mutation.SetGallery(s)
	return ruc
}

// SetAttachments sets the "attachments" field.
func (ruc *RecentUpdateCreate) SetAttachments(m []map[string]interface{}) *RecentUpdateCreate {
	ruc.mutation.SetAttachments(m)
	return ruc
}

// SetMediaMetadata sets the "media_metadata" field.
func (ruc *RecentUpdateCreate) SetMediaMetadata(m map[string]interface{}) *RecentUpdateCreate {
	ruc.mutation.SetMediaMetadata(m)
	return ruc
}

// SetDemoURL sets the "demo_url" field.
func (ruc *RecentUpdateCreate) SetDemoURL(s string) *RecentUpdateCreate {
	ruc.mutation.SetDemoURL(s)
	return ruc
}

// SetNillableDemoURL sets the "demo_url" field if the given value is not nil.
func (ruc *RecentUpdateCreate) SetNillableDemoURL(s *string) *RecentUpdateCreate {
	if s != nil {
		ruc.SetDemoURL(*s)
	}
	return ruc
}

// SetGithubURL sets the "github_url" field.
func (ruc *RecentUpdateCreate) SetGithubURL(s string) *RecentUpdateCreate {
	ruc.mutation.SetGithubURL(s)
	return ruc
}

// SetNillableGithubURL sets the "github_url" field if the given value is not nil.
func (ruc *RecentUpdateCreate) SetNillableGithubURL(s *string) *RecentUpdateCreate {
	if s != nil {
		ruc.SetGithubURL(*s)
	}
	return ruc
}

// SetExternalURL sets the "external_url" field.
func (ruc *RecentUpdateCreate) SetExternalURL(s string) *RecentUpdateCreate {
	ruc.mutation.SetExternalURL(s)
	return ruc
}

// SetNillableExternalURL sets the "external_url" field if the given value is not nil.
func (ruc *RecentUpdateCreate) SetNillableExternalURL(s *string) *RecentUpdateCreate {
	if s != nil {
		ruc.SetExternalURL(*s)
	}
	return ruc
}

// SetSocialLinks sets the "social_links" field.
func (ruc *RecentUpdateCreate) SetSocialLinks(m []map[string]interface{}) *RecentUpdateCreate {
	ruc.mutation.SetSocialLinks(m)
	return ruc
}

// SetSortOrder sets the "sort_order" field.
func (ruc *RecentUpdateCreate) SetSortOrder(i int) *RecentUpdateCreate {
	ruc.mutation.SetSortOrder(i)
	return ruc
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (ruc *RecentUpdateCreate) SetNillableSortOrder(i *int) *RecentUpdateCreate {
	if i != nil {
		ruc.SetSortOrder(*i)
	}
	return ruc
}

// SetCreatedAt sets the "created_at" field.
func (ruc *RecentUpdateCreate) SetCreatedAt(t time.Time) *RecentUpdateCreate {
	ruc.mutation.SetCreatedAt(t)
	return ruc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruc *RecentUpdateCreate) SetNillableCreatedAt(t *time.Time) *RecentUpdateCreate {
	if t != nil {
		ruc.SetCreatedAt(*t)
	}
	return ruc
}

// SetUpdatedAt sets the "updated_at" field.
func (ruc *RecentUpdateCreate) SetUpdatedAt(t time.Time) *RecentUpdateCreate {
	ruc.mutation.SetUpdatedAt(t)
	return ruc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ruc *RecentUpdateCreate) SetNillableUpdatedAt(t *time.Time) *RecentUpdateCreate {
	if t != nil {
		ruc.SetUpdatedAt(*t)
	}
	return ruc
}

// SetID sets the "id" field.
func (ruc *RecentUpdateCreate) SetID(u uuid.UUID) *RecentUpdateCreate {
	ruc.mutation.SetID(u)
	return ruc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ruc *RecentUpdateCreate) SetNillableID(u *uuid.UUID) *RecentUpdateCreate {
	if u != nil {
		ruc.SetID(*u)
	}
	return ruc
}

// SetUser sets the "user" edge to the User entity.
func (ruc *RecentUpdateCreate) SetUser(u *User) *RecentUpdateCreate {
	return ruc.SetUserID(u.ID)
}

// AddTranslationIDs adds the "translations" edge to the RecentUpdateTranslation entity by IDs.
func (ruc *RecentUpdateCreate) AddTranslationIDs(ids ...uuid.UUID) *RecentUpdateCreate {
	ruc.mutation.AddTranslationIDs(ids...)
	return ruc
}

// AddTranslations adds the "translations" edges to the RecentUpdateTranslation entity.
func (ruc *RecentUpdateCreate) AddTranslations(r ...*RecentUpdateTranslation) *RecentUpdateCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruc.AddTranslationIDs(ids...)
}

// Mutation returns the RecentUpdateMutation object of the builder.
func (ruc *RecentUpdateCreate) Mutation() *RecentUpdateMutation {
	return ruc.mutation
}

// Save creates the RecentUpdate in the database.
func (ruc *RecentUpdateCreate) Save(ctx context.Context) (*RecentUpdate, error) {
	ruc.defaults()
	return withHooks(ctx, ruc.sqlSave, ruc.mutation, ruc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ruc *RecentUpdateCreate) SaveX(ctx context.Context) *RecentUpdate {
	v, err := ruc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ruc *RecentUpdateCreate) Exec(ctx context.Context) error {
	_, err := ruc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruc *RecentUpdateCreate) ExecX(ctx context.Context) {
	if err := ruc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruc *RecentUpdateCreate) defaults() {
	if _, ok := ruc.mutation.GetType(); !ok {
		v := recentupdate.DefaultType
		ruc.mutation.SetType(v)
	}
	if _, ok := ruc.mutation.Status(); !ok {
		v := recentupdate.DefaultStatus
		ruc.mutation.SetStatus(v)
	}
	if _, ok := ruc.mutation.Priority(); !ok {
		v := recentupdate.DefaultPriority
		ruc.mutation.SetPriority(v)
	}
	if _, ok := ruc.mutation.SortOrder(); !ok {
		v := recentupdate.DefaultSortOrder
		ruc.mutation.SetSortOrder(v)
	}
	if _, ok := ruc.mutation.CreatedAt(); !ok {
		v := recentupdate.DefaultCreatedAt()
		ruc.mutation.SetCreatedAt(v)
	}
	if _, ok := ruc.mutation.UpdatedAt(); !ok {
		v := recentupdate.DefaultUpdatedAt()
		ruc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ruc.mutation.ID(); !ok {
		v := recentupdate.DefaultID()
		ruc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruc *RecentUpdateCreate) check() error {
	if _, ok := ruc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "RecentUpdate.user_id"`)}
	}
	if _, ok := ruc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "RecentUpdate.type"`)}
	}
	if v, ok := ruc.mutation.GetType(); ok {
		if err := recentupdate.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.type": %w`, err)}
		}
	}
	if _, ok := ruc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "RecentUpdate.title"`)}
	}
	if v, ok := ruc.mutation.Title(); ok {
		if err := recentupdate.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.title": %w`, err)}
		}
	}
	if _, ok := ruc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "RecentUpdate.description"`)}
	}
	if v, ok := ruc.mutation.Description(); ok {
		if err := recentupdate.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.description": %w`, err)}
		}
	}
	if _, ok := ruc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "RecentUpdate.date"`)}
	}
	if _, ok := ruc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "RecentUpdate.status"`)}
	}
	if v, ok := ruc.mutation.Status(); ok {
		if err := recentupdate.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.status": %w`, err)}
		}
	}
	if _, ok := ruc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "RecentUpdate.priority"`)}
	}
	if v, ok := ruc.mutation.Priority(); ok {
		if err := recentupdate.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.priority": %w`, err)}
		}
	}
	if v, ok := ruc.mutation.ExternalID(); ok {
		if err := recentupdate.ExternalIDValidator(v); err != nil {
			return &ValidationError{Name: "external_id", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.external_id": %w`, err)}
		}
	}
	if v, ok := ruc.mutation.ImageURL(); ok {
		if err := recentupdate.ImageURLValidator(v); err != nil {
			return &ValidationError{Name: "image_url", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.image_url": %w`, err)}
		}
	}
	if v, ok := ruc.mutation.VideoURL(); ok {
		if err := recentupdate.VideoURLValidator(v); err != nil {
			return &ValidationError{Name: "video_url", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.video_url": %w`, err)}
		}
	}
	if v, ok := ruc.mutation.DocumentURL(); ok {
		if err := recentupdate.DocumentURLValidator(v); err != nil {
			return &ValidationError{Name: "document_url", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.document_url": %w`, err)}
		}
	}
	if v, ok := ruc.mutation.DemoURL(); ok {
		if err := recentupdate.DemoURLValidator(v); err != nil {
			return &ValidationError{Name: "demo_url", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.demo_url": %w`, err)}
		}
	}
	if v, ok := ruc.mutation.GithubURL(); ok {
		if err := recentupdate.GithubURLValidator(v); err != nil {
			return &ValidationError{Name: "github_url", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.github_url": %w`, err)}
		}
	}
	if v, ok := ruc.mutation.ExternalURL(); ok {
		if err := recentupdate.ExternalURLValidator(v); err != nil {
			return &ValidationError{Name: "external_url", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.external_url": %w`, err)}
		}
	}
	if _, ok := ruc.mutation.SortOrder(); !ok {
		return &ValidationError{Name: "sort_order", err: errors.New(`ent: missing required field "RecentUpdate.sort_order"`)}
	}
	if _, ok := ruc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RecentUpdate.created_at"`)}
	}
	if _, ok := ruc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "RecentUpdate.updated_at"`)}
	}
	if len(ruc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "RecentUpdate.user"`)}
	}
	return nil
}

func (ruc *RecentUpdateCreate) sqlSave(ctx context.Context) (*RecentUpdate, error) {
	if err := ruc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ruc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ruc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ruc.mutation.id = &_node.ID
	ruc.mutation.done = true
	return _node, nil
}

func (ruc *RecentUpdateCreate) createSpec() (*RecentUpdate, *sqlgraph.CreateSpec) {
	var (
		_node = &RecentUpdate{config: ruc.config}
		_spec = sqlgraph.NewCreateSpec(recentupdate.Table, sqlgraph.NewFieldSpec(recentupdate.FieldID, field.TypeUUID))
	)
	if id, ok := ruc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ruc.mutation.GetType(); ok {
		_spec.SetField(recentupdate.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := ruc.mutation.Title(); ok {
		_spec.SetField(recentupdate.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ruc.mutation.Description(); ok {
		_spec.SetField(recentupdate.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ruc.mutation.Date(); ok {
		_spec.SetField(recentupdate.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := ruc.mutation.Tags(); ok {
		_spec.SetField(recentupdate.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := ruc.mutation.Status(); ok {
		_spec.SetField(recentupdate.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := ruc.mutation.Priority(); ok {
		_spec.SetField(recentupdate.FieldPriority, field.TypeEnum, value)
		_node.Priority = value
	}
	if value, ok := ruc.mutation.ExternalID(); ok {
		_spec.SetField(recentupdate.FieldExternalID, field.TypeString, value)
		_node.ExternalID = value
	}
	if value, ok := ruc.mutation.ImageURL(); ok {
		_spec.SetField(recentupdate.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := ruc.mutation.VideoURL(); ok {
		_spec.SetField(recentupdate.FieldVideoURL, field.TypeString, value)
		_node.VideoURL = value
	}
	if value, ok := ruc.mutation.DocumentURL(); ok {
		_spec.SetField(recentupdate.FieldDocumentURL, field.TypeString, value)
		_node.DocumentURL = value
	}
	if value, ok := ruc.mutation.Gallery(); ok {
		_spec.SetField(recentupdate.FieldGallery, field.TypeJSON, value)
		_node.Gallery = value
	}
	if value, ok := ruc.mutation.Attachments(); ok {
		_spec.SetField(recentupdate.FieldAttachments, field.TypeJSON, value)
		_node.Attachments = value
	}
	if value, ok := ruc.mutation.MediaMetadata(); ok {
		_spec.SetField(recentupdate.FieldMediaMetadata, field.TypeJSON, value)
		_node.MediaMetadata = value
	}
	if value, ok := ruc.mutation.DemoURL(); ok {
		_spec.SetField(recentupdate.FieldDemoURL, field.TypeString, value)
		_node.DemoURL = value
	}
	if value, ok := ruc.mutation.GithubURL(); ok {
		_spec.SetField(recentupdate.FieldGithubURL, field.TypeString, value)
		_node.GithubURL = value
	}
	if value, ok := ruc.mutation.ExternalURL(); ok {
		_spec.SetField(recentupdate.FieldExternalURL, field.TypeString, value)
		_node.ExternalURL = value
	}
	if value, ok := ruc.mutation.SocialLinks(); ok {
		_spec.SetField(recentupdate.FieldSocialLinks, field.TypeJSON, value)
		_node.SocialLinks = value
	}
	if value, ok := ruc.mutation.SortOrder(); ok {
		_spec.SetField(recentupdate.FieldSortOrder, field.TypeInt, value)
		_node.SortOrder = value
	}
	if value, ok := ruc.mutation.CreatedAt(); ok {
		_spec.SetField(recentupdate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ruc.mutation.UpdatedAt(); ok {
		_spec.SetField(recentupdate.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ruc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recentupdate.UserTable,
			Columns: []string{recentupdate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ruc.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recentupdate.TranslationsTable,
			Columns: []string{recentupdate.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recentupdatetranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RecentUpdateCreateBulk is the builder for creating many RecentUpdate entities in bulk.
type RecentUpdateCreateBulk struct {
	config
	err      error
	builders []*RecentUpdateCreate
}

// Save creates the RecentUpdate entities in the database.
func (rucb *RecentUpdateCreateBulk) Save(ctx context.Context) ([]*RecentUpdate, error) {
	if rucb.err != nil {
		return nil, rucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rucb.builders))
	nodes := make([]*RecentUpdate, len(rucb.builders))
	mutators := make([]Mutator, len(rucb.builders))
	for i := range rucb.builders {
		func(i int, root context.Context) {
			builder := rucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RecentUpdateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rucb *RecentUpdateCreateBulk) SaveX(ctx context.Context) []*RecentUpdate {
	v, err := rucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rucb *RecentUpdateCreateBulk) Exec(ctx context.Context) error {
	_, err := rucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rucb *RecentUpdateCreateBulk) ExecX(ctx context.Context) {
	if err := rucb.Exec(ctx); err != nil {
		panic(err)
	}
}
