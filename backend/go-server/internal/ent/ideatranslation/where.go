// Code generated by ent, DO NOT EDIT.

package ideatranslation

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldLTE(FieldID, id))
}

// IdeaID applies equality check predicate on the "idea_id" field. It's identical to IdeaIDEQ.
func IdeaID(v uuid.UUID) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldEQ(FieldIdeaID, v))
}

// LanguageCode applies equality check predicate on the "language_code" field. It's identical to LanguageCodeEQ.
func LanguageCode(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldEQ(FieldLanguageCode, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldEQ(FieldTitle, v))
}

// Abstract applies equality check predicate on the "abstract" field. It's identical to AbstractEQ.
func Abstract(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldEQ(FieldAbstract, v))
}

// Motivation applies equality check predicate on the "motivation" field. It's identical to MotivationEQ.
func Motivation(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldEQ(FieldMotivation, v))
}

// Methodology applies equality check predicate on the "methodology" field. It's identical to MethodologyEQ.
func Methodology(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldEQ(FieldMethodology, v))
}

// ExpectedOutcome applies equality check predicate on the "expected_outcome" field. It's identical to ExpectedOutcomeEQ.
func ExpectedOutcome(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldEQ(FieldExpectedOutcome, v))
}

// RequiredResources applies equality check predicate on the "required_resources" field. It's identical to RequiredResourcesEQ.
func RequiredResources(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldEQ(FieldRequiredResources, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldEQ(FieldCreatedAt, v))
}

// IdeaIDEQ applies the EQ predicate on the "idea_id" field.
func IdeaIDEQ(v uuid.UUID) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldEQ(FieldIdeaID, v))
}

// IdeaIDNEQ applies the NEQ predicate on the "idea_id" field.
func IdeaIDNEQ(v uuid.UUID) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldNEQ(FieldIdeaID, v))
}

// IdeaIDIn applies the In predicate on the "idea_id" field.
func IdeaIDIn(vs ...uuid.UUID) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldIn(FieldIdeaID, vs...))
}

// IdeaIDNotIn applies the NotIn predicate on the "idea_id" field.
func IdeaIDNotIn(vs ...uuid.UUID) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldNotIn(FieldIdeaID, vs...))
}

// LanguageCodeEQ applies the EQ predicate on the "language_code" field.
func LanguageCodeEQ(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldEQ(FieldLanguageCode, v))
}

// LanguageCodeNEQ applies the NEQ predicate on the "language_code" field.
func LanguageCodeNEQ(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldNEQ(FieldLanguageCode, v))
}

// LanguageCodeIn applies the In predicate on the "language_code" field.
func LanguageCodeIn(vs ...string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldIn(FieldLanguageCode, vs...))
}

// LanguageCodeNotIn applies the NotIn predicate on the "language_code" field.
func LanguageCodeNotIn(vs ...string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldNotIn(FieldLanguageCode, vs...))
}

// LanguageCodeGT applies the GT predicate on the "language_code" field.
func LanguageCodeGT(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldGT(FieldLanguageCode, v))
}

// LanguageCodeGTE applies the GTE predicate on the "language_code" field.
func LanguageCodeGTE(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldGTE(FieldLanguageCode, v))
}

// LanguageCodeLT applies the LT predicate on the "language_code" field.
func LanguageCodeLT(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldLT(FieldLanguageCode, v))
}

// LanguageCodeLTE applies the LTE predicate on the "language_code" field.
func LanguageCodeLTE(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldLTE(FieldLanguageCode, v))
}

// LanguageCodeContains applies the Contains predicate on the "language_code" field.
func LanguageCodeContains(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldContains(FieldLanguageCode, v))
}

// LanguageCodeHasPrefix applies the HasPrefix predicate on the "language_code" field.
func LanguageCodeHasPrefix(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldHasPrefix(FieldLanguageCode, v))
}

// LanguageCodeHasSuffix applies the HasSuffix predicate on the "language_code" field.
func LanguageCodeHasSuffix(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldHasSuffix(FieldLanguageCode, v))
}

// LanguageCodeEqualFold applies the EqualFold predicate on the "language_code" field.
func LanguageCodeEqualFold(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldEqualFold(FieldLanguageCode, v))
}

// LanguageCodeContainsFold applies the ContainsFold predicate on the "language_code" field.
func LanguageCodeContainsFold(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldContainsFold(FieldLanguageCode, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldContainsFold(FieldTitle, v))
}

// AbstractEQ applies the EQ predicate on the "abstract" field.
func AbstractEQ(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldEQ(FieldAbstract, v))
}

// AbstractNEQ applies the NEQ predicate on the "abstract" field.
func AbstractNEQ(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldNEQ(FieldAbstract, v))
}

// AbstractIn applies the In predicate on the "abstract" field.
func AbstractIn(vs ...string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldIn(FieldAbstract, vs...))
}

// AbstractNotIn applies the NotIn predicate on the "abstract" field.
func AbstractNotIn(vs ...string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldNotIn(FieldAbstract, vs...))
}

// AbstractGT applies the GT predicate on the "abstract" field.
func AbstractGT(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldGT(FieldAbstract, v))
}

// AbstractGTE applies the GTE predicate on the "abstract" field.
func AbstractGTE(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldGTE(FieldAbstract, v))
}

// AbstractLT applies the LT predicate on the "abstract" field.
func AbstractLT(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldLT(FieldAbstract, v))
}

// AbstractLTE applies the LTE predicate on the "abstract" field.
func AbstractLTE(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldLTE(FieldAbstract, v))
}

// AbstractContains applies the Contains predicate on the "abstract" field.
func AbstractContains(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldContains(FieldAbstract, v))
}

// AbstractHasPrefix applies the HasPrefix predicate on the "abstract" field.
func AbstractHasPrefix(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldHasPrefix(FieldAbstract, v))
}

// AbstractHasSuffix applies the HasSuffix predicate on the "abstract" field.
func AbstractHasSuffix(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldHasSuffix(FieldAbstract, v))
}

// AbstractIsNil applies the IsNil predicate on the "abstract" field.
func AbstractIsNil() predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldIsNull(FieldAbstract))
}

// AbstractNotNil applies the NotNil predicate on the "abstract" field.
func AbstractNotNil() predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldNotNull(FieldAbstract))
}

// AbstractEqualFold applies the EqualFold predicate on the "abstract" field.
func AbstractEqualFold(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldEqualFold(FieldAbstract, v))
}

// AbstractContainsFold applies the ContainsFold predicate on the "abstract" field.
func AbstractContainsFold(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldContainsFold(FieldAbstract, v))
}

// MotivationEQ applies the EQ predicate on the "motivation" field.
func MotivationEQ(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldEQ(FieldMotivation, v))
}

// MotivationNEQ applies the NEQ predicate on the "motivation" field.
func MotivationNEQ(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldNEQ(FieldMotivation, v))
}

// MotivationIn applies the In predicate on the "motivation" field.
func MotivationIn(vs ...string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldIn(FieldMotivation, vs...))
}

// MotivationNotIn applies the NotIn predicate on the "motivation" field.
func MotivationNotIn(vs ...string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldNotIn(FieldMotivation, vs...))
}

// MotivationGT applies the GT predicate on the "motivation" field.
func MotivationGT(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldGT(FieldMotivation, v))
}

// MotivationGTE applies the GTE predicate on the "motivation" field.
func MotivationGTE(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldGTE(FieldMotivation, v))
}

// MotivationLT applies the LT predicate on the "motivation" field.
func MotivationLT(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldLT(FieldMotivation, v))
}

// MotivationLTE applies the LTE predicate on the "motivation" field.
func MotivationLTE(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldLTE(FieldMotivation, v))
}

// MotivationContains applies the Contains predicate on the "motivation" field.
func MotivationContains(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldContains(FieldMotivation, v))
}

// MotivationHasPrefix applies the HasPrefix predicate on the "motivation" field.
func MotivationHasPrefix(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldHasPrefix(FieldMotivation, v))
}

// MotivationHasSuffix applies the HasSuffix predicate on the "motivation" field.
func MotivationHasSuffix(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldHasSuffix(FieldMotivation, v))
}

// MotivationIsNil applies the IsNil predicate on the "motivation" field.
func MotivationIsNil() predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldIsNull(FieldMotivation))
}

// MotivationNotNil applies the NotNil predicate on the "motivation" field.
func MotivationNotNil() predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldNotNull(FieldMotivation))
}

// MotivationEqualFold applies the EqualFold predicate on the "motivation" field.
func MotivationEqualFold(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldEqualFold(FieldMotivation, v))
}

// MotivationContainsFold applies the ContainsFold predicate on the "motivation" field.
func MotivationContainsFold(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldContainsFold(FieldMotivation, v))
}

// MethodologyEQ applies the EQ predicate on the "methodology" field.
func MethodologyEQ(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldEQ(FieldMethodology, v))
}

// MethodologyNEQ applies the NEQ predicate on the "methodology" field.
func MethodologyNEQ(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldNEQ(FieldMethodology, v))
}

// MethodologyIn applies the In predicate on the "methodology" field.
func MethodologyIn(vs ...string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldIn(FieldMethodology, vs...))
}

// MethodologyNotIn applies the NotIn predicate on the "methodology" field.
func MethodologyNotIn(vs ...string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldNotIn(FieldMethodology, vs...))
}

// MethodologyGT applies the GT predicate on the "methodology" field.
func MethodologyGT(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldGT(FieldMethodology, v))
}

// MethodologyGTE applies the GTE predicate on the "methodology" field.
func MethodologyGTE(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldGTE(FieldMethodology, v))
}

// MethodologyLT applies the LT predicate on the "methodology" field.
func MethodologyLT(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldLT(FieldMethodology, v))
}

// MethodologyLTE applies the LTE predicate on the "methodology" field.
func MethodologyLTE(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldLTE(FieldMethodology, v))
}

// MethodologyContains applies the Contains predicate on the "methodology" field.
func MethodologyContains(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldContains(FieldMethodology, v))
}

// MethodologyHasPrefix applies the HasPrefix predicate on the "methodology" field.
func MethodologyHasPrefix(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldHasPrefix(FieldMethodology, v))
}

// MethodologyHasSuffix applies the HasSuffix predicate on the "methodology" field.
func MethodologyHasSuffix(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldHasSuffix(FieldMethodology, v))
}

// MethodologyIsNil applies the IsNil predicate on the "methodology" field.
func MethodologyIsNil() predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldIsNull(FieldMethodology))
}

// MethodologyNotNil applies the NotNil predicate on the "methodology" field.
func MethodologyNotNil() predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldNotNull(FieldMethodology))
}

// MethodologyEqualFold applies the EqualFold predicate on the "methodology" field.
func MethodologyEqualFold(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldEqualFold(FieldMethodology, v))
}

// MethodologyContainsFold applies the ContainsFold predicate on the "methodology" field.
func MethodologyContainsFold(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldContainsFold(FieldMethodology, v))
}

// ExpectedOutcomeEQ applies the EQ predicate on the "expected_outcome" field.
func ExpectedOutcomeEQ(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldEQ(FieldExpectedOutcome, v))
}

// ExpectedOutcomeNEQ applies the NEQ predicate on the "expected_outcome" field.
func ExpectedOutcomeNEQ(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldNEQ(FieldExpectedOutcome, v))
}

// ExpectedOutcomeIn applies the In predicate on the "expected_outcome" field.
func ExpectedOutcomeIn(vs ...string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldIn(FieldExpectedOutcome, vs...))
}

// ExpectedOutcomeNotIn applies the NotIn predicate on the "expected_outcome" field.
func ExpectedOutcomeNotIn(vs ...string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldNotIn(FieldExpectedOutcome, vs...))
}

// ExpectedOutcomeGT applies the GT predicate on the "expected_outcome" field.
func ExpectedOutcomeGT(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldGT(FieldExpectedOutcome, v))
}

// ExpectedOutcomeGTE applies the GTE predicate on the "expected_outcome" field.
func ExpectedOutcomeGTE(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldGTE(FieldExpectedOutcome, v))
}

// ExpectedOutcomeLT applies the LT predicate on the "expected_outcome" field.
func ExpectedOutcomeLT(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldLT(FieldExpectedOutcome, v))
}

// ExpectedOutcomeLTE applies the LTE predicate on the "expected_outcome" field.
func ExpectedOutcomeLTE(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldLTE(FieldExpectedOutcome, v))
}

// ExpectedOutcomeContains applies the Contains predicate on the "expected_outcome" field.
func ExpectedOutcomeContains(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldContains(FieldExpectedOutcome, v))
}

// ExpectedOutcomeHasPrefix applies the HasPrefix predicate on the "expected_outcome" field.
func ExpectedOutcomeHasPrefix(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldHasPrefix(FieldExpectedOutcome, v))
}

// ExpectedOutcomeHasSuffix applies the HasSuffix predicate on the "expected_outcome" field.
func ExpectedOutcomeHasSuffix(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldHasSuffix(FieldExpectedOutcome, v))
}

// ExpectedOutcomeIsNil applies the IsNil predicate on the "expected_outcome" field.
func ExpectedOutcomeIsNil() predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldIsNull(FieldExpectedOutcome))
}

// ExpectedOutcomeNotNil applies the NotNil predicate on the "expected_outcome" field.
func ExpectedOutcomeNotNil() predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldNotNull(FieldExpectedOutcome))
}

// ExpectedOutcomeEqualFold applies the EqualFold predicate on the "expected_outcome" field.
func ExpectedOutcomeEqualFold(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldEqualFold(FieldExpectedOutcome, v))
}

// ExpectedOutcomeContainsFold applies the ContainsFold predicate on the "expected_outcome" field.
func ExpectedOutcomeContainsFold(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldContainsFold(FieldExpectedOutcome, v))
}

// RequiredResourcesEQ applies the EQ predicate on the "required_resources" field.
func RequiredResourcesEQ(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldEQ(FieldRequiredResources, v))
}

// RequiredResourcesNEQ applies the NEQ predicate on the "required_resources" field.
func RequiredResourcesNEQ(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldNEQ(FieldRequiredResources, v))
}

// RequiredResourcesIn applies the In predicate on the "required_resources" field.
func RequiredResourcesIn(vs ...string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldIn(FieldRequiredResources, vs...))
}

// RequiredResourcesNotIn applies the NotIn predicate on the "required_resources" field.
func RequiredResourcesNotIn(vs ...string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldNotIn(FieldRequiredResources, vs...))
}

// RequiredResourcesGT applies the GT predicate on the "required_resources" field.
func RequiredResourcesGT(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldGT(FieldRequiredResources, v))
}

// RequiredResourcesGTE applies the GTE predicate on the "required_resources" field.
func RequiredResourcesGTE(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldGTE(FieldRequiredResources, v))
}

// RequiredResourcesLT applies the LT predicate on the "required_resources" field.
func RequiredResourcesLT(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldLT(FieldRequiredResources, v))
}

// RequiredResourcesLTE applies the LTE predicate on the "required_resources" field.
func RequiredResourcesLTE(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldLTE(FieldRequiredResources, v))
}

// RequiredResourcesContains applies the Contains predicate on the "required_resources" field.
func RequiredResourcesContains(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldContains(FieldRequiredResources, v))
}

// RequiredResourcesHasPrefix applies the HasPrefix predicate on the "required_resources" field.
func RequiredResourcesHasPrefix(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldHasPrefix(FieldRequiredResources, v))
}

// RequiredResourcesHasSuffix applies the HasSuffix predicate on the "required_resources" field.
func RequiredResourcesHasSuffix(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldHasSuffix(FieldRequiredResources, v))
}

// RequiredResourcesIsNil applies the IsNil predicate on the "required_resources" field.
func RequiredResourcesIsNil() predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldIsNull(FieldRequiredResources))
}

// RequiredResourcesNotNil applies the NotNil predicate on the "required_resources" field.
func RequiredResourcesNotNil() predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldNotNull(FieldRequiredResources))
}

// RequiredResourcesEqualFold applies the EqualFold predicate on the "required_resources" field.
func RequiredResourcesEqualFold(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldEqualFold(FieldRequiredResources, v))
}

// RequiredResourcesContainsFold applies the ContainsFold predicate on the "required_resources" field.
func RequiredResourcesContainsFold(v string) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldContainsFold(FieldRequiredResources, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.FieldLTE(FieldCreatedAt, v))
}

// HasIdea applies the HasEdge predicate on the "idea" edge.
func HasIdea() predicate.IdeaTranslation {
	return predicate.IdeaTranslation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, IdeaTable, IdeaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIdeaWith applies the HasEdge predicate on the "idea" edge with a given conditions (other predicates).
func HasIdeaWith(preds ...predicate.Idea) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(func(s *sql.Selector) {
		step := newIdeaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLanguage applies the HasEdge predicate on the "language" edge.
func HasLanguage() predicate.IdeaTranslation {
	return predicate.IdeaTranslation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LanguageTable, LanguageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLanguageWith applies the HasEdge predicate on the "language" edge with a given conditions (other predicates).
func HasLanguageWith(preds ...predicate.Language) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(func(s *sql.Selector) {
		step := newLanguageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IdeaTranslation) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IdeaTranslation) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IdeaTranslation) predicate.IdeaTranslation {
	return predicate.IdeaTranslation(sql.NotPredicates(p))
}
