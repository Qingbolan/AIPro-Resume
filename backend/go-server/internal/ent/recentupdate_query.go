// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/recentupdate"
	"silan-backend/internal/ent/recentupdatetranslation"
	"silan-backend/internal/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// RecentUpdateQuery is the builder for querying RecentUpdate entities.
type RecentUpdateQuery struct {
	config
	ctx              *QueryContext
	order            []recentupdate.OrderOption
	inters           []Interceptor
	predicates       []predicate.RecentUpdate
	withUser         *UserQuery
	withTranslations *RecentUpdateTranslationQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RecentUpdateQuery builder.
func (ruq *RecentUpdateQuery) Where(ps ...predicate.RecentUpdate) *RecentUpdateQuery {
	ruq.predicates = append(ruq.predicates, ps...)
	return ruq
}

// Limit the number of records to be returned by this query.
func (ruq *RecentUpdateQuery) Limit(limit int) *RecentUpdateQuery {
	ruq.ctx.Limit = &limit
	return ruq
}

// Offset to start from.
func (ruq *RecentUpdateQuery) Offset(offset int) *RecentUpdateQuery {
	ruq.ctx.Offset = &offset
	return ruq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ruq *RecentUpdateQuery) Unique(unique bool) *RecentUpdateQuery {
	ruq.ctx.Unique = &unique
	return ruq
}

// Order specifies how the records should be ordered.
func (ruq *RecentUpdateQuery) Order(o ...recentupdate.OrderOption) *RecentUpdateQuery {
	ruq.order = append(ruq.order, o...)
	return ruq
}

// QueryUser chains the current query on the "user" edge.
func (ruq *RecentUpdateQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: ruq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ruq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ruq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(recentupdate.Table, recentupdate.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recentupdate.UserTable, recentupdate.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(ruq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTranslations chains the current query on the "translations" edge.
func (ruq *RecentUpdateQuery) QueryTranslations() *RecentUpdateTranslationQuery {
	query := (&RecentUpdateTranslationClient{config: ruq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ruq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ruq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(recentupdate.Table, recentupdate.FieldID, selector),
			sqlgraph.To(recentupdatetranslation.Table, recentupdatetranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, recentupdate.TranslationsTable, recentupdate.TranslationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ruq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RecentUpdate entity from the query.
// Returns a *NotFoundError when no RecentUpdate was found.
func (ruq *RecentUpdateQuery) First(ctx context.Context) (*RecentUpdate, error) {
	nodes, err := ruq.Limit(1).All(setContextOp(ctx, ruq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{recentupdate.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ruq *RecentUpdateQuery) FirstX(ctx context.Context) *RecentUpdate {
	node, err := ruq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RecentUpdate ID from the query.
// Returns a *NotFoundError when no RecentUpdate ID was found.
func (ruq *RecentUpdateQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ruq.Limit(1).IDs(setContextOp(ctx, ruq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{recentupdate.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ruq *RecentUpdateQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := ruq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RecentUpdate entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RecentUpdate entity is found.
// Returns a *NotFoundError when no RecentUpdate entities are found.
func (ruq *RecentUpdateQuery) Only(ctx context.Context) (*RecentUpdate, error) {
	nodes, err := ruq.Limit(2).All(setContextOp(ctx, ruq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{recentupdate.Label}
	default:
		return nil, &NotSingularError{recentupdate.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ruq *RecentUpdateQuery) OnlyX(ctx context.Context) *RecentUpdate {
	node, err := ruq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RecentUpdate ID in the query.
// Returns a *NotSingularError when more than one RecentUpdate ID is found.
// Returns a *NotFoundError when no entities are found.
func (ruq *RecentUpdateQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ruq.Limit(2).IDs(setContextOp(ctx, ruq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{recentupdate.Label}
	default:
		err = &NotSingularError{recentupdate.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ruq *RecentUpdateQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := ruq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RecentUpdates.
func (ruq *RecentUpdateQuery) All(ctx context.Context) ([]*RecentUpdate, error) {
	ctx = setContextOp(ctx, ruq.ctx, ent.OpQueryAll)
	if err := ruq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*RecentUpdate, *RecentUpdateQuery]()
	return withInterceptors[[]*RecentUpdate](ctx, ruq, qr, ruq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ruq *RecentUpdateQuery) AllX(ctx context.Context) []*RecentUpdate {
	nodes, err := ruq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RecentUpdate IDs.
func (ruq *RecentUpdateQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if ruq.ctx.Unique == nil && ruq.path != nil {
		ruq.Unique(true)
	}
	ctx = setContextOp(ctx, ruq.ctx, ent.OpQueryIDs)
	if err = ruq.Select(recentupdate.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ruq *RecentUpdateQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := ruq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ruq *RecentUpdateQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ruq.ctx, ent.OpQueryCount)
	if err := ruq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ruq, querierCount[*RecentUpdateQuery](), ruq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ruq *RecentUpdateQuery) CountX(ctx context.Context) int {
	count, err := ruq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ruq *RecentUpdateQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ruq.ctx, ent.OpQueryExist)
	switch _, err := ruq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ruq *RecentUpdateQuery) ExistX(ctx context.Context) bool {
	exist, err := ruq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RecentUpdateQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ruq *RecentUpdateQuery) Clone() *RecentUpdateQuery {
	if ruq == nil {
		return nil
	}
	return &RecentUpdateQuery{
		config:           ruq.config,
		ctx:              ruq.ctx.Clone(),
		order:            append([]recentupdate.OrderOption{}, ruq.order...),
		inters:           append([]Interceptor{}, ruq.inters...),
		predicates:       append([]predicate.RecentUpdate{}, ruq.predicates...),
		withUser:         ruq.withUser.Clone(),
		withTranslations: ruq.withTranslations.Clone(),
		// clone intermediate query.
		sql:  ruq.sql.Clone(),
		path: ruq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (ruq *RecentUpdateQuery) WithUser(opts ...func(*UserQuery)) *RecentUpdateQuery {
	query := (&UserClient{config: ruq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ruq.withUser = query
	return ruq
}

// WithTranslations tells the query-builder to eager-load the nodes that are connected to
// the "translations" edge. The optional arguments are used to configure the query builder of the edge.
func (ruq *RecentUpdateQuery) WithTranslations(opts ...func(*RecentUpdateTranslationQuery)) *RecentUpdateQuery {
	query := (&RecentUpdateTranslationClient{config: ruq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ruq.withTranslations = query
	return ruq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID uuid.UUID `json:"user_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RecentUpdate.Query().
//		GroupBy(recentupdate.FieldUserID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ruq *RecentUpdateQuery) GroupBy(field string, fields ...string) *RecentUpdateGroupBy {
	ruq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RecentUpdateGroupBy{build: ruq}
	grbuild.flds = &ruq.ctx.Fields
	grbuild.label = recentupdate.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID uuid.UUID `json:"user_id,omitempty"`
//	}
//
//	client.RecentUpdate.Query().
//		Select(recentupdate.FieldUserID).
//		Scan(ctx, &v)
func (ruq *RecentUpdateQuery) Select(fields ...string) *RecentUpdateSelect {
	ruq.ctx.Fields = append(ruq.ctx.Fields, fields...)
	sbuild := &RecentUpdateSelect{RecentUpdateQuery: ruq}
	sbuild.label = recentupdate.Label
	sbuild.flds, sbuild.scan = &ruq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RecentUpdateSelect configured with the given aggregations.
func (ruq *RecentUpdateQuery) Aggregate(fns ...AggregateFunc) *RecentUpdateSelect {
	return ruq.Select().Aggregate(fns...)
}

func (ruq *RecentUpdateQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ruq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ruq); err != nil {
				return err
			}
		}
	}
	for _, f := range ruq.ctx.Fields {
		if !recentupdate.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ruq.path != nil {
		prev, err := ruq.path(ctx)
		if err != nil {
			return err
		}
		ruq.sql = prev
	}
	return nil
}

func (ruq *RecentUpdateQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*RecentUpdate, error) {
	var (
		nodes       = []*RecentUpdate{}
		_spec       = ruq.querySpec()
		loadedTypes = [2]bool{
			ruq.withUser != nil,
			ruq.withTranslations != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*RecentUpdate).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &RecentUpdate{config: ruq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ruq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ruq.withUser; query != nil {
		if err := ruq.loadUser(ctx, query, nodes, nil,
			func(n *RecentUpdate, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := ruq.withTranslations; query != nil {
		if err := ruq.loadTranslations(ctx, query, nodes,
			func(n *RecentUpdate) { n.Edges.Translations = []*RecentUpdateTranslation{} },
			func(n *RecentUpdate, e *RecentUpdateTranslation) {
				n.Edges.Translations = append(n.Edges.Translations, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ruq *RecentUpdateQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*RecentUpdate, init func(*RecentUpdate), assign func(*RecentUpdate, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*RecentUpdate)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ruq *RecentUpdateQuery) loadTranslations(ctx context.Context, query *RecentUpdateTranslationQuery, nodes []*RecentUpdate, init func(*RecentUpdate), assign func(*RecentUpdate, *RecentUpdateTranslation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*RecentUpdate)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(recentupdatetranslation.FieldRecentUpdateID)
	}
	query.Where(predicate.RecentUpdateTranslation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(recentupdate.TranslationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RecentUpdateID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "recent_update_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ruq *RecentUpdateQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ruq.querySpec()
	_spec.Node.Columns = ruq.ctx.Fields
	if len(ruq.ctx.Fields) > 0 {
		_spec.Unique = ruq.ctx.Unique != nil && *ruq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ruq.driver, _spec)
}

func (ruq *RecentUpdateQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(recentupdate.Table, recentupdate.Columns, sqlgraph.NewFieldSpec(recentupdate.FieldID, field.TypeUUID))
	_spec.From = ruq.sql
	if unique := ruq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ruq.path != nil {
		_spec.Unique = true
	}
	if fields := ruq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recentupdate.FieldID)
		for i := range fields {
			if fields[i] != recentupdate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ruq.withUser != nil {
			_spec.Node.AddColumnOnce(recentupdate.FieldUserID)
		}
	}
	if ps := ruq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ruq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ruq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ruq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ruq *RecentUpdateQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ruq.driver.Dialect())
	t1 := builder.Table(recentupdate.Table)
	columns := ruq.ctx.Fields
	if len(columns) == 0 {
		columns = recentupdate.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ruq.sql != nil {
		selector = ruq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ruq.ctx.Unique != nil && *ruq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ruq.predicates {
		p(selector)
	}
	for _, p := range ruq.order {
		p(selector)
	}
	if offset := ruq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ruq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RecentUpdateGroupBy is the group-by builder for RecentUpdate entities.
type RecentUpdateGroupBy struct {
	selector
	build *RecentUpdateQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rugb *RecentUpdateGroupBy) Aggregate(fns ...AggregateFunc) *RecentUpdateGroupBy {
	rugb.fns = append(rugb.fns, fns...)
	return rugb
}

// Scan applies the selector query and scans the result into the given value.
func (rugb *RecentUpdateGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rugb.build.ctx, ent.OpQueryGroupBy)
	if err := rugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RecentUpdateQuery, *RecentUpdateGroupBy](ctx, rugb.build, rugb, rugb.build.inters, v)
}

func (rugb *RecentUpdateGroupBy) sqlScan(ctx context.Context, root *RecentUpdateQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rugb.fns))
	for _, fn := range rugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rugb.flds)+len(rugb.fns))
		for _, f := range *rugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RecentUpdateSelect is the builder for selecting fields of RecentUpdate entities.
type RecentUpdateSelect struct {
	*RecentUpdateQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rus *RecentUpdateSelect) Aggregate(fns ...AggregateFunc) *RecentUpdateSelect {
	rus.fns = append(rus.fns, fns...)
	return rus
}

// Scan applies the selector query and scans the result into the given value.
func (rus *RecentUpdateSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rus.ctx, ent.OpQuerySelect)
	if err := rus.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RecentUpdateQuery, *RecentUpdateSelect](ctx, rus.RecentUpdateQuery, rus, rus.inters, v)
}

func (rus *RecentUpdateSelect) sqlScan(ctx context.Context, root *RecentUpdateQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rus.fns))
	for _, fn := range rus.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rus.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
