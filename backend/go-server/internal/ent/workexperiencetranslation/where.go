// Code generated by ent, DO NOT EDIT.

package workexperiencetranslation

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldLTE(FieldID, id))
}

// WorkExperienceID applies equality check predicate on the "work_experience_id" field. It's identical to WorkExperienceIDEQ.
func WorkExperienceID(v uuid.UUID) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldEQ(FieldWorkExperienceID, v))
}

// LanguageCode applies equality check predicate on the "language_code" field. It's identical to LanguageCodeEQ.
func LanguageCode(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldEQ(FieldLanguageCode, v))
}

// Company applies equality check predicate on the "company" field. It's identical to CompanyEQ.
func Company(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldEQ(FieldCompany, v))
}

// Position applies equality check predicate on the "position" field. It's identical to PositionEQ.
func Position(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldEQ(FieldPosition, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldEQ(FieldLocation, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldEQ(FieldCreatedAt, v))
}

// WorkExperienceIDEQ applies the EQ predicate on the "work_experience_id" field.
func WorkExperienceIDEQ(v uuid.UUID) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldEQ(FieldWorkExperienceID, v))
}

// WorkExperienceIDNEQ applies the NEQ predicate on the "work_experience_id" field.
func WorkExperienceIDNEQ(v uuid.UUID) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldNEQ(FieldWorkExperienceID, v))
}

// WorkExperienceIDIn applies the In predicate on the "work_experience_id" field.
func WorkExperienceIDIn(vs ...uuid.UUID) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldIn(FieldWorkExperienceID, vs...))
}

// WorkExperienceIDNotIn applies the NotIn predicate on the "work_experience_id" field.
func WorkExperienceIDNotIn(vs ...uuid.UUID) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldNotIn(FieldWorkExperienceID, vs...))
}

// LanguageCodeEQ applies the EQ predicate on the "language_code" field.
func LanguageCodeEQ(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldEQ(FieldLanguageCode, v))
}

// LanguageCodeNEQ applies the NEQ predicate on the "language_code" field.
func LanguageCodeNEQ(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldNEQ(FieldLanguageCode, v))
}

// LanguageCodeIn applies the In predicate on the "language_code" field.
func LanguageCodeIn(vs ...string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldIn(FieldLanguageCode, vs...))
}

// LanguageCodeNotIn applies the NotIn predicate on the "language_code" field.
func LanguageCodeNotIn(vs ...string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldNotIn(FieldLanguageCode, vs...))
}

// LanguageCodeGT applies the GT predicate on the "language_code" field.
func LanguageCodeGT(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldGT(FieldLanguageCode, v))
}

// LanguageCodeGTE applies the GTE predicate on the "language_code" field.
func LanguageCodeGTE(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldGTE(FieldLanguageCode, v))
}

// LanguageCodeLT applies the LT predicate on the "language_code" field.
func LanguageCodeLT(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldLT(FieldLanguageCode, v))
}

// LanguageCodeLTE applies the LTE predicate on the "language_code" field.
func LanguageCodeLTE(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldLTE(FieldLanguageCode, v))
}

// LanguageCodeContains applies the Contains predicate on the "language_code" field.
func LanguageCodeContains(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldContains(FieldLanguageCode, v))
}

// LanguageCodeHasPrefix applies the HasPrefix predicate on the "language_code" field.
func LanguageCodeHasPrefix(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldHasPrefix(FieldLanguageCode, v))
}

// LanguageCodeHasSuffix applies the HasSuffix predicate on the "language_code" field.
func LanguageCodeHasSuffix(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldHasSuffix(FieldLanguageCode, v))
}

// LanguageCodeEqualFold applies the EqualFold predicate on the "language_code" field.
func LanguageCodeEqualFold(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldEqualFold(FieldLanguageCode, v))
}

// LanguageCodeContainsFold applies the ContainsFold predicate on the "language_code" field.
func LanguageCodeContainsFold(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldContainsFold(FieldLanguageCode, v))
}

// CompanyEQ applies the EQ predicate on the "company" field.
func CompanyEQ(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldEQ(FieldCompany, v))
}

// CompanyNEQ applies the NEQ predicate on the "company" field.
func CompanyNEQ(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldNEQ(FieldCompany, v))
}

// CompanyIn applies the In predicate on the "company" field.
func CompanyIn(vs ...string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldIn(FieldCompany, vs...))
}

// CompanyNotIn applies the NotIn predicate on the "company" field.
func CompanyNotIn(vs ...string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldNotIn(FieldCompany, vs...))
}

// CompanyGT applies the GT predicate on the "company" field.
func CompanyGT(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldGT(FieldCompany, v))
}

// CompanyGTE applies the GTE predicate on the "company" field.
func CompanyGTE(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldGTE(FieldCompany, v))
}

// CompanyLT applies the LT predicate on the "company" field.
func CompanyLT(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldLT(FieldCompany, v))
}

// CompanyLTE applies the LTE predicate on the "company" field.
func CompanyLTE(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldLTE(FieldCompany, v))
}

// CompanyContains applies the Contains predicate on the "company" field.
func CompanyContains(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldContains(FieldCompany, v))
}

// CompanyHasPrefix applies the HasPrefix predicate on the "company" field.
func CompanyHasPrefix(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldHasPrefix(FieldCompany, v))
}

// CompanyHasSuffix applies the HasSuffix predicate on the "company" field.
func CompanyHasSuffix(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldHasSuffix(FieldCompany, v))
}

// CompanyIsNil applies the IsNil predicate on the "company" field.
func CompanyIsNil() predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldIsNull(FieldCompany))
}

// CompanyNotNil applies the NotNil predicate on the "company" field.
func CompanyNotNil() predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldNotNull(FieldCompany))
}

// CompanyEqualFold applies the EqualFold predicate on the "company" field.
func CompanyEqualFold(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldEqualFold(FieldCompany, v))
}

// CompanyContainsFold applies the ContainsFold predicate on the "company" field.
func CompanyContainsFold(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldContainsFold(FieldCompany, v))
}

// PositionEQ applies the EQ predicate on the "position" field.
func PositionEQ(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldEQ(FieldPosition, v))
}

// PositionNEQ applies the NEQ predicate on the "position" field.
func PositionNEQ(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldNEQ(FieldPosition, v))
}

// PositionIn applies the In predicate on the "position" field.
func PositionIn(vs ...string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldIn(FieldPosition, vs...))
}

// PositionNotIn applies the NotIn predicate on the "position" field.
func PositionNotIn(vs ...string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldNotIn(FieldPosition, vs...))
}

// PositionGT applies the GT predicate on the "position" field.
func PositionGT(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldGT(FieldPosition, v))
}

// PositionGTE applies the GTE predicate on the "position" field.
func PositionGTE(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldGTE(FieldPosition, v))
}

// PositionLT applies the LT predicate on the "position" field.
func PositionLT(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldLT(FieldPosition, v))
}

// PositionLTE applies the LTE predicate on the "position" field.
func PositionLTE(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldLTE(FieldPosition, v))
}

// PositionContains applies the Contains predicate on the "position" field.
func PositionContains(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldContains(FieldPosition, v))
}

// PositionHasPrefix applies the HasPrefix predicate on the "position" field.
func PositionHasPrefix(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldHasPrefix(FieldPosition, v))
}

// PositionHasSuffix applies the HasSuffix predicate on the "position" field.
func PositionHasSuffix(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldHasSuffix(FieldPosition, v))
}

// PositionIsNil applies the IsNil predicate on the "position" field.
func PositionIsNil() predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldIsNull(FieldPosition))
}

// PositionNotNil applies the NotNil predicate on the "position" field.
func PositionNotNil() predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldNotNull(FieldPosition))
}

// PositionEqualFold applies the EqualFold predicate on the "position" field.
func PositionEqualFold(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldEqualFold(FieldPosition, v))
}

// PositionContainsFold applies the ContainsFold predicate on the "position" field.
func PositionContainsFold(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldContainsFold(FieldPosition, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldIsNull(FieldLocation))
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldNotNull(FieldLocation))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldContainsFold(FieldLocation, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.FieldLTE(FieldCreatedAt, v))
}

// HasWorkExperience applies the HasEdge predicate on the "work_experience" edge.
func HasWorkExperience() predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkExperienceTable, WorkExperienceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkExperienceWith applies the HasEdge predicate on the "work_experience" edge with a given conditions (other predicates).
func HasWorkExperienceWith(preds ...predicate.WorkExperience) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(func(s *sql.Selector) {
		step := newWorkExperienceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLanguage applies the HasEdge predicate on the "language" edge.
func HasLanguage() predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LanguageTable, LanguageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLanguageWith applies the HasEdge predicate on the "language" edge with a given conditions (other predicates).
func HasLanguageWith(preds ...predicate.Language) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(func(s *sql.Selector) {
		step := newLanguageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkExperienceTranslation) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkExperienceTranslation) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkExperienceTranslation) predicate.WorkExperienceTranslation {
	return predicate.WorkExperienceTranslation(sql.NotPredicates(p))
}
