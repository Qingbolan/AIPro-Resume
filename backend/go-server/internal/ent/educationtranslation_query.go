// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"silan-backend/internal/ent/education"
	"silan-backend/internal/ent/educationtranslation"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/predicate"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// EducationTranslationQuery is the builder for querying EducationTranslation entities.
type EducationTranslationQuery struct {
	config
	ctx           *QueryContext
	order         []educationtranslation.OrderOption
	inters        []Interceptor
	predicates    []predicate.EducationTranslation
	withEducation *EducationQuery
	withLanguage  *LanguageQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EducationTranslationQuery builder.
func (etq *EducationTranslationQuery) Where(ps ...predicate.EducationTranslation) *EducationTranslationQuery {
	etq.predicates = append(etq.predicates, ps...)
	return etq
}

// Limit the number of records to be returned by this query.
func (etq *EducationTranslationQuery) Limit(limit int) *EducationTranslationQuery {
	etq.ctx.Limit = &limit
	return etq
}

// Offset to start from.
func (etq *EducationTranslationQuery) Offset(offset int) *EducationTranslationQuery {
	etq.ctx.Offset = &offset
	return etq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (etq *EducationTranslationQuery) Unique(unique bool) *EducationTranslationQuery {
	etq.ctx.Unique = &unique
	return etq
}

// Order specifies how the records should be ordered.
func (etq *EducationTranslationQuery) Order(o ...educationtranslation.OrderOption) *EducationTranslationQuery {
	etq.order = append(etq.order, o...)
	return etq
}

// QueryEducation chains the current query on the "education" edge.
func (etq *EducationTranslationQuery) QueryEducation() *EducationQuery {
	query := (&EducationClient{config: etq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := etq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := etq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(educationtranslation.Table, educationtranslation.FieldID, selector),
			sqlgraph.To(education.Table, education.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, educationtranslation.EducationTable, educationtranslation.EducationColumn),
		)
		fromU = sqlgraph.SetNeighbors(etq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLanguage chains the current query on the "language" edge.
func (etq *EducationTranslationQuery) QueryLanguage() *LanguageQuery {
	query := (&LanguageClient{config: etq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := etq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := etq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(educationtranslation.Table, educationtranslation.FieldID, selector),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, educationtranslation.LanguageTable, educationtranslation.LanguageColumn),
		)
		fromU = sqlgraph.SetNeighbors(etq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EducationTranslation entity from the query.
// Returns a *NotFoundError when no EducationTranslation was found.
func (etq *EducationTranslationQuery) First(ctx context.Context) (*EducationTranslation, error) {
	nodes, err := etq.Limit(1).All(setContextOp(ctx, etq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{educationtranslation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (etq *EducationTranslationQuery) FirstX(ctx context.Context) *EducationTranslation {
	node, err := etq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EducationTranslation ID from the query.
// Returns a *NotFoundError when no EducationTranslation ID was found.
func (etq *EducationTranslationQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = etq.Limit(1).IDs(setContextOp(ctx, etq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{educationtranslation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (etq *EducationTranslationQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := etq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EducationTranslation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EducationTranslation entity is found.
// Returns a *NotFoundError when no EducationTranslation entities are found.
func (etq *EducationTranslationQuery) Only(ctx context.Context) (*EducationTranslation, error) {
	nodes, err := etq.Limit(2).All(setContextOp(ctx, etq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{educationtranslation.Label}
	default:
		return nil, &NotSingularError{educationtranslation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (etq *EducationTranslationQuery) OnlyX(ctx context.Context) *EducationTranslation {
	node, err := etq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EducationTranslation ID in the query.
// Returns a *NotSingularError when more than one EducationTranslation ID is found.
// Returns a *NotFoundError when no entities are found.
func (etq *EducationTranslationQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = etq.Limit(2).IDs(setContextOp(ctx, etq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{educationtranslation.Label}
	default:
		err = &NotSingularError{educationtranslation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (etq *EducationTranslationQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := etq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EducationTranslations.
func (etq *EducationTranslationQuery) All(ctx context.Context) ([]*EducationTranslation, error) {
	ctx = setContextOp(ctx, etq.ctx, ent.OpQueryAll)
	if err := etq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*EducationTranslation, *EducationTranslationQuery]()
	return withInterceptors[[]*EducationTranslation](ctx, etq, qr, etq.inters)
}

// AllX is like All, but panics if an error occurs.
func (etq *EducationTranslationQuery) AllX(ctx context.Context) []*EducationTranslation {
	nodes, err := etq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EducationTranslation IDs.
func (etq *EducationTranslationQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if etq.ctx.Unique == nil && etq.path != nil {
		etq.Unique(true)
	}
	ctx = setContextOp(ctx, etq.ctx, ent.OpQueryIDs)
	if err = etq.Select(educationtranslation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (etq *EducationTranslationQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := etq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (etq *EducationTranslationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, etq.ctx, ent.OpQueryCount)
	if err := etq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, etq, querierCount[*EducationTranslationQuery](), etq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (etq *EducationTranslationQuery) CountX(ctx context.Context) int {
	count, err := etq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (etq *EducationTranslationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, etq.ctx, ent.OpQueryExist)
	switch _, err := etq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (etq *EducationTranslationQuery) ExistX(ctx context.Context) bool {
	exist, err := etq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EducationTranslationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (etq *EducationTranslationQuery) Clone() *EducationTranslationQuery {
	if etq == nil {
		return nil
	}
	return &EducationTranslationQuery{
		config:        etq.config,
		ctx:           etq.ctx.Clone(),
		order:         append([]educationtranslation.OrderOption{}, etq.order...),
		inters:        append([]Interceptor{}, etq.inters...),
		predicates:    append([]predicate.EducationTranslation{}, etq.predicates...),
		withEducation: etq.withEducation.Clone(),
		withLanguage:  etq.withLanguage.Clone(),
		// clone intermediate query.
		sql:  etq.sql.Clone(),
		path: etq.path,
	}
}

// WithEducation tells the query-builder to eager-load the nodes that are connected to
// the "education" edge. The optional arguments are used to configure the query builder of the edge.
func (etq *EducationTranslationQuery) WithEducation(opts ...func(*EducationQuery)) *EducationTranslationQuery {
	query := (&EducationClient{config: etq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	etq.withEducation = query
	return etq
}

// WithLanguage tells the query-builder to eager-load the nodes that are connected to
// the "language" edge. The optional arguments are used to configure the query builder of the edge.
func (etq *EducationTranslationQuery) WithLanguage(opts ...func(*LanguageQuery)) *EducationTranslationQuery {
	query := (&LanguageClient{config: etq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	etq.withLanguage = query
	return etq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		EducationID uuid.UUID `json:"education_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EducationTranslation.Query().
//		GroupBy(educationtranslation.FieldEducationID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (etq *EducationTranslationQuery) GroupBy(field string, fields ...string) *EducationTranslationGroupBy {
	etq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EducationTranslationGroupBy{build: etq}
	grbuild.flds = &etq.ctx.Fields
	grbuild.label = educationtranslation.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		EducationID uuid.UUID `json:"education_id,omitempty"`
//	}
//
//	client.EducationTranslation.Query().
//		Select(educationtranslation.FieldEducationID).
//		Scan(ctx, &v)
func (etq *EducationTranslationQuery) Select(fields ...string) *EducationTranslationSelect {
	etq.ctx.Fields = append(etq.ctx.Fields, fields...)
	sbuild := &EducationTranslationSelect{EducationTranslationQuery: etq}
	sbuild.label = educationtranslation.Label
	sbuild.flds, sbuild.scan = &etq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EducationTranslationSelect configured with the given aggregations.
func (etq *EducationTranslationQuery) Aggregate(fns ...AggregateFunc) *EducationTranslationSelect {
	return etq.Select().Aggregate(fns...)
}

func (etq *EducationTranslationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range etq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, etq); err != nil {
				return err
			}
		}
	}
	for _, f := range etq.ctx.Fields {
		if !educationtranslation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if etq.path != nil {
		prev, err := etq.path(ctx)
		if err != nil {
			return err
		}
		etq.sql = prev
	}
	return nil
}

func (etq *EducationTranslationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EducationTranslation, error) {
	var (
		nodes       = []*EducationTranslation{}
		_spec       = etq.querySpec()
		loadedTypes = [2]bool{
			etq.withEducation != nil,
			etq.withLanguage != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EducationTranslation).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EducationTranslation{config: etq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, etq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := etq.withEducation; query != nil {
		if err := etq.loadEducation(ctx, query, nodes, nil,
			func(n *EducationTranslation, e *Education) { n.Edges.Education = e }); err != nil {
			return nil, err
		}
	}
	if query := etq.withLanguage; query != nil {
		if err := etq.loadLanguage(ctx, query, nodes, nil,
			func(n *EducationTranslation, e *Language) { n.Edges.Language = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (etq *EducationTranslationQuery) loadEducation(ctx context.Context, query *EducationQuery, nodes []*EducationTranslation, init func(*EducationTranslation), assign func(*EducationTranslation, *Education)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*EducationTranslation)
	for i := range nodes {
		fk := nodes[i].EducationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(education.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "education_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (etq *EducationTranslationQuery) loadLanguage(ctx context.Context, query *LanguageQuery, nodes []*EducationTranslation, init func(*EducationTranslation), assign func(*EducationTranslation, *Language)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*EducationTranslation)
	for i := range nodes {
		fk := nodes[i].LanguageCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(language.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "language_code" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (etq *EducationTranslationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := etq.querySpec()
	_spec.Node.Columns = etq.ctx.Fields
	if len(etq.ctx.Fields) > 0 {
		_spec.Unique = etq.ctx.Unique != nil && *etq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, etq.driver, _spec)
}

func (etq *EducationTranslationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(educationtranslation.Table, educationtranslation.Columns, sqlgraph.NewFieldSpec(educationtranslation.FieldID, field.TypeUUID))
	_spec.From = etq.sql
	if unique := etq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if etq.path != nil {
		_spec.Unique = true
	}
	if fields := etq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, educationtranslation.FieldID)
		for i := range fields {
			if fields[i] != educationtranslation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if etq.withEducation != nil {
			_spec.Node.AddColumnOnce(educationtranslation.FieldEducationID)
		}
		if etq.withLanguage != nil {
			_spec.Node.AddColumnOnce(educationtranslation.FieldLanguageCode)
		}
	}
	if ps := etq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := etq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := etq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := etq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (etq *EducationTranslationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(etq.driver.Dialect())
	t1 := builder.Table(educationtranslation.Table)
	columns := etq.ctx.Fields
	if len(columns) == 0 {
		columns = educationtranslation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if etq.sql != nil {
		selector = etq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if etq.ctx.Unique != nil && *etq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range etq.predicates {
		p(selector)
	}
	for _, p := range etq.order {
		p(selector)
	}
	if offset := etq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := etq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EducationTranslationGroupBy is the group-by builder for EducationTranslation entities.
type EducationTranslationGroupBy struct {
	selector
	build *EducationTranslationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (etgb *EducationTranslationGroupBy) Aggregate(fns ...AggregateFunc) *EducationTranslationGroupBy {
	etgb.fns = append(etgb.fns, fns...)
	return etgb
}

// Scan applies the selector query and scans the result into the given value.
func (etgb *EducationTranslationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, etgb.build.ctx, ent.OpQueryGroupBy)
	if err := etgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EducationTranslationQuery, *EducationTranslationGroupBy](ctx, etgb.build, etgb, etgb.build.inters, v)
}

func (etgb *EducationTranslationGroupBy) sqlScan(ctx context.Context, root *EducationTranslationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(etgb.fns))
	for _, fn := range etgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*etgb.flds)+len(etgb.fns))
		for _, f := range *etgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*etgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := etgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EducationTranslationSelect is the builder for selecting fields of EducationTranslation entities.
type EducationTranslationSelect struct {
	*EducationTranslationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ets *EducationTranslationSelect) Aggregate(fns ...AggregateFunc) *EducationTranslationSelect {
	ets.fns = append(ets.fns, fns...)
	return ets
}

// Scan applies the selector query and scans the result into the given value.
func (ets *EducationTranslationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ets.ctx, ent.OpQuerySelect)
	if err := ets.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EducationTranslationQuery, *EducationTranslationSelect](ctx, ets.EducationTranslationQuery, ets, ets.inters, v)
}

func (ets *EducationTranslationSelect) sqlScan(ctx context.Context, root *EducationTranslationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ets.fns))
	for _, fn := range ets.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ets.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ets.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
