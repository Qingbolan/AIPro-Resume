// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/publication"
	"silan-backend/internal/ent/publicationtranslation"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// PublicationTranslation is the model entity for the PublicationTranslation schema.
type PublicationTranslation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// PublicationID holds the value of the "publication_id" field.
	PublicationID uuid.UUID `json:"publication_id,omitempty"`
	// LanguageCode holds the value of the "language_code" field.
	LanguageCode string `json:"language_code,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// JournalName holds the value of the "journal_name" field.
	JournalName string `json:"journal_name,omitempty"`
	// ConferenceName holds the value of the "conference_name" field.
	ConferenceName string `json:"conference_name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PublicationTranslationQuery when eager-loading is set.
	Edges        PublicationTranslationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PublicationTranslationEdges holds the relations/edges for other nodes in the graph.
type PublicationTranslationEdges struct {
	// Publication holds the value of the publication edge.
	Publication *Publication `json:"publication,omitempty"`
	// Language holds the value of the language edge.
	Language *Language `json:"language,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PublicationOrErr returns the Publication value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PublicationTranslationEdges) PublicationOrErr() (*Publication, error) {
	if e.Publication != nil {
		return e.Publication, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: publication.Label}
	}
	return nil, &NotLoadedError{edge: "publication"}
}

// LanguageOrErr returns the Language value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PublicationTranslationEdges) LanguageOrErr() (*Language, error) {
	if e.Language != nil {
		return e.Language, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: language.Label}
	}
	return nil, &NotLoadedError{edge: "language"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PublicationTranslation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case publicationtranslation.FieldLanguageCode, publicationtranslation.FieldTitle, publicationtranslation.FieldJournalName, publicationtranslation.FieldConferenceName:
			values[i] = new(sql.NullString)
		case publicationtranslation.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case publicationtranslation.FieldID, publicationtranslation.FieldPublicationID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PublicationTranslation fields.
func (pt *PublicationTranslation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case publicationtranslation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pt.ID = *value
			}
		case publicationtranslation.FieldPublicationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field publication_id", values[i])
			} else if value != nil {
				pt.PublicationID = *value
			}
		case publicationtranslation.FieldLanguageCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language_code", values[i])
			} else if value.Valid {
				pt.LanguageCode = value.String
			}
		case publicationtranslation.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				pt.Title = value.String
			}
		case publicationtranslation.FieldJournalName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field journal_name", values[i])
			} else if value.Valid {
				pt.JournalName = value.String
			}
		case publicationtranslation.FieldConferenceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field conference_name", values[i])
			} else if value.Valid {
				pt.ConferenceName = value.String
			}
		case publicationtranslation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pt.CreatedAt = value.Time
			}
		default:
			pt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PublicationTranslation.
// This includes values selected through modifiers, order, etc.
func (pt *PublicationTranslation) Value(name string) (ent.Value, error) {
	return pt.selectValues.Get(name)
}

// QueryPublication queries the "publication" edge of the PublicationTranslation entity.
func (pt *PublicationTranslation) QueryPublication() *PublicationQuery {
	return NewPublicationTranslationClient(pt.config).QueryPublication(pt)
}

// QueryLanguage queries the "language" edge of the PublicationTranslation entity.
func (pt *PublicationTranslation) QueryLanguage() *LanguageQuery {
	return NewPublicationTranslationClient(pt.config).QueryLanguage(pt)
}

// Update returns a builder for updating this PublicationTranslation.
// Note that you need to call PublicationTranslation.Unwrap() before calling this method if this PublicationTranslation
// was returned from a transaction, and the transaction was committed or rolled back.
func (pt *PublicationTranslation) Update() *PublicationTranslationUpdateOne {
	return NewPublicationTranslationClient(pt.config).UpdateOne(pt)
}

// Unwrap unwraps the PublicationTranslation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pt *PublicationTranslation) Unwrap() *PublicationTranslation {
	_tx, ok := pt.config.driver.(*txDriver)
	if !ok {
		panic("ent: PublicationTranslation is not a transactional entity")
	}
	pt.config.driver = _tx.drv
	return pt
}

// String implements the fmt.Stringer.
func (pt *PublicationTranslation) String() string {
	var builder strings.Builder
	builder.WriteString("PublicationTranslation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pt.ID))
	builder.WriteString("publication_id=")
	builder.WriteString(fmt.Sprintf("%v", pt.PublicationID))
	builder.WriteString(", ")
	builder.WriteString("language_code=")
	builder.WriteString(pt.LanguageCode)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(pt.Title)
	builder.WriteString(", ")
	builder.WriteString("journal_name=")
	builder.WriteString(pt.JournalName)
	builder.WriteString(", ")
	builder.WriteString("conference_name=")
	builder.WriteString(pt.ConferenceName)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pt.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PublicationTranslations is a parsable slice of PublicationTranslation.
type PublicationTranslations []*PublicationTranslation
