// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// PasswordHash holds the value of the "password_hash" field.
	PasswordHash string `json:"password_hash,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// AvatarURL holds the value of the "avatar_url" field.
	AvatarURL string `json:"avatar_url,omitempty"`
	// Bio holds the value of the "bio" field.
	Bio string `json:"bio,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// IsAdmin holds the value of the "is_admin" field.
	IsAdmin bool `json:"is_admin,omitempty"`
	// LastLoginAt holds the value of the "last_login_at" field.
	LastLoginAt time.Time `json:"last_login_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// PersonalInfos holds the value of the personal_infos edge.
	PersonalInfos []*PersonalInfo `json:"personal_infos,omitempty"`
	// Educations holds the value of the educations edge.
	Educations []*Education `json:"educations,omitempty"`
	// WorkExperiences holds the value of the work_experiences edge.
	WorkExperiences []*WorkExperience `json:"work_experiences,omitempty"`
	// Projects holds the value of the projects edge.
	Projects []*Project `json:"projects,omitempty"`
	// BlogPosts holds the value of the blog_posts edge.
	BlogPosts []*BlogPost `json:"blog_posts,omitempty"`
	// Ideas holds the value of the ideas edge.
	Ideas []*Idea `json:"ideas,omitempty"`
	// ResearchProjects holds the value of the research_projects edge.
	ResearchProjects []*ResearchProject `json:"research_projects,omitempty"`
	// Publications holds the value of the publications edge.
	Publications []*Publication `json:"publications,omitempty"`
	// Awards holds the value of the awards edge.
	Awards []*Award `json:"awards,omitempty"`
	// RecentUpdates holds the value of the recent_updates edge.
	RecentUpdates []*RecentUpdate `json:"recent_updates,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [10]bool
}

// PersonalInfosOrErr returns the PersonalInfos value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PersonalInfosOrErr() ([]*PersonalInfo, error) {
	if e.loadedTypes[0] {
		return e.PersonalInfos, nil
	}
	return nil, &NotLoadedError{edge: "personal_infos"}
}

// EducationsOrErr returns the Educations value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) EducationsOrErr() ([]*Education, error) {
	if e.loadedTypes[1] {
		return e.Educations, nil
	}
	return nil, &NotLoadedError{edge: "educations"}
}

// WorkExperiencesOrErr returns the WorkExperiences value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) WorkExperiencesOrErr() ([]*WorkExperience, error) {
	if e.loadedTypes[2] {
		return e.WorkExperiences, nil
	}
	return nil, &NotLoadedError{edge: "work_experiences"}
}

// ProjectsOrErr returns the Projects value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ProjectsOrErr() ([]*Project, error) {
	if e.loadedTypes[3] {
		return e.Projects, nil
	}
	return nil, &NotLoadedError{edge: "projects"}
}

// BlogPostsOrErr returns the BlogPosts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) BlogPostsOrErr() ([]*BlogPost, error) {
	if e.loadedTypes[4] {
		return e.BlogPosts, nil
	}
	return nil, &NotLoadedError{edge: "blog_posts"}
}

// IdeasOrErr returns the Ideas value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) IdeasOrErr() ([]*Idea, error) {
	if e.loadedTypes[5] {
		return e.Ideas, nil
	}
	return nil, &NotLoadedError{edge: "ideas"}
}

// ResearchProjectsOrErr returns the ResearchProjects value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ResearchProjectsOrErr() ([]*ResearchProject, error) {
	if e.loadedTypes[6] {
		return e.ResearchProjects, nil
	}
	return nil, &NotLoadedError{edge: "research_projects"}
}

// PublicationsOrErr returns the Publications value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PublicationsOrErr() ([]*Publication, error) {
	if e.loadedTypes[7] {
		return e.Publications, nil
	}
	return nil, &NotLoadedError{edge: "publications"}
}

// AwardsOrErr returns the Awards value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AwardsOrErr() ([]*Award, error) {
	if e.loadedTypes[8] {
		return e.Awards, nil
	}
	return nil, &NotLoadedError{edge: "awards"}
}

// RecentUpdatesOrErr returns the RecentUpdates value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RecentUpdatesOrErr() ([]*RecentUpdate, error) {
	if e.loadedTypes[9] {
		return e.RecentUpdates, nil
	}
	return nil, &NotLoadedError{edge: "recent_updates"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldIsActive, user.FieldIsAdmin:
			values[i] = new(sql.NullBool)
		case user.FieldUsername, user.FieldEmail, user.FieldPasswordHash, user.FieldFirstName, user.FieldLastName, user.FieldAvatarURL, user.FieldBio:
			values[i] = new(sql.NullString)
		case user.FieldLastLoginAt, user.FieldCreatedAt, user.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case user.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldPasswordHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password_hash", values[i])
			} else if value.Valid {
				u.PasswordHash = value.String
			}
		case user.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				u.FirstName = value.String
			}
		case user.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				u.LastName = value.String
			}
		case user.FieldAvatarURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_url", values[i])
			} else if value.Valid {
				u.AvatarURL = value.String
			}
		case user.FieldBio:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bio", values[i])
			} else if value.Valid {
				u.Bio = value.String
			}
		case user.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				u.IsActive = value.Bool
			}
		case user.FieldIsAdmin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_admin", values[i])
			} else if value.Valid {
				u.IsAdmin = value.Bool
			}
		case user.FieldLastLoginAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_at", values[i])
			} else if value.Valid {
				u.LastLoginAt = value.Time
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryPersonalInfos queries the "personal_infos" edge of the User entity.
func (u *User) QueryPersonalInfos() *PersonalInfoQuery {
	return NewUserClient(u.config).QueryPersonalInfos(u)
}

// QueryEducations queries the "educations" edge of the User entity.
func (u *User) QueryEducations() *EducationQuery {
	return NewUserClient(u.config).QueryEducations(u)
}

// QueryWorkExperiences queries the "work_experiences" edge of the User entity.
func (u *User) QueryWorkExperiences() *WorkExperienceQuery {
	return NewUserClient(u.config).QueryWorkExperiences(u)
}

// QueryProjects queries the "projects" edge of the User entity.
func (u *User) QueryProjects() *ProjectQuery {
	return NewUserClient(u.config).QueryProjects(u)
}

// QueryBlogPosts queries the "blog_posts" edge of the User entity.
func (u *User) QueryBlogPosts() *BlogPostQuery {
	return NewUserClient(u.config).QueryBlogPosts(u)
}

// QueryIdeas queries the "ideas" edge of the User entity.
func (u *User) QueryIdeas() *IdeaQuery {
	return NewUserClient(u.config).QueryIdeas(u)
}

// QueryResearchProjects queries the "research_projects" edge of the User entity.
func (u *User) QueryResearchProjects() *ResearchProjectQuery {
	return NewUserClient(u.config).QueryResearchProjects(u)
}

// QueryPublications queries the "publications" edge of the User entity.
func (u *User) QueryPublications() *PublicationQuery {
	return NewUserClient(u.config).QueryPublications(u)
}

// QueryAwards queries the "awards" edge of the User entity.
func (u *User) QueryAwards() *AwardQuery {
	return NewUserClient(u.config).QueryAwards(u)
}

// QueryRecentUpdates queries the "recent_updates" edge of the User entity.
func (u *User) QueryRecentUpdates() *RecentUpdateQuery {
	return NewUserClient(u.config).QueryRecentUpdates(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("username=")
	builder.WriteString(u.Username)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("password_hash=")
	builder.WriteString(u.PasswordHash)
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(u.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(u.LastName)
	builder.WriteString(", ")
	builder.WriteString("avatar_url=")
	builder.WriteString(u.AvatarURL)
	builder.WriteString(", ")
	builder.WriteString("bio=")
	builder.WriteString(u.Bio)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", u.IsActive))
	builder.WriteString(", ")
	builder.WriteString("is_admin=")
	builder.WriteString(fmt.Sprintf("%v", u.IsAdmin))
	builder.WriteString(", ")
	builder.WriteString("last_login_at=")
	builder.WriteString(u.LastLoginAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
