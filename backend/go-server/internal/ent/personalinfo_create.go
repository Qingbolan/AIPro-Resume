// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/personalinfo"
	"silan-backend/internal/ent/personalinfotranslation"
	"silan-backend/internal/ent/sociallink"
	"silan-backend/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PersonalInfoCreate is the builder for creating a PersonalInfo entity.
type PersonalInfoCreate struct {
	config
	mutation *PersonalInfoMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (pic *PersonalInfoCreate) SetUserID(u uuid.UUID) *PersonalInfoCreate {
	pic.mutation.SetUserID(u)
	return pic
}

// SetFullName sets the "full_name" field.
func (pic *PersonalInfoCreate) SetFullName(s string) *PersonalInfoCreate {
	pic.mutation.SetFullName(s)
	return pic
}

// SetTitle sets the "title" field.
func (pic *PersonalInfoCreate) SetTitle(s string) *PersonalInfoCreate {
	pic.mutation.SetTitle(s)
	return pic
}

// SetCurrentStatus sets the "current_status" field.
func (pic *PersonalInfoCreate) SetCurrentStatus(s string) *PersonalInfoCreate {
	pic.mutation.SetCurrentStatus(s)
	return pic
}

// SetNillableCurrentStatus sets the "current_status" field if the given value is not nil.
func (pic *PersonalInfoCreate) SetNillableCurrentStatus(s *string) *PersonalInfoCreate {
	if s != nil {
		pic.SetCurrentStatus(*s)
	}
	return pic
}

// SetPhone sets the "phone" field.
func (pic *PersonalInfoCreate) SetPhone(s string) *PersonalInfoCreate {
	pic.mutation.SetPhone(s)
	return pic
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (pic *PersonalInfoCreate) SetNillablePhone(s *string) *PersonalInfoCreate {
	if s != nil {
		pic.SetPhone(*s)
	}
	return pic
}

// SetEmail sets the "email" field.
func (pic *PersonalInfoCreate) SetEmail(s string) *PersonalInfoCreate {
	pic.mutation.SetEmail(s)
	return pic
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (pic *PersonalInfoCreate) SetNillableEmail(s *string) *PersonalInfoCreate {
	if s != nil {
		pic.SetEmail(*s)
	}
	return pic
}

// SetLocation sets the "location" field.
func (pic *PersonalInfoCreate) SetLocation(s string) *PersonalInfoCreate {
	pic.mutation.SetLocation(s)
	return pic
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (pic *PersonalInfoCreate) SetNillableLocation(s *string) *PersonalInfoCreate {
	if s != nil {
		pic.SetLocation(*s)
	}
	return pic
}

// SetWebsite sets the "website" field.
func (pic *PersonalInfoCreate) SetWebsite(s string) *PersonalInfoCreate {
	pic.mutation.SetWebsite(s)
	return pic
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (pic *PersonalInfoCreate) SetNillableWebsite(s *string) *PersonalInfoCreate {
	if s != nil {
		pic.SetWebsite(*s)
	}
	return pic
}

// SetAvatarURL sets the "avatar_url" field.
func (pic *PersonalInfoCreate) SetAvatarURL(s string) *PersonalInfoCreate {
	pic.mutation.SetAvatarURL(s)
	return pic
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (pic *PersonalInfoCreate) SetNillableAvatarURL(s *string) *PersonalInfoCreate {
	if s != nil {
		pic.SetAvatarURL(*s)
	}
	return pic
}

// SetIsPrimary sets the "is_primary" field.
func (pic *PersonalInfoCreate) SetIsPrimary(b bool) *PersonalInfoCreate {
	pic.mutation.SetIsPrimary(b)
	return pic
}

// SetNillableIsPrimary sets the "is_primary" field if the given value is not nil.
func (pic *PersonalInfoCreate) SetNillableIsPrimary(b *bool) *PersonalInfoCreate {
	if b != nil {
		pic.SetIsPrimary(*b)
	}
	return pic
}

// SetCreatedAt sets the "created_at" field.
func (pic *PersonalInfoCreate) SetCreatedAt(t time.Time) *PersonalInfoCreate {
	pic.mutation.SetCreatedAt(t)
	return pic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pic *PersonalInfoCreate) SetNillableCreatedAt(t *time.Time) *PersonalInfoCreate {
	if t != nil {
		pic.SetCreatedAt(*t)
	}
	return pic
}

// SetUpdatedAt sets the "updated_at" field.
func (pic *PersonalInfoCreate) SetUpdatedAt(t time.Time) *PersonalInfoCreate {
	pic.mutation.SetUpdatedAt(t)
	return pic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pic *PersonalInfoCreate) SetNillableUpdatedAt(t *time.Time) *PersonalInfoCreate {
	if t != nil {
		pic.SetUpdatedAt(*t)
	}
	return pic
}

// SetID sets the "id" field.
func (pic *PersonalInfoCreate) SetID(u uuid.UUID) *PersonalInfoCreate {
	pic.mutation.SetID(u)
	return pic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pic *PersonalInfoCreate) SetNillableID(u *uuid.UUID) *PersonalInfoCreate {
	if u != nil {
		pic.SetID(*u)
	}
	return pic
}

// SetUser sets the "user" edge to the User entity.
func (pic *PersonalInfoCreate) SetUser(u *User) *PersonalInfoCreate {
	return pic.SetUserID(u.ID)
}

// AddTranslationIDs adds the "translations" edge to the PersonalInfoTranslation entity by IDs.
func (pic *PersonalInfoCreate) AddTranslationIDs(ids ...uuid.UUID) *PersonalInfoCreate {
	pic.mutation.AddTranslationIDs(ids...)
	return pic
}

// AddTranslations adds the "translations" edges to the PersonalInfoTranslation entity.
func (pic *PersonalInfoCreate) AddTranslations(p ...*PersonalInfoTranslation) *PersonalInfoCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pic.AddTranslationIDs(ids...)
}

// AddSocialLinkIDs adds the "social_links" edge to the SocialLink entity by IDs.
func (pic *PersonalInfoCreate) AddSocialLinkIDs(ids ...uuid.UUID) *PersonalInfoCreate {
	pic.mutation.AddSocialLinkIDs(ids...)
	return pic
}

// AddSocialLinks adds the "social_links" edges to the SocialLink entity.
func (pic *PersonalInfoCreate) AddSocialLinks(s ...*SocialLink) *PersonalInfoCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pic.AddSocialLinkIDs(ids...)
}

// Mutation returns the PersonalInfoMutation object of the builder.
func (pic *PersonalInfoCreate) Mutation() *PersonalInfoMutation {
	return pic.mutation
}

// Save creates the PersonalInfo in the database.
func (pic *PersonalInfoCreate) Save(ctx context.Context) (*PersonalInfo, error) {
	pic.defaults()
	return withHooks(ctx, pic.sqlSave, pic.mutation, pic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pic *PersonalInfoCreate) SaveX(ctx context.Context) *PersonalInfo {
	v, err := pic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pic *PersonalInfoCreate) Exec(ctx context.Context) error {
	_, err := pic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pic *PersonalInfoCreate) ExecX(ctx context.Context) {
	if err := pic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pic *PersonalInfoCreate) defaults() {
	if _, ok := pic.mutation.IsPrimary(); !ok {
		v := personalinfo.DefaultIsPrimary
		pic.mutation.SetIsPrimary(v)
	}
	if _, ok := pic.mutation.CreatedAt(); !ok {
		v := personalinfo.DefaultCreatedAt()
		pic.mutation.SetCreatedAt(v)
	}
	if _, ok := pic.mutation.UpdatedAt(); !ok {
		v := personalinfo.DefaultUpdatedAt()
		pic.mutation.SetUpdatedAt(v)
	}
	if _, ok := pic.mutation.ID(); !ok {
		v := personalinfo.DefaultID()
		pic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pic *PersonalInfoCreate) check() error {
	if _, ok := pic.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "PersonalInfo.user_id"`)}
	}
	if _, ok := pic.mutation.FullName(); !ok {
		return &ValidationError{Name: "full_name", err: errors.New(`ent: missing required field "PersonalInfo.full_name"`)}
	}
	if v, ok := pic.mutation.FullName(); ok {
		if err := personalinfo.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.full_name": %w`, err)}
		}
	}
	if _, ok := pic.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "PersonalInfo.title"`)}
	}
	if v, ok := pic.mutation.Title(); ok {
		if err := personalinfo.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.title": %w`, err)}
		}
	}
	if v, ok := pic.mutation.Phone(); ok {
		if err := personalinfo.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.phone": %w`, err)}
		}
	}
	if v, ok := pic.mutation.Email(); ok {
		if err := personalinfo.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.email": %w`, err)}
		}
	}
	if v, ok := pic.mutation.Location(); ok {
		if err := personalinfo.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.location": %w`, err)}
		}
	}
	if v, ok := pic.mutation.Website(); ok {
		if err := personalinfo.WebsiteValidator(v); err != nil {
			return &ValidationError{Name: "website", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.website": %w`, err)}
		}
	}
	if v, ok := pic.mutation.AvatarURL(); ok {
		if err := personalinfo.AvatarURLValidator(v); err != nil {
			return &ValidationError{Name: "avatar_url", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.avatar_url": %w`, err)}
		}
	}
	if _, ok := pic.mutation.IsPrimary(); !ok {
		return &ValidationError{Name: "is_primary", err: errors.New(`ent: missing required field "PersonalInfo.is_primary"`)}
	}
	if _, ok := pic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PersonalInfo.created_at"`)}
	}
	if _, ok := pic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PersonalInfo.updated_at"`)}
	}
	if len(pic.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "PersonalInfo.user"`)}
	}
	return nil
}

func (pic *PersonalInfoCreate) sqlSave(ctx context.Context) (*PersonalInfo, error) {
	if err := pic.check(); err != nil {
		return nil, err
	}
	_node, _spec := pic.createSpec()
	if err := sqlgraph.CreateNode(ctx, pic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pic.mutation.id = &_node.ID
	pic.mutation.done = true
	return _node, nil
}

func (pic *PersonalInfoCreate) createSpec() (*PersonalInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &PersonalInfo{config: pic.config}
		_spec = sqlgraph.NewCreateSpec(personalinfo.Table, sqlgraph.NewFieldSpec(personalinfo.FieldID, field.TypeUUID))
	)
	if id, ok := pic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pic.mutation.FullName(); ok {
		_spec.SetField(personalinfo.FieldFullName, field.TypeString, value)
		_node.FullName = value
	}
	if value, ok := pic.mutation.Title(); ok {
		_spec.SetField(personalinfo.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := pic.mutation.CurrentStatus(); ok {
		_spec.SetField(personalinfo.FieldCurrentStatus, field.TypeString, value)
		_node.CurrentStatus = value
	}
	if value, ok := pic.mutation.Phone(); ok {
		_spec.SetField(personalinfo.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := pic.mutation.Email(); ok {
		_spec.SetField(personalinfo.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := pic.mutation.Location(); ok {
		_spec.SetField(personalinfo.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := pic.mutation.Website(); ok {
		_spec.SetField(personalinfo.FieldWebsite, field.TypeString, value)
		_node.Website = value
	}
	if value, ok := pic.mutation.AvatarURL(); ok {
		_spec.SetField(personalinfo.FieldAvatarURL, field.TypeString, value)
		_node.AvatarURL = value
	}
	if value, ok := pic.mutation.IsPrimary(); ok {
		_spec.SetField(personalinfo.FieldIsPrimary, field.TypeBool, value)
		_node.IsPrimary = value
	}
	if value, ok := pic.mutation.CreatedAt(); ok {
		_spec.SetField(personalinfo.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pic.mutation.UpdatedAt(); ok {
		_spec.SetField(personalinfo.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pic.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personalinfo.UserTable,
			Columns: []string{personalinfo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pic.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personalinfo.TranslationsTable,
			Columns: []string{personalinfo.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalinfotranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pic.mutation.SocialLinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personalinfo.SocialLinksTable,
			Columns: []string{personalinfo.SocialLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sociallink.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PersonalInfoCreateBulk is the builder for creating many PersonalInfo entities in bulk.
type PersonalInfoCreateBulk struct {
	config
	err      error
	builders []*PersonalInfoCreate
}

// Save creates the PersonalInfo entities in the database.
func (picb *PersonalInfoCreateBulk) Save(ctx context.Context) ([]*PersonalInfo, error) {
	if picb.err != nil {
		return nil, picb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(picb.builders))
	nodes := make([]*PersonalInfo, len(picb.builders))
	mutators := make([]Mutator, len(picb.builders))
	for i := range picb.builders {
		func(i int, root context.Context) {
			builder := picb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PersonalInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, picb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, picb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, picb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (picb *PersonalInfoCreateBulk) SaveX(ctx context.Context) []*PersonalInfo {
	v, err := picb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (picb *PersonalInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := picb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (picb *PersonalInfoCreateBulk) ExecX(ctx context.Context) {
	if err := picb.Exec(ctx); err != nil {
		panic(err)
	}
}
