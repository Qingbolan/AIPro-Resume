// Code generated by ent, DO NOT EDIT.

package idea

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the idea type in the database.
	Label = "idea"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldAbstract holds the string denoting the abstract field in the database.
	FieldAbstract = "abstract"
	// FieldMotivation holds the string denoting the motivation field in the database.
	FieldMotivation = "motivation"
	// FieldMethodology holds the string denoting the methodology field in the database.
	FieldMethodology = "methodology"
	// FieldExpectedOutcome holds the string denoting the expected_outcome field in the database.
	FieldExpectedOutcome = "expected_outcome"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPriority holds the string denoting the priority field in the database.
	FieldPriority = "priority"
	// FieldEstimatedDurationMonths holds the string denoting the estimated_duration_months field in the database.
	FieldEstimatedDurationMonths = "estimated_duration_months"
	// FieldRequiredResources holds the string denoting the required_resources field in the database.
	FieldRequiredResources = "required_resources"
	// FieldCollaborationNeeded holds the string denoting the collaboration_needed field in the database.
	FieldCollaborationNeeded = "collaboration_needed"
	// FieldFundingRequired holds the string denoting the funding_required field in the database.
	FieldFundingRequired = "funding_required"
	// FieldEstimatedBudget holds the string denoting the estimated_budget field in the database.
	FieldEstimatedBudget = "estimated_budget"
	// FieldIsPublic holds the string denoting the is_public field in the database.
	FieldIsPublic = "is_public"
	// FieldViewCount holds the string denoting the view_count field in the database.
	FieldViewCount = "view_count"
	// FieldLikeCount holds the string denoting the like_count field in the database.
	FieldLikeCount = "like_count"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeTranslations holds the string denoting the translations edge name in mutations.
	EdgeTranslations = "translations"
	// EdgeBlogPosts holds the string denoting the blog_posts edge name in mutations.
	EdgeBlogPosts = "blog_posts"
	// Table holds the table name of the idea in the database.
	Table = "ideas"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "ideas"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// TranslationsTable is the table that holds the translations relation/edge.
	TranslationsTable = "idea_translations"
	// TranslationsInverseTable is the table name for the IdeaTranslation entity.
	// It exists in this package in order to avoid circular dependency with the "ideatranslation" package.
	TranslationsInverseTable = "idea_translations"
	// TranslationsColumn is the table column denoting the translations relation/edge.
	TranslationsColumn = "idea_id"
	// BlogPostsTable is the table that holds the blog_posts relation/edge.
	BlogPostsTable = "blog_posts"
	// BlogPostsInverseTable is the table name for the BlogPost entity.
	// It exists in this package in order to avoid circular dependency with the "blogpost" package.
	BlogPostsInverseTable = "blog_posts"
	// BlogPostsColumn is the table column denoting the blog_posts relation/edge.
	BlogPostsColumn = "ideas_id"
)

// Columns holds all SQL columns for idea fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldTitle,
	FieldSlug,
	FieldAbstract,
	FieldMotivation,
	FieldMethodology,
	FieldExpectedOutcome,
	FieldStatus,
	FieldPriority,
	FieldEstimatedDurationMonths,
	FieldRequiredResources,
	FieldCollaborationNeeded,
	FieldFundingRequired,
	FieldEstimatedBudget,
	FieldIsPublic,
	FieldViewCount,
	FieldLikeCount,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	SlugValidator func(string) error
	// DefaultCollaborationNeeded holds the default value on creation for the "collaboration_needed" field.
	DefaultCollaborationNeeded bool
	// DefaultFundingRequired holds the default value on creation for the "funding_required" field.
	DefaultFundingRequired bool
	// DefaultIsPublic holds the default value on creation for the "is_public" field.
	DefaultIsPublic bool
	// DefaultViewCount holds the default value on creation for the "view_count" field.
	DefaultViewCount int
	// DefaultLikeCount holds the default value on creation for the "like_count" field.
	DefaultLikeCount int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// StatusDraft is the default value of the Status enum.
const DefaultStatus = StatusDraft

// Status values.
const (
	StatusDraft         Status = "draft"
	StatusHypothesis    Status = "hypothesis"
	StatusExperimenting Status = "experimenting"
	StatusValidating    Status = "validating"
	StatusPublished     Status = "published"
	StatusConcluded     Status = "concluded"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusDraft, StatusHypothesis, StatusExperimenting, StatusValidating, StatusPublished, StatusConcluded:
		return nil
	default:
		return fmt.Errorf("idea: invalid enum value for status field: %q", s)
	}
}

// Priority defines the type for the "priority" enum field.
type Priority string

// PriorityMedium is the default value of the Priority enum.
const DefaultPriority = PriorityMedium

// Priority values.
const (
	PriorityLow    Priority = "low"
	PriorityMedium Priority = "medium"
	PriorityHigh   Priority = "high"
	PriorityUrgent Priority = "urgent"
)

func (pr Priority) String() string {
	return string(pr)
}

// PriorityValidator is a validator for the "priority" field enum values. It is called by the builders before save.
func PriorityValidator(pr Priority) error {
	switch pr {
	case PriorityLow, PriorityMedium, PriorityHigh, PriorityUrgent:
		return nil
	default:
		return fmt.Errorf("idea: invalid enum value for priority field: %q", pr)
	}
}

// OrderOption defines the ordering options for the Idea queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByAbstract orders the results by the abstract field.
func ByAbstract(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAbstract, opts...).ToFunc()
}

// ByMotivation orders the results by the motivation field.
func ByMotivation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMotivation, opts...).ToFunc()
}

// ByMethodology orders the results by the methodology field.
func ByMethodology(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMethodology, opts...).ToFunc()
}

// ByExpectedOutcome orders the results by the expected_outcome field.
func ByExpectedOutcome(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpectedOutcome, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPriority orders the results by the priority field.
func ByPriority(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriority, opts...).ToFunc()
}

// ByEstimatedDurationMonths orders the results by the estimated_duration_months field.
func ByEstimatedDurationMonths(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEstimatedDurationMonths, opts...).ToFunc()
}

// ByRequiredResources orders the results by the required_resources field.
func ByRequiredResources(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequiredResources, opts...).ToFunc()
}

// ByCollaborationNeeded orders the results by the collaboration_needed field.
func ByCollaborationNeeded(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollaborationNeeded, opts...).ToFunc()
}

// ByFundingRequired orders the results by the funding_required field.
func ByFundingRequired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFundingRequired, opts...).ToFunc()
}

// ByEstimatedBudget orders the results by the estimated_budget field.
func ByEstimatedBudget(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEstimatedBudget, opts...).ToFunc()
}

// ByIsPublic orders the results by the is_public field.
func ByIsPublic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPublic, opts...).ToFunc()
}

// ByViewCount orders the results by the view_count field.
func ByViewCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldViewCount, opts...).ToFunc()
}

// ByLikeCount orders the results by the like_count field.
func ByLikeCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLikeCount, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByTranslationsCount orders the results by translations count.
func ByTranslationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTranslationsStep(), opts...)
	}
}

// ByTranslations orders the results by translations terms.
func ByTranslations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTranslationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBlogPostsCount orders the results by blog_posts count.
func ByBlogPostsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBlogPostsStep(), opts...)
	}
}

// ByBlogPosts orders the results by blog_posts terms.
func ByBlogPosts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlogPostsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newTranslationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TranslationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TranslationsTable, TranslationsColumn),
	)
}
func newBlogPostsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlogPostsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BlogPostsTable, BlogPostsColumn),
	)
}
