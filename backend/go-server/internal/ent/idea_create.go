// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/idea"
	"silan-backend/internal/ent/ideatranslation"
	"silan-backend/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// IdeaCreate is the builder for creating a Idea entity.
type IdeaCreate struct {
	config
	mutation *IdeaMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (ic *IdeaCreate) SetUserID(u uuid.UUID) *IdeaCreate {
	ic.mutation.SetUserID(u)
	return ic
}

// SetTitle sets the "title" field.
func (ic *IdeaCreate) SetTitle(s string) *IdeaCreate {
	ic.mutation.SetTitle(s)
	return ic
}

// SetSlug sets the "slug" field.
func (ic *IdeaCreate) SetSlug(s string) *IdeaCreate {
	ic.mutation.SetSlug(s)
	return ic
}

// SetAbstract sets the "abstract" field.
func (ic *IdeaCreate) SetAbstract(s string) *IdeaCreate {
	ic.mutation.SetAbstract(s)
	return ic
}

// SetNillableAbstract sets the "abstract" field if the given value is not nil.
func (ic *IdeaCreate) SetNillableAbstract(s *string) *IdeaCreate {
	if s != nil {
		ic.SetAbstract(*s)
	}
	return ic
}

// SetMotivation sets the "motivation" field.
func (ic *IdeaCreate) SetMotivation(s string) *IdeaCreate {
	ic.mutation.SetMotivation(s)
	return ic
}

// SetNillableMotivation sets the "motivation" field if the given value is not nil.
func (ic *IdeaCreate) SetNillableMotivation(s *string) *IdeaCreate {
	if s != nil {
		ic.SetMotivation(*s)
	}
	return ic
}

// SetMethodology sets the "methodology" field.
func (ic *IdeaCreate) SetMethodology(s string) *IdeaCreate {
	ic.mutation.SetMethodology(s)
	return ic
}

// SetNillableMethodology sets the "methodology" field if the given value is not nil.
func (ic *IdeaCreate) SetNillableMethodology(s *string) *IdeaCreate {
	if s != nil {
		ic.SetMethodology(*s)
	}
	return ic
}

// SetExpectedOutcome sets the "expected_outcome" field.
func (ic *IdeaCreate) SetExpectedOutcome(s string) *IdeaCreate {
	ic.mutation.SetExpectedOutcome(s)
	return ic
}

// SetNillableExpectedOutcome sets the "expected_outcome" field if the given value is not nil.
func (ic *IdeaCreate) SetNillableExpectedOutcome(s *string) *IdeaCreate {
	if s != nil {
		ic.SetExpectedOutcome(*s)
	}
	return ic
}

// SetStatus sets the "status" field.
func (ic *IdeaCreate) SetStatus(i idea.Status) *IdeaCreate {
	ic.mutation.SetStatus(i)
	return ic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ic *IdeaCreate) SetNillableStatus(i *idea.Status) *IdeaCreate {
	if i != nil {
		ic.SetStatus(*i)
	}
	return ic
}

// SetPriority sets the "priority" field.
func (ic *IdeaCreate) SetPriority(i idea.Priority) *IdeaCreate {
	ic.mutation.SetPriority(i)
	return ic
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (ic *IdeaCreate) SetNillablePriority(i *idea.Priority) *IdeaCreate {
	if i != nil {
		ic.SetPriority(*i)
	}
	return ic
}

// SetEstimatedDurationMonths sets the "estimated_duration_months" field.
func (ic *IdeaCreate) SetEstimatedDurationMonths(i int) *IdeaCreate {
	ic.mutation.SetEstimatedDurationMonths(i)
	return ic
}

// SetNillableEstimatedDurationMonths sets the "estimated_duration_months" field if the given value is not nil.
func (ic *IdeaCreate) SetNillableEstimatedDurationMonths(i *int) *IdeaCreate {
	if i != nil {
		ic.SetEstimatedDurationMonths(*i)
	}
	return ic
}

// SetRequiredResources sets the "required_resources" field.
func (ic *IdeaCreate) SetRequiredResources(s string) *IdeaCreate {
	ic.mutation.SetRequiredResources(s)
	return ic
}

// SetNillableRequiredResources sets the "required_resources" field if the given value is not nil.
func (ic *IdeaCreate) SetNillableRequiredResources(s *string) *IdeaCreate {
	if s != nil {
		ic.SetRequiredResources(*s)
	}
	return ic
}

// SetCollaborationNeeded sets the "collaboration_needed" field.
func (ic *IdeaCreate) SetCollaborationNeeded(b bool) *IdeaCreate {
	ic.mutation.SetCollaborationNeeded(b)
	return ic
}

// SetNillableCollaborationNeeded sets the "collaboration_needed" field if the given value is not nil.
func (ic *IdeaCreate) SetNillableCollaborationNeeded(b *bool) *IdeaCreate {
	if b != nil {
		ic.SetCollaborationNeeded(*b)
	}
	return ic
}

// SetFundingRequired sets the "funding_required" field.
func (ic *IdeaCreate) SetFundingRequired(b bool) *IdeaCreate {
	ic.mutation.SetFundingRequired(b)
	return ic
}

// SetNillableFundingRequired sets the "funding_required" field if the given value is not nil.
func (ic *IdeaCreate) SetNillableFundingRequired(b *bool) *IdeaCreate {
	if b != nil {
		ic.SetFundingRequired(*b)
	}
	return ic
}

// SetEstimatedBudget sets the "estimated_budget" field.
func (ic *IdeaCreate) SetEstimatedBudget(f float64) *IdeaCreate {
	ic.mutation.SetEstimatedBudget(f)
	return ic
}

// SetNillableEstimatedBudget sets the "estimated_budget" field if the given value is not nil.
func (ic *IdeaCreate) SetNillableEstimatedBudget(f *float64) *IdeaCreate {
	if f != nil {
		ic.SetEstimatedBudget(*f)
	}
	return ic
}

// SetIsPublic sets the "is_public" field.
func (ic *IdeaCreate) SetIsPublic(b bool) *IdeaCreate {
	ic.mutation.SetIsPublic(b)
	return ic
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (ic *IdeaCreate) SetNillableIsPublic(b *bool) *IdeaCreate {
	if b != nil {
		ic.SetIsPublic(*b)
	}
	return ic
}

// SetViewCount sets the "view_count" field.
func (ic *IdeaCreate) SetViewCount(i int) *IdeaCreate {
	ic.mutation.SetViewCount(i)
	return ic
}

// SetNillableViewCount sets the "view_count" field if the given value is not nil.
func (ic *IdeaCreate) SetNillableViewCount(i *int) *IdeaCreate {
	if i != nil {
		ic.SetViewCount(*i)
	}
	return ic
}

// SetLikeCount sets the "like_count" field.
func (ic *IdeaCreate) SetLikeCount(i int) *IdeaCreate {
	ic.mutation.SetLikeCount(i)
	return ic
}

// SetNillableLikeCount sets the "like_count" field if the given value is not nil.
func (ic *IdeaCreate) SetNillableLikeCount(i *int) *IdeaCreate {
	if i != nil {
		ic.SetLikeCount(*i)
	}
	return ic
}

// SetCreatedAt sets the "created_at" field.
func (ic *IdeaCreate) SetCreatedAt(t time.Time) *IdeaCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *IdeaCreate) SetNillableCreatedAt(t *time.Time) *IdeaCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *IdeaCreate) SetUpdatedAt(t time.Time) *IdeaCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *IdeaCreate) SetNillableUpdatedAt(t *time.Time) *IdeaCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// SetID sets the "id" field.
func (ic *IdeaCreate) SetID(u uuid.UUID) *IdeaCreate {
	ic.mutation.SetID(u)
	return ic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ic *IdeaCreate) SetNillableID(u *uuid.UUID) *IdeaCreate {
	if u != nil {
		ic.SetID(*u)
	}
	return ic
}

// SetUser sets the "user" edge to the User entity.
func (ic *IdeaCreate) SetUser(u *User) *IdeaCreate {
	return ic.SetUserID(u.ID)
}

// AddTranslationIDs adds the "translations" edge to the IdeaTranslation entity by IDs.
func (ic *IdeaCreate) AddTranslationIDs(ids ...uuid.UUID) *IdeaCreate {
	ic.mutation.AddTranslationIDs(ids...)
	return ic
}

// AddTranslations adds the "translations" edges to the IdeaTranslation entity.
func (ic *IdeaCreate) AddTranslations(i ...*IdeaTranslation) *IdeaCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddTranslationIDs(ids...)
}

// Mutation returns the IdeaMutation object of the builder.
func (ic *IdeaCreate) Mutation() *IdeaMutation {
	return ic.mutation
}

// Save creates the Idea in the database.
func (ic *IdeaCreate) Save(ctx context.Context) (*Idea, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IdeaCreate) SaveX(ctx context.Context) *Idea {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *IdeaCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *IdeaCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *IdeaCreate) defaults() {
	if _, ok := ic.mutation.Status(); !ok {
		v := idea.DefaultStatus
		ic.mutation.SetStatus(v)
	}
	if _, ok := ic.mutation.Priority(); !ok {
		v := idea.DefaultPriority
		ic.mutation.SetPriority(v)
	}
	if _, ok := ic.mutation.CollaborationNeeded(); !ok {
		v := idea.DefaultCollaborationNeeded
		ic.mutation.SetCollaborationNeeded(v)
	}
	if _, ok := ic.mutation.FundingRequired(); !ok {
		v := idea.DefaultFundingRequired
		ic.mutation.SetFundingRequired(v)
	}
	if _, ok := ic.mutation.IsPublic(); !ok {
		v := idea.DefaultIsPublic
		ic.mutation.SetIsPublic(v)
	}
	if _, ok := ic.mutation.ViewCount(); !ok {
		v := idea.DefaultViewCount
		ic.mutation.SetViewCount(v)
	}
	if _, ok := ic.mutation.LikeCount(); !ok {
		v := idea.DefaultLikeCount
		ic.mutation.SetLikeCount(v)
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := idea.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		v := idea.DefaultUpdatedAt()
		ic.mutation.SetUpdatedAt(v)
	}
	if _, ok := ic.mutation.ID(); !ok {
		v := idea.DefaultID()
		ic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *IdeaCreate) check() error {
	if _, ok := ic.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Idea.user_id"`)}
	}
	if _, ok := ic.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Idea.title"`)}
	}
	if v, ok := ic.mutation.Title(); ok {
		if err := idea.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Idea.title": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Idea.slug"`)}
	}
	if v, ok := ic.mutation.Slug(); ok {
		if err := idea.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Idea.slug": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Idea.status"`)}
	}
	if v, ok := ic.mutation.Status(); ok {
		if err := idea.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Idea.status": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "Idea.priority"`)}
	}
	if v, ok := ic.mutation.Priority(); ok {
		if err := idea.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "Idea.priority": %w`, err)}
		}
	}
	if _, ok := ic.mutation.CollaborationNeeded(); !ok {
		return &ValidationError{Name: "collaboration_needed", err: errors.New(`ent: missing required field "Idea.collaboration_needed"`)}
	}
	if _, ok := ic.mutation.FundingRequired(); !ok {
		return &ValidationError{Name: "funding_required", err: errors.New(`ent: missing required field "Idea.funding_required"`)}
	}
	if _, ok := ic.mutation.IsPublic(); !ok {
		return &ValidationError{Name: "is_public", err: errors.New(`ent: missing required field "Idea.is_public"`)}
	}
	if _, ok := ic.mutation.ViewCount(); !ok {
		return &ValidationError{Name: "view_count", err: errors.New(`ent: missing required field "Idea.view_count"`)}
	}
	if _, ok := ic.mutation.LikeCount(); !ok {
		return &ValidationError{Name: "like_count", err: errors.New(`ent: missing required field "Idea.like_count"`)}
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Idea.created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Idea.updated_at"`)}
	}
	if len(ic.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Idea.user"`)}
	}
	return nil
}

func (ic *IdeaCreate) sqlSave(ctx context.Context) (*Idea, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *IdeaCreate) createSpec() (*Idea, *sqlgraph.CreateSpec) {
	var (
		_node = &Idea{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(idea.Table, sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID))
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ic.mutation.Title(); ok {
		_spec.SetField(idea.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ic.mutation.Slug(); ok {
		_spec.SetField(idea.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := ic.mutation.Abstract(); ok {
		_spec.SetField(idea.FieldAbstract, field.TypeString, value)
		_node.Abstract = value
	}
	if value, ok := ic.mutation.Motivation(); ok {
		_spec.SetField(idea.FieldMotivation, field.TypeString, value)
		_node.Motivation = value
	}
	if value, ok := ic.mutation.Methodology(); ok {
		_spec.SetField(idea.FieldMethodology, field.TypeString, value)
		_node.Methodology = value
	}
	if value, ok := ic.mutation.ExpectedOutcome(); ok {
		_spec.SetField(idea.FieldExpectedOutcome, field.TypeString, value)
		_node.ExpectedOutcome = value
	}
	if value, ok := ic.mutation.Status(); ok {
		_spec.SetField(idea.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := ic.mutation.Priority(); ok {
		_spec.SetField(idea.FieldPriority, field.TypeEnum, value)
		_node.Priority = value
	}
	if value, ok := ic.mutation.EstimatedDurationMonths(); ok {
		_spec.SetField(idea.FieldEstimatedDurationMonths, field.TypeInt, value)
		_node.EstimatedDurationMonths = value
	}
	if value, ok := ic.mutation.RequiredResources(); ok {
		_spec.SetField(idea.FieldRequiredResources, field.TypeString, value)
		_node.RequiredResources = value
	}
	if value, ok := ic.mutation.CollaborationNeeded(); ok {
		_spec.SetField(idea.FieldCollaborationNeeded, field.TypeBool, value)
		_node.CollaborationNeeded = value
	}
	if value, ok := ic.mutation.FundingRequired(); ok {
		_spec.SetField(idea.FieldFundingRequired, field.TypeBool, value)
		_node.FundingRequired = value
	}
	if value, ok := ic.mutation.EstimatedBudget(); ok {
		_spec.SetField(idea.FieldEstimatedBudget, field.TypeFloat64, value)
		_node.EstimatedBudget = value
	}
	if value, ok := ic.mutation.IsPublic(); ok {
		_spec.SetField(idea.FieldIsPublic, field.TypeBool, value)
		_node.IsPublic = value
	}
	if value, ok := ic.mutation.ViewCount(); ok {
		_spec.SetField(idea.FieldViewCount, field.TypeInt, value)
		_node.ViewCount = value
	}
	if value, ok := ic.mutation.LikeCount(); ok {
		_spec.SetField(idea.FieldLikeCount, field.TypeInt, value)
		_node.LikeCount = value
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(idea.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(idea.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ic.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   idea.UserTable,
			Columns: []string{idea.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   idea.TranslationsTable,
			Columns: []string{idea.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideatranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IdeaCreateBulk is the builder for creating many Idea entities in bulk.
type IdeaCreateBulk struct {
	config
	err      error
	builders []*IdeaCreate
}

// Save creates the Idea entities in the database.
func (icb *IdeaCreateBulk) Save(ctx context.Context) ([]*Idea, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Idea, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IdeaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *IdeaCreateBulk) SaveX(ctx context.Context) []*Idea {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *IdeaCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *IdeaCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
