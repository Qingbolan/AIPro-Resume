// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/projectimage"
	"silan-backend/internal/ent/projectimagetranslation"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ProjectImageTranslation is the model entity for the ProjectImageTranslation schema.
type ProjectImageTranslation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ProjectImageID holds the value of the "project_image_id" field.
	ProjectImageID uuid.UUID `json:"project_image_id,omitempty"`
	// LanguageCode holds the value of the "language_code" field.
	LanguageCode string `json:"language_code,omitempty"`
	// AltText holds the value of the "alt_text" field.
	AltText string `json:"alt_text,omitempty"`
	// Caption holds the value of the "caption" field.
	Caption string `json:"caption,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectImageTranslationQuery when eager-loading is set.
	Edges        ProjectImageTranslationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProjectImageTranslationEdges holds the relations/edges for other nodes in the graph.
type ProjectImageTranslationEdges struct {
	// ProjectImage holds the value of the project_image edge.
	ProjectImage *ProjectImage `json:"project_image,omitempty"`
	// Language holds the value of the language edge.
	Language *Language `json:"language,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProjectImageOrErr returns the ProjectImage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectImageTranslationEdges) ProjectImageOrErr() (*ProjectImage, error) {
	if e.ProjectImage != nil {
		return e.ProjectImage, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: projectimage.Label}
	}
	return nil, &NotLoadedError{edge: "project_image"}
}

// LanguageOrErr returns the Language value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectImageTranslationEdges) LanguageOrErr() (*Language, error) {
	if e.Language != nil {
		return e.Language, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: language.Label}
	}
	return nil, &NotLoadedError{edge: "language"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectImageTranslation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case projectimagetranslation.FieldLanguageCode, projectimagetranslation.FieldAltText, projectimagetranslation.FieldCaption:
			values[i] = new(sql.NullString)
		case projectimagetranslation.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case projectimagetranslation.FieldID, projectimagetranslation.FieldProjectImageID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectImageTranslation fields.
func (pit *ProjectImageTranslation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projectimagetranslation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pit.ID = *value
			}
		case projectimagetranslation.FieldProjectImageID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field project_image_id", values[i])
			} else if value != nil {
				pit.ProjectImageID = *value
			}
		case projectimagetranslation.FieldLanguageCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language_code", values[i])
			} else if value.Valid {
				pit.LanguageCode = value.String
			}
		case projectimagetranslation.FieldAltText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alt_text", values[i])
			} else if value.Valid {
				pit.AltText = value.String
			}
		case projectimagetranslation.FieldCaption:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field caption", values[i])
			} else if value.Valid {
				pit.Caption = value.String
			}
		case projectimagetranslation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pit.CreatedAt = value.Time
			}
		default:
			pit.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProjectImageTranslation.
// This includes values selected through modifiers, order, etc.
func (pit *ProjectImageTranslation) Value(name string) (ent.Value, error) {
	return pit.selectValues.Get(name)
}

// QueryProjectImage queries the "project_image" edge of the ProjectImageTranslation entity.
func (pit *ProjectImageTranslation) QueryProjectImage() *ProjectImageQuery {
	return NewProjectImageTranslationClient(pit.config).QueryProjectImage(pit)
}

// QueryLanguage queries the "language" edge of the ProjectImageTranslation entity.
func (pit *ProjectImageTranslation) QueryLanguage() *LanguageQuery {
	return NewProjectImageTranslationClient(pit.config).QueryLanguage(pit)
}

// Update returns a builder for updating this ProjectImageTranslation.
// Note that you need to call ProjectImageTranslation.Unwrap() before calling this method if this ProjectImageTranslation
// was returned from a transaction, and the transaction was committed or rolled back.
func (pit *ProjectImageTranslation) Update() *ProjectImageTranslationUpdateOne {
	return NewProjectImageTranslationClient(pit.config).UpdateOne(pit)
}

// Unwrap unwraps the ProjectImageTranslation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pit *ProjectImageTranslation) Unwrap() *ProjectImageTranslation {
	_tx, ok := pit.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProjectImageTranslation is not a transactional entity")
	}
	pit.config.driver = _tx.drv
	return pit
}

// String implements the fmt.Stringer.
func (pit *ProjectImageTranslation) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectImageTranslation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pit.ID))
	builder.WriteString("project_image_id=")
	builder.WriteString(fmt.Sprintf("%v", pit.ProjectImageID))
	builder.WriteString(", ")
	builder.WriteString("language_code=")
	builder.WriteString(pit.LanguageCode)
	builder.WriteString(", ")
	builder.WriteString("alt_text=")
	builder.WriteString(pit.AltText)
	builder.WriteString(", ")
	builder.WriteString("caption=")
	builder.WriteString(pit.Caption)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pit.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProjectImageTranslations is a parsable slice of ProjectImageTranslation.
type ProjectImageTranslations []*ProjectImageTranslation
