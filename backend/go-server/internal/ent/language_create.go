// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/awardtranslation"
	"silan-backend/internal/ent/blogcategorytranslation"
	"silan-backend/internal/ent/blogposttranslation"
	"silan-backend/internal/ent/blogseriestranslation"
	"silan-backend/internal/ent/educationdetailtranslation"
	"silan-backend/internal/ent/educationtranslation"
	"silan-backend/internal/ent/ideatranslation"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/personalinfotranslation"
	"silan-backend/internal/ent/projectdetailtranslation"
	"silan-backend/internal/ent/projectimagetranslation"
	"silan-backend/internal/ent/projecttranslation"
	"silan-backend/internal/ent/publicationtranslation"
	"silan-backend/internal/ent/researchprojectdetailtranslation"
	"silan-backend/internal/ent/researchprojecttranslation"
	"silan-backend/internal/ent/workexperiencedetailtranslation"
	"silan-backend/internal/ent/workexperiencetranslation"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// LanguageCreate is the builder for creating a Language entity.
type LanguageCreate struct {
	config
	mutation *LanguageMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (lc *LanguageCreate) SetName(s string) *LanguageCreate {
	lc.mutation.SetName(s)
	return lc
}

// SetNativeName sets the "native_name" field.
func (lc *LanguageCreate) SetNativeName(s string) *LanguageCreate {
	lc.mutation.SetNativeName(s)
	return lc
}

// SetIsActive sets the "is_active" field.
func (lc *LanguageCreate) SetIsActive(b bool) *LanguageCreate {
	lc.mutation.SetIsActive(b)
	return lc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (lc *LanguageCreate) SetNillableIsActive(b *bool) *LanguageCreate {
	if b != nil {
		lc.SetIsActive(*b)
	}
	return lc
}

// SetCreatedAt sets the "created_at" field.
func (lc *LanguageCreate) SetCreatedAt(t time.Time) *LanguageCreate {
	lc.mutation.SetCreatedAt(t)
	return lc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lc *LanguageCreate) SetNillableCreatedAt(t *time.Time) *LanguageCreate {
	if t != nil {
		lc.SetCreatedAt(*t)
	}
	return lc
}

// SetID sets the "id" field.
func (lc *LanguageCreate) SetID(s string) *LanguageCreate {
	lc.mutation.SetID(s)
	return lc
}

// AddPersonalInfoTranslationIDs adds the "personal_info_translations" edge to the PersonalInfoTranslation entity by IDs.
func (lc *LanguageCreate) AddPersonalInfoTranslationIDs(ids ...uuid.UUID) *LanguageCreate {
	lc.mutation.AddPersonalInfoTranslationIDs(ids...)
	return lc
}

// AddPersonalInfoTranslations adds the "personal_info_translations" edges to the PersonalInfoTranslation entity.
func (lc *LanguageCreate) AddPersonalInfoTranslations(p ...*PersonalInfoTranslation) *LanguageCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lc.AddPersonalInfoTranslationIDs(ids...)
}

// AddEducationTranslationIDs adds the "education_translations" edge to the EducationTranslation entity by IDs.
func (lc *LanguageCreate) AddEducationTranslationIDs(ids ...uuid.UUID) *LanguageCreate {
	lc.mutation.AddEducationTranslationIDs(ids...)
	return lc
}

// AddEducationTranslations adds the "education_translations" edges to the EducationTranslation entity.
func (lc *LanguageCreate) AddEducationTranslations(e ...*EducationTranslation) *LanguageCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return lc.AddEducationTranslationIDs(ids...)
}

// AddEducationDetailTranslationIDs adds the "education_detail_translations" edge to the EducationDetailTranslation entity by IDs.
func (lc *LanguageCreate) AddEducationDetailTranslationIDs(ids ...uuid.UUID) *LanguageCreate {
	lc.mutation.AddEducationDetailTranslationIDs(ids...)
	return lc
}

// AddEducationDetailTranslations adds the "education_detail_translations" edges to the EducationDetailTranslation entity.
func (lc *LanguageCreate) AddEducationDetailTranslations(e ...*EducationDetailTranslation) *LanguageCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return lc.AddEducationDetailTranslationIDs(ids...)
}

// AddWorkExperienceTranslationIDs adds the "work_experience_translations" edge to the WorkExperienceTranslation entity by IDs.
func (lc *LanguageCreate) AddWorkExperienceTranslationIDs(ids ...uuid.UUID) *LanguageCreate {
	lc.mutation.AddWorkExperienceTranslationIDs(ids...)
	return lc
}

// AddWorkExperienceTranslations adds the "work_experience_translations" edges to the WorkExperienceTranslation entity.
func (lc *LanguageCreate) AddWorkExperienceTranslations(w ...*WorkExperienceTranslation) *LanguageCreate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return lc.AddWorkExperienceTranslationIDs(ids...)
}

// AddWorkExperienceDetailTranslationIDs adds the "work_experience_detail_translations" edge to the WorkExperienceDetailTranslation entity by IDs.
func (lc *LanguageCreate) AddWorkExperienceDetailTranslationIDs(ids ...uuid.UUID) *LanguageCreate {
	lc.mutation.AddWorkExperienceDetailTranslationIDs(ids...)
	return lc
}

// AddWorkExperienceDetailTranslations adds the "work_experience_detail_translations" edges to the WorkExperienceDetailTranslation entity.
func (lc *LanguageCreate) AddWorkExperienceDetailTranslations(w ...*WorkExperienceDetailTranslation) *LanguageCreate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return lc.AddWorkExperienceDetailTranslationIDs(ids...)
}

// AddProjectTranslationIDs adds the "project_translations" edge to the ProjectTranslation entity by IDs.
func (lc *LanguageCreate) AddProjectTranslationIDs(ids ...uuid.UUID) *LanguageCreate {
	lc.mutation.AddProjectTranslationIDs(ids...)
	return lc
}

// AddProjectTranslations adds the "project_translations" edges to the ProjectTranslation entity.
func (lc *LanguageCreate) AddProjectTranslations(p ...*ProjectTranslation) *LanguageCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lc.AddProjectTranslationIDs(ids...)
}

// AddProjectDetailTranslationIDs adds the "project_detail_translations" edge to the ProjectDetailTranslation entity by IDs.
func (lc *LanguageCreate) AddProjectDetailTranslationIDs(ids ...uuid.UUID) *LanguageCreate {
	lc.mutation.AddProjectDetailTranslationIDs(ids...)
	return lc
}

// AddProjectDetailTranslations adds the "project_detail_translations" edges to the ProjectDetailTranslation entity.
func (lc *LanguageCreate) AddProjectDetailTranslations(p ...*ProjectDetailTranslation) *LanguageCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lc.AddProjectDetailTranslationIDs(ids...)
}

// AddProjectImageTranslationIDs adds the "project_image_translations" edge to the ProjectImageTranslation entity by IDs.
func (lc *LanguageCreate) AddProjectImageTranslationIDs(ids ...uuid.UUID) *LanguageCreate {
	lc.mutation.AddProjectImageTranslationIDs(ids...)
	return lc
}

// AddProjectImageTranslations adds the "project_image_translations" edges to the ProjectImageTranslation entity.
func (lc *LanguageCreate) AddProjectImageTranslations(p ...*ProjectImageTranslation) *LanguageCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lc.AddProjectImageTranslationIDs(ids...)
}

// AddBlogCategoryTranslationIDs adds the "blog_category_translations" edge to the BlogCategoryTranslation entity by IDs.
func (lc *LanguageCreate) AddBlogCategoryTranslationIDs(ids ...uuid.UUID) *LanguageCreate {
	lc.mutation.AddBlogCategoryTranslationIDs(ids...)
	return lc
}

// AddBlogCategoryTranslations adds the "blog_category_translations" edges to the BlogCategoryTranslation entity.
func (lc *LanguageCreate) AddBlogCategoryTranslations(b ...*BlogCategoryTranslation) *LanguageCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return lc.AddBlogCategoryTranslationIDs(ids...)
}

// AddBlogPostTranslationIDs adds the "blog_post_translations" edge to the BlogPostTranslation entity by IDs.
func (lc *LanguageCreate) AddBlogPostTranslationIDs(ids ...uuid.UUID) *LanguageCreate {
	lc.mutation.AddBlogPostTranslationIDs(ids...)
	return lc
}

// AddBlogPostTranslations adds the "blog_post_translations" edges to the BlogPostTranslation entity.
func (lc *LanguageCreate) AddBlogPostTranslations(b ...*BlogPostTranslation) *LanguageCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return lc.AddBlogPostTranslationIDs(ids...)
}

// AddBlogSeriesTranslationIDs adds the "blog_series_translations" edge to the BlogSeriesTranslation entity by IDs.
func (lc *LanguageCreate) AddBlogSeriesTranslationIDs(ids ...uuid.UUID) *LanguageCreate {
	lc.mutation.AddBlogSeriesTranslationIDs(ids...)
	return lc
}

// AddBlogSeriesTranslations adds the "blog_series_translations" edges to the BlogSeriesTranslation entity.
func (lc *LanguageCreate) AddBlogSeriesTranslations(b ...*BlogSeriesTranslation) *LanguageCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return lc.AddBlogSeriesTranslationIDs(ids...)
}

// AddIdeaTranslationIDs adds the "idea_translations" edge to the IdeaTranslation entity by IDs.
func (lc *LanguageCreate) AddIdeaTranslationIDs(ids ...uuid.UUID) *LanguageCreate {
	lc.mutation.AddIdeaTranslationIDs(ids...)
	return lc
}

// AddIdeaTranslations adds the "idea_translations" edges to the IdeaTranslation entity.
func (lc *LanguageCreate) AddIdeaTranslations(i ...*IdeaTranslation) *LanguageCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return lc.AddIdeaTranslationIDs(ids...)
}

// AddResearchProjectTranslationIDs adds the "research_project_translations" edge to the ResearchProjectTranslation entity by IDs.
func (lc *LanguageCreate) AddResearchProjectTranslationIDs(ids ...uuid.UUID) *LanguageCreate {
	lc.mutation.AddResearchProjectTranslationIDs(ids...)
	return lc
}

// AddResearchProjectTranslations adds the "research_project_translations" edges to the ResearchProjectTranslation entity.
func (lc *LanguageCreate) AddResearchProjectTranslations(r ...*ResearchProjectTranslation) *LanguageCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return lc.AddResearchProjectTranslationIDs(ids...)
}

// AddResearchProjectDetailTranslationIDs adds the "research_project_detail_translations" edge to the ResearchProjectDetailTranslation entity by IDs.
func (lc *LanguageCreate) AddResearchProjectDetailTranslationIDs(ids ...uuid.UUID) *LanguageCreate {
	lc.mutation.AddResearchProjectDetailTranslationIDs(ids...)
	return lc
}

// AddResearchProjectDetailTranslations adds the "research_project_detail_translations" edges to the ResearchProjectDetailTranslation entity.
func (lc *LanguageCreate) AddResearchProjectDetailTranslations(r ...*ResearchProjectDetailTranslation) *LanguageCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return lc.AddResearchProjectDetailTranslationIDs(ids...)
}

// AddPublicationTranslationIDs adds the "publication_translations" edge to the PublicationTranslation entity by IDs.
func (lc *LanguageCreate) AddPublicationTranslationIDs(ids ...uuid.UUID) *LanguageCreate {
	lc.mutation.AddPublicationTranslationIDs(ids...)
	return lc
}

// AddPublicationTranslations adds the "publication_translations" edges to the PublicationTranslation entity.
func (lc *LanguageCreate) AddPublicationTranslations(p ...*PublicationTranslation) *LanguageCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lc.AddPublicationTranslationIDs(ids...)
}

// AddAwardTranslationIDs adds the "award_translations" edge to the AwardTranslation entity by IDs.
func (lc *LanguageCreate) AddAwardTranslationIDs(ids ...uuid.UUID) *LanguageCreate {
	lc.mutation.AddAwardTranslationIDs(ids...)
	return lc
}

// AddAwardTranslations adds the "award_translations" edges to the AwardTranslation entity.
func (lc *LanguageCreate) AddAwardTranslations(a ...*AwardTranslation) *LanguageCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return lc.AddAwardTranslationIDs(ids...)
}

// Mutation returns the LanguageMutation object of the builder.
func (lc *LanguageCreate) Mutation() *LanguageMutation {
	return lc.mutation
}

// Save creates the Language in the database.
func (lc *LanguageCreate) Save(ctx context.Context) (*Language, error) {
	lc.defaults()
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LanguageCreate) SaveX(ctx context.Context) *Language {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LanguageCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LanguageCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LanguageCreate) defaults() {
	if _, ok := lc.mutation.IsActive(); !ok {
		v := language.DefaultIsActive
		lc.mutation.SetIsActive(v)
	}
	if _, ok := lc.mutation.CreatedAt(); !ok {
		v := language.DefaultCreatedAt()
		lc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LanguageCreate) check() error {
	if _, ok := lc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Language.name"`)}
	}
	if v, ok := lc.mutation.Name(); ok {
		if err := language.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Language.name": %w`, err)}
		}
	}
	if _, ok := lc.mutation.NativeName(); !ok {
		return &ValidationError{Name: "native_name", err: errors.New(`ent: missing required field "Language.native_name"`)}
	}
	if v, ok := lc.mutation.NativeName(); ok {
		if err := language.NativeNameValidator(v); err != nil {
			return &ValidationError{Name: "native_name", err: fmt.Errorf(`ent: validator failed for field "Language.native_name": %w`, err)}
		}
	}
	if _, ok := lc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Language.is_active"`)}
	}
	if _, ok := lc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Language.created_at"`)}
	}
	if v, ok := lc.mutation.ID(); ok {
		if err := language.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Language.id": %w`, err)}
		}
	}
	return nil
}

func (lc *LanguageCreate) sqlSave(ctx context.Context) (*Language, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Language.ID type: %T", _spec.ID.Value)
		}
	}
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LanguageCreate) createSpec() (*Language, *sqlgraph.CreateSpec) {
	var (
		_node = &Language{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(language.Table, sqlgraph.NewFieldSpec(language.FieldID, field.TypeString))
	)
	if id, ok := lc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lc.mutation.Name(); ok {
		_spec.SetField(language.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := lc.mutation.NativeName(); ok {
		_spec.SetField(language.FieldNativeName, field.TypeString, value)
		_node.NativeName = value
	}
	if value, ok := lc.mutation.IsActive(); ok {
		_spec.SetField(language.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := lc.mutation.CreatedAt(); ok {
		_spec.SetField(language.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := lc.mutation.PersonalInfoTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.PersonalInfoTranslationsTable,
			Columns: []string{language.PersonalInfoTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalinfotranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.EducationTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.EducationTranslationsTable,
			Columns: []string{language.EducationTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.EducationDetailTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.EducationDetailTranslationsTable,
			Columns: []string{language.EducationDetailTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.WorkExperienceTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.WorkExperienceTranslationsTable,
			Columns: []string{language.WorkExperienceTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperiencetranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.WorkExperienceDetailTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.WorkExperienceDetailTranslationsTable,
			Columns: []string{language.WorkExperienceDetailTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperiencedetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.ProjectTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ProjectTranslationsTable,
			Columns: []string{language.ProjectTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.ProjectDetailTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ProjectDetailTranslationsTable,
			Columns: []string{language.ProjectDetailTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.ProjectImageTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ProjectImageTranslationsTable,
			Columns: []string{language.ProjectImageTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectimagetranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.BlogCategoryTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.BlogCategoryTranslationsTable,
			Columns: []string{language.BlogCategoryTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcategorytranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.BlogPostTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.BlogPostTranslationsTable,
			Columns: []string{language.BlogPostTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogposttranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.BlogSeriesTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.BlogSeriesTranslationsTable,
			Columns: []string{language.BlogSeriesTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogseriestranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.IdeaTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.IdeaTranslationsTable,
			Columns: []string{language.IdeaTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideatranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.ResearchProjectTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ResearchProjectTranslationsTable,
			Columns: []string{language.ResearchProjectTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojecttranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.ResearchProjectDetailTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ResearchProjectDetailTranslationsTable,
			Columns: []string{language.ResearchProjectDetailTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojectdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.PublicationTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.PublicationTranslationsTable,
			Columns: []string{language.PublicationTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publicationtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.AwardTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.AwardTranslationsTable,
			Columns: []string{language.AwardTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(awardtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LanguageCreateBulk is the builder for creating many Language entities in bulk.
type LanguageCreateBulk struct {
	config
	err      error
	builders []*LanguageCreate
}

// Save creates the Language entities in the database.
func (lcb *LanguageCreateBulk) Save(ctx context.Context) ([]*Language, error) {
	if lcb.err != nil {
		return nil, lcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Language, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LanguageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LanguageCreateBulk) SaveX(ctx context.Context) []*Language {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LanguageCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LanguageCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}
