// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/education"
	"silan-backend/internal/ent/educationtranslation"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// EducationTranslationUpdate is the builder for updating EducationTranslation entities.
type EducationTranslationUpdate struct {
	config
	hooks    []Hook
	mutation *EducationTranslationMutation
}

// Where appends a list predicates to the EducationTranslationUpdate builder.
func (etu *EducationTranslationUpdate) Where(ps ...predicate.EducationTranslation) *EducationTranslationUpdate {
	etu.mutation.Where(ps...)
	return etu
}

// SetEducationID sets the "education_id" field.
func (etu *EducationTranslationUpdate) SetEducationID(u uuid.UUID) *EducationTranslationUpdate {
	etu.mutation.SetEducationID(u)
	return etu
}

// SetNillableEducationID sets the "education_id" field if the given value is not nil.
func (etu *EducationTranslationUpdate) SetNillableEducationID(u *uuid.UUID) *EducationTranslationUpdate {
	if u != nil {
		etu.SetEducationID(*u)
	}
	return etu
}

// SetLanguageCode sets the "language_code" field.
func (etu *EducationTranslationUpdate) SetLanguageCode(s string) *EducationTranslationUpdate {
	etu.mutation.SetLanguageCode(s)
	return etu
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (etu *EducationTranslationUpdate) SetNillableLanguageCode(s *string) *EducationTranslationUpdate {
	if s != nil {
		etu.SetLanguageCode(*s)
	}
	return etu
}

// SetInstitution sets the "institution" field.
func (etu *EducationTranslationUpdate) SetInstitution(s string) *EducationTranslationUpdate {
	etu.mutation.SetInstitution(s)
	return etu
}

// SetNillableInstitution sets the "institution" field if the given value is not nil.
func (etu *EducationTranslationUpdate) SetNillableInstitution(s *string) *EducationTranslationUpdate {
	if s != nil {
		etu.SetInstitution(*s)
	}
	return etu
}

// ClearInstitution clears the value of the "institution" field.
func (etu *EducationTranslationUpdate) ClearInstitution() *EducationTranslationUpdate {
	etu.mutation.ClearInstitution()
	return etu
}

// SetDegree sets the "degree" field.
func (etu *EducationTranslationUpdate) SetDegree(s string) *EducationTranslationUpdate {
	etu.mutation.SetDegree(s)
	return etu
}

// SetNillableDegree sets the "degree" field if the given value is not nil.
func (etu *EducationTranslationUpdate) SetNillableDegree(s *string) *EducationTranslationUpdate {
	if s != nil {
		etu.SetDegree(*s)
	}
	return etu
}

// ClearDegree clears the value of the "degree" field.
func (etu *EducationTranslationUpdate) ClearDegree() *EducationTranslationUpdate {
	etu.mutation.ClearDegree()
	return etu
}

// SetFieldOfStudy sets the "field_of_study" field.
func (etu *EducationTranslationUpdate) SetFieldOfStudy(s string) *EducationTranslationUpdate {
	etu.mutation.SetFieldOfStudy(s)
	return etu
}

// SetNillableFieldOfStudy sets the "field_of_study" field if the given value is not nil.
func (etu *EducationTranslationUpdate) SetNillableFieldOfStudy(s *string) *EducationTranslationUpdate {
	if s != nil {
		etu.SetFieldOfStudy(*s)
	}
	return etu
}

// ClearFieldOfStudy clears the value of the "field_of_study" field.
func (etu *EducationTranslationUpdate) ClearFieldOfStudy() *EducationTranslationUpdate {
	etu.mutation.ClearFieldOfStudy()
	return etu
}

// SetLocation sets the "location" field.
func (etu *EducationTranslationUpdate) SetLocation(s string) *EducationTranslationUpdate {
	etu.mutation.SetLocation(s)
	return etu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (etu *EducationTranslationUpdate) SetNillableLocation(s *string) *EducationTranslationUpdate {
	if s != nil {
		etu.SetLocation(*s)
	}
	return etu
}

// ClearLocation clears the value of the "location" field.
func (etu *EducationTranslationUpdate) ClearLocation() *EducationTranslationUpdate {
	etu.mutation.ClearLocation()
	return etu
}

// SetEducation sets the "education" edge to the Education entity.
func (etu *EducationTranslationUpdate) SetEducation(e *Education) *EducationTranslationUpdate {
	return etu.SetEducationID(e.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (etu *EducationTranslationUpdate) SetLanguageID(id string) *EducationTranslationUpdate {
	etu.mutation.SetLanguageID(id)
	return etu
}

// SetLanguage sets the "language" edge to the Language entity.
func (etu *EducationTranslationUpdate) SetLanguage(l *Language) *EducationTranslationUpdate {
	return etu.SetLanguageID(l.ID)
}

// Mutation returns the EducationTranslationMutation object of the builder.
func (etu *EducationTranslationUpdate) Mutation() *EducationTranslationMutation {
	return etu.mutation
}

// ClearEducation clears the "education" edge to the Education entity.
func (etu *EducationTranslationUpdate) ClearEducation() *EducationTranslationUpdate {
	etu.mutation.ClearEducation()
	return etu
}

// ClearLanguage clears the "language" edge to the Language entity.
func (etu *EducationTranslationUpdate) ClearLanguage() *EducationTranslationUpdate {
	etu.mutation.ClearLanguage()
	return etu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (etu *EducationTranslationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, etu.sqlSave, etu.mutation, etu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (etu *EducationTranslationUpdate) SaveX(ctx context.Context) int {
	affected, err := etu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (etu *EducationTranslationUpdate) Exec(ctx context.Context) error {
	_, err := etu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etu *EducationTranslationUpdate) ExecX(ctx context.Context) {
	if err := etu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (etu *EducationTranslationUpdate) check() error {
	if v, ok := etu.mutation.LanguageCode(); ok {
		if err := educationtranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "EducationTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := etu.mutation.Institution(); ok {
		if err := educationtranslation.InstitutionValidator(v); err != nil {
			return &ValidationError{Name: "institution", err: fmt.Errorf(`ent: validator failed for field "EducationTranslation.institution": %w`, err)}
		}
	}
	if v, ok := etu.mutation.Degree(); ok {
		if err := educationtranslation.DegreeValidator(v); err != nil {
			return &ValidationError{Name: "degree", err: fmt.Errorf(`ent: validator failed for field "EducationTranslation.degree": %w`, err)}
		}
	}
	if v, ok := etu.mutation.FieldOfStudy(); ok {
		if err := educationtranslation.FieldOfStudyValidator(v); err != nil {
			return &ValidationError{Name: "field_of_study", err: fmt.Errorf(`ent: validator failed for field "EducationTranslation.field_of_study": %w`, err)}
		}
	}
	if v, ok := etu.mutation.Location(); ok {
		if err := educationtranslation.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "EducationTranslation.location": %w`, err)}
		}
	}
	if etu.mutation.EducationCleared() && len(etu.mutation.EducationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EducationTranslation.education"`)
	}
	if etu.mutation.LanguageCleared() && len(etu.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EducationTranslation.language"`)
	}
	return nil
}

func (etu *EducationTranslationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := etu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(educationtranslation.Table, educationtranslation.Columns, sqlgraph.NewFieldSpec(educationtranslation.FieldID, field.TypeUUID))
	if ps := etu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := etu.mutation.Institution(); ok {
		_spec.SetField(educationtranslation.FieldInstitution, field.TypeString, value)
	}
	if etu.mutation.InstitutionCleared() {
		_spec.ClearField(educationtranslation.FieldInstitution, field.TypeString)
	}
	if value, ok := etu.mutation.Degree(); ok {
		_spec.SetField(educationtranslation.FieldDegree, field.TypeString, value)
	}
	if etu.mutation.DegreeCleared() {
		_spec.ClearField(educationtranslation.FieldDegree, field.TypeString)
	}
	if value, ok := etu.mutation.FieldOfStudy(); ok {
		_spec.SetField(educationtranslation.FieldFieldOfStudy, field.TypeString, value)
	}
	if etu.mutation.FieldOfStudyCleared() {
		_spec.ClearField(educationtranslation.FieldFieldOfStudy, field.TypeString)
	}
	if value, ok := etu.mutation.Location(); ok {
		_spec.SetField(educationtranslation.FieldLocation, field.TypeString, value)
	}
	if etu.mutation.LocationCleared() {
		_spec.ClearField(educationtranslation.FieldLocation, field.TypeString)
	}
	if etu.mutation.EducationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   educationtranslation.EducationTable,
			Columns: []string{educationtranslation.EducationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.EducationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   educationtranslation.EducationTable,
			Columns: []string{educationtranslation.EducationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if etu.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   educationtranslation.LanguageTable,
			Columns: []string{educationtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etu.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   educationtranslation.LanguageTable,
			Columns: []string{educationtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, etu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{educationtranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	etu.mutation.done = true
	return n, nil
}

// EducationTranslationUpdateOne is the builder for updating a single EducationTranslation entity.
type EducationTranslationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EducationTranslationMutation
}

// SetEducationID sets the "education_id" field.
func (etuo *EducationTranslationUpdateOne) SetEducationID(u uuid.UUID) *EducationTranslationUpdateOne {
	etuo.mutation.SetEducationID(u)
	return etuo
}

// SetNillableEducationID sets the "education_id" field if the given value is not nil.
func (etuo *EducationTranslationUpdateOne) SetNillableEducationID(u *uuid.UUID) *EducationTranslationUpdateOne {
	if u != nil {
		etuo.SetEducationID(*u)
	}
	return etuo
}

// SetLanguageCode sets the "language_code" field.
func (etuo *EducationTranslationUpdateOne) SetLanguageCode(s string) *EducationTranslationUpdateOne {
	etuo.mutation.SetLanguageCode(s)
	return etuo
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (etuo *EducationTranslationUpdateOne) SetNillableLanguageCode(s *string) *EducationTranslationUpdateOne {
	if s != nil {
		etuo.SetLanguageCode(*s)
	}
	return etuo
}

// SetInstitution sets the "institution" field.
func (etuo *EducationTranslationUpdateOne) SetInstitution(s string) *EducationTranslationUpdateOne {
	etuo.mutation.SetInstitution(s)
	return etuo
}

// SetNillableInstitution sets the "institution" field if the given value is not nil.
func (etuo *EducationTranslationUpdateOne) SetNillableInstitution(s *string) *EducationTranslationUpdateOne {
	if s != nil {
		etuo.SetInstitution(*s)
	}
	return etuo
}

// ClearInstitution clears the value of the "institution" field.
func (etuo *EducationTranslationUpdateOne) ClearInstitution() *EducationTranslationUpdateOne {
	etuo.mutation.ClearInstitution()
	return etuo
}

// SetDegree sets the "degree" field.
func (etuo *EducationTranslationUpdateOne) SetDegree(s string) *EducationTranslationUpdateOne {
	etuo.mutation.SetDegree(s)
	return etuo
}

// SetNillableDegree sets the "degree" field if the given value is not nil.
func (etuo *EducationTranslationUpdateOne) SetNillableDegree(s *string) *EducationTranslationUpdateOne {
	if s != nil {
		etuo.SetDegree(*s)
	}
	return etuo
}

// ClearDegree clears the value of the "degree" field.
func (etuo *EducationTranslationUpdateOne) ClearDegree() *EducationTranslationUpdateOne {
	etuo.mutation.ClearDegree()
	return etuo
}

// SetFieldOfStudy sets the "field_of_study" field.
func (etuo *EducationTranslationUpdateOne) SetFieldOfStudy(s string) *EducationTranslationUpdateOne {
	etuo.mutation.SetFieldOfStudy(s)
	return etuo
}

// SetNillableFieldOfStudy sets the "field_of_study" field if the given value is not nil.
func (etuo *EducationTranslationUpdateOne) SetNillableFieldOfStudy(s *string) *EducationTranslationUpdateOne {
	if s != nil {
		etuo.SetFieldOfStudy(*s)
	}
	return etuo
}

// ClearFieldOfStudy clears the value of the "field_of_study" field.
func (etuo *EducationTranslationUpdateOne) ClearFieldOfStudy() *EducationTranslationUpdateOne {
	etuo.mutation.ClearFieldOfStudy()
	return etuo
}

// SetLocation sets the "location" field.
func (etuo *EducationTranslationUpdateOne) SetLocation(s string) *EducationTranslationUpdateOne {
	etuo.mutation.SetLocation(s)
	return etuo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (etuo *EducationTranslationUpdateOne) SetNillableLocation(s *string) *EducationTranslationUpdateOne {
	if s != nil {
		etuo.SetLocation(*s)
	}
	return etuo
}

// ClearLocation clears the value of the "location" field.
func (etuo *EducationTranslationUpdateOne) ClearLocation() *EducationTranslationUpdateOne {
	etuo.mutation.ClearLocation()
	return etuo
}

// SetEducation sets the "education" edge to the Education entity.
func (etuo *EducationTranslationUpdateOne) SetEducation(e *Education) *EducationTranslationUpdateOne {
	return etuo.SetEducationID(e.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (etuo *EducationTranslationUpdateOne) SetLanguageID(id string) *EducationTranslationUpdateOne {
	etuo.mutation.SetLanguageID(id)
	return etuo
}

// SetLanguage sets the "language" edge to the Language entity.
func (etuo *EducationTranslationUpdateOne) SetLanguage(l *Language) *EducationTranslationUpdateOne {
	return etuo.SetLanguageID(l.ID)
}

// Mutation returns the EducationTranslationMutation object of the builder.
func (etuo *EducationTranslationUpdateOne) Mutation() *EducationTranslationMutation {
	return etuo.mutation
}

// ClearEducation clears the "education" edge to the Education entity.
func (etuo *EducationTranslationUpdateOne) ClearEducation() *EducationTranslationUpdateOne {
	etuo.mutation.ClearEducation()
	return etuo
}

// ClearLanguage clears the "language" edge to the Language entity.
func (etuo *EducationTranslationUpdateOne) ClearLanguage() *EducationTranslationUpdateOne {
	etuo.mutation.ClearLanguage()
	return etuo
}

// Where appends a list predicates to the EducationTranslationUpdate builder.
func (etuo *EducationTranslationUpdateOne) Where(ps ...predicate.EducationTranslation) *EducationTranslationUpdateOne {
	etuo.mutation.Where(ps...)
	return etuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (etuo *EducationTranslationUpdateOne) Select(field string, fields ...string) *EducationTranslationUpdateOne {
	etuo.fields = append([]string{field}, fields...)
	return etuo
}

// Save executes the query and returns the updated EducationTranslation entity.
func (etuo *EducationTranslationUpdateOne) Save(ctx context.Context) (*EducationTranslation, error) {
	return withHooks(ctx, etuo.sqlSave, etuo.mutation, etuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (etuo *EducationTranslationUpdateOne) SaveX(ctx context.Context) *EducationTranslation {
	node, err := etuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (etuo *EducationTranslationUpdateOne) Exec(ctx context.Context) error {
	_, err := etuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etuo *EducationTranslationUpdateOne) ExecX(ctx context.Context) {
	if err := etuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (etuo *EducationTranslationUpdateOne) check() error {
	if v, ok := etuo.mutation.LanguageCode(); ok {
		if err := educationtranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "EducationTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := etuo.mutation.Institution(); ok {
		if err := educationtranslation.InstitutionValidator(v); err != nil {
			return &ValidationError{Name: "institution", err: fmt.Errorf(`ent: validator failed for field "EducationTranslation.institution": %w`, err)}
		}
	}
	if v, ok := etuo.mutation.Degree(); ok {
		if err := educationtranslation.DegreeValidator(v); err != nil {
			return &ValidationError{Name: "degree", err: fmt.Errorf(`ent: validator failed for field "EducationTranslation.degree": %w`, err)}
		}
	}
	if v, ok := etuo.mutation.FieldOfStudy(); ok {
		if err := educationtranslation.FieldOfStudyValidator(v); err != nil {
			return &ValidationError{Name: "field_of_study", err: fmt.Errorf(`ent: validator failed for field "EducationTranslation.field_of_study": %w`, err)}
		}
	}
	if v, ok := etuo.mutation.Location(); ok {
		if err := educationtranslation.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "EducationTranslation.location": %w`, err)}
		}
	}
	if etuo.mutation.EducationCleared() && len(etuo.mutation.EducationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EducationTranslation.education"`)
	}
	if etuo.mutation.LanguageCleared() && len(etuo.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EducationTranslation.language"`)
	}
	return nil
}

func (etuo *EducationTranslationUpdateOne) sqlSave(ctx context.Context) (_node *EducationTranslation, err error) {
	if err := etuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(educationtranslation.Table, educationtranslation.Columns, sqlgraph.NewFieldSpec(educationtranslation.FieldID, field.TypeUUID))
	id, ok := etuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EducationTranslation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := etuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, educationtranslation.FieldID)
		for _, f := range fields {
			if !educationtranslation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != educationtranslation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := etuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := etuo.mutation.Institution(); ok {
		_spec.SetField(educationtranslation.FieldInstitution, field.TypeString, value)
	}
	if etuo.mutation.InstitutionCleared() {
		_spec.ClearField(educationtranslation.FieldInstitution, field.TypeString)
	}
	if value, ok := etuo.mutation.Degree(); ok {
		_spec.SetField(educationtranslation.FieldDegree, field.TypeString, value)
	}
	if etuo.mutation.DegreeCleared() {
		_spec.ClearField(educationtranslation.FieldDegree, field.TypeString)
	}
	if value, ok := etuo.mutation.FieldOfStudy(); ok {
		_spec.SetField(educationtranslation.FieldFieldOfStudy, field.TypeString, value)
	}
	if etuo.mutation.FieldOfStudyCleared() {
		_spec.ClearField(educationtranslation.FieldFieldOfStudy, field.TypeString)
	}
	if value, ok := etuo.mutation.Location(); ok {
		_spec.SetField(educationtranslation.FieldLocation, field.TypeString, value)
	}
	if etuo.mutation.LocationCleared() {
		_spec.ClearField(educationtranslation.FieldLocation, field.TypeString)
	}
	if etuo.mutation.EducationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   educationtranslation.EducationTable,
			Columns: []string{educationtranslation.EducationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.EducationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   educationtranslation.EducationTable,
			Columns: []string{educationtranslation.EducationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if etuo.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   educationtranslation.LanguageTable,
			Columns: []string{educationtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := etuo.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   educationtranslation.LanguageTable,
			Columns: []string{educationtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EducationTranslation{config: etuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, etuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{educationtranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	etuo.mutation.done = true
	return _node, nil
}
