// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/projecttranslation"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ProjectTranslation is the model entity for the ProjectTranslation schema.
type ProjectTranslation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ProjectID holds the value of the "project_id" field.
	ProjectID uuid.UUID `json:"project_id,omitempty"`
	// LanguageCode holds the value of the "language_code" field.
	LanguageCode string `json:"language_code,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// ProjectType holds the value of the "project_type" field.
	ProjectType string `json:"project_type,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectTranslationQuery when eager-loading is set.
	Edges        ProjectTranslationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProjectTranslationEdges holds the relations/edges for other nodes in the graph.
type ProjectTranslationEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// Language holds the value of the language edge.
	Language *Language `json:"language,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectTranslationEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// LanguageOrErr returns the Language value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectTranslationEdges) LanguageOrErr() (*Language, error) {
	if e.Language != nil {
		return e.Language, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: language.Label}
	}
	return nil, &NotLoadedError{edge: "language"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectTranslation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case projecttranslation.FieldLanguageCode, projecttranslation.FieldTitle, projecttranslation.FieldDescription, projecttranslation.FieldProjectType:
			values[i] = new(sql.NullString)
		case projecttranslation.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case projecttranslation.FieldID, projecttranslation.FieldProjectID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectTranslation fields.
func (pt *ProjectTranslation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projecttranslation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pt.ID = *value
			}
		case projecttranslation.FieldProjectID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value != nil {
				pt.ProjectID = *value
			}
		case projecttranslation.FieldLanguageCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language_code", values[i])
			} else if value.Valid {
				pt.LanguageCode = value.String
			}
		case projecttranslation.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				pt.Title = value.String
			}
		case projecttranslation.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pt.Description = value.String
			}
		case projecttranslation.FieldProjectType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_type", values[i])
			} else if value.Valid {
				pt.ProjectType = value.String
			}
		case projecttranslation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pt.CreatedAt = value.Time
			}
		default:
			pt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProjectTranslation.
// This includes values selected through modifiers, order, etc.
func (pt *ProjectTranslation) Value(name string) (ent.Value, error) {
	return pt.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the ProjectTranslation entity.
func (pt *ProjectTranslation) QueryProject() *ProjectQuery {
	return NewProjectTranslationClient(pt.config).QueryProject(pt)
}

// QueryLanguage queries the "language" edge of the ProjectTranslation entity.
func (pt *ProjectTranslation) QueryLanguage() *LanguageQuery {
	return NewProjectTranslationClient(pt.config).QueryLanguage(pt)
}

// Update returns a builder for updating this ProjectTranslation.
// Note that you need to call ProjectTranslation.Unwrap() before calling this method if this ProjectTranslation
// was returned from a transaction, and the transaction was committed or rolled back.
func (pt *ProjectTranslation) Update() *ProjectTranslationUpdateOne {
	return NewProjectTranslationClient(pt.config).UpdateOne(pt)
}

// Unwrap unwraps the ProjectTranslation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pt *ProjectTranslation) Unwrap() *ProjectTranslation {
	_tx, ok := pt.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProjectTranslation is not a transactional entity")
	}
	pt.config.driver = _tx.drv
	return pt
}

// String implements the fmt.Stringer.
func (pt *ProjectTranslation) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectTranslation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pt.ID))
	builder.WriteString("project_id=")
	builder.WriteString(fmt.Sprintf("%v", pt.ProjectID))
	builder.WriteString(", ")
	builder.WriteString("language_code=")
	builder.WriteString(pt.LanguageCode)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(pt.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pt.Description)
	builder.WriteString(", ")
	builder.WriteString("project_type=")
	builder.WriteString(pt.ProjectType)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pt.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProjectTranslations is a parsable slice of ProjectTranslation.
type ProjectTranslations []*ProjectTranslation
