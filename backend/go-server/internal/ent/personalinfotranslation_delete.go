// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"silan-backend/internal/ent/personalinfotranslation"
	"silan-backend/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PersonalInfoTranslationDelete is the builder for deleting a PersonalInfoTranslation entity.
type PersonalInfoTranslationDelete struct {
	config
	hooks    []Hook
	mutation *PersonalInfoTranslationMutation
}

// Where appends a list predicates to the PersonalInfoTranslationDelete builder.
func (pitd *PersonalInfoTranslationDelete) Where(ps ...predicate.PersonalInfoTranslation) *PersonalInfoTranslationDelete {
	pitd.mutation.Where(ps...)
	return pitd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pitd *PersonalInfoTranslationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pitd.sqlExec, pitd.mutation, pitd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pitd *PersonalInfoTranslationDelete) ExecX(ctx context.Context) int {
	n, err := pitd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pitd *PersonalInfoTranslationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(personalinfotranslation.Table, sqlgraph.NewFieldSpec(personalinfotranslation.FieldID, field.TypeUUID))
	if ps := pitd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pitd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pitd.mutation.done = true
	return affected, err
}

// PersonalInfoTranslationDeleteOne is the builder for deleting a single PersonalInfoTranslation entity.
type PersonalInfoTranslationDeleteOne struct {
	pitd *PersonalInfoTranslationDelete
}

// Where appends a list predicates to the PersonalInfoTranslationDelete builder.
func (pitdo *PersonalInfoTranslationDeleteOne) Where(ps ...predicate.PersonalInfoTranslation) *PersonalInfoTranslationDeleteOne {
	pitdo.pitd.mutation.Where(ps...)
	return pitdo
}

// Exec executes the deletion query.
func (pitdo *PersonalInfoTranslationDeleteOne) Exec(ctx context.Context) error {
	n, err := pitdo.pitd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{personalinfotranslation.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pitdo *PersonalInfoTranslationDeleteOne) ExecX(ctx context.Context) {
	if err := pitdo.Exec(ctx); err != nil {
		panic(err)
	}
}
