// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/projecttranslation"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProjectTranslationCreate is the builder for creating a ProjectTranslation entity.
type ProjectTranslationCreate struct {
	config
	mutation *ProjectTranslationMutation
	hooks    []Hook
}

// SetProjectID sets the "project_id" field.
func (ptc *ProjectTranslationCreate) SetProjectID(u uuid.UUID) *ProjectTranslationCreate {
	ptc.mutation.SetProjectID(u)
	return ptc
}

// SetLanguageCode sets the "language_code" field.
func (ptc *ProjectTranslationCreate) SetLanguageCode(s string) *ProjectTranslationCreate {
	ptc.mutation.SetLanguageCode(s)
	return ptc
}

// SetTitle sets the "title" field.
func (ptc *ProjectTranslationCreate) SetTitle(s string) *ProjectTranslationCreate {
	ptc.mutation.SetTitle(s)
	return ptc
}

// SetDescription sets the "description" field.
func (ptc *ProjectTranslationCreate) SetDescription(s string) *ProjectTranslationCreate {
	ptc.mutation.SetDescription(s)
	return ptc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptc *ProjectTranslationCreate) SetNillableDescription(s *string) *ProjectTranslationCreate {
	if s != nil {
		ptc.SetDescription(*s)
	}
	return ptc
}

// SetProjectType sets the "project_type" field.
func (ptc *ProjectTranslationCreate) SetProjectType(s string) *ProjectTranslationCreate {
	ptc.mutation.SetProjectType(s)
	return ptc
}

// SetNillableProjectType sets the "project_type" field if the given value is not nil.
func (ptc *ProjectTranslationCreate) SetNillableProjectType(s *string) *ProjectTranslationCreate {
	if s != nil {
		ptc.SetProjectType(*s)
	}
	return ptc
}

// SetCreatedAt sets the "created_at" field.
func (ptc *ProjectTranslationCreate) SetCreatedAt(t time.Time) *ProjectTranslationCreate {
	ptc.mutation.SetCreatedAt(t)
	return ptc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptc *ProjectTranslationCreate) SetNillableCreatedAt(t *time.Time) *ProjectTranslationCreate {
	if t != nil {
		ptc.SetCreatedAt(*t)
	}
	return ptc
}

// SetID sets the "id" field.
func (ptc *ProjectTranslationCreate) SetID(u uuid.UUID) *ProjectTranslationCreate {
	ptc.mutation.SetID(u)
	return ptc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ptc *ProjectTranslationCreate) SetNillableID(u *uuid.UUID) *ProjectTranslationCreate {
	if u != nil {
		ptc.SetID(*u)
	}
	return ptc
}

// SetProject sets the "project" edge to the Project entity.
func (ptc *ProjectTranslationCreate) SetProject(p *Project) *ProjectTranslationCreate {
	return ptc.SetProjectID(p.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (ptc *ProjectTranslationCreate) SetLanguageID(id string) *ProjectTranslationCreate {
	ptc.mutation.SetLanguageID(id)
	return ptc
}

// SetLanguage sets the "language" edge to the Language entity.
func (ptc *ProjectTranslationCreate) SetLanguage(l *Language) *ProjectTranslationCreate {
	return ptc.SetLanguageID(l.ID)
}

// Mutation returns the ProjectTranslationMutation object of the builder.
func (ptc *ProjectTranslationCreate) Mutation() *ProjectTranslationMutation {
	return ptc.mutation
}

// Save creates the ProjectTranslation in the database.
func (ptc *ProjectTranslationCreate) Save(ctx context.Context) (*ProjectTranslation, error) {
	ptc.defaults()
	return withHooks(ctx, ptc.sqlSave, ptc.mutation, ptc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ptc *ProjectTranslationCreate) SaveX(ctx context.Context) *ProjectTranslation {
	v, err := ptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptc *ProjectTranslationCreate) Exec(ctx context.Context) error {
	_, err := ptc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptc *ProjectTranslationCreate) ExecX(ctx context.Context) {
	if err := ptc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptc *ProjectTranslationCreate) defaults() {
	if _, ok := ptc.mutation.CreatedAt(); !ok {
		v := projecttranslation.DefaultCreatedAt()
		ptc.mutation.SetCreatedAt(v)
	}
	if _, ok := ptc.mutation.ID(); !ok {
		v := projecttranslation.DefaultID()
		ptc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptc *ProjectTranslationCreate) check() error {
	if _, ok := ptc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`ent: missing required field "ProjectTranslation.project_id"`)}
	}
	if _, ok := ptc.mutation.LanguageCode(); !ok {
		return &ValidationError{Name: "language_code", err: errors.New(`ent: missing required field "ProjectTranslation.language_code"`)}
	}
	if v, ok := ptc.mutation.LanguageCode(); ok {
		if err := projecttranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "ProjectTranslation.language_code": %w`, err)}
		}
	}
	if _, ok := ptc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "ProjectTranslation.title"`)}
	}
	if v, ok := ptc.mutation.Title(); ok {
		if err := projecttranslation.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "ProjectTranslation.title": %w`, err)}
		}
	}
	if v, ok := ptc.mutation.ProjectType(); ok {
		if err := projecttranslation.ProjectTypeValidator(v); err != nil {
			return &ValidationError{Name: "project_type", err: fmt.Errorf(`ent: validator failed for field "ProjectTranslation.project_type": %w`, err)}
		}
	}
	if _, ok := ptc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProjectTranslation.created_at"`)}
	}
	if len(ptc.mutation.ProjectIDs()) == 0 {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "ProjectTranslation.project"`)}
	}
	if len(ptc.mutation.LanguageIDs()) == 0 {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required edge "ProjectTranslation.language"`)}
	}
	return nil
}

func (ptc *ProjectTranslationCreate) sqlSave(ctx context.Context) (*ProjectTranslation, error) {
	if err := ptc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ptc.mutation.id = &_node.ID
	ptc.mutation.done = true
	return _node, nil
}

func (ptc *ProjectTranslationCreate) createSpec() (*ProjectTranslation, *sqlgraph.CreateSpec) {
	var (
		_node = &ProjectTranslation{config: ptc.config}
		_spec = sqlgraph.NewCreateSpec(projecttranslation.Table, sqlgraph.NewFieldSpec(projecttranslation.FieldID, field.TypeUUID))
	)
	if id, ok := ptc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ptc.mutation.Title(); ok {
		_spec.SetField(projecttranslation.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ptc.mutation.Description(); ok {
		_spec.SetField(projecttranslation.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ptc.mutation.ProjectType(); ok {
		_spec.SetField(projecttranslation.FieldProjectType, field.TypeString, value)
		_node.ProjectType = value
	}
	if value, ok := ptc.mutation.CreatedAt(); ok {
		_spec.SetField(projecttranslation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := ptc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projecttranslation.ProjectTable,
			Columns: []string{projecttranslation.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ptc.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projecttranslation.LanguageTable,
			Columns: []string{projecttranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LanguageCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProjectTranslationCreateBulk is the builder for creating many ProjectTranslation entities in bulk.
type ProjectTranslationCreateBulk struct {
	config
	err      error
	builders []*ProjectTranslationCreate
}

// Save creates the ProjectTranslation entities in the database.
func (ptcb *ProjectTranslationCreateBulk) Save(ctx context.Context) ([]*ProjectTranslation, error) {
	if ptcb.err != nil {
		return nil, ptcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ptcb.builders))
	nodes := make([]*ProjectTranslation, len(ptcb.builders))
	mutators := make([]Mutator, len(ptcb.builders))
	for i := range ptcb.builders {
		func(i int, root context.Context) {
			builder := ptcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectTranslationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptcb *ProjectTranslationCreateBulk) SaveX(ctx context.Context) []*ProjectTranslation {
	v, err := ptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptcb *ProjectTranslationCreateBulk) Exec(ctx context.Context) error {
	_, err := ptcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptcb *ProjectTranslationCreateBulk) ExecX(ctx context.Context) {
	if err := ptcb.Exec(ctx); err != nil {
		panic(err)
	}
}
