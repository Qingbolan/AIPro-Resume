// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/blogpost"
	"silan-backend/internal/ent/blogtag"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BlogTagCreate is the builder for creating a BlogTag entity.
type BlogTagCreate struct {
	config
	mutation *BlogTagMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (btc *BlogTagCreate) SetName(s string) *BlogTagCreate {
	btc.mutation.SetName(s)
	return btc
}

// SetSlug sets the "slug" field.
func (btc *BlogTagCreate) SetSlug(s string) *BlogTagCreate {
	btc.mutation.SetSlug(s)
	return btc
}

// SetUsageCount sets the "usage_count" field.
func (btc *BlogTagCreate) SetUsageCount(i int) *BlogTagCreate {
	btc.mutation.SetUsageCount(i)
	return btc
}

// SetNillableUsageCount sets the "usage_count" field if the given value is not nil.
func (btc *BlogTagCreate) SetNillableUsageCount(i *int) *BlogTagCreate {
	if i != nil {
		btc.SetUsageCount(*i)
	}
	return btc
}

// SetCreatedAt sets the "created_at" field.
func (btc *BlogTagCreate) SetCreatedAt(t time.Time) *BlogTagCreate {
	btc.mutation.SetCreatedAt(t)
	return btc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (btc *BlogTagCreate) SetNillableCreatedAt(t *time.Time) *BlogTagCreate {
	if t != nil {
		btc.SetCreatedAt(*t)
	}
	return btc
}

// SetID sets the "id" field.
func (btc *BlogTagCreate) SetID(u uuid.UUID) *BlogTagCreate {
	btc.mutation.SetID(u)
	return btc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (btc *BlogTagCreate) SetNillableID(u *uuid.UUID) *BlogTagCreate {
	if u != nil {
		btc.SetID(*u)
	}
	return btc
}

// AddBlogPostIDs adds the "blog_posts" edge to the BlogPost entity by IDs.
func (btc *BlogTagCreate) AddBlogPostIDs(ids ...uuid.UUID) *BlogTagCreate {
	btc.mutation.AddBlogPostIDs(ids...)
	return btc
}

// AddBlogPosts adds the "blog_posts" edges to the BlogPost entity.
func (btc *BlogTagCreate) AddBlogPosts(b ...*BlogPost) *BlogTagCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return btc.AddBlogPostIDs(ids...)
}

// Mutation returns the BlogTagMutation object of the builder.
func (btc *BlogTagCreate) Mutation() *BlogTagMutation {
	return btc.mutation
}

// Save creates the BlogTag in the database.
func (btc *BlogTagCreate) Save(ctx context.Context) (*BlogTag, error) {
	btc.defaults()
	return withHooks(ctx, btc.sqlSave, btc.mutation, btc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (btc *BlogTagCreate) SaveX(ctx context.Context) *BlogTag {
	v, err := btc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (btc *BlogTagCreate) Exec(ctx context.Context) error {
	_, err := btc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (btc *BlogTagCreate) ExecX(ctx context.Context) {
	if err := btc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (btc *BlogTagCreate) defaults() {
	if _, ok := btc.mutation.UsageCount(); !ok {
		v := blogtag.DefaultUsageCount
		btc.mutation.SetUsageCount(v)
	}
	if _, ok := btc.mutation.CreatedAt(); !ok {
		v := blogtag.DefaultCreatedAt()
		btc.mutation.SetCreatedAt(v)
	}
	if _, ok := btc.mutation.ID(); !ok {
		v := blogtag.DefaultID()
		btc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (btc *BlogTagCreate) check() error {
	if _, ok := btc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "BlogTag.name"`)}
	}
	if v, ok := btc.mutation.Name(); ok {
		if err := blogtag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "BlogTag.name": %w`, err)}
		}
	}
	if _, ok := btc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "BlogTag.slug"`)}
	}
	if v, ok := btc.mutation.Slug(); ok {
		if err := blogtag.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "BlogTag.slug": %w`, err)}
		}
	}
	if _, ok := btc.mutation.UsageCount(); !ok {
		return &ValidationError{Name: "usage_count", err: errors.New(`ent: missing required field "BlogTag.usage_count"`)}
	}
	if _, ok := btc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlogTag.created_at"`)}
	}
	return nil
}

func (btc *BlogTagCreate) sqlSave(ctx context.Context) (*BlogTag, error) {
	if err := btc.check(); err != nil {
		return nil, err
	}
	_node, _spec := btc.createSpec()
	if err := sqlgraph.CreateNode(ctx, btc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	btc.mutation.id = &_node.ID
	btc.mutation.done = true
	return _node, nil
}

func (btc *BlogTagCreate) createSpec() (*BlogTag, *sqlgraph.CreateSpec) {
	var (
		_node = &BlogTag{config: btc.config}
		_spec = sqlgraph.NewCreateSpec(blogtag.Table, sqlgraph.NewFieldSpec(blogtag.FieldID, field.TypeUUID))
	)
	if id, ok := btc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := btc.mutation.Name(); ok {
		_spec.SetField(blogtag.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := btc.mutation.Slug(); ok {
		_spec.SetField(blogtag.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := btc.mutation.UsageCount(); ok {
		_spec.SetField(blogtag.FieldUsageCount, field.TypeInt, value)
		_node.UsageCount = value
	}
	if value, ok := btc.mutation.CreatedAt(); ok {
		_spec.SetField(blogtag.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := btc.mutation.BlogPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   blogtag.BlogPostsTable,
			Columns: blogtag.BlogPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &BlogPostTagCreate{config: btc.config, mutation: newBlogPostTagMutation(btc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BlogTagCreateBulk is the builder for creating many BlogTag entities in bulk.
type BlogTagCreateBulk struct {
	config
	err      error
	builders []*BlogTagCreate
}

// Save creates the BlogTag entities in the database.
func (btcb *BlogTagCreateBulk) Save(ctx context.Context) ([]*BlogTag, error) {
	if btcb.err != nil {
		return nil, btcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(btcb.builders))
	nodes := make([]*BlogTag, len(btcb.builders))
	mutators := make([]Mutator, len(btcb.builders))
	for i := range btcb.builders {
		func(i int, root context.Context) {
			builder := btcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlogTagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, btcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, btcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, btcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (btcb *BlogTagCreateBulk) SaveX(ctx context.Context) []*BlogTag {
	v, err := btcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (btcb *BlogTagCreateBulk) Exec(ctx context.Context) error {
	_, err := btcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (btcb *BlogTagCreateBulk) ExecX(ctx context.Context) {
	if err := btcb.Exec(ctx); err != nil {
		panic(err)
	}
}
