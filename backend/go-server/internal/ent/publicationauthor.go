// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/publication"
	"silan-backend/internal/ent/publicationauthor"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// PublicationAuthor is the model entity for the PublicationAuthor schema.
type PublicationAuthor struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// PublicationID holds the value of the "publication_id" field.
	PublicationID uuid.UUID `json:"publication_id,omitempty"`
	// AuthorName holds the value of the "author_name" field.
	AuthorName string `json:"author_name,omitempty"`
	// AuthorOrder holds the value of the "author_order" field.
	AuthorOrder int `json:"author_order,omitempty"`
	// IsCorresponding holds the value of the "is_corresponding" field.
	IsCorresponding bool `json:"is_corresponding,omitempty"`
	// Affiliation holds the value of the "affiliation" field.
	Affiliation string `json:"affiliation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PublicationAuthorQuery when eager-loading is set.
	Edges        PublicationAuthorEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PublicationAuthorEdges holds the relations/edges for other nodes in the graph.
type PublicationAuthorEdges struct {
	// Publication holds the value of the publication edge.
	Publication *Publication `json:"publication,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PublicationOrErr returns the Publication value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PublicationAuthorEdges) PublicationOrErr() (*Publication, error) {
	if e.Publication != nil {
		return e.Publication, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: publication.Label}
	}
	return nil, &NotLoadedError{edge: "publication"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PublicationAuthor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case publicationauthor.FieldIsCorresponding:
			values[i] = new(sql.NullBool)
		case publicationauthor.FieldAuthorOrder:
			values[i] = new(sql.NullInt64)
		case publicationauthor.FieldAuthorName, publicationauthor.FieldAffiliation:
			values[i] = new(sql.NullString)
		case publicationauthor.FieldCreatedAt, publicationauthor.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case publicationauthor.FieldID, publicationauthor.FieldPublicationID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PublicationAuthor fields.
func (pa *PublicationAuthor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case publicationauthor.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pa.ID = *value
			}
		case publicationauthor.FieldPublicationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field publication_id", values[i])
			} else if value != nil {
				pa.PublicationID = *value
			}
		case publicationauthor.FieldAuthorName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author_name", values[i])
			} else if value.Valid {
				pa.AuthorName = value.String
			}
		case publicationauthor.FieldAuthorOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field author_order", values[i])
			} else if value.Valid {
				pa.AuthorOrder = int(value.Int64)
			}
		case publicationauthor.FieldIsCorresponding:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_corresponding", values[i])
			} else if value.Valid {
				pa.IsCorresponding = value.Bool
			}
		case publicationauthor.FieldAffiliation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field affiliation", values[i])
			} else if value.Valid {
				pa.Affiliation = value.String
			}
		case publicationauthor.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pa.CreatedAt = value.Time
			}
		case publicationauthor.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pa.UpdatedAt = value.Time
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PublicationAuthor.
// This includes values selected through modifiers, order, etc.
func (pa *PublicationAuthor) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryPublication queries the "publication" edge of the PublicationAuthor entity.
func (pa *PublicationAuthor) QueryPublication() *PublicationQuery {
	return NewPublicationAuthorClient(pa.config).QueryPublication(pa)
}

// Update returns a builder for updating this PublicationAuthor.
// Note that you need to call PublicationAuthor.Unwrap() before calling this method if this PublicationAuthor
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *PublicationAuthor) Update() *PublicationAuthorUpdateOne {
	return NewPublicationAuthorClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the PublicationAuthor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *PublicationAuthor) Unwrap() *PublicationAuthor {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: PublicationAuthor is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *PublicationAuthor) String() string {
	var builder strings.Builder
	builder.WriteString("PublicationAuthor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("publication_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.PublicationID))
	builder.WriteString(", ")
	builder.WriteString("author_name=")
	builder.WriteString(pa.AuthorName)
	builder.WriteString(", ")
	builder.WriteString("author_order=")
	builder.WriteString(fmt.Sprintf("%v", pa.AuthorOrder))
	builder.WriteString(", ")
	builder.WriteString("is_corresponding=")
	builder.WriteString(fmt.Sprintf("%v", pa.IsCorresponding))
	builder.WriteString(", ")
	builder.WriteString("affiliation=")
	builder.WriteString(pa.Affiliation)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pa.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PublicationAuthors is a parsable slice of PublicationAuthor.
type PublicationAuthors []*PublicationAuthor
