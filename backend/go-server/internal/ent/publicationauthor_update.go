// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/publication"
	"silan-backend/internal/ent/publicationauthor"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PublicationAuthorUpdate is the builder for updating PublicationAuthor entities.
type PublicationAuthorUpdate struct {
	config
	hooks    []Hook
	mutation *PublicationAuthorMutation
}

// Where appends a list predicates to the PublicationAuthorUpdate builder.
func (pau *PublicationAuthorUpdate) Where(ps ...predicate.PublicationAuthor) *PublicationAuthorUpdate {
	pau.mutation.Where(ps...)
	return pau
}

// SetPublicationID sets the "publication_id" field.
func (pau *PublicationAuthorUpdate) SetPublicationID(u uuid.UUID) *PublicationAuthorUpdate {
	pau.mutation.SetPublicationID(u)
	return pau
}

// SetNillablePublicationID sets the "publication_id" field if the given value is not nil.
func (pau *PublicationAuthorUpdate) SetNillablePublicationID(u *uuid.UUID) *PublicationAuthorUpdate {
	if u != nil {
		pau.SetPublicationID(*u)
	}
	return pau
}

// SetAuthorName sets the "author_name" field.
func (pau *PublicationAuthorUpdate) SetAuthorName(s string) *PublicationAuthorUpdate {
	pau.mutation.SetAuthorName(s)
	return pau
}

// SetNillableAuthorName sets the "author_name" field if the given value is not nil.
func (pau *PublicationAuthorUpdate) SetNillableAuthorName(s *string) *PublicationAuthorUpdate {
	if s != nil {
		pau.SetAuthorName(*s)
	}
	return pau
}

// SetAuthorOrder sets the "author_order" field.
func (pau *PublicationAuthorUpdate) SetAuthorOrder(i int) *PublicationAuthorUpdate {
	pau.mutation.ResetAuthorOrder()
	pau.mutation.SetAuthorOrder(i)
	return pau
}

// SetNillableAuthorOrder sets the "author_order" field if the given value is not nil.
func (pau *PublicationAuthorUpdate) SetNillableAuthorOrder(i *int) *PublicationAuthorUpdate {
	if i != nil {
		pau.SetAuthorOrder(*i)
	}
	return pau
}

// AddAuthorOrder adds i to the "author_order" field.
func (pau *PublicationAuthorUpdate) AddAuthorOrder(i int) *PublicationAuthorUpdate {
	pau.mutation.AddAuthorOrder(i)
	return pau
}

// SetIsCorresponding sets the "is_corresponding" field.
func (pau *PublicationAuthorUpdate) SetIsCorresponding(b bool) *PublicationAuthorUpdate {
	pau.mutation.SetIsCorresponding(b)
	return pau
}

// SetNillableIsCorresponding sets the "is_corresponding" field if the given value is not nil.
func (pau *PublicationAuthorUpdate) SetNillableIsCorresponding(b *bool) *PublicationAuthorUpdate {
	if b != nil {
		pau.SetIsCorresponding(*b)
	}
	return pau
}

// SetAffiliation sets the "affiliation" field.
func (pau *PublicationAuthorUpdate) SetAffiliation(s string) *PublicationAuthorUpdate {
	pau.mutation.SetAffiliation(s)
	return pau
}

// SetNillableAffiliation sets the "affiliation" field if the given value is not nil.
func (pau *PublicationAuthorUpdate) SetNillableAffiliation(s *string) *PublicationAuthorUpdate {
	if s != nil {
		pau.SetAffiliation(*s)
	}
	return pau
}

// ClearAffiliation clears the value of the "affiliation" field.
func (pau *PublicationAuthorUpdate) ClearAffiliation() *PublicationAuthorUpdate {
	pau.mutation.ClearAffiliation()
	return pau
}

// SetUpdatedAt sets the "updated_at" field.
func (pau *PublicationAuthorUpdate) SetUpdatedAt(t time.Time) *PublicationAuthorUpdate {
	pau.mutation.SetUpdatedAt(t)
	return pau
}

// SetPublication sets the "publication" edge to the Publication entity.
func (pau *PublicationAuthorUpdate) SetPublication(p *Publication) *PublicationAuthorUpdate {
	return pau.SetPublicationID(p.ID)
}

// Mutation returns the PublicationAuthorMutation object of the builder.
func (pau *PublicationAuthorUpdate) Mutation() *PublicationAuthorMutation {
	return pau.mutation
}

// ClearPublication clears the "publication" edge to the Publication entity.
func (pau *PublicationAuthorUpdate) ClearPublication() *PublicationAuthorUpdate {
	pau.mutation.ClearPublication()
	return pau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pau *PublicationAuthorUpdate) Save(ctx context.Context) (int, error) {
	pau.defaults()
	return withHooks(ctx, pau.sqlSave, pau.mutation, pau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pau *PublicationAuthorUpdate) SaveX(ctx context.Context) int {
	affected, err := pau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pau *PublicationAuthorUpdate) Exec(ctx context.Context) error {
	_, err := pau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pau *PublicationAuthorUpdate) ExecX(ctx context.Context) {
	if err := pau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pau *PublicationAuthorUpdate) defaults() {
	if _, ok := pau.mutation.UpdatedAt(); !ok {
		v := publicationauthor.UpdateDefaultUpdatedAt()
		pau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pau *PublicationAuthorUpdate) check() error {
	if v, ok := pau.mutation.AuthorName(); ok {
		if err := publicationauthor.AuthorNameValidator(v); err != nil {
			return &ValidationError{Name: "author_name", err: fmt.Errorf(`ent: validator failed for field "PublicationAuthor.author_name": %w`, err)}
		}
	}
	if v, ok := pau.mutation.Affiliation(); ok {
		if err := publicationauthor.AffiliationValidator(v); err != nil {
			return &ValidationError{Name: "affiliation", err: fmt.Errorf(`ent: validator failed for field "PublicationAuthor.affiliation": %w`, err)}
		}
	}
	if pau.mutation.PublicationCleared() && len(pau.mutation.PublicationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PublicationAuthor.publication"`)
	}
	return nil
}

func (pau *PublicationAuthorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(publicationauthor.Table, publicationauthor.Columns, sqlgraph.NewFieldSpec(publicationauthor.FieldID, field.TypeUUID))
	if ps := pau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pau.mutation.AuthorName(); ok {
		_spec.SetField(publicationauthor.FieldAuthorName, field.TypeString, value)
	}
	if value, ok := pau.mutation.AuthorOrder(); ok {
		_spec.SetField(publicationauthor.FieldAuthorOrder, field.TypeInt, value)
	}
	if value, ok := pau.mutation.AddedAuthorOrder(); ok {
		_spec.AddField(publicationauthor.FieldAuthorOrder, field.TypeInt, value)
	}
	if value, ok := pau.mutation.IsCorresponding(); ok {
		_spec.SetField(publicationauthor.FieldIsCorresponding, field.TypeBool, value)
	}
	if value, ok := pau.mutation.Affiliation(); ok {
		_spec.SetField(publicationauthor.FieldAffiliation, field.TypeString, value)
	}
	if pau.mutation.AffiliationCleared() {
		_spec.ClearField(publicationauthor.FieldAffiliation, field.TypeString)
	}
	if value, ok := pau.mutation.UpdatedAt(); ok {
		_spec.SetField(publicationauthor.FieldUpdatedAt, field.TypeTime, value)
	}
	if pau.mutation.PublicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   publicationauthor.PublicationTable,
			Columns: []string{publicationauthor.PublicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pau.mutation.PublicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   publicationauthor.PublicationTable,
			Columns: []string{publicationauthor.PublicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publicationauthor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pau.mutation.done = true
	return n, nil
}

// PublicationAuthorUpdateOne is the builder for updating a single PublicationAuthor entity.
type PublicationAuthorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PublicationAuthorMutation
}

// SetPublicationID sets the "publication_id" field.
func (pauo *PublicationAuthorUpdateOne) SetPublicationID(u uuid.UUID) *PublicationAuthorUpdateOne {
	pauo.mutation.SetPublicationID(u)
	return pauo
}

// SetNillablePublicationID sets the "publication_id" field if the given value is not nil.
func (pauo *PublicationAuthorUpdateOne) SetNillablePublicationID(u *uuid.UUID) *PublicationAuthorUpdateOne {
	if u != nil {
		pauo.SetPublicationID(*u)
	}
	return pauo
}

// SetAuthorName sets the "author_name" field.
func (pauo *PublicationAuthorUpdateOne) SetAuthorName(s string) *PublicationAuthorUpdateOne {
	pauo.mutation.SetAuthorName(s)
	return pauo
}

// SetNillableAuthorName sets the "author_name" field if the given value is not nil.
func (pauo *PublicationAuthorUpdateOne) SetNillableAuthorName(s *string) *PublicationAuthorUpdateOne {
	if s != nil {
		pauo.SetAuthorName(*s)
	}
	return pauo
}

// SetAuthorOrder sets the "author_order" field.
func (pauo *PublicationAuthorUpdateOne) SetAuthorOrder(i int) *PublicationAuthorUpdateOne {
	pauo.mutation.ResetAuthorOrder()
	pauo.mutation.SetAuthorOrder(i)
	return pauo
}

// SetNillableAuthorOrder sets the "author_order" field if the given value is not nil.
func (pauo *PublicationAuthorUpdateOne) SetNillableAuthorOrder(i *int) *PublicationAuthorUpdateOne {
	if i != nil {
		pauo.SetAuthorOrder(*i)
	}
	return pauo
}

// AddAuthorOrder adds i to the "author_order" field.
func (pauo *PublicationAuthorUpdateOne) AddAuthorOrder(i int) *PublicationAuthorUpdateOne {
	pauo.mutation.AddAuthorOrder(i)
	return pauo
}

// SetIsCorresponding sets the "is_corresponding" field.
func (pauo *PublicationAuthorUpdateOne) SetIsCorresponding(b bool) *PublicationAuthorUpdateOne {
	pauo.mutation.SetIsCorresponding(b)
	return pauo
}

// SetNillableIsCorresponding sets the "is_corresponding" field if the given value is not nil.
func (pauo *PublicationAuthorUpdateOne) SetNillableIsCorresponding(b *bool) *PublicationAuthorUpdateOne {
	if b != nil {
		pauo.SetIsCorresponding(*b)
	}
	return pauo
}

// SetAffiliation sets the "affiliation" field.
func (pauo *PublicationAuthorUpdateOne) SetAffiliation(s string) *PublicationAuthorUpdateOne {
	pauo.mutation.SetAffiliation(s)
	return pauo
}

// SetNillableAffiliation sets the "affiliation" field if the given value is not nil.
func (pauo *PublicationAuthorUpdateOne) SetNillableAffiliation(s *string) *PublicationAuthorUpdateOne {
	if s != nil {
		pauo.SetAffiliation(*s)
	}
	return pauo
}

// ClearAffiliation clears the value of the "affiliation" field.
func (pauo *PublicationAuthorUpdateOne) ClearAffiliation() *PublicationAuthorUpdateOne {
	pauo.mutation.ClearAffiliation()
	return pauo
}

// SetUpdatedAt sets the "updated_at" field.
func (pauo *PublicationAuthorUpdateOne) SetUpdatedAt(t time.Time) *PublicationAuthorUpdateOne {
	pauo.mutation.SetUpdatedAt(t)
	return pauo
}

// SetPublication sets the "publication" edge to the Publication entity.
func (pauo *PublicationAuthorUpdateOne) SetPublication(p *Publication) *PublicationAuthorUpdateOne {
	return pauo.SetPublicationID(p.ID)
}

// Mutation returns the PublicationAuthorMutation object of the builder.
func (pauo *PublicationAuthorUpdateOne) Mutation() *PublicationAuthorMutation {
	return pauo.mutation
}

// ClearPublication clears the "publication" edge to the Publication entity.
func (pauo *PublicationAuthorUpdateOne) ClearPublication() *PublicationAuthorUpdateOne {
	pauo.mutation.ClearPublication()
	return pauo
}

// Where appends a list predicates to the PublicationAuthorUpdate builder.
func (pauo *PublicationAuthorUpdateOne) Where(ps ...predicate.PublicationAuthor) *PublicationAuthorUpdateOne {
	pauo.mutation.Where(ps...)
	return pauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pauo *PublicationAuthorUpdateOne) Select(field string, fields ...string) *PublicationAuthorUpdateOne {
	pauo.fields = append([]string{field}, fields...)
	return pauo
}

// Save executes the query and returns the updated PublicationAuthor entity.
func (pauo *PublicationAuthorUpdateOne) Save(ctx context.Context) (*PublicationAuthor, error) {
	pauo.defaults()
	return withHooks(ctx, pauo.sqlSave, pauo.mutation, pauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pauo *PublicationAuthorUpdateOne) SaveX(ctx context.Context) *PublicationAuthor {
	node, err := pauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pauo *PublicationAuthorUpdateOne) Exec(ctx context.Context) error {
	_, err := pauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pauo *PublicationAuthorUpdateOne) ExecX(ctx context.Context) {
	if err := pauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pauo *PublicationAuthorUpdateOne) defaults() {
	if _, ok := pauo.mutation.UpdatedAt(); !ok {
		v := publicationauthor.UpdateDefaultUpdatedAt()
		pauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pauo *PublicationAuthorUpdateOne) check() error {
	if v, ok := pauo.mutation.AuthorName(); ok {
		if err := publicationauthor.AuthorNameValidator(v); err != nil {
			return &ValidationError{Name: "author_name", err: fmt.Errorf(`ent: validator failed for field "PublicationAuthor.author_name": %w`, err)}
		}
	}
	if v, ok := pauo.mutation.Affiliation(); ok {
		if err := publicationauthor.AffiliationValidator(v); err != nil {
			return &ValidationError{Name: "affiliation", err: fmt.Errorf(`ent: validator failed for field "PublicationAuthor.affiliation": %w`, err)}
		}
	}
	if pauo.mutation.PublicationCleared() && len(pauo.mutation.PublicationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PublicationAuthor.publication"`)
	}
	return nil
}

func (pauo *PublicationAuthorUpdateOne) sqlSave(ctx context.Context) (_node *PublicationAuthor, err error) {
	if err := pauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(publicationauthor.Table, publicationauthor.Columns, sqlgraph.NewFieldSpec(publicationauthor.FieldID, field.TypeUUID))
	id, ok := pauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PublicationAuthor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, publicationauthor.FieldID)
		for _, f := range fields {
			if !publicationauthor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != publicationauthor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pauo.mutation.AuthorName(); ok {
		_spec.SetField(publicationauthor.FieldAuthorName, field.TypeString, value)
	}
	if value, ok := pauo.mutation.AuthorOrder(); ok {
		_spec.SetField(publicationauthor.FieldAuthorOrder, field.TypeInt, value)
	}
	if value, ok := pauo.mutation.AddedAuthorOrder(); ok {
		_spec.AddField(publicationauthor.FieldAuthorOrder, field.TypeInt, value)
	}
	if value, ok := pauo.mutation.IsCorresponding(); ok {
		_spec.SetField(publicationauthor.FieldIsCorresponding, field.TypeBool, value)
	}
	if value, ok := pauo.mutation.Affiliation(); ok {
		_spec.SetField(publicationauthor.FieldAffiliation, field.TypeString, value)
	}
	if pauo.mutation.AffiliationCleared() {
		_spec.ClearField(publicationauthor.FieldAffiliation, field.TypeString)
	}
	if value, ok := pauo.mutation.UpdatedAt(); ok {
		_spec.SetField(publicationauthor.FieldUpdatedAt, field.TypeTime, value)
	}
	if pauo.mutation.PublicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   publicationauthor.PublicationTable,
			Columns: []string{publicationauthor.PublicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pauo.mutation.PublicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   publicationauthor.PublicationTable,
			Columns: []string{publicationauthor.PublicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PublicationAuthor{config: pauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publicationauthor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pauo.mutation.done = true
	return _node, nil
}
