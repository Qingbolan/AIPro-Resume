// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/blogpost"
	"silan-backend/internal/ent/blogseries"
	"silan-backend/internal/ent/blogseriestranslation"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BlogSeriesCreate is the builder for creating a BlogSeries entity.
type BlogSeriesCreate struct {
	config
	mutation *BlogSeriesMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (bsc *BlogSeriesCreate) SetTitle(s string) *BlogSeriesCreate {
	bsc.mutation.SetTitle(s)
	return bsc
}

// SetSlug sets the "slug" field.
func (bsc *BlogSeriesCreate) SetSlug(s string) *BlogSeriesCreate {
	bsc.mutation.SetSlug(s)
	return bsc
}

// SetDescription sets the "description" field.
func (bsc *BlogSeriesCreate) SetDescription(s string) *BlogSeriesCreate {
	bsc.mutation.SetDescription(s)
	return bsc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bsc *BlogSeriesCreate) SetNillableDescription(s *string) *BlogSeriesCreate {
	if s != nil {
		bsc.SetDescription(*s)
	}
	return bsc
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (bsc *BlogSeriesCreate) SetThumbnailURL(s string) *BlogSeriesCreate {
	bsc.mutation.SetThumbnailURL(s)
	return bsc
}

// SetNillableThumbnailURL sets the "thumbnail_url" field if the given value is not nil.
func (bsc *BlogSeriesCreate) SetNillableThumbnailURL(s *string) *BlogSeriesCreate {
	if s != nil {
		bsc.SetThumbnailURL(*s)
	}
	return bsc
}

// SetStatus sets the "status" field.
func (bsc *BlogSeriesCreate) SetStatus(s string) *BlogSeriesCreate {
	bsc.mutation.SetStatus(s)
	return bsc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bsc *BlogSeriesCreate) SetNillableStatus(s *string) *BlogSeriesCreate {
	if s != nil {
		bsc.SetStatus(*s)
	}
	return bsc
}

// SetEpisodeCount sets the "episode_count" field.
func (bsc *BlogSeriesCreate) SetEpisodeCount(i int) *BlogSeriesCreate {
	bsc.mutation.SetEpisodeCount(i)
	return bsc
}

// SetNillableEpisodeCount sets the "episode_count" field if the given value is not nil.
func (bsc *BlogSeriesCreate) SetNillableEpisodeCount(i *int) *BlogSeriesCreate {
	if i != nil {
		bsc.SetEpisodeCount(*i)
	}
	return bsc
}

// SetCreatedAt sets the "created_at" field.
func (bsc *BlogSeriesCreate) SetCreatedAt(t time.Time) *BlogSeriesCreate {
	bsc.mutation.SetCreatedAt(t)
	return bsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bsc *BlogSeriesCreate) SetNillableCreatedAt(t *time.Time) *BlogSeriesCreate {
	if t != nil {
		bsc.SetCreatedAt(*t)
	}
	return bsc
}

// SetUpdatedAt sets the "updated_at" field.
func (bsc *BlogSeriesCreate) SetUpdatedAt(t time.Time) *BlogSeriesCreate {
	bsc.mutation.SetUpdatedAt(t)
	return bsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bsc *BlogSeriesCreate) SetNillableUpdatedAt(t *time.Time) *BlogSeriesCreate {
	if t != nil {
		bsc.SetUpdatedAt(*t)
	}
	return bsc
}

// SetID sets the "id" field.
func (bsc *BlogSeriesCreate) SetID(u uuid.UUID) *BlogSeriesCreate {
	bsc.mutation.SetID(u)
	return bsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bsc *BlogSeriesCreate) SetNillableID(u *uuid.UUID) *BlogSeriesCreate {
	if u != nil {
		bsc.SetID(*u)
	}
	return bsc
}

// AddBlogPostIDs adds the "blog_posts" edge to the BlogPost entity by IDs.
func (bsc *BlogSeriesCreate) AddBlogPostIDs(ids ...uuid.UUID) *BlogSeriesCreate {
	bsc.mutation.AddBlogPostIDs(ids...)
	return bsc
}

// AddBlogPosts adds the "blog_posts" edges to the BlogPost entity.
func (bsc *BlogSeriesCreate) AddBlogPosts(b ...*BlogPost) *BlogSeriesCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bsc.AddBlogPostIDs(ids...)
}

// AddTranslationIDs adds the "translations" edge to the BlogSeriesTranslation entity by IDs.
func (bsc *BlogSeriesCreate) AddTranslationIDs(ids ...uuid.UUID) *BlogSeriesCreate {
	bsc.mutation.AddTranslationIDs(ids...)
	return bsc
}

// AddTranslations adds the "translations" edges to the BlogSeriesTranslation entity.
func (bsc *BlogSeriesCreate) AddTranslations(b ...*BlogSeriesTranslation) *BlogSeriesCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bsc.AddTranslationIDs(ids...)
}

// Mutation returns the BlogSeriesMutation object of the builder.
func (bsc *BlogSeriesCreate) Mutation() *BlogSeriesMutation {
	return bsc.mutation
}

// Save creates the BlogSeries in the database.
func (bsc *BlogSeriesCreate) Save(ctx context.Context) (*BlogSeries, error) {
	bsc.defaults()
	return withHooks(ctx, bsc.sqlSave, bsc.mutation, bsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bsc *BlogSeriesCreate) SaveX(ctx context.Context) *BlogSeries {
	v, err := bsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bsc *BlogSeriesCreate) Exec(ctx context.Context) error {
	_, err := bsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsc *BlogSeriesCreate) ExecX(ctx context.Context) {
	if err := bsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bsc *BlogSeriesCreate) defaults() {
	if _, ok := bsc.mutation.Status(); !ok {
		v := blogseries.DefaultStatus
		bsc.mutation.SetStatus(v)
	}
	if _, ok := bsc.mutation.EpisodeCount(); !ok {
		v := blogseries.DefaultEpisodeCount
		bsc.mutation.SetEpisodeCount(v)
	}
	if _, ok := bsc.mutation.CreatedAt(); !ok {
		v := blogseries.DefaultCreatedAt()
		bsc.mutation.SetCreatedAt(v)
	}
	if _, ok := bsc.mutation.UpdatedAt(); !ok {
		v := blogseries.DefaultUpdatedAt()
		bsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bsc.mutation.ID(); !ok {
		v := blogseries.DefaultID()
		bsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bsc *BlogSeriesCreate) check() error {
	if _, ok := bsc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "BlogSeries.title"`)}
	}
	if v, ok := bsc.mutation.Title(); ok {
		if err := blogseries.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "BlogSeries.title": %w`, err)}
		}
	}
	if _, ok := bsc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "BlogSeries.slug"`)}
	}
	if v, ok := bsc.mutation.Slug(); ok {
		if err := blogseries.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "BlogSeries.slug": %w`, err)}
		}
	}
	if v, ok := bsc.mutation.ThumbnailURL(); ok {
		if err := blogseries.ThumbnailURLValidator(v); err != nil {
			return &ValidationError{Name: "thumbnail_url", err: fmt.Errorf(`ent: validator failed for field "BlogSeries.thumbnail_url": %w`, err)}
		}
	}
	if _, ok := bsc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "BlogSeries.status"`)}
	}
	if v, ok := bsc.mutation.Status(); ok {
		if err := blogseries.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "BlogSeries.status": %w`, err)}
		}
	}
	if _, ok := bsc.mutation.EpisodeCount(); !ok {
		return &ValidationError{Name: "episode_count", err: errors.New(`ent: missing required field "BlogSeries.episode_count"`)}
	}
	if _, ok := bsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlogSeries.created_at"`)}
	}
	if _, ok := bsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BlogSeries.updated_at"`)}
	}
	return nil
}

func (bsc *BlogSeriesCreate) sqlSave(ctx context.Context) (*BlogSeries, error) {
	if err := bsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bsc.mutation.id = &_node.ID
	bsc.mutation.done = true
	return _node, nil
}

func (bsc *BlogSeriesCreate) createSpec() (*BlogSeries, *sqlgraph.CreateSpec) {
	var (
		_node = &BlogSeries{config: bsc.config}
		_spec = sqlgraph.NewCreateSpec(blogseries.Table, sqlgraph.NewFieldSpec(blogseries.FieldID, field.TypeUUID))
	)
	if id, ok := bsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bsc.mutation.Title(); ok {
		_spec.SetField(blogseries.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := bsc.mutation.Slug(); ok {
		_spec.SetField(blogseries.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := bsc.mutation.Description(); ok {
		_spec.SetField(blogseries.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := bsc.mutation.ThumbnailURL(); ok {
		_spec.SetField(blogseries.FieldThumbnailURL, field.TypeString, value)
		_node.ThumbnailURL = value
	}
	if value, ok := bsc.mutation.Status(); ok {
		_spec.SetField(blogseries.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := bsc.mutation.EpisodeCount(); ok {
		_spec.SetField(blogseries.FieldEpisodeCount, field.TypeInt, value)
		_node.EpisodeCount = value
	}
	if value, ok := bsc.mutation.CreatedAt(); ok {
		_spec.SetField(blogseries.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bsc.mutation.UpdatedAt(); ok {
		_spec.SetField(blogseries.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := bsc.mutation.BlogPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogseries.BlogPostsTable,
			Columns: []string{blogseries.BlogPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bsc.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogseries.TranslationsTable,
			Columns: []string{blogseries.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogseriestranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BlogSeriesCreateBulk is the builder for creating many BlogSeries entities in bulk.
type BlogSeriesCreateBulk struct {
	config
	err      error
	builders []*BlogSeriesCreate
}

// Save creates the BlogSeries entities in the database.
func (bscb *BlogSeriesCreateBulk) Save(ctx context.Context) ([]*BlogSeries, error) {
	if bscb.err != nil {
		return nil, bscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bscb.builders))
	nodes := make([]*BlogSeries, len(bscb.builders))
	mutators := make([]Mutator, len(bscb.builders))
	for i := range bscb.builders {
		func(i int, root context.Context) {
			builder := bscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlogSeriesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bscb *BlogSeriesCreateBulk) SaveX(ctx context.Context) []*BlogSeries {
	v, err := bscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bscb *BlogSeriesCreateBulk) Exec(ctx context.Context) error {
	_, err := bscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bscb *BlogSeriesCreateBulk) ExecX(ctx context.Context) {
	if err := bscb.Exec(ctx); err != nil {
		panic(err)
	}
}
