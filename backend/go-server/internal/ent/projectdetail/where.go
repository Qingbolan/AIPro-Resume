// Code generated by ent, DO NOT EDIT.

package projectdetail

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldID, id))
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldProjectID, v))
}

// DetailedDescription applies equality check predicate on the "detailed_description" field. It's identical to DetailedDescriptionEQ.
func DetailedDescription(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldDetailedDescription, v))
}

// Goals applies equality check predicate on the "goals" field. It's identical to GoalsEQ.
func Goals(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldGoals, v))
}

// Challenges applies equality check predicate on the "challenges" field. It's identical to ChallengesEQ.
func Challenges(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldChallenges, v))
}

// Solutions applies equality check predicate on the "solutions" field. It's identical to SolutionsEQ.
func Solutions(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldSolutions, v))
}

// LessonsLearned applies equality check predicate on the "lessons_learned" field. It's identical to LessonsLearnedEQ.
func LessonsLearned(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldLessonsLearned, v))
}

// FutureEnhancements applies equality check predicate on the "future_enhancements" field. It's identical to FutureEnhancementsEQ.
func FutureEnhancements(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldFutureEnhancements, v))
}

// License applies equality check predicate on the "license" field. It's identical to LicenseEQ.
func License(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldLicense, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldVersion, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldProjectID, v))
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldProjectID, v))
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldProjectID, vs...))
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldProjectID, vs...))
}

// DetailedDescriptionEQ applies the EQ predicate on the "detailed_description" field.
func DetailedDescriptionEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldDetailedDescription, v))
}

// DetailedDescriptionNEQ applies the NEQ predicate on the "detailed_description" field.
func DetailedDescriptionNEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldDetailedDescription, v))
}

// DetailedDescriptionIn applies the In predicate on the "detailed_description" field.
func DetailedDescriptionIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldDetailedDescription, vs...))
}

// DetailedDescriptionNotIn applies the NotIn predicate on the "detailed_description" field.
func DetailedDescriptionNotIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldDetailedDescription, vs...))
}

// DetailedDescriptionGT applies the GT predicate on the "detailed_description" field.
func DetailedDescriptionGT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldDetailedDescription, v))
}

// DetailedDescriptionGTE applies the GTE predicate on the "detailed_description" field.
func DetailedDescriptionGTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldDetailedDescription, v))
}

// DetailedDescriptionLT applies the LT predicate on the "detailed_description" field.
func DetailedDescriptionLT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldDetailedDescription, v))
}

// DetailedDescriptionLTE applies the LTE predicate on the "detailed_description" field.
func DetailedDescriptionLTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldDetailedDescription, v))
}

// DetailedDescriptionContains applies the Contains predicate on the "detailed_description" field.
func DetailedDescriptionContains(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContains(FieldDetailedDescription, v))
}

// DetailedDescriptionHasPrefix applies the HasPrefix predicate on the "detailed_description" field.
func DetailedDescriptionHasPrefix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasPrefix(FieldDetailedDescription, v))
}

// DetailedDescriptionHasSuffix applies the HasSuffix predicate on the "detailed_description" field.
func DetailedDescriptionHasSuffix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasSuffix(FieldDetailedDescription, v))
}

// DetailedDescriptionIsNil applies the IsNil predicate on the "detailed_description" field.
func DetailedDescriptionIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldDetailedDescription))
}

// DetailedDescriptionNotNil applies the NotNil predicate on the "detailed_description" field.
func DetailedDescriptionNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldDetailedDescription))
}

// DetailedDescriptionEqualFold applies the EqualFold predicate on the "detailed_description" field.
func DetailedDescriptionEqualFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEqualFold(FieldDetailedDescription, v))
}

// DetailedDescriptionContainsFold applies the ContainsFold predicate on the "detailed_description" field.
func DetailedDescriptionContainsFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContainsFold(FieldDetailedDescription, v))
}

// GoalsEQ applies the EQ predicate on the "goals" field.
func GoalsEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldGoals, v))
}

// GoalsNEQ applies the NEQ predicate on the "goals" field.
func GoalsNEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldGoals, v))
}

// GoalsIn applies the In predicate on the "goals" field.
func GoalsIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldGoals, vs...))
}

// GoalsNotIn applies the NotIn predicate on the "goals" field.
func GoalsNotIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldGoals, vs...))
}

// GoalsGT applies the GT predicate on the "goals" field.
func GoalsGT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldGoals, v))
}

// GoalsGTE applies the GTE predicate on the "goals" field.
func GoalsGTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldGoals, v))
}

// GoalsLT applies the LT predicate on the "goals" field.
func GoalsLT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldGoals, v))
}

// GoalsLTE applies the LTE predicate on the "goals" field.
func GoalsLTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldGoals, v))
}

// GoalsContains applies the Contains predicate on the "goals" field.
func GoalsContains(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContains(FieldGoals, v))
}

// GoalsHasPrefix applies the HasPrefix predicate on the "goals" field.
func GoalsHasPrefix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasPrefix(FieldGoals, v))
}

// GoalsHasSuffix applies the HasSuffix predicate on the "goals" field.
func GoalsHasSuffix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasSuffix(FieldGoals, v))
}

// GoalsIsNil applies the IsNil predicate on the "goals" field.
func GoalsIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldGoals))
}

// GoalsNotNil applies the NotNil predicate on the "goals" field.
func GoalsNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldGoals))
}

// GoalsEqualFold applies the EqualFold predicate on the "goals" field.
func GoalsEqualFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEqualFold(FieldGoals, v))
}

// GoalsContainsFold applies the ContainsFold predicate on the "goals" field.
func GoalsContainsFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContainsFold(FieldGoals, v))
}

// ChallengesEQ applies the EQ predicate on the "challenges" field.
func ChallengesEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldChallenges, v))
}

// ChallengesNEQ applies the NEQ predicate on the "challenges" field.
func ChallengesNEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldChallenges, v))
}

// ChallengesIn applies the In predicate on the "challenges" field.
func ChallengesIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldChallenges, vs...))
}

// ChallengesNotIn applies the NotIn predicate on the "challenges" field.
func ChallengesNotIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldChallenges, vs...))
}

// ChallengesGT applies the GT predicate on the "challenges" field.
func ChallengesGT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldChallenges, v))
}

// ChallengesGTE applies the GTE predicate on the "challenges" field.
func ChallengesGTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldChallenges, v))
}

// ChallengesLT applies the LT predicate on the "challenges" field.
func ChallengesLT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldChallenges, v))
}

// ChallengesLTE applies the LTE predicate on the "challenges" field.
func ChallengesLTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldChallenges, v))
}

// ChallengesContains applies the Contains predicate on the "challenges" field.
func ChallengesContains(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContains(FieldChallenges, v))
}

// ChallengesHasPrefix applies the HasPrefix predicate on the "challenges" field.
func ChallengesHasPrefix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasPrefix(FieldChallenges, v))
}

// ChallengesHasSuffix applies the HasSuffix predicate on the "challenges" field.
func ChallengesHasSuffix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasSuffix(FieldChallenges, v))
}

// ChallengesIsNil applies the IsNil predicate on the "challenges" field.
func ChallengesIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldChallenges))
}

// ChallengesNotNil applies the NotNil predicate on the "challenges" field.
func ChallengesNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldChallenges))
}

// ChallengesEqualFold applies the EqualFold predicate on the "challenges" field.
func ChallengesEqualFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEqualFold(FieldChallenges, v))
}

// ChallengesContainsFold applies the ContainsFold predicate on the "challenges" field.
func ChallengesContainsFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContainsFold(FieldChallenges, v))
}

// SolutionsEQ applies the EQ predicate on the "solutions" field.
func SolutionsEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldSolutions, v))
}

// SolutionsNEQ applies the NEQ predicate on the "solutions" field.
func SolutionsNEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldSolutions, v))
}

// SolutionsIn applies the In predicate on the "solutions" field.
func SolutionsIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldSolutions, vs...))
}

// SolutionsNotIn applies the NotIn predicate on the "solutions" field.
func SolutionsNotIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldSolutions, vs...))
}

// SolutionsGT applies the GT predicate on the "solutions" field.
func SolutionsGT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldSolutions, v))
}

// SolutionsGTE applies the GTE predicate on the "solutions" field.
func SolutionsGTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldSolutions, v))
}

// SolutionsLT applies the LT predicate on the "solutions" field.
func SolutionsLT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldSolutions, v))
}

// SolutionsLTE applies the LTE predicate on the "solutions" field.
func SolutionsLTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldSolutions, v))
}

// SolutionsContains applies the Contains predicate on the "solutions" field.
func SolutionsContains(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContains(FieldSolutions, v))
}

// SolutionsHasPrefix applies the HasPrefix predicate on the "solutions" field.
func SolutionsHasPrefix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasPrefix(FieldSolutions, v))
}

// SolutionsHasSuffix applies the HasSuffix predicate on the "solutions" field.
func SolutionsHasSuffix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasSuffix(FieldSolutions, v))
}

// SolutionsIsNil applies the IsNil predicate on the "solutions" field.
func SolutionsIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldSolutions))
}

// SolutionsNotNil applies the NotNil predicate on the "solutions" field.
func SolutionsNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldSolutions))
}

// SolutionsEqualFold applies the EqualFold predicate on the "solutions" field.
func SolutionsEqualFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEqualFold(FieldSolutions, v))
}

// SolutionsContainsFold applies the ContainsFold predicate on the "solutions" field.
func SolutionsContainsFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContainsFold(FieldSolutions, v))
}

// LessonsLearnedEQ applies the EQ predicate on the "lessons_learned" field.
func LessonsLearnedEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldLessonsLearned, v))
}

// LessonsLearnedNEQ applies the NEQ predicate on the "lessons_learned" field.
func LessonsLearnedNEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldLessonsLearned, v))
}

// LessonsLearnedIn applies the In predicate on the "lessons_learned" field.
func LessonsLearnedIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldLessonsLearned, vs...))
}

// LessonsLearnedNotIn applies the NotIn predicate on the "lessons_learned" field.
func LessonsLearnedNotIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldLessonsLearned, vs...))
}

// LessonsLearnedGT applies the GT predicate on the "lessons_learned" field.
func LessonsLearnedGT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldLessonsLearned, v))
}

// LessonsLearnedGTE applies the GTE predicate on the "lessons_learned" field.
func LessonsLearnedGTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldLessonsLearned, v))
}

// LessonsLearnedLT applies the LT predicate on the "lessons_learned" field.
func LessonsLearnedLT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldLessonsLearned, v))
}

// LessonsLearnedLTE applies the LTE predicate on the "lessons_learned" field.
func LessonsLearnedLTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldLessonsLearned, v))
}

// LessonsLearnedContains applies the Contains predicate on the "lessons_learned" field.
func LessonsLearnedContains(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContains(FieldLessonsLearned, v))
}

// LessonsLearnedHasPrefix applies the HasPrefix predicate on the "lessons_learned" field.
func LessonsLearnedHasPrefix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasPrefix(FieldLessonsLearned, v))
}

// LessonsLearnedHasSuffix applies the HasSuffix predicate on the "lessons_learned" field.
func LessonsLearnedHasSuffix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasSuffix(FieldLessonsLearned, v))
}

// LessonsLearnedIsNil applies the IsNil predicate on the "lessons_learned" field.
func LessonsLearnedIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldLessonsLearned))
}

// LessonsLearnedNotNil applies the NotNil predicate on the "lessons_learned" field.
func LessonsLearnedNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldLessonsLearned))
}

// LessonsLearnedEqualFold applies the EqualFold predicate on the "lessons_learned" field.
func LessonsLearnedEqualFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEqualFold(FieldLessonsLearned, v))
}

// LessonsLearnedContainsFold applies the ContainsFold predicate on the "lessons_learned" field.
func LessonsLearnedContainsFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContainsFold(FieldLessonsLearned, v))
}

// FutureEnhancementsEQ applies the EQ predicate on the "future_enhancements" field.
func FutureEnhancementsEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldFutureEnhancements, v))
}

// FutureEnhancementsNEQ applies the NEQ predicate on the "future_enhancements" field.
func FutureEnhancementsNEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldFutureEnhancements, v))
}

// FutureEnhancementsIn applies the In predicate on the "future_enhancements" field.
func FutureEnhancementsIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldFutureEnhancements, vs...))
}

// FutureEnhancementsNotIn applies the NotIn predicate on the "future_enhancements" field.
func FutureEnhancementsNotIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldFutureEnhancements, vs...))
}

// FutureEnhancementsGT applies the GT predicate on the "future_enhancements" field.
func FutureEnhancementsGT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldFutureEnhancements, v))
}

// FutureEnhancementsGTE applies the GTE predicate on the "future_enhancements" field.
func FutureEnhancementsGTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldFutureEnhancements, v))
}

// FutureEnhancementsLT applies the LT predicate on the "future_enhancements" field.
func FutureEnhancementsLT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldFutureEnhancements, v))
}

// FutureEnhancementsLTE applies the LTE predicate on the "future_enhancements" field.
func FutureEnhancementsLTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldFutureEnhancements, v))
}

// FutureEnhancementsContains applies the Contains predicate on the "future_enhancements" field.
func FutureEnhancementsContains(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContains(FieldFutureEnhancements, v))
}

// FutureEnhancementsHasPrefix applies the HasPrefix predicate on the "future_enhancements" field.
func FutureEnhancementsHasPrefix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasPrefix(FieldFutureEnhancements, v))
}

// FutureEnhancementsHasSuffix applies the HasSuffix predicate on the "future_enhancements" field.
func FutureEnhancementsHasSuffix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasSuffix(FieldFutureEnhancements, v))
}

// FutureEnhancementsIsNil applies the IsNil predicate on the "future_enhancements" field.
func FutureEnhancementsIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldFutureEnhancements))
}

// FutureEnhancementsNotNil applies the NotNil predicate on the "future_enhancements" field.
func FutureEnhancementsNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldFutureEnhancements))
}

// FutureEnhancementsEqualFold applies the EqualFold predicate on the "future_enhancements" field.
func FutureEnhancementsEqualFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEqualFold(FieldFutureEnhancements, v))
}

// FutureEnhancementsContainsFold applies the ContainsFold predicate on the "future_enhancements" field.
func FutureEnhancementsContainsFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContainsFold(FieldFutureEnhancements, v))
}

// LicenseEQ applies the EQ predicate on the "license" field.
func LicenseEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldLicense, v))
}

// LicenseNEQ applies the NEQ predicate on the "license" field.
func LicenseNEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldLicense, v))
}

// LicenseIn applies the In predicate on the "license" field.
func LicenseIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldLicense, vs...))
}

// LicenseNotIn applies the NotIn predicate on the "license" field.
func LicenseNotIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldLicense, vs...))
}

// LicenseGT applies the GT predicate on the "license" field.
func LicenseGT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldLicense, v))
}

// LicenseGTE applies the GTE predicate on the "license" field.
func LicenseGTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldLicense, v))
}

// LicenseLT applies the LT predicate on the "license" field.
func LicenseLT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldLicense, v))
}

// LicenseLTE applies the LTE predicate on the "license" field.
func LicenseLTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldLicense, v))
}

// LicenseContains applies the Contains predicate on the "license" field.
func LicenseContains(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContains(FieldLicense, v))
}

// LicenseHasPrefix applies the HasPrefix predicate on the "license" field.
func LicenseHasPrefix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasPrefix(FieldLicense, v))
}

// LicenseHasSuffix applies the HasSuffix predicate on the "license" field.
func LicenseHasSuffix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasSuffix(FieldLicense, v))
}

// LicenseIsNil applies the IsNil predicate on the "license" field.
func LicenseIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldLicense))
}

// LicenseNotNil applies the NotNil predicate on the "license" field.
func LicenseNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldLicense))
}

// LicenseEqualFold applies the EqualFold predicate on the "license" field.
func LicenseEqualFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEqualFold(FieldLicense, v))
}

// LicenseContainsFold applies the ContainsFold predicate on the "license" field.
func LicenseContainsFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContainsFold(FieldLicense, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionIsNil applies the IsNil predicate on the "version" field.
func VersionIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldVersion))
}

// VersionNotNil applies the NotNil predicate on the "version" field.
func VersionNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldVersion))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContainsFold(FieldVersion, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.ProjectDetail {
	return predicate.ProjectDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.ProjectDetail {
	return predicate.ProjectDetail(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTranslations applies the HasEdge predicate on the "translations" edge.
func HasTranslations() predicate.ProjectDetail {
	return predicate.ProjectDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TranslationsTable, TranslationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTranslationsWith applies the HasEdge predicate on the "translations" edge with a given conditions (other predicates).
func HasTranslationsWith(preds ...predicate.ProjectDetailTranslation) predicate.ProjectDetail {
	return predicate.ProjectDetail(func(s *sql.Selector) {
		step := newTranslationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProjectDetail) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProjectDetail) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProjectDetail) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.NotPredicates(p))
}
