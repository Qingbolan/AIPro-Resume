// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/projectrelationship"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ProjectRelationship is the model entity for the ProjectRelationship schema.
type ProjectRelationship struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// SourceProjectID holds the value of the "source_project_id" field.
	SourceProjectID uuid.UUID `json:"source_project_id,omitempty"`
	// TargetProjectID holds the value of the "target_project_id" field.
	TargetProjectID uuid.UUID `json:"target_project_id,omitempty"`
	// RelationshipType holds the value of the "relationship_type" field.
	RelationshipType string `json:"relationship_type,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectRelationshipQuery when eager-loading is set.
	Edges        ProjectRelationshipEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProjectRelationshipEdges holds the relations/edges for other nodes in the graph.
type ProjectRelationshipEdges struct {
	// SourceProject holds the value of the source_project edge.
	SourceProject *Project `json:"source_project,omitempty"`
	// TargetProject holds the value of the target_project edge.
	TargetProject *Project `json:"target_project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SourceProjectOrErr returns the SourceProject value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectRelationshipEdges) SourceProjectOrErr() (*Project, error) {
	if e.SourceProject != nil {
		return e.SourceProject, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "source_project"}
}

// TargetProjectOrErr returns the TargetProject value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectRelationshipEdges) TargetProjectOrErr() (*Project, error) {
	if e.TargetProject != nil {
		return e.TargetProject, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "target_project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectRelationship) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case projectrelationship.FieldRelationshipType:
			values[i] = new(sql.NullString)
		case projectrelationship.FieldCreatedAt, projectrelationship.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case projectrelationship.FieldID, projectrelationship.FieldSourceProjectID, projectrelationship.FieldTargetProjectID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectRelationship fields.
func (pr *ProjectRelationship) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projectrelationship.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pr.ID = *value
			}
		case projectrelationship.FieldSourceProjectID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field source_project_id", values[i])
			} else if value != nil {
				pr.SourceProjectID = *value
			}
		case projectrelationship.FieldTargetProjectID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field target_project_id", values[i])
			} else if value != nil {
				pr.TargetProjectID = *value
			}
		case projectrelationship.FieldRelationshipType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field relationship_type", values[i])
			} else if value.Valid {
				pr.RelationshipType = value.String
			}
		case projectrelationship.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case projectrelationship.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProjectRelationship.
// This includes values selected through modifiers, order, etc.
func (pr *ProjectRelationship) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QuerySourceProject queries the "source_project" edge of the ProjectRelationship entity.
func (pr *ProjectRelationship) QuerySourceProject() *ProjectQuery {
	return NewProjectRelationshipClient(pr.config).QuerySourceProject(pr)
}

// QueryTargetProject queries the "target_project" edge of the ProjectRelationship entity.
func (pr *ProjectRelationship) QueryTargetProject() *ProjectQuery {
	return NewProjectRelationshipClient(pr.config).QueryTargetProject(pr)
}

// Update returns a builder for updating this ProjectRelationship.
// Note that you need to call ProjectRelationship.Unwrap() before calling this method if this ProjectRelationship
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *ProjectRelationship) Update() *ProjectRelationshipUpdateOne {
	return NewProjectRelationshipClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the ProjectRelationship entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *ProjectRelationship) Unwrap() *ProjectRelationship {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProjectRelationship is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *ProjectRelationship) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectRelationship(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("source_project_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.SourceProjectID))
	builder.WriteString(", ")
	builder.WriteString("target_project_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.TargetProjectID))
	builder.WriteString(", ")
	builder.WriteString("relationship_type=")
	builder.WriteString(pr.RelationshipType)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProjectRelationships is a parsable slice of ProjectRelationship.
type ProjectRelationships []*ProjectRelationship
