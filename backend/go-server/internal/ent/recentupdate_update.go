// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/recentupdate"
	"silan-backend/internal/ent/recentupdatetranslation"
	"silan-backend/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// RecentUpdateUpdate is the builder for updating RecentUpdate entities.
type RecentUpdateUpdate struct {
	config
	hooks    []Hook
	mutation *RecentUpdateMutation
}

// Where appends a list predicates to the RecentUpdateUpdate builder.
func (ruu *RecentUpdateUpdate) Where(ps ...predicate.RecentUpdate) *RecentUpdateUpdate {
	ruu.mutation.Where(ps...)
	return ruu
}

// SetUserID sets the "user_id" field.
func (ruu *RecentUpdateUpdate) SetUserID(u uuid.UUID) *RecentUpdateUpdate {
	ruu.mutation.SetUserID(u)
	return ruu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ruu *RecentUpdateUpdate) SetNillableUserID(u *uuid.UUID) *RecentUpdateUpdate {
	if u != nil {
		ruu.SetUserID(*u)
	}
	return ruu
}

// SetType sets the "type" field.
func (ruu *RecentUpdateUpdate) SetType(r recentupdate.Type) *RecentUpdateUpdate {
	ruu.mutation.SetType(r)
	return ruu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ruu *RecentUpdateUpdate) SetNillableType(r *recentupdate.Type) *RecentUpdateUpdate {
	if r != nil {
		ruu.SetType(*r)
	}
	return ruu
}

// SetTitle sets the "title" field.
func (ruu *RecentUpdateUpdate) SetTitle(s string) *RecentUpdateUpdate {
	ruu.mutation.SetTitle(s)
	return ruu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ruu *RecentUpdateUpdate) SetNillableTitle(s *string) *RecentUpdateUpdate {
	if s != nil {
		ruu.SetTitle(*s)
	}
	return ruu
}

// SetDescription sets the "description" field.
func (ruu *RecentUpdateUpdate) SetDescription(s string) *RecentUpdateUpdate {
	ruu.mutation.SetDescription(s)
	return ruu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ruu *RecentUpdateUpdate) SetNillableDescription(s *string) *RecentUpdateUpdate {
	if s != nil {
		ruu.SetDescription(*s)
	}
	return ruu
}

// SetDate sets the "date" field.
func (ruu *RecentUpdateUpdate) SetDate(t time.Time) *RecentUpdateUpdate {
	ruu.mutation.SetDate(t)
	return ruu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (ruu *RecentUpdateUpdate) SetNillableDate(t *time.Time) *RecentUpdateUpdate {
	if t != nil {
		ruu.SetDate(*t)
	}
	return ruu
}

// SetTags sets the "tags" field.
func (ruu *RecentUpdateUpdate) SetTags(s []string) *RecentUpdateUpdate {
	ruu.mutation.SetTags(s)
	return ruu
}

// AppendTags appends s to the "tags" field.
func (ruu *RecentUpdateUpdate) AppendTags(s []string) *RecentUpdateUpdate {
	ruu.mutation.AppendTags(s)
	return ruu
}

// ClearTags clears the value of the "tags" field.
func (ruu *RecentUpdateUpdate) ClearTags() *RecentUpdateUpdate {
	ruu.mutation.ClearTags()
	return ruu
}

// SetStatus sets the "status" field.
func (ruu *RecentUpdateUpdate) SetStatus(r recentupdate.Status) *RecentUpdateUpdate {
	ruu.mutation.SetStatus(r)
	return ruu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruu *RecentUpdateUpdate) SetNillableStatus(r *recentupdate.Status) *RecentUpdateUpdate {
	if r != nil {
		ruu.SetStatus(*r)
	}
	return ruu
}

// SetPriority sets the "priority" field.
func (ruu *RecentUpdateUpdate) SetPriority(r recentupdate.Priority) *RecentUpdateUpdate {
	ruu.mutation.SetPriority(r)
	return ruu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (ruu *RecentUpdateUpdate) SetNillablePriority(r *recentupdate.Priority) *RecentUpdateUpdate {
	if r != nil {
		ruu.SetPriority(*r)
	}
	return ruu
}

// SetExternalID sets the "external_id" field.
func (ruu *RecentUpdateUpdate) SetExternalID(s string) *RecentUpdateUpdate {
	ruu.mutation.SetExternalID(s)
	return ruu
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (ruu *RecentUpdateUpdate) SetNillableExternalID(s *string) *RecentUpdateUpdate {
	if s != nil {
		ruu.SetExternalID(*s)
	}
	return ruu
}

// ClearExternalID clears the value of the "external_id" field.
func (ruu *RecentUpdateUpdate) ClearExternalID() *RecentUpdateUpdate {
	ruu.mutation.ClearExternalID()
	return ruu
}

// SetImageURL sets the "image_url" field.
func (ruu *RecentUpdateUpdate) SetImageURL(s string) *RecentUpdateUpdate {
	ruu.mutation.SetImageURL(s)
	return ruu
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (ruu *RecentUpdateUpdate) SetNillableImageURL(s *string) *RecentUpdateUpdate {
	if s != nil {
		ruu.SetImageURL(*s)
	}
	return ruu
}

// ClearImageURL clears the value of the "image_url" field.
func (ruu *RecentUpdateUpdate) ClearImageURL() *RecentUpdateUpdate {
	ruu.mutation.ClearImageURL()
	return ruu
}

// SetVideoURL sets the "video_url" field.
func (ruu *RecentUpdateUpdate) SetVideoURL(s string) *RecentUpdateUpdate {
	ruu.mutation.SetVideoURL(s)
	return ruu
}

// SetNillableVideoURL sets the "video_url" field if the given value is not nil.
func (ruu *RecentUpdateUpdate) SetNillableVideoURL(s *string) *RecentUpdateUpdate {
	if s != nil {
		ruu.SetVideoURL(*s)
	}
	return ruu
}

// ClearVideoURL clears the value of the "video_url" field.
func (ruu *RecentUpdateUpdate) ClearVideoURL() *RecentUpdateUpdate {
	ruu.mutation.ClearVideoURL()
	return ruu
}

// SetDocumentURL sets the "document_url" field.
func (ruu *RecentUpdateUpdate) SetDocumentURL(s string) *RecentUpdateUpdate {
	ruu.mutation.SetDocumentURL(s)
	return ruu
}

// SetNillableDocumentURL sets the "document_url" field if the given value is not nil.
func (ruu *RecentUpdateUpdate) SetNillableDocumentURL(s *string) *RecentUpdateUpdate {
	if s != nil {
		ruu.SetDocumentURL(*s)
	}
	return ruu
}

// ClearDocumentURL clears the value of the "document_url" field.
func (ruu *RecentUpdateUpdate) ClearDocumentURL() *RecentUpdateUpdate {
	ruu.mutation.ClearDocumentURL()
	return ruu
}

// SetGallery sets the "gallery" field.
func (ruu *RecentUpdateUpdate) SetGallery(s []string) *RecentUpdateUpdate {
	ruu.mutation.SetGallery(s)
	return ruu
}

// AppendGallery appends s to the "gallery" field.
func (ruu *RecentUpdateUpdate) AppendGallery(s []string) *RecentUpdateUpdate {
	ruu.mutation.AppendGallery(s)
	return ruu
}

// ClearGallery clears the value of the "gallery" field.
func (ruu *RecentUpdateUpdate) ClearGallery() *RecentUpdateUpdate {
	ruu.mutation.ClearGallery()
	return ruu
}

// SetAttachments sets the "attachments" field.
func (ruu *RecentUpdateUpdate) SetAttachments(m []map[string]interface{}) *RecentUpdateUpdate {
	ruu.mutation.SetAttachments(m)
	return ruu
}

// AppendAttachments appends m to the "attachments" field.
func (ruu *RecentUpdateUpdate) AppendAttachments(m []map[string]interface{}) *RecentUpdateUpdate {
	ruu.mutation.AppendAttachments(m)
	return ruu
}

// ClearAttachments clears the value of the "attachments" field.
func (ruu *RecentUpdateUpdate) ClearAttachments() *RecentUpdateUpdate {
	ruu.mutation.ClearAttachments()
	return ruu
}

// SetMediaMetadata sets the "media_metadata" field.
func (ruu *RecentUpdateUpdate) SetMediaMetadata(m map[string]interface{}) *RecentUpdateUpdate {
	ruu.mutation.SetMediaMetadata(m)
	return ruu
}

// ClearMediaMetadata clears the value of the "media_metadata" field.
func (ruu *RecentUpdateUpdate) ClearMediaMetadata() *RecentUpdateUpdate {
	ruu.mutation.ClearMediaMetadata()
	return ruu
}

// SetDemoURL sets the "demo_url" field.
func (ruu *RecentUpdateUpdate) SetDemoURL(s string) *RecentUpdateUpdate {
	ruu.mutation.SetDemoURL(s)
	return ruu
}

// SetNillableDemoURL sets the "demo_url" field if the given value is not nil.
func (ruu *RecentUpdateUpdate) SetNillableDemoURL(s *string) *RecentUpdateUpdate {
	if s != nil {
		ruu.SetDemoURL(*s)
	}
	return ruu
}

// ClearDemoURL clears the value of the "demo_url" field.
func (ruu *RecentUpdateUpdate) ClearDemoURL() *RecentUpdateUpdate {
	ruu.mutation.ClearDemoURL()
	return ruu
}

// SetGithubURL sets the "github_url" field.
func (ruu *RecentUpdateUpdate) SetGithubURL(s string) *RecentUpdateUpdate {
	ruu.mutation.SetGithubURL(s)
	return ruu
}

// SetNillableGithubURL sets the "github_url" field if the given value is not nil.
func (ruu *RecentUpdateUpdate) SetNillableGithubURL(s *string) *RecentUpdateUpdate {
	if s != nil {
		ruu.SetGithubURL(*s)
	}
	return ruu
}

// ClearGithubURL clears the value of the "github_url" field.
func (ruu *RecentUpdateUpdate) ClearGithubURL() *RecentUpdateUpdate {
	ruu.mutation.ClearGithubURL()
	return ruu
}

// SetExternalURL sets the "external_url" field.
func (ruu *RecentUpdateUpdate) SetExternalURL(s string) *RecentUpdateUpdate {
	ruu.mutation.SetExternalURL(s)
	return ruu
}

// SetNillableExternalURL sets the "external_url" field if the given value is not nil.
func (ruu *RecentUpdateUpdate) SetNillableExternalURL(s *string) *RecentUpdateUpdate {
	if s != nil {
		ruu.SetExternalURL(*s)
	}
	return ruu
}

// ClearExternalURL clears the value of the "external_url" field.
func (ruu *RecentUpdateUpdate) ClearExternalURL() *RecentUpdateUpdate {
	ruu.mutation.ClearExternalURL()
	return ruu
}

// SetSocialLinks sets the "social_links" field.
func (ruu *RecentUpdateUpdate) SetSocialLinks(m []map[string]interface{}) *RecentUpdateUpdate {
	ruu.mutation.SetSocialLinks(m)
	return ruu
}

// AppendSocialLinks appends m to the "social_links" field.
func (ruu *RecentUpdateUpdate) AppendSocialLinks(m []map[string]interface{}) *RecentUpdateUpdate {
	ruu.mutation.AppendSocialLinks(m)
	return ruu
}

// ClearSocialLinks clears the value of the "social_links" field.
func (ruu *RecentUpdateUpdate) ClearSocialLinks() *RecentUpdateUpdate {
	ruu.mutation.ClearSocialLinks()
	return ruu
}

// SetSortOrder sets the "sort_order" field.
func (ruu *RecentUpdateUpdate) SetSortOrder(i int) *RecentUpdateUpdate {
	ruu.mutation.ResetSortOrder()
	ruu.mutation.SetSortOrder(i)
	return ruu
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (ruu *RecentUpdateUpdate) SetNillableSortOrder(i *int) *RecentUpdateUpdate {
	if i != nil {
		ruu.SetSortOrder(*i)
	}
	return ruu
}

// AddSortOrder adds i to the "sort_order" field.
func (ruu *RecentUpdateUpdate) AddSortOrder(i int) *RecentUpdateUpdate {
	ruu.mutation.AddSortOrder(i)
	return ruu
}

// SetUpdatedAt sets the "updated_at" field.
func (ruu *RecentUpdateUpdate) SetUpdatedAt(t time.Time) *RecentUpdateUpdate {
	ruu.mutation.SetUpdatedAt(t)
	return ruu
}

// SetUser sets the "user" edge to the User entity.
func (ruu *RecentUpdateUpdate) SetUser(u *User) *RecentUpdateUpdate {
	return ruu.SetUserID(u.ID)
}

// AddTranslationIDs adds the "translations" edge to the RecentUpdateTranslation entity by IDs.
func (ruu *RecentUpdateUpdate) AddTranslationIDs(ids ...uuid.UUID) *RecentUpdateUpdate {
	ruu.mutation.AddTranslationIDs(ids...)
	return ruu
}

// AddTranslations adds the "translations" edges to the RecentUpdateTranslation entity.
func (ruu *RecentUpdateUpdate) AddTranslations(r ...*RecentUpdateTranslation) *RecentUpdateUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruu.AddTranslationIDs(ids...)
}

// Mutation returns the RecentUpdateMutation object of the builder.
func (ruu *RecentUpdateUpdate) Mutation() *RecentUpdateMutation {
	return ruu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ruu *RecentUpdateUpdate) ClearUser() *RecentUpdateUpdate {
	ruu.mutation.ClearUser()
	return ruu
}

// ClearTranslations clears all "translations" edges to the RecentUpdateTranslation entity.
func (ruu *RecentUpdateUpdate) ClearTranslations() *RecentUpdateUpdate {
	ruu.mutation.ClearTranslations()
	return ruu
}

// RemoveTranslationIDs removes the "translations" edge to RecentUpdateTranslation entities by IDs.
func (ruu *RecentUpdateUpdate) RemoveTranslationIDs(ids ...uuid.UUID) *RecentUpdateUpdate {
	ruu.mutation.RemoveTranslationIDs(ids...)
	return ruu
}

// RemoveTranslations removes "translations" edges to RecentUpdateTranslation entities.
func (ruu *RecentUpdateUpdate) RemoveTranslations(r ...*RecentUpdateTranslation) *RecentUpdateUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruu.RemoveTranslationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ruu *RecentUpdateUpdate) Save(ctx context.Context) (int, error) {
	ruu.defaults()
	return withHooks(ctx, ruu.sqlSave, ruu.mutation, ruu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruu *RecentUpdateUpdate) SaveX(ctx context.Context) int {
	affected, err := ruu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ruu *RecentUpdateUpdate) Exec(ctx context.Context) error {
	_, err := ruu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruu *RecentUpdateUpdate) ExecX(ctx context.Context) {
	if err := ruu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruu *RecentUpdateUpdate) defaults() {
	if _, ok := ruu.mutation.UpdatedAt(); !ok {
		v := recentupdate.UpdateDefaultUpdatedAt()
		ruu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruu *RecentUpdateUpdate) check() error {
	if v, ok := ruu.mutation.GetType(); ok {
		if err := recentupdate.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.type": %w`, err)}
		}
	}
	if v, ok := ruu.mutation.Title(); ok {
		if err := recentupdate.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.title": %w`, err)}
		}
	}
	if v, ok := ruu.mutation.Description(); ok {
		if err := recentupdate.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.description": %w`, err)}
		}
	}
	if v, ok := ruu.mutation.Status(); ok {
		if err := recentupdate.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.status": %w`, err)}
		}
	}
	if v, ok := ruu.mutation.Priority(); ok {
		if err := recentupdate.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.priority": %w`, err)}
		}
	}
	if v, ok := ruu.mutation.ExternalID(); ok {
		if err := recentupdate.ExternalIDValidator(v); err != nil {
			return &ValidationError{Name: "external_id", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.external_id": %w`, err)}
		}
	}
	if v, ok := ruu.mutation.ImageURL(); ok {
		if err := recentupdate.ImageURLValidator(v); err != nil {
			return &ValidationError{Name: "image_url", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.image_url": %w`, err)}
		}
	}
	if v, ok := ruu.mutation.VideoURL(); ok {
		if err := recentupdate.VideoURLValidator(v); err != nil {
			return &ValidationError{Name: "video_url", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.video_url": %w`, err)}
		}
	}
	if v, ok := ruu.mutation.DocumentURL(); ok {
		if err := recentupdate.DocumentURLValidator(v); err != nil {
			return &ValidationError{Name: "document_url", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.document_url": %w`, err)}
		}
	}
	if v, ok := ruu.mutation.DemoURL(); ok {
		if err := recentupdate.DemoURLValidator(v); err != nil {
			return &ValidationError{Name: "demo_url", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.demo_url": %w`, err)}
		}
	}
	if v, ok := ruu.mutation.GithubURL(); ok {
		if err := recentupdate.GithubURLValidator(v); err != nil {
			return &ValidationError{Name: "github_url", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.github_url": %w`, err)}
		}
	}
	if v, ok := ruu.mutation.ExternalURL(); ok {
		if err := recentupdate.ExternalURLValidator(v); err != nil {
			return &ValidationError{Name: "external_url", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.external_url": %w`, err)}
		}
	}
	if ruu.mutation.UserCleared() && len(ruu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RecentUpdate.user"`)
	}
	return nil
}

func (ruu *RecentUpdateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ruu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(recentupdate.Table, recentupdate.Columns, sqlgraph.NewFieldSpec(recentupdate.FieldID, field.TypeUUID))
	if ps := ruu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruu.mutation.GetType(); ok {
		_spec.SetField(recentupdate.FieldType, field.TypeEnum, value)
	}
	if value, ok := ruu.mutation.Title(); ok {
		_spec.SetField(recentupdate.FieldTitle, field.TypeString, value)
	}
	if value, ok := ruu.mutation.Description(); ok {
		_spec.SetField(recentupdate.FieldDescription, field.TypeString, value)
	}
	if value, ok := ruu.mutation.Date(); ok {
		_spec.SetField(recentupdate.FieldDate, field.TypeTime, value)
	}
	if value, ok := ruu.mutation.Tags(); ok {
		_spec.SetField(recentupdate.FieldTags, field.TypeJSON, value)
	}
	if value, ok := ruu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, recentupdate.FieldTags, value)
		})
	}
	if ruu.mutation.TagsCleared() {
		_spec.ClearField(recentupdate.FieldTags, field.TypeJSON)
	}
	if value, ok := ruu.mutation.Status(); ok {
		_spec.SetField(recentupdate.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ruu.mutation.Priority(); ok {
		_spec.SetField(recentupdate.FieldPriority, field.TypeEnum, value)
	}
	if value, ok := ruu.mutation.ExternalID(); ok {
		_spec.SetField(recentupdate.FieldExternalID, field.TypeString, value)
	}
	if ruu.mutation.ExternalIDCleared() {
		_spec.ClearField(recentupdate.FieldExternalID, field.TypeString)
	}
	if value, ok := ruu.mutation.ImageURL(); ok {
		_spec.SetField(recentupdate.FieldImageURL, field.TypeString, value)
	}
	if ruu.mutation.ImageURLCleared() {
		_spec.ClearField(recentupdate.FieldImageURL, field.TypeString)
	}
	if value, ok := ruu.mutation.VideoURL(); ok {
		_spec.SetField(recentupdate.FieldVideoURL, field.TypeString, value)
	}
	if ruu.mutation.VideoURLCleared() {
		_spec.ClearField(recentupdate.FieldVideoURL, field.TypeString)
	}
	if value, ok := ruu.mutation.DocumentURL(); ok {
		_spec.SetField(recentupdate.FieldDocumentURL, field.TypeString, value)
	}
	if ruu.mutation.DocumentURLCleared() {
		_spec.ClearField(recentupdate.FieldDocumentURL, field.TypeString)
	}
	if value, ok := ruu.mutation.Gallery(); ok {
		_spec.SetField(recentupdate.FieldGallery, field.TypeJSON, value)
	}
	if value, ok := ruu.mutation.AppendedGallery(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, recentupdate.FieldGallery, value)
		})
	}
	if ruu.mutation.GalleryCleared() {
		_spec.ClearField(recentupdate.FieldGallery, field.TypeJSON)
	}
	if value, ok := ruu.mutation.Attachments(); ok {
		_spec.SetField(recentupdate.FieldAttachments, field.TypeJSON, value)
	}
	if value, ok := ruu.mutation.AppendedAttachments(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, recentupdate.FieldAttachments, value)
		})
	}
	if ruu.mutation.AttachmentsCleared() {
		_spec.ClearField(recentupdate.FieldAttachments, field.TypeJSON)
	}
	if value, ok := ruu.mutation.MediaMetadata(); ok {
		_spec.SetField(recentupdate.FieldMediaMetadata, field.TypeJSON, value)
	}
	if ruu.mutation.MediaMetadataCleared() {
		_spec.ClearField(recentupdate.FieldMediaMetadata, field.TypeJSON)
	}
	if value, ok := ruu.mutation.DemoURL(); ok {
		_spec.SetField(recentupdate.FieldDemoURL, field.TypeString, value)
	}
	if ruu.mutation.DemoURLCleared() {
		_spec.ClearField(recentupdate.FieldDemoURL, field.TypeString)
	}
	if value, ok := ruu.mutation.GithubURL(); ok {
		_spec.SetField(recentupdate.FieldGithubURL, field.TypeString, value)
	}
	if ruu.mutation.GithubURLCleared() {
		_spec.ClearField(recentupdate.FieldGithubURL, field.TypeString)
	}
	if value, ok := ruu.mutation.ExternalURL(); ok {
		_spec.SetField(recentupdate.FieldExternalURL, field.TypeString, value)
	}
	if ruu.mutation.ExternalURLCleared() {
		_spec.ClearField(recentupdate.FieldExternalURL, field.TypeString)
	}
	if value, ok := ruu.mutation.SocialLinks(); ok {
		_spec.SetField(recentupdate.FieldSocialLinks, field.TypeJSON, value)
	}
	if value, ok := ruu.mutation.AppendedSocialLinks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, recentupdate.FieldSocialLinks, value)
		})
	}
	if ruu.mutation.SocialLinksCleared() {
		_spec.ClearField(recentupdate.FieldSocialLinks, field.TypeJSON)
	}
	if value, ok := ruu.mutation.SortOrder(); ok {
		_spec.SetField(recentupdate.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := ruu.mutation.AddedSortOrder(); ok {
		_spec.AddField(recentupdate.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := ruu.mutation.UpdatedAt(); ok {
		_spec.SetField(recentupdate.FieldUpdatedAt, field.TypeTime, value)
	}
	if ruu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recentupdate.UserTable,
			Columns: []string{recentupdate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recentupdate.UserTable,
			Columns: []string{recentupdate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruu.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recentupdate.TranslationsTable,
			Columns: []string{recentupdate.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recentupdatetranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruu.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !ruu.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recentupdate.TranslationsTable,
			Columns: []string{recentupdate.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recentupdatetranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruu.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recentupdate.TranslationsTable,
			Columns: []string{recentupdate.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recentupdatetranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ruu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recentupdate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ruu.mutation.done = true
	return n, nil
}

// RecentUpdateUpdateOne is the builder for updating a single RecentUpdate entity.
type RecentUpdateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RecentUpdateMutation
}

// SetUserID sets the "user_id" field.
func (ruuo *RecentUpdateUpdateOne) SetUserID(u uuid.UUID) *RecentUpdateUpdateOne {
	ruuo.mutation.SetUserID(u)
	return ruuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ruuo *RecentUpdateUpdateOne) SetNillableUserID(u *uuid.UUID) *RecentUpdateUpdateOne {
	if u != nil {
		ruuo.SetUserID(*u)
	}
	return ruuo
}

// SetType sets the "type" field.
func (ruuo *RecentUpdateUpdateOne) SetType(r recentupdate.Type) *RecentUpdateUpdateOne {
	ruuo.mutation.SetType(r)
	return ruuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ruuo *RecentUpdateUpdateOne) SetNillableType(r *recentupdate.Type) *RecentUpdateUpdateOne {
	if r != nil {
		ruuo.SetType(*r)
	}
	return ruuo
}

// SetTitle sets the "title" field.
func (ruuo *RecentUpdateUpdateOne) SetTitle(s string) *RecentUpdateUpdateOne {
	ruuo.mutation.SetTitle(s)
	return ruuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ruuo *RecentUpdateUpdateOne) SetNillableTitle(s *string) *RecentUpdateUpdateOne {
	if s != nil {
		ruuo.SetTitle(*s)
	}
	return ruuo
}

// SetDescription sets the "description" field.
func (ruuo *RecentUpdateUpdateOne) SetDescription(s string) *RecentUpdateUpdateOne {
	ruuo.mutation.SetDescription(s)
	return ruuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ruuo *RecentUpdateUpdateOne) SetNillableDescription(s *string) *RecentUpdateUpdateOne {
	if s != nil {
		ruuo.SetDescription(*s)
	}
	return ruuo
}

// SetDate sets the "date" field.
func (ruuo *RecentUpdateUpdateOne) SetDate(t time.Time) *RecentUpdateUpdateOne {
	ruuo.mutation.SetDate(t)
	return ruuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (ruuo *RecentUpdateUpdateOne) SetNillableDate(t *time.Time) *RecentUpdateUpdateOne {
	if t != nil {
		ruuo.SetDate(*t)
	}
	return ruuo
}

// SetTags sets the "tags" field.
func (ruuo *RecentUpdateUpdateOne) SetTags(s []string) *RecentUpdateUpdateOne {
	ruuo.mutation.SetTags(s)
	return ruuo
}

// AppendTags appends s to the "tags" field.
func (ruuo *RecentUpdateUpdateOne) AppendTags(s []string) *RecentUpdateUpdateOne {
	ruuo.mutation.AppendTags(s)
	return ruuo
}

// ClearTags clears the value of the "tags" field.
func (ruuo *RecentUpdateUpdateOne) ClearTags() *RecentUpdateUpdateOne {
	ruuo.mutation.ClearTags()
	return ruuo
}

// SetStatus sets the "status" field.
func (ruuo *RecentUpdateUpdateOne) SetStatus(r recentupdate.Status) *RecentUpdateUpdateOne {
	ruuo.mutation.SetStatus(r)
	return ruuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruuo *RecentUpdateUpdateOne) SetNillableStatus(r *recentupdate.Status) *RecentUpdateUpdateOne {
	if r != nil {
		ruuo.SetStatus(*r)
	}
	return ruuo
}

// SetPriority sets the "priority" field.
func (ruuo *RecentUpdateUpdateOne) SetPriority(r recentupdate.Priority) *RecentUpdateUpdateOne {
	ruuo.mutation.SetPriority(r)
	return ruuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (ruuo *RecentUpdateUpdateOne) SetNillablePriority(r *recentupdate.Priority) *RecentUpdateUpdateOne {
	if r != nil {
		ruuo.SetPriority(*r)
	}
	return ruuo
}

// SetExternalID sets the "external_id" field.
func (ruuo *RecentUpdateUpdateOne) SetExternalID(s string) *RecentUpdateUpdateOne {
	ruuo.mutation.SetExternalID(s)
	return ruuo
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (ruuo *RecentUpdateUpdateOne) SetNillableExternalID(s *string) *RecentUpdateUpdateOne {
	if s != nil {
		ruuo.SetExternalID(*s)
	}
	return ruuo
}

// ClearExternalID clears the value of the "external_id" field.
func (ruuo *RecentUpdateUpdateOne) ClearExternalID() *RecentUpdateUpdateOne {
	ruuo.mutation.ClearExternalID()
	return ruuo
}

// SetImageURL sets the "image_url" field.
func (ruuo *RecentUpdateUpdateOne) SetImageURL(s string) *RecentUpdateUpdateOne {
	ruuo.mutation.SetImageURL(s)
	return ruuo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (ruuo *RecentUpdateUpdateOne) SetNillableImageURL(s *string) *RecentUpdateUpdateOne {
	if s != nil {
		ruuo.SetImageURL(*s)
	}
	return ruuo
}

// ClearImageURL clears the value of the "image_url" field.
func (ruuo *RecentUpdateUpdateOne) ClearImageURL() *RecentUpdateUpdateOne {
	ruuo.mutation.ClearImageURL()
	return ruuo
}

// SetVideoURL sets the "video_url" field.
func (ruuo *RecentUpdateUpdateOne) SetVideoURL(s string) *RecentUpdateUpdateOne {
	ruuo.mutation.SetVideoURL(s)
	return ruuo
}

// SetNillableVideoURL sets the "video_url" field if the given value is not nil.
func (ruuo *RecentUpdateUpdateOne) SetNillableVideoURL(s *string) *RecentUpdateUpdateOne {
	if s != nil {
		ruuo.SetVideoURL(*s)
	}
	return ruuo
}

// ClearVideoURL clears the value of the "video_url" field.
func (ruuo *RecentUpdateUpdateOne) ClearVideoURL() *RecentUpdateUpdateOne {
	ruuo.mutation.ClearVideoURL()
	return ruuo
}

// SetDocumentURL sets the "document_url" field.
func (ruuo *RecentUpdateUpdateOne) SetDocumentURL(s string) *RecentUpdateUpdateOne {
	ruuo.mutation.SetDocumentURL(s)
	return ruuo
}

// SetNillableDocumentURL sets the "document_url" field if the given value is not nil.
func (ruuo *RecentUpdateUpdateOne) SetNillableDocumentURL(s *string) *RecentUpdateUpdateOne {
	if s != nil {
		ruuo.SetDocumentURL(*s)
	}
	return ruuo
}

// ClearDocumentURL clears the value of the "document_url" field.
func (ruuo *RecentUpdateUpdateOne) ClearDocumentURL() *RecentUpdateUpdateOne {
	ruuo.mutation.ClearDocumentURL()
	return ruuo
}

// SetGallery sets the "gallery" field.
func (ruuo *RecentUpdateUpdateOne) SetGallery(s []string) *RecentUpdateUpdateOne {
	ruuo.mutation.SetGallery(s)
	return ruuo
}

// AppendGallery appends s to the "gallery" field.
func (ruuo *RecentUpdateUpdateOne) AppendGallery(s []string) *RecentUpdateUpdateOne {
	ruuo.mutation.AppendGallery(s)
	return ruuo
}

// ClearGallery clears the value of the "gallery" field.
func (ruuo *RecentUpdateUpdateOne) ClearGallery() *RecentUpdateUpdateOne {
	ruuo.mutation.ClearGallery()
	return ruuo
}

// SetAttachments sets the "attachments" field.
func (ruuo *RecentUpdateUpdateOne) SetAttachments(m []map[string]interface{}) *RecentUpdateUpdateOne {
	ruuo.mutation.SetAttachments(m)
	return ruuo
}

// AppendAttachments appends m to the "attachments" field.
func (ruuo *RecentUpdateUpdateOne) AppendAttachments(m []map[string]interface{}) *RecentUpdateUpdateOne {
	ruuo.mutation.AppendAttachments(m)
	return ruuo
}

// ClearAttachments clears the value of the "attachments" field.
func (ruuo *RecentUpdateUpdateOne) ClearAttachments() *RecentUpdateUpdateOne {
	ruuo.mutation.ClearAttachments()
	return ruuo
}

// SetMediaMetadata sets the "media_metadata" field.
func (ruuo *RecentUpdateUpdateOne) SetMediaMetadata(m map[string]interface{}) *RecentUpdateUpdateOne {
	ruuo.mutation.SetMediaMetadata(m)
	return ruuo
}

// ClearMediaMetadata clears the value of the "media_metadata" field.
func (ruuo *RecentUpdateUpdateOne) ClearMediaMetadata() *RecentUpdateUpdateOne {
	ruuo.mutation.ClearMediaMetadata()
	return ruuo
}

// SetDemoURL sets the "demo_url" field.
func (ruuo *RecentUpdateUpdateOne) SetDemoURL(s string) *RecentUpdateUpdateOne {
	ruuo.mutation.SetDemoURL(s)
	return ruuo
}

// SetNillableDemoURL sets the "demo_url" field if the given value is not nil.
func (ruuo *RecentUpdateUpdateOne) SetNillableDemoURL(s *string) *RecentUpdateUpdateOne {
	if s != nil {
		ruuo.SetDemoURL(*s)
	}
	return ruuo
}

// ClearDemoURL clears the value of the "demo_url" field.
func (ruuo *RecentUpdateUpdateOne) ClearDemoURL() *RecentUpdateUpdateOne {
	ruuo.mutation.ClearDemoURL()
	return ruuo
}

// SetGithubURL sets the "github_url" field.
func (ruuo *RecentUpdateUpdateOne) SetGithubURL(s string) *RecentUpdateUpdateOne {
	ruuo.mutation.SetGithubURL(s)
	return ruuo
}

// SetNillableGithubURL sets the "github_url" field if the given value is not nil.
func (ruuo *RecentUpdateUpdateOne) SetNillableGithubURL(s *string) *RecentUpdateUpdateOne {
	if s != nil {
		ruuo.SetGithubURL(*s)
	}
	return ruuo
}

// ClearGithubURL clears the value of the "github_url" field.
func (ruuo *RecentUpdateUpdateOne) ClearGithubURL() *RecentUpdateUpdateOne {
	ruuo.mutation.ClearGithubURL()
	return ruuo
}

// SetExternalURL sets the "external_url" field.
func (ruuo *RecentUpdateUpdateOne) SetExternalURL(s string) *RecentUpdateUpdateOne {
	ruuo.mutation.SetExternalURL(s)
	return ruuo
}

// SetNillableExternalURL sets the "external_url" field if the given value is not nil.
func (ruuo *RecentUpdateUpdateOne) SetNillableExternalURL(s *string) *RecentUpdateUpdateOne {
	if s != nil {
		ruuo.SetExternalURL(*s)
	}
	return ruuo
}

// ClearExternalURL clears the value of the "external_url" field.
func (ruuo *RecentUpdateUpdateOne) ClearExternalURL() *RecentUpdateUpdateOne {
	ruuo.mutation.ClearExternalURL()
	return ruuo
}

// SetSocialLinks sets the "social_links" field.
func (ruuo *RecentUpdateUpdateOne) SetSocialLinks(m []map[string]interface{}) *RecentUpdateUpdateOne {
	ruuo.mutation.SetSocialLinks(m)
	return ruuo
}

// AppendSocialLinks appends m to the "social_links" field.
func (ruuo *RecentUpdateUpdateOne) AppendSocialLinks(m []map[string]interface{}) *RecentUpdateUpdateOne {
	ruuo.mutation.AppendSocialLinks(m)
	return ruuo
}

// ClearSocialLinks clears the value of the "social_links" field.
func (ruuo *RecentUpdateUpdateOne) ClearSocialLinks() *RecentUpdateUpdateOne {
	ruuo.mutation.ClearSocialLinks()
	return ruuo
}

// SetSortOrder sets the "sort_order" field.
func (ruuo *RecentUpdateUpdateOne) SetSortOrder(i int) *RecentUpdateUpdateOne {
	ruuo.mutation.ResetSortOrder()
	ruuo.mutation.SetSortOrder(i)
	return ruuo
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (ruuo *RecentUpdateUpdateOne) SetNillableSortOrder(i *int) *RecentUpdateUpdateOne {
	if i != nil {
		ruuo.SetSortOrder(*i)
	}
	return ruuo
}

// AddSortOrder adds i to the "sort_order" field.
func (ruuo *RecentUpdateUpdateOne) AddSortOrder(i int) *RecentUpdateUpdateOne {
	ruuo.mutation.AddSortOrder(i)
	return ruuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruuo *RecentUpdateUpdateOne) SetUpdatedAt(t time.Time) *RecentUpdateUpdateOne {
	ruuo.mutation.SetUpdatedAt(t)
	return ruuo
}

// SetUser sets the "user" edge to the User entity.
func (ruuo *RecentUpdateUpdateOne) SetUser(u *User) *RecentUpdateUpdateOne {
	return ruuo.SetUserID(u.ID)
}

// AddTranslationIDs adds the "translations" edge to the RecentUpdateTranslation entity by IDs.
func (ruuo *RecentUpdateUpdateOne) AddTranslationIDs(ids ...uuid.UUID) *RecentUpdateUpdateOne {
	ruuo.mutation.AddTranslationIDs(ids...)
	return ruuo
}

// AddTranslations adds the "translations" edges to the RecentUpdateTranslation entity.
func (ruuo *RecentUpdateUpdateOne) AddTranslations(r ...*RecentUpdateTranslation) *RecentUpdateUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruuo.AddTranslationIDs(ids...)
}

// Mutation returns the RecentUpdateMutation object of the builder.
func (ruuo *RecentUpdateUpdateOne) Mutation() *RecentUpdateMutation {
	return ruuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ruuo *RecentUpdateUpdateOne) ClearUser() *RecentUpdateUpdateOne {
	ruuo.mutation.ClearUser()
	return ruuo
}

// ClearTranslations clears all "translations" edges to the RecentUpdateTranslation entity.
func (ruuo *RecentUpdateUpdateOne) ClearTranslations() *RecentUpdateUpdateOne {
	ruuo.mutation.ClearTranslations()
	return ruuo
}

// RemoveTranslationIDs removes the "translations" edge to RecentUpdateTranslation entities by IDs.
func (ruuo *RecentUpdateUpdateOne) RemoveTranslationIDs(ids ...uuid.UUID) *RecentUpdateUpdateOne {
	ruuo.mutation.RemoveTranslationIDs(ids...)
	return ruuo
}

// RemoveTranslations removes "translations" edges to RecentUpdateTranslation entities.
func (ruuo *RecentUpdateUpdateOne) RemoveTranslations(r ...*RecentUpdateTranslation) *RecentUpdateUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruuo.RemoveTranslationIDs(ids...)
}

// Where appends a list predicates to the RecentUpdateUpdate builder.
func (ruuo *RecentUpdateUpdateOne) Where(ps ...predicate.RecentUpdate) *RecentUpdateUpdateOne {
	ruuo.mutation.Where(ps...)
	return ruuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruuo *RecentUpdateUpdateOne) Select(field string, fields ...string) *RecentUpdateUpdateOne {
	ruuo.fields = append([]string{field}, fields...)
	return ruuo
}

// Save executes the query and returns the updated RecentUpdate entity.
func (ruuo *RecentUpdateUpdateOne) Save(ctx context.Context) (*RecentUpdate, error) {
	ruuo.defaults()
	return withHooks(ctx, ruuo.sqlSave, ruuo.mutation, ruuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruuo *RecentUpdateUpdateOne) SaveX(ctx context.Context) *RecentUpdate {
	node, err := ruuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruuo *RecentUpdateUpdateOne) Exec(ctx context.Context) error {
	_, err := ruuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruuo *RecentUpdateUpdateOne) ExecX(ctx context.Context) {
	if err := ruuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruuo *RecentUpdateUpdateOne) defaults() {
	if _, ok := ruuo.mutation.UpdatedAt(); !ok {
		v := recentupdate.UpdateDefaultUpdatedAt()
		ruuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruuo *RecentUpdateUpdateOne) check() error {
	if v, ok := ruuo.mutation.GetType(); ok {
		if err := recentupdate.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.type": %w`, err)}
		}
	}
	if v, ok := ruuo.mutation.Title(); ok {
		if err := recentupdate.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.title": %w`, err)}
		}
	}
	if v, ok := ruuo.mutation.Description(); ok {
		if err := recentupdate.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.description": %w`, err)}
		}
	}
	if v, ok := ruuo.mutation.Status(); ok {
		if err := recentupdate.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.status": %w`, err)}
		}
	}
	if v, ok := ruuo.mutation.Priority(); ok {
		if err := recentupdate.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.priority": %w`, err)}
		}
	}
	if v, ok := ruuo.mutation.ExternalID(); ok {
		if err := recentupdate.ExternalIDValidator(v); err != nil {
			return &ValidationError{Name: "external_id", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.external_id": %w`, err)}
		}
	}
	if v, ok := ruuo.mutation.ImageURL(); ok {
		if err := recentupdate.ImageURLValidator(v); err != nil {
			return &ValidationError{Name: "image_url", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.image_url": %w`, err)}
		}
	}
	if v, ok := ruuo.mutation.VideoURL(); ok {
		if err := recentupdate.VideoURLValidator(v); err != nil {
			return &ValidationError{Name: "video_url", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.video_url": %w`, err)}
		}
	}
	if v, ok := ruuo.mutation.DocumentURL(); ok {
		if err := recentupdate.DocumentURLValidator(v); err != nil {
			return &ValidationError{Name: "document_url", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.document_url": %w`, err)}
		}
	}
	if v, ok := ruuo.mutation.DemoURL(); ok {
		if err := recentupdate.DemoURLValidator(v); err != nil {
			return &ValidationError{Name: "demo_url", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.demo_url": %w`, err)}
		}
	}
	if v, ok := ruuo.mutation.GithubURL(); ok {
		if err := recentupdate.GithubURLValidator(v); err != nil {
			return &ValidationError{Name: "github_url", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.github_url": %w`, err)}
		}
	}
	if v, ok := ruuo.mutation.ExternalURL(); ok {
		if err := recentupdate.ExternalURLValidator(v); err != nil {
			return &ValidationError{Name: "external_url", err: fmt.Errorf(`ent: validator failed for field "RecentUpdate.external_url": %w`, err)}
		}
	}
	if ruuo.mutation.UserCleared() && len(ruuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RecentUpdate.user"`)
	}
	return nil
}

func (ruuo *RecentUpdateUpdateOne) sqlSave(ctx context.Context) (_node *RecentUpdate, err error) {
	if err := ruuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(recentupdate.Table, recentupdate.Columns, sqlgraph.NewFieldSpec(recentupdate.FieldID, field.TypeUUID))
	id, ok := ruuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RecentUpdate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recentupdate.FieldID)
		for _, f := range fields {
			if !recentupdate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != recentupdate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruuo.mutation.GetType(); ok {
		_spec.SetField(recentupdate.FieldType, field.TypeEnum, value)
	}
	if value, ok := ruuo.mutation.Title(); ok {
		_spec.SetField(recentupdate.FieldTitle, field.TypeString, value)
	}
	if value, ok := ruuo.mutation.Description(); ok {
		_spec.SetField(recentupdate.FieldDescription, field.TypeString, value)
	}
	if value, ok := ruuo.mutation.Date(); ok {
		_spec.SetField(recentupdate.FieldDate, field.TypeTime, value)
	}
	if value, ok := ruuo.mutation.Tags(); ok {
		_spec.SetField(recentupdate.FieldTags, field.TypeJSON, value)
	}
	if value, ok := ruuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, recentupdate.FieldTags, value)
		})
	}
	if ruuo.mutation.TagsCleared() {
		_spec.ClearField(recentupdate.FieldTags, field.TypeJSON)
	}
	if value, ok := ruuo.mutation.Status(); ok {
		_spec.SetField(recentupdate.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ruuo.mutation.Priority(); ok {
		_spec.SetField(recentupdate.FieldPriority, field.TypeEnum, value)
	}
	if value, ok := ruuo.mutation.ExternalID(); ok {
		_spec.SetField(recentupdate.FieldExternalID, field.TypeString, value)
	}
	if ruuo.mutation.ExternalIDCleared() {
		_spec.ClearField(recentupdate.FieldExternalID, field.TypeString)
	}
	if value, ok := ruuo.mutation.ImageURL(); ok {
		_spec.SetField(recentupdate.FieldImageURL, field.TypeString, value)
	}
	if ruuo.mutation.ImageURLCleared() {
		_spec.ClearField(recentupdate.FieldImageURL, field.TypeString)
	}
	if value, ok := ruuo.mutation.VideoURL(); ok {
		_spec.SetField(recentupdate.FieldVideoURL, field.TypeString, value)
	}
	if ruuo.mutation.VideoURLCleared() {
		_spec.ClearField(recentupdate.FieldVideoURL, field.TypeString)
	}
	if value, ok := ruuo.mutation.DocumentURL(); ok {
		_spec.SetField(recentupdate.FieldDocumentURL, field.TypeString, value)
	}
	if ruuo.mutation.DocumentURLCleared() {
		_spec.ClearField(recentupdate.FieldDocumentURL, field.TypeString)
	}
	if value, ok := ruuo.mutation.Gallery(); ok {
		_spec.SetField(recentupdate.FieldGallery, field.TypeJSON, value)
	}
	if value, ok := ruuo.mutation.AppendedGallery(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, recentupdate.FieldGallery, value)
		})
	}
	if ruuo.mutation.GalleryCleared() {
		_spec.ClearField(recentupdate.FieldGallery, field.TypeJSON)
	}
	if value, ok := ruuo.mutation.Attachments(); ok {
		_spec.SetField(recentupdate.FieldAttachments, field.TypeJSON, value)
	}
	if value, ok := ruuo.mutation.AppendedAttachments(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, recentupdate.FieldAttachments, value)
		})
	}
	if ruuo.mutation.AttachmentsCleared() {
		_spec.ClearField(recentupdate.FieldAttachments, field.TypeJSON)
	}
	if value, ok := ruuo.mutation.MediaMetadata(); ok {
		_spec.SetField(recentupdate.FieldMediaMetadata, field.TypeJSON, value)
	}
	if ruuo.mutation.MediaMetadataCleared() {
		_spec.ClearField(recentupdate.FieldMediaMetadata, field.TypeJSON)
	}
	if value, ok := ruuo.mutation.DemoURL(); ok {
		_spec.SetField(recentupdate.FieldDemoURL, field.TypeString, value)
	}
	if ruuo.mutation.DemoURLCleared() {
		_spec.ClearField(recentupdate.FieldDemoURL, field.TypeString)
	}
	if value, ok := ruuo.mutation.GithubURL(); ok {
		_spec.SetField(recentupdate.FieldGithubURL, field.TypeString, value)
	}
	if ruuo.mutation.GithubURLCleared() {
		_spec.ClearField(recentupdate.FieldGithubURL, field.TypeString)
	}
	if value, ok := ruuo.mutation.ExternalURL(); ok {
		_spec.SetField(recentupdate.FieldExternalURL, field.TypeString, value)
	}
	if ruuo.mutation.ExternalURLCleared() {
		_spec.ClearField(recentupdate.FieldExternalURL, field.TypeString)
	}
	if value, ok := ruuo.mutation.SocialLinks(); ok {
		_spec.SetField(recentupdate.FieldSocialLinks, field.TypeJSON, value)
	}
	if value, ok := ruuo.mutation.AppendedSocialLinks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, recentupdate.FieldSocialLinks, value)
		})
	}
	if ruuo.mutation.SocialLinksCleared() {
		_spec.ClearField(recentupdate.FieldSocialLinks, field.TypeJSON)
	}
	if value, ok := ruuo.mutation.SortOrder(); ok {
		_spec.SetField(recentupdate.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := ruuo.mutation.AddedSortOrder(); ok {
		_spec.AddField(recentupdate.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := ruuo.mutation.UpdatedAt(); ok {
		_spec.SetField(recentupdate.FieldUpdatedAt, field.TypeTime, value)
	}
	if ruuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recentupdate.UserTable,
			Columns: []string{recentupdate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recentupdate.UserTable,
			Columns: []string{recentupdate.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruuo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recentupdate.TranslationsTable,
			Columns: []string{recentupdate.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recentupdatetranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruuo.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !ruuo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recentupdate.TranslationsTable,
			Columns: []string{recentupdate.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recentupdatetranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruuo.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recentupdate.TranslationsTable,
			Columns: []string{recentupdate.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recentupdatetranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RecentUpdate{config: ruuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recentupdate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruuo.mutation.done = true
	return _node, nil
}
