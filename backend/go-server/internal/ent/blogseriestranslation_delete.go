// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"silan-backend/internal/ent/blogseriestranslation"
	"silan-backend/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlogSeriesTranslationDelete is the builder for deleting a BlogSeriesTranslation entity.
type BlogSeriesTranslationDelete struct {
	config
	hooks    []Hook
	mutation *BlogSeriesTranslationMutation
}

// Where appends a list predicates to the BlogSeriesTranslationDelete builder.
func (bstd *BlogSeriesTranslationDelete) Where(ps ...predicate.BlogSeriesTranslation) *BlogSeriesTranslationDelete {
	bstd.mutation.Where(ps...)
	return bstd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bstd *BlogSeriesTranslationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, bstd.sqlExec, bstd.mutation, bstd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bstd *BlogSeriesTranslationDelete) ExecX(ctx context.Context) int {
	n, err := bstd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bstd *BlogSeriesTranslationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(blogseriestranslation.Table, sqlgraph.NewFieldSpec(blogseriestranslation.FieldID, field.TypeUUID))
	if ps := bstd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bstd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bstd.mutation.done = true
	return affected, err
}

// BlogSeriesTranslationDeleteOne is the builder for deleting a single BlogSeriesTranslation entity.
type BlogSeriesTranslationDeleteOne struct {
	bstd *BlogSeriesTranslationDelete
}

// Where appends a list predicates to the BlogSeriesTranslationDelete builder.
func (bstdo *BlogSeriesTranslationDeleteOne) Where(ps ...predicate.BlogSeriesTranslation) *BlogSeriesTranslationDeleteOne {
	bstdo.bstd.mutation.Where(ps...)
	return bstdo
}

// Exec executes the deletion query.
func (bstdo *BlogSeriesTranslationDeleteOne) Exec(ctx context.Context) error {
	n, err := bstdo.bstd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{blogseriestranslation.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bstdo *BlogSeriesTranslationDeleteOne) ExecX(ctx context.Context) {
	if err := bstdo.Exec(ctx); err != nil {
		panic(err)
	}
}
