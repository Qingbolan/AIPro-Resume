// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/researchproject"
	"silan-backend/internal/ent/researchprojecttranslation"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ResearchProjectTranslationCreate is the builder for creating a ResearchProjectTranslation entity.
type ResearchProjectTranslationCreate struct {
	config
	mutation *ResearchProjectTranslationMutation
	hooks    []Hook
}

// SetResearchProjectID sets the "research_project_id" field.
func (rptc *ResearchProjectTranslationCreate) SetResearchProjectID(u uuid.UUID) *ResearchProjectTranslationCreate {
	rptc.mutation.SetResearchProjectID(u)
	return rptc
}

// SetLanguageCode sets the "language_code" field.
func (rptc *ResearchProjectTranslationCreate) SetLanguageCode(s string) *ResearchProjectTranslationCreate {
	rptc.mutation.SetLanguageCode(s)
	return rptc
}

// SetTitle sets the "title" field.
func (rptc *ResearchProjectTranslationCreate) SetTitle(s string) *ResearchProjectTranslationCreate {
	rptc.mutation.SetTitle(s)
	return rptc
}

// SetLocation sets the "location" field.
func (rptc *ResearchProjectTranslationCreate) SetLocation(s string) *ResearchProjectTranslationCreate {
	rptc.mutation.SetLocation(s)
	return rptc
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (rptc *ResearchProjectTranslationCreate) SetNillableLocation(s *string) *ResearchProjectTranslationCreate {
	if s != nil {
		rptc.SetLocation(*s)
	}
	return rptc
}

// SetResearchType sets the "research_type" field.
func (rptc *ResearchProjectTranslationCreate) SetResearchType(s string) *ResearchProjectTranslationCreate {
	rptc.mutation.SetResearchType(s)
	return rptc
}

// SetNillableResearchType sets the "research_type" field if the given value is not nil.
func (rptc *ResearchProjectTranslationCreate) SetNillableResearchType(s *string) *ResearchProjectTranslationCreate {
	if s != nil {
		rptc.SetResearchType(*s)
	}
	return rptc
}

// SetFundingSource sets the "funding_source" field.
func (rptc *ResearchProjectTranslationCreate) SetFundingSource(s string) *ResearchProjectTranslationCreate {
	rptc.mutation.SetFundingSource(s)
	return rptc
}

// SetNillableFundingSource sets the "funding_source" field if the given value is not nil.
func (rptc *ResearchProjectTranslationCreate) SetNillableFundingSource(s *string) *ResearchProjectTranslationCreate {
	if s != nil {
		rptc.SetFundingSource(*s)
	}
	return rptc
}

// SetCreatedAt sets the "created_at" field.
func (rptc *ResearchProjectTranslationCreate) SetCreatedAt(t time.Time) *ResearchProjectTranslationCreate {
	rptc.mutation.SetCreatedAt(t)
	return rptc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rptc *ResearchProjectTranslationCreate) SetNillableCreatedAt(t *time.Time) *ResearchProjectTranslationCreate {
	if t != nil {
		rptc.SetCreatedAt(*t)
	}
	return rptc
}

// SetUpdatedAt sets the "updated_at" field.
func (rptc *ResearchProjectTranslationCreate) SetUpdatedAt(t time.Time) *ResearchProjectTranslationCreate {
	rptc.mutation.SetUpdatedAt(t)
	return rptc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rptc *ResearchProjectTranslationCreate) SetNillableUpdatedAt(t *time.Time) *ResearchProjectTranslationCreate {
	if t != nil {
		rptc.SetUpdatedAt(*t)
	}
	return rptc
}

// SetID sets the "id" field.
func (rptc *ResearchProjectTranslationCreate) SetID(u uuid.UUID) *ResearchProjectTranslationCreate {
	rptc.mutation.SetID(u)
	return rptc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rptc *ResearchProjectTranslationCreate) SetNillableID(u *uuid.UUID) *ResearchProjectTranslationCreate {
	if u != nil {
		rptc.SetID(*u)
	}
	return rptc
}

// SetResearchProject sets the "research_project" edge to the ResearchProject entity.
func (rptc *ResearchProjectTranslationCreate) SetResearchProject(r *ResearchProject) *ResearchProjectTranslationCreate {
	return rptc.SetResearchProjectID(r.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (rptc *ResearchProjectTranslationCreate) SetLanguageID(id string) *ResearchProjectTranslationCreate {
	rptc.mutation.SetLanguageID(id)
	return rptc
}

// SetLanguage sets the "language" edge to the Language entity.
func (rptc *ResearchProjectTranslationCreate) SetLanguage(l *Language) *ResearchProjectTranslationCreate {
	return rptc.SetLanguageID(l.ID)
}

// Mutation returns the ResearchProjectTranslationMutation object of the builder.
func (rptc *ResearchProjectTranslationCreate) Mutation() *ResearchProjectTranslationMutation {
	return rptc.mutation
}

// Save creates the ResearchProjectTranslation in the database.
func (rptc *ResearchProjectTranslationCreate) Save(ctx context.Context) (*ResearchProjectTranslation, error) {
	rptc.defaults()
	return withHooks(ctx, rptc.sqlSave, rptc.mutation, rptc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rptc *ResearchProjectTranslationCreate) SaveX(ctx context.Context) *ResearchProjectTranslation {
	v, err := rptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rptc *ResearchProjectTranslationCreate) Exec(ctx context.Context) error {
	_, err := rptc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rptc *ResearchProjectTranslationCreate) ExecX(ctx context.Context) {
	if err := rptc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rptc *ResearchProjectTranslationCreate) defaults() {
	if _, ok := rptc.mutation.CreatedAt(); !ok {
		v := researchprojecttranslation.DefaultCreatedAt()
		rptc.mutation.SetCreatedAt(v)
	}
	if _, ok := rptc.mutation.UpdatedAt(); !ok {
		v := researchprojecttranslation.DefaultUpdatedAt()
		rptc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rptc.mutation.ID(); !ok {
		v := researchprojecttranslation.DefaultID()
		rptc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rptc *ResearchProjectTranslationCreate) check() error {
	if _, ok := rptc.mutation.ResearchProjectID(); !ok {
		return &ValidationError{Name: "research_project_id", err: errors.New(`ent: missing required field "ResearchProjectTranslation.research_project_id"`)}
	}
	if _, ok := rptc.mutation.LanguageCode(); !ok {
		return &ValidationError{Name: "language_code", err: errors.New(`ent: missing required field "ResearchProjectTranslation.language_code"`)}
	}
	if v, ok := rptc.mutation.LanguageCode(); ok {
		if err := researchprojecttranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "ResearchProjectTranslation.language_code": %w`, err)}
		}
	}
	if _, ok := rptc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "ResearchProjectTranslation.title"`)}
	}
	if v, ok := rptc.mutation.Title(); ok {
		if err := researchprojecttranslation.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "ResearchProjectTranslation.title": %w`, err)}
		}
	}
	if v, ok := rptc.mutation.Location(); ok {
		if err := researchprojecttranslation.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "ResearchProjectTranslation.location": %w`, err)}
		}
	}
	if v, ok := rptc.mutation.ResearchType(); ok {
		if err := researchprojecttranslation.ResearchTypeValidator(v); err != nil {
			return &ValidationError{Name: "research_type", err: fmt.Errorf(`ent: validator failed for field "ResearchProjectTranslation.research_type": %w`, err)}
		}
	}
	if v, ok := rptc.mutation.FundingSource(); ok {
		if err := researchprojecttranslation.FundingSourceValidator(v); err != nil {
			return &ValidationError{Name: "funding_source", err: fmt.Errorf(`ent: validator failed for field "ResearchProjectTranslation.funding_source": %w`, err)}
		}
	}
	if _, ok := rptc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ResearchProjectTranslation.created_at"`)}
	}
	if _, ok := rptc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ResearchProjectTranslation.updated_at"`)}
	}
	if len(rptc.mutation.ResearchProjectIDs()) == 0 {
		return &ValidationError{Name: "research_project", err: errors.New(`ent: missing required edge "ResearchProjectTranslation.research_project"`)}
	}
	if len(rptc.mutation.LanguageIDs()) == 0 {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required edge "ResearchProjectTranslation.language"`)}
	}
	return nil
}

func (rptc *ResearchProjectTranslationCreate) sqlSave(ctx context.Context) (*ResearchProjectTranslation, error) {
	if err := rptc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rptc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rptc.mutation.id = &_node.ID
	rptc.mutation.done = true
	return _node, nil
}

func (rptc *ResearchProjectTranslationCreate) createSpec() (*ResearchProjectTranslation, *sqlgraph.CreateSpec) {
	var (
		_node = &ResearchProjectTranslation{config: rptc.config}
		_spec = sqlgraph.NewCreateSpec(researchprojecttranslation.Table, sqlgraph.NewFieldSpec(researchprojecttranslation.FieldID, field.TypeUUID))
	)
	if id, ok := rptc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rptc.mutation.Title(); ok {
		_spec.SetField(researchprojecttranslation.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := rptc.mutation.Location(); ok {
		_spec.SetField(researchprojecttranslation.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := rptc.mutation.ResearchType(); ok {
		_spec.SetField(researchprojecttranslation.FieldResearchType, field.TypeString, value)
		_node.ResearchType = value
	}
	if value, ok := rptc.mutation.FundingSource(); ok {
		_spec.SetField(researchprojecttranslation.FieldFundingSource, field.TypeString, value)
		_node.FundingSource = value
	}
	if value, ok := rptc.mutation.CreatedAt(); ok {
		_spec.SetField(researchprojecttranslation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rptc.mutation.UpdatedAt(); ok {
		_spec.SetField(researchprojecttranslation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := rptc.mutation.ResearchProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   researchprojecttranslation.ResearchProjectTable,
			Columns: []string{researchprojecttranslation.ResearchProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchproject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ResearchProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rptc.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   researchprojecttranslation.LanguageTable,
			Columns: []string{researchprojecttranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LanguageCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ResearchProjectTranslationCreateBulk is the builder for creating many ResearchProjectTranslation entities in bulk.
type ResearchProjectTranslationCreateBulk struct {
	config
	err      error
	builders []*ResearchProjectTranslationCreate
}

// Save creates the ResearchProjectTranslation entities in the database.
func (rptcb *ResearchProjectTranslationCreateBulk) Save(ctx context.Context) ([]*ResearchProjectTranslation, error) {
	if rptcb.err != nil {
		return nil, rptcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rptcb.builders))
	nodes := make([]*ResearchProjectTranslation, len(rptcb.builders))
	mutators := make([]Mutator, len(rptcb.builders))
	for i := range rptcb.builders {
		func(i int, root context.Context) {
			builder := rptcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResearchProjectTranslationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rptcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rptcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rptcb *ResearchProjectTranslationCreateBulk) SaveX(ctx context.Context) []*ResearchProjectTranslation {
	v, err := rptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rptcb *ResearchProjectTranslationCreateBulk) Exec(ctx context.Context) error {
	_, err := rptcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rptcb *ResearchProjectTranslationCreateBulk) ExecX(ctx context.Context) {
	if err := rptcb.Exec(ctx); err != nil {
		panic(err)
	}
}
