// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/workexperience"
	"silan-backend/internal/ent/workexperiencetranslation"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkExperienceTranslationQuery is the builder for querying WorkExperienceTranslation entities.
type WorkExperienceTranslationQuery struct {
	config
	ctx                *QueryContext
	order              []workexperiencetranslation.OrderOption
	inters             []Interceptor
	predicates         []predicate.WorkExperienceTranslation
	withWorkExperience *WorkExperienceQuery
	withLanguage       *LanguageQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WorkExperienceTranslationQuery builder.
func (wetq *WorkExperienceTranslationQuery) Where(ps ...predicate.WorkExperienceTranslation) *WorkExperienceTranslationQuery {
	wetq.predicates = append(wetq.predicates, ps...)
	return wetq
}

// Limit the number of records to be returned by this query.
func (wetq *WorkExperienceTranslationQuery) Limit(limit int) *WorkExperienceTranslationQuery {
	wetq.ctx.Limit = &limit
	return wetq
}

// Offset to start from.
func (wetq *WorkExperienceTranslationQuery) Offset(offset int) *WorkExperienceTranslationQuery {
	wetq.ctx.Offset = &offset
	return wetq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (wetq *WorkExperienceTranslationQuery) Unique(unique bool) *WorkExperienceTranslationQuery {
	wetq.ctx.Unique = &unique
	return wetq
}

// Order specifies how the records should be ordered.
func (wetq *WorkExperienceTranslationQuery) Order(o ...workexperiencetranslation.OrderOption) *WorkExperienceTranslationQuery {
	wetq.order = append(wetq.order, o...)
	return wetq
}

// QueryWorkExperience chains the current query on the "work_experience" edge.
func (wetq *WorkExperienceTranslationQuery) QueryWorkExperience() *WorkExperienceQuery {
	query := (&WorkExperienceClient{config: wetq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wetq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wetq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workexperiencetranslation.Table, workexperiencetranslation.FieldID, selector),
			sqlgraph.To(workexperience.Table, workexperience.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workexperiencetranslation.WorkExperienceTable, workexperiencetranslation.WorkExperienceColumn),
		)
		fromU = sqlgraph.SetNeighbors(wetq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLanguage chains the current query on the "language" edge.
func (wetq *WorkExperienceTranslationQuery) QueryLanguage() *LanguageQuery {
	query := (&LanguageClient{config: wetq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wetq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wetq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workexperiencetranslation.Table, workexperiencetranslation.FieldID, selector),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workexperiencetranslation.LanguageTable, workexperiencetranslation.LanguageColumn),
		)
		fromU = sqlgraph.SetNeighbors(wetq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first WorkExperienceTranslation entity from the query.
// Returns a *NotFoundError when no WorkExperienceTranslation was found.
func (wetq *WorkExperienceTranslationQuery) First(ctx context.Context) (*WorkExperienceTranslation, error) {
	nodes, err := wetq.Limit(1).All(setContextOp(ctx, wetq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{workexperiencetranslation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (wetq *WorkExperienceTranslationQuery) FirstX(ctx context.Context) *WorkExperienceTranslation {
	node, err := wetq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WorkExperienceTranslation ID from the query.
// Returns a *NotFoundError when no WorkExperienceTranslation ID was found.
func (wetq *WorkExperienceTranslationQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = wetq.Limit(1).IDs(setContextOp(ctx, wetq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{workexperiencetranslation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (wetq *WorkExperienceTranslationQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := wetq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WorkExperienceTranslation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one WorkExperienceTranslation entity is found.
// Returns a *NotFoundError when no WorkExperienceTranslation entities are found.
func (wetq *WorkExperienceTranslationQuery) Only(ctx context.Context) (*WorkExperienceTranslation, error) {
	nodes, err := wetq.Limit(2).All(setContextOp(ctx, wetq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{workexperiencetranslation.Label}
	default:
		return nil, &NotSingularError{workexperiencetranslation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (wetq *WorkExperienceTranslationQuery) OnlyX(ctx context.Context) *WorkExperienceTranslation {
	node, err := wetq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WorkExperienceTranslation ID in the query.
// Returns a *NotSingularError when more than one WorkExperienceTranslation ID is found.
// Returns a *NotFoundError when no entities are found.
func (wetq *WorkExperienceTranslationQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = wetq.Limit(2).IDs(setContextOp(ctx, wetq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{workexperiencetranslation.Label}
	default:
		err = &NotSingularError{workexperiencetranslation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (wetq *WorkExperienceTranslationQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := wetq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WorkExperienceTranslations.
func (wetq *WorkExperienceTranslationQuery) All(ctx context.Context) ([]*WorkExperienceTranslation, error) {
	ctx = setContextOp(ctx, wetq.ctx, ent.OpQueryAll)
	if err := wetq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*WorkExperienceTranslation, *WorkExperienceTranslationQuery]()
	return withInterceptors[[]*WorkExperienceTranslation](ctx, wetq, qr, wetq.inters)
}

// AllX is like All, but panics if an error occurs.
func (wetq *WorkExperienceTranslationQuery) AllX(ctx context.Context) []*WorkExperienceTranslation {
	nodes, err := wetq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WorkExperienceTranslation IDs.
func (wetq *WorkExperienceTranslationQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if wetq.ctx.Unique == nil && wetq.path != nil {
		wetq.Unique(true)
	}
	ctx = setContextOp(ctx, wetq.ctx, ent.OpQueryIDs)
	if err = wetq.Select(workexperiencetranslation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (wetq *WorkExperienceTranslationQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := wetq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (wetq *WorkExperienceTranslationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, wetq.ctx, ent.OpQueryCount)
	if err := wetq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, wetq, querierCount[*WorkExperienceTranslationQuery](), wetq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (wetq *WorkExperienceTranslationQuery) CountX(ctx context.Context) int {
	count, err := wetq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (wetq *WorkExperienceTranslationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, wetq.ctx, ent.OpQueryExist)
	switch _, err := wetq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (wetq *WorkExperienceTranslationQuery) ExistX(ctx context.Context) bool {
	exist, err := wetq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WorkExperienceTranslationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (wetq *WorkExperienceTranslationQuery) Clone() *WorkExperienceTranslationQuery {
	if wetq == nil {
		return nil
	}
	return &WorkExperienceTranslationQuery{
		config:             wetq.config,
		ctx:                wetq.ctx.Clone(),
		order:              append([]workexperiencetranslation.OrderOption{}, wetq.order...),
		inters:             append([]Interceptor{}, wetq.inters...),
		predicates:         append([]predicate.WorkExperienceTranslation{}, wetq.predicates...),
		withWorkExperience: wetq.withWorkExperience.Clone(),
		withLanguage:       wetq.withLanguage.Clone(),
		// clone intermediate query.
		sql:  wetq.sql.Clone(),
		path: wetq.path,
	}
}

// WithWorkExperience tells the query-builder to eager-load the nodes that are connected to
// the "work_experience" edge. The optional arguments are used to configure the query builder of the edge.
func (wetq *WorkExperienceTranslationQuery) WithWorkExperience(opts ...func(*WorkExperienceQuery)) *WorkExperienceTranslationQuery {
	query := (&WorkExperienceClient{config: wetq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wetq.withWorkExperience = query
	return wetq
}

// WithLanguage tells the query-builder to eager-load the nodes that are connected to
// the "language" edge. The optional arguments are used to configure the query builder of the edge.
func (wetq *WorkExperienceTranslationQuery) WithLanguage(opts ...func(*LanguageQuery)) *WorkExperienceTranslationQuery {
	query := (&LanguageClient{config: wetq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wetq.withLanguage = query
	return wetq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		WorkExperienceID uuid.UUID `json:"work_experience_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WorkExperienceTranslation.Query().
//		GroupBy(workexperiencetranslation.FieldWorkExperienceID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (wetq *WorkExperienceTranslationQuery) GroupBy(field string, fields ...string) *WorkExperienceTranslationGroupBy {
	wetq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &WorkExperienceTranslationGroupBy{build: wetq}
	grbuild.flds = &wetq.ctx.Fields
	grbuild.label = workexperiencetranslation.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		WorkExperienceID uuid.UUID `json:"work_experience_id,omitempty"`
//	}
//
//	client.WorkExperienceTranslation.Query().
//		Select(workexperiencetranslation.FieldWorkExperienceID).
//		Scan(ctx, &v)
func (wetq *WorkExperienceTranslationQuery) Select(fields ...string) *WorkExperienceTranslationSelect {
	wetq.ctx.Fields = append(wetq.ctx.Fields, fields...)
	sbuild := &WorkExperienceTranslationSelect{WorkExperienceTranslationQuery: wetq}
	sbuild.label = workexperiencetranslation.Label
	sbuild.flds, sbuild.scan = &wetq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a WorkExperienceTranslationSelect configured with the given aggregations.
func (wetq *WorkExperienceTranslationQuery) Aggregate(fns ...AggregateFunc) *WorkExperienceTranslationSelect {
	return wetq.Select().Aggregate(fns...)
}

func (wetq *WorkExperienceTranslationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range wetq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, wetq); err != nil {
				return err
			}
		}
	}
	for _, f := range wetq.ctx.Fields {
		if !workexperiencetranslation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if wetq.path != nil {
		prev, err := wetq.path(ctx)
		if err != nil {
			return err
		}
		wetq.sql = prev
	}
	return nil
}

func (wetq *WorkExperienceTranslationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*WorkExperienceTranslation, error) {
	var (
		nodes       = []*WorkExperienceTranslation{}
		_spec       = wetq.querySpec()
		loadedTypes = [2]bool{
			wetq.withWorkExperience != nil,
			wetq.withLanguage != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*WorkExperienceTranslation).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &WorkExperienceTranslation{config: wetq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, wetq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := wetq.withWorkExperience; query != nil {
		if err := wetq.loadWorkExperience(ctx, query, nodes, nil,
			func(n *WorkExperienceTranslation, e *WorkExperience) { n.Edges.WorkExperience = e }); err != nil {
			return nil, err
		}
	}
	if query := wetq.withLanguage; query != nil {
		if err := wetq.loadLanguage(ctx, query, nodes, nil,
			func(n *WorkExperienceTranslation, e *Language) { n.Edges.Language = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (wetq *WorkExperienceTranslationQuery) loadWorkExperience(ctx context.Context, query *WorkExperienceQuery, nodes []*WorkExperienceTranslation, init func(*WorkExperienceTranslation), assign func(*WorkExperienceTranslation, *WorkExperience)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*WorkExperienceTranslation)
	for i := range nodes {
		fk := nodes[i].WorkExperienceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(workexperience.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "work_experience_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (wetq *WorkExperienceTranslationQuery) loadLanguage(ctx context.Context, query *LanguageQuery, nodes []*WorkExperienceTranslation, init func(*WorkExperienceTranslation), assign func(*WorkExperienceTranslation, *Language)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*WorkExperienceTranslation)
	for i := range nodes {
		fk := nodes[i].LanguageCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(language.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "language_code" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (wetq *WorkExperienceTranslationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := wetq.querySpec()
	_spec.Node.Columns = wetq.ctx.Fields
	if len(wetq.ctx.Fields) > 0 {
		_spec.Unique = wetq.ctx.Unique != nil && *wetq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, wetq.driver, _spec)
}

func (wetq *WorkExperienceTranslationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(workexperiencetranslation.Table, workexperiencetranslation.Columns, sqlgraph.NewFieldSpec(workexperiencetranslation.FieldID, field.TypeUUID))
	_spec.From = wetq.sql
	if unique := wetq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if wetq.path != nil {
		_spec.Unique = true
	}
	if fields := wetq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workexperiencetranslation.FieldID)
		for i := range fields {
			if fields[i] != workexperiencetranslation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if wetq.withWorkExperience != nil {
			_spec.Node.AddColumnOnce(workexperiencetranslation.FieldWorkExperienceID)
		}
		if wetq.withLanguage != nil {
			_spec.Node.AddColumnOnce(workexperiencetranslation.FieldLanguageCode)
		}
	}
	if ps := wetq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := wetq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := wetq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := wetq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (wetq *WorkExperienceTranslationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(wetq.driver.Dialect())
	t1 := builder.Table(workexperiencetranslation.Table)
	columns := wetq.ctx.Fields
	if len(columns) == 0 {
		columns = workexperiencetranslation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if wetq.sql != nil {
		selector = wetq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if wetq.ctx.Unique != nil && *wetq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range wetq.predicates {
		p(selector)
	}
	for _, p := range wetq.order {
		p(selector)
	}
	if offset := wetq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := wetq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WorkExperienceTranslationGroupBy is the group-by builder for WorkExperienceTranslation entities.
type WorkExperienceTranslationGroupBy struct {
	selector
	build *WorkExperienceTranslationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wetgb *WorkExperienceTranslationGroupBy) Aggregate(fns ...AggregateFunc) *WorkExperienceTranslationGroupBy {
	wetgb.fns = append(wetgb.fns, fns...)
	return wetgb
}

// Scan applies the selector query and scans the result into the given value.
func (wetgb *WorkExperienceTranslationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wetgb.build.ctx, ent.OpQueryGroupBy)
	if err := wetgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkExperienceTranslationQuery, *WorkExperienceTranslationGroupBy](ctx, wetgb.build, wetgb, wetgb.build.inters, v)
}

func (wetgb *WorkExperienceTranslationGroupBy) sqlScan(ctx context.Context, root *WorkExperienceTranslationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(wetgb.fns))
	for _, fn := range wetgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*wetgb.flds)+len(wetgb.fns))
		for _, f := range *wetgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*wetgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wetgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// WorkExperienceTranslationSelect is the builder for selecting fields of WorkExperienceTranslation entities.
type WorkExperienceTranslationSelect struct {
	*WorkExperienceTranslationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (wets *WorkExperienceTranslationSelect) Aggregate(fns ...AggregateFunc) *WorkExperienceTranslationSelect {
	wets.fns = append(wets.fns, fns...)
	return wets
}

// Scan applies the selector query and scans the result into the given value.
func (wets *WorkExperienceTranslationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wets.ctx, ent.OpQuerySelect)
	if err := wets.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkExperienceTranslationQuery, *WorkExperienceTranslationSelect](ctx, wets.WorkExperienceTranslationQuery, wets, wets.inters, v)
}

func (wets *WorkExperienceTranslationSelect) sqlScan(ctx context.Context, root *WorkExperienceTranslationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(wets.fns))
	for _, fn := range wets.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*wets.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wets.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
