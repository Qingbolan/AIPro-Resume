// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/awardtranslation"
	"silan-backend/internal/ent/blogcategorytranslation"
	"silan-backend/internal/ent/blogposttranslation"
	"silan-backend/internal/ent/blogseriestranslation"
	"silan-backend/internal/ent/educationdetailtranslation"
	"silan-backend/internal/ent/educationtranslation"
	"silan-backend/internal/ent/ideatranslation"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/personalinfotranslation"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/projectdetailtranslation"
	"silan-backend/internal/ent/projectimagetranslation"
	"silan-backend/internal/ent/projecttranslation"
	"silan-backend/internal/ent/publicationtranslation"
	"silan-backend/internal/ent/recentupdatetranslation"
	"silan-backend/internal/ent/researchprojectdetailtranslation"
	"silan-backend/internal/ent/researchprojecttranslation"
	"silan-backend/internal/ent/workexperiencedetailtranslation"
	"silan-backend/internal/ent/workexperiencetranslation"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// LanguageUpdate is the builder for updating Language entities.
type LanguageUpdate struct {
	config
	hooks    []Hook
	mutation *LanguageMutation
}

// Where appends a list predicates to the LanguageUpdate builder.
func (lu *LanguageUpdate) Where(ps ...predicate.Language) *LanguageUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetName sets the "name" field.
func (lu *LanguageUpdate) SetName(s string) *LanguageUpdate {
	lu.mutation.SetName(s)
	return lu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (lu *LanguageUpdate) SetNillableName(s *string) *LanguageUpdate {
	if s != nil {
		lu.SetName(*s)
	}
	return lu
}

// SetNativeName sets the "native_name" field.
func (lu *LanguageUpdate) SetNativeName(s string) *LanguageUpdate {
	lu.mutation.SetNativeName(s)
	return lu
}

// SetNillableNativeName sets the "native_name" field if the given value is not nil.
func (lu *LanguageUpdate) SetNillableNativeName(s *string) *LanguageUpdate {
	if s != nil {
		lu.SetNativeName(*s)
	}
	return lu
}

// SetIsActive sets the "is_active" field.
func (lu *LanguageUpdate) SetIsActive(b bool) *LanguageUpdate {
	lu.mutation.SetIsActive(b)
	return lu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (lu *LanguageUpdate) SetNillableIsActive(b *bool) *LanguageUpdate {
	if b != nil {
		lu.SetIsActive(*b)
	}
	return lu
}

// AddPersonalInfoTranslationIDs adds the "personal_info_translations" edge to the PersonalInfoTranslation entity by IDs.
func (lu *LanguageUpdate) AddPersonalInfoTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.AddPersonalInfoTranslationIDs(ids...)
	return lu
}

// AddPersonalInfoTranslations adds the "personal_info_translations" edges to the PersonalInfoTranslation entity.
func (lu *LanguageUpdate) AddPersonalInfoTranslations(p ...*PersonalInfoTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lu.AddPersonalInfoTranslationIDs(ids...)
}

// AddEducationTranslationIDs adds the "education_translations" edge to the EducationTranslation entity by IDs.
func (lu *LanguageUpdate) AddEducationTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.AddEducationTranslationIDs(ids...)
	return lu
}

// AddEducationTranslations adds the "education_translations" edges to the EducationTranslation entity.
func (lu *LanguageUpdate) AddEducationTranslations(e ...*EducationTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return lu.AddEducationTranslationIDs(ids...)
}

// AddEducationDetailTranslationIDs adds the "education_detail_translations" edge to the EducationDetailTranslation entity by IDs.
func (lu *LanguageUpdate) AddEducationDetailTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.AddEducationDetailTranslationIDs(ids...)
	return lu
}

// AddEducationDetailTranslations adds the "education_detail_translations" edges to the EducationDetailTranslation entity.
func (lu *LanguageUpdate) AddEducationDetailTranslations(e ...*EducationDetailTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return lu.AddEducationDetailTranslationIDs(ids...)
}

// AddWorkExperienceTranslationIDs adds the "work_experience_translations" edge to the WorkExperienceTranslation entity by IDs.
func (lu *LanguageUpdate) AddWorkExperienceTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.AddWorkExperienceTranslationIDs(ids...)
	return lu
}

// AddWorkExperienceTranslations adds the "work_experience_translations" edges to the WorkExperienceTranslation entity.
func (lu *LanguageUpdate) AddWorkExperienceTranslations(w ...*WorkExperienceTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return lu.AddWorkExperienceTranslationIDs(ids...)
}

// AddWorkExperienceDetailTranslationIDs adds the "work_experience_detail_translations" edge to the WorkExperienceDetailTranslation entity by IDs.
func (lu *LanguageUpdate) AddWorkExperienceDetailTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.AddWorkExperienceDetailTranslationIDs(ids...)
	return lu
}

// AddWorkExperienceDetailTranslations adds the "work_experience_detail_translations" edges to the WorkExperienceDetailTranslation entity.
func (lu *LanguageUpdate) AddWorkExperienceDetailTranslations(w ...*WorkExperienceDetailTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return lu.AddWorkExperienceDetailTranslationIDs(ids...)
}

// AddProjectTranslationIDs adds the "project_translations" edge to the ProjectTranslation entity by IDs.
func (lu *LanguageUpdate) AddProjectTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.AddProjectTranslationIDs(ids...)
	return lu
}

// AddProjectTranslations adds the "project_translations" edges to the ProjectTranslation entity.
func (lu *LanguageUpdate) AddProjectTranslations(p ...*ProjectTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lu.AddProjectTranslationIDs(ids...)
}

// AddProjectDetailTranslationIDs adds the "project_detail_translations" edge to the ProjectDetailTranslation entity by IDs.
func (lu *LanguageUpdate) AddProjectDetailTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.AddProjectDetailTranslationIDs(ids...)
	return lu
}

// AddProjectDetailTranslations adds the "project_detail_translations" edges to the ProjectDetailTranslation entity.
func (lu *LanguageUpdate) AddProjectDetailTranslations(p ...*ProjectDetailTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lu.AddProjectDetailTranslationIDs(ids...)
}

// AddProjectImageTranslationIDs adds the "project_image_translations" edge to the ProjectImageTranslation entity by IDs.
func (lu *LanguageUpdate) AddProjectImageTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.AddProjectImageTranslationIDs(ids...)
	return lu
}

// AddProjectImageTranslations adds the "project_image_translations" edges to the ProjectImageTranslation entity.
func (lu *LanguageUpdate) AddProjectImageTranslations(p ...*ProjectImageTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lu.AddProjectImageTranslationIDs(ids...)
}

// AddBlogCategoryTranslationIDs adds the "blog_category_translations" edge to the BlogCategoryTranslation entity by IDs.
func (lu *LanguageUpdate) AddBlogCategoryTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.AddBlogCategoryTranslationIDs(ids...)
	return lu
}

// AddBlogCategoryTranslations adds the "blog_category_translations" edges to the BlogCategoryTranslation entity.
func (lu *LanguageUpdate) AddBlogCategoryTranslations(b ...*BlogCategoryTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return lu.AddBlogCategoryTranslationIDs(ids...)
}

// AddBlogPostTranslationIDs adds the "blog_post_translations" edge to the BlogPostTranslation entity by IDs.
func (lu *LanguageUpdate) AddBlogPostTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.AddBlogPostTranslationIDs(ids...)
	return lu
}

// AddBlogPostTranslations adds the "blog_post_translations" edges to the BlogPostTranslation entity.
func (lu *LanguageUpdate) AddBlogPostTranslations(b ...*BlogPostTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return lu.AddBlogPostTranslationIDs(ids...)
}

// AddBlogSeriesTranslationIDs adds the "blog_series_translations" edge to the BlogSeriesTranslation entity by IDs.
func (lu *LanguageUpdate) AddBlogSeriesTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.AddBlogSeriesTranslationIDs(ids...)
	return lu
}

// AddBlogSeriesTranslations adds the "blog_series_translations" edges to the BlogSeriesTranslation entity.
func (lu *LanguageUpdate) AddBlogSeriesTranslations(b ...*BlogSeriesTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return lu.AddBlogSeriesTranslationIDs(ids...)
}

// AddIdeaTranslationIDs adds the "idea_translations" edge to the IdeaTranslation entity by IDs.
func (lu *LanguageUpdate) AddIdeaTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.AddIdeaTranslationIDs(ids...)
	return lu
}

// AddIdeaTranslations adds the "idea_translations" edges to the IdeaTranslation entity.
func (lu *LanguageUpdate) AddIdeaTranslations(i ...*IdeaTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return lu.AddIdeaTranslationIDs(ids...)
}

// AddResearchProjectTranslationIDs adds the "research_project_translations" edge to the ResearchProjectTranslation entity by IDs.
func (lu *LanguageUpdate) AddResearchProjectTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.AddResearchProjectTranslationIDs(ids...)
	return lu
}

// AddResearchProjectTranslations adds the "research_project_translations" edges to the ResearchProjectTranslation entity.
func (lu *LanguageUpdate) AddResearchProjectTranslations(r ...*ResearchProjectTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return lu.AddResearchProjectTranslationIDs(ids...)
}

// AddResearchProjectDetailTranslationIDs adds the "research_project_detail_translations" edge to the ResearchProjectDetailTranslation entity by IDs.
func (lu *LanguageUpdate) AddResearchProjectDetailTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.AddResearchProjectDetailTranslationIDs(ids...)
	return lu
}

// AddResearchProjectDetailTranslations adds the "research_project_detail_translations" edges to the ResearchProjectDetailTranslation entity.
func (lu *LanguageUpdate) AddResearchProjectDetailTranslations(r ...*ResearchProjectDetailTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return lu.AddResearchProjectDetailTranslationIDs(ids...)
}

// AddPublicationTranslationIDs adds the "publication_translations" edge to the PublicationTranslation entity by IDs.
func (lu *LanguageUpdate) AddPublicationTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.AddPublicationTranslationIDs(ids...)
	return lu
}

// AddPublicationTranslations adds the "publication_translations" edges to the PublicationTranslation entity.
func (lu *LanguageUpdate) AddPublicationTranslations(p ...*PublicationTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lu.AddPublicationTranslationIDs(ids...)
}

// AddAwardTranslationIDs adds the "award_translations" edge to the AwardTranslation entity by IDs.
func (lu *LanguageUpdate) AddAwardTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.AddAwardTranslationIDs(ids...)
	return lu
}

// AddAwardTranslations adds the "award_translations" edges to the AwardTranslation entity.
func (lu *LanguageUpdate) AddAwardTranslations(a ...*AwardTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return lu.AddAwardTranslationIDs(ids...)
}

// AddRecentUpdateTranslationIDs adds the "recent_update_translations" edge to the RecentUpdateTranslation entity by IDs.
func (lu *LanguageUpdate) AddRecentUpdateTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.AddRecentUpdateTranslationIDs(ids...)
	return lu
}

// AddRecentUpdateTranslations adds the "recent_update_translations" edges to the RecentUpdateTranslation entity.
func (lu *LanguageUpdate) AddRecentUpdateTranslations(r ...*RecentUpdateTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return lu.AddRecentUpdateTranslationIDs(ids...)
}

// Mutation returns the LanguageMutation object of the builder.
func (lu *LanguageUpdate) Mutation() *LanguageMutation {
	return lu.mutation
}

// ClearPersonalInfoTranslations clears all "personal_info_translations" edges to the PersonalInfoTranslation entity.
func (lu *LanguageUpdate) ClearPersonalInfoTranslations() *LanguageUpdate {
	lu.mutation.ClearPersonalInfoTranslations()
	return lu
}

// RemovePersonalInfoTranslationIDs removes the "personal_info_translations" edge to PersonalInfoTranslation entities by IDs.
func (lu *LanguageUpdate) RemovePersonalInfoTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.RemovePersonalInfoTranslationIDs(ids...)
	return lu
}

// RemovePersonalInfoTranslations removes "personal_info_translations" edges to PersonalInfoTranslation entities.
func (lu *LanguageUpdate) RemovePersonalInfoTranslations(p ...*PersonalInfoTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lu.RemovePersonalInfoTranslationIDs(ids...)
}

// ClearEducationTranslations clears all "education_translations" edges to the EducationTranslation entity.
func (lu *LanguageUpdate) ClearEducationTranslations() *LanguageUpdate {
	lu.mutation.ClearEducationTranslations()
	return lu
}

// RemoveEducationTranslationIDs removes the "education_translations" edge to EducationTranslation entities by IDs.
func (lu *LanguageUpdate) RemoveEducationTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.RemoveEducationTranslationIDs(ids...)
	return lu
}

// RemoveEducationTranslations removes "education_translations" edges to EducationTranslation entities.
func (lu *LanguageUpdate) RemoveEducationTranslations(e ...*EducationTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return lu.RemoveEducationTranslationIDs(ids...)
}

// ClearEducationDetailTranslations clears all "education_detail_translations" edges to the EducationDetailTranslation entity.
func (lu *LanguageUpdate) ClearEducationDetailTranslations() *LanguageUpdate {
	lu.mutation.ClearEducationDetailTranslations()
	return lu
}

// RemoveEducationDetailTranslationIDs removes the "education_detail_translations" edge to EducationDetailTranslation entities by IDs.
func (lu *LanguageUpdate) RemoveEducationDetailTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.RemoveEducationDetailTranslationIDs(ids...)
	return lu
}

// RemoveEducationDetailTranslations removes "education_detail_translations" edges to EducationDetailTranslation entities.
func (lu *LanguageUpdate) RemoveEducationDetailTranslations(e ...*EducationDetailTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return lu.RemoveEducationDetailTranslationIDs(ids...)
}

// ClearWorkExperienceTranslations clears all "work_experience_translations" edges to the WorkExperienceTranslation entity.
func (lu *LanguageUpdate) ClearWorkExperienceTranslations() *LanguageUpdate {
	lu.mutation.ClearWorkExperienceTranslations()
	return lu
}

// RemoveWorkExperienceTranslationIDs removes the "work_experience_translations" edge to WorkExperienceTranslation entities by IDs.
func (lu *LanguageUpdate) RemoveWorkExperienceTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.RemoveWorkExperienceTranslationIDs(ids...)
	return lu
}

// RemoveWorkExperienceTranslations removes "work_experience_translations" edges to WorkExperienceTranslation entities.
func (lu *LanguageUpdate) RemoveWorkExperienceTranslations(w ...*WorkExperienceTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return lu.RemoveWorkExperienceTranslationIDs(ids...)
}

// ClearWorkExperienceDetailTranslations clears all "work_experience_detail_translations" edges to the WorkExperienceDetailTranslation entity.
func (lu *LanguageUpdate) ClearWorkExperienceDetailTranslations() *LanguageUpdate {
	lu.mutation.ClearWorkExperienceDetailTranslations()
	return lu
}

// RemoveWorkExperienceDetailTranslationIDs removes the "work_experience_detail_translations" edge to WorkExperienceDetailTranslation entities by IDs.
func (lu *LanguageUpdate) RemoveWorkExperienceDetailTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.RemoveWorkExperienceDetailTranslationIDs(ids...)
	return lu
}

// RemoveWorkExperienceDetailTranslations removes "work_experience_detail_translations" edges to WorkExperienceDetailTranslation entities.
func (lu *LanguageUpdate) RemoveWorkExperienceDetailTranslations(w ...*WorkExperienceDetailTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return lu.RemoveWorkExperienceDetailTranslationIDs(ids...)
}

// ClearProjectTranslations clears all "project_translations" edges to the ProjectTranslation entity.
func (lu *LanguageUpdate) ClearProjectTranslations() *LanguageUpdate {
	lu.mutation.ClearProjectTranslations()
	return lu
}

// RemoveProjectTranslationIDs removes the "project_translations" edge to ProjectTranslation entities by IDs.
func (lu *LanguageUpdate) RemoveProjectTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.RemoveProjectTranslationIDs(ids...)
	return lu
}

// RemoveProjectTranslations removes "project_translations" edges to ProjectTranslation entities.
func (lu *LanguageUpdate) RemoveProjectTranslations(p ...*ProjectTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lu.RemoveProjectTranslationIDs(ids...)
}

// ClearProjectDetailTranslations clears all "project_detail_translations" edges to the ProjectDetailTranslation entity.
func (lu *LanguageUpdate) ClearProjectDetailTranslations() *LanguageUpdate {
	lu.mutation.ClearProjectDetailTranslations()
	return lu
}

// RemoveProjectDetailTranslationIDs removes the "project_detail_translations" edge to ProjectDetailTranslation entities by IDs.
func (lu *LanguageUpdate) RemoveProjectDetailTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.RemoveProjectDetailTranslationIDs(ids...)
	return lu
}

// RemoveProjectDetailTranslations removes "project_detail_translations" edges to ProjectDetailTranslation entities.
func (lu *LanguageUpdate) RemoveProjectDetailTranslations(p ...*ProjectDetailTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lu.RemoveProjectDetailTranslationIDs(ids...)
}

// ClearProjectImageTranslations clears all "project_image_translations" edges to the ProjectImageTranslation entity.
func (lu *LanguageUpdate) ClearProjectImageTranslations() *LanguageUpdate {
	lu.mutation.ClearProjectImageTranslations()
	return lu
}

// RemoveProjectImageTranslationIDs removes the "project_image_translations" edge to ProjectImageTranslation entities by IDs.
func (lu *LanguageUpdate) RemoveProjectImageTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.RemoveProjectImageTranslationIDs(ids...)
	return lu
}

// RemoveProjectImageTranslations removes "project_image_translations" edges to ProjectImageTranslation entities.
func (lu *LanguageUpdate) RemoveProjectImageTranslations(p ...*ProjectImageTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lu.RemoveProjectImageTranslationIDs(ids...)
}

// ClearBlogCategoryTranslations clears all "blog_category_translations" edges to the BlogCategoryTranslation entity.
func (lu *LanguageUpdate) ClearBlogCategoryTranslations() *LanguageUpdate {
	lu.mutation.ClearBlogCategoryTranslations()
	return lu
}

// RemoveBlogCategoryTranslationIDs removes the "blog_category_translations" edge to BlogCategoryTranslation entities by IDs.
func (lu *LanguageUpdate) RemoveBlogCategoryTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.RemoveBlogCategoryTranslationIDs(ids...)
	return lu
}

// RemoveBlogCategoryTranslations removes "blog_category_translations" edges to BlogCategoryTranslation entities.
func (lu *LanguageUpdate) RemoveBlogCategoryTranslations(b ...*BlogCategoryTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return lu.RemoveBlogCategoryTranslationIDs(ids...)
}

// ClearBlogPostTranslations clears all "blog_post_translations" edges to the BlogPostTranslation entity.
func (lu *LanguageUpdate) ClearBlogPostTranslations() *LanguageUpdate {
	lu.mutation.ClearBlogPostTranslations()
	return lu
}

// RemoveBlogPostTranslationIDs removes the "blog_post_translations" edge to BlogPostTranslation entities by IDs.
func (lu *LanguageUpdate) RemoveBlogPostTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.RemoveBlogPostTranslationIDs(ids...)
	return lu
}

// RemoveBlogPostTranslations removes "blog_post_translations" edges to BlogPostTranslation entities.
func (lu *LanguageUpdate) RemoveBlogPostTranslations(b ...*BlogPostTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return lu.RemoveBlogPostTranslationIDs(ids...)
}

// ClearBlogSeriesTranslations clears all "blog_series_translations" edges to the BlogSeriesTranslation entity.
func (lu *LanguageUpdate) ClearBlogSeriesTranslations() *LanguageUpdate {
	lu.mutation.ClearBlogSeriesTranslations()
	return lu
}

// RemoveBlogSeriesTranslationIDs removes the "blog_series_translations" edge to BlogSeriesTranslation entities by IDs.
func (lu *LanguageUpdate) RemoveBlogSeriesTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.RemoveBlogSeriesTranslationIDs(ids...)
	return lu
}

// RemoveBlogSeriesTranslations removes "blog_series_translations" edges to BlogSeriesTranslation entities.
func (lu *LanguageUpdate) RemoveBlogSeriesTranslations(b ...*BlogSeriesTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return lu.RemoveBlogSeriesTranslationIDs(ids...)
}

// ClearIdeaTranslations clears all "idea_translations" edges to the IdeaTranslation entity.
func (lu *LanguageUpdate) ClearIdeaTranslations() *LanguageUpdate {
	lu.mutation.ClearIdeaTranslations()
	return lu
}

// RemoveIdeaTranslationIDs removes the "idea_translations" edge to IdeaTranslation entities by IDs.
func (lu *LanguageUpdate) RemoveIdeaTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.RemoveIdeaTranslationIDs(ids...)
	return lu
}

// RemoveIdeaTranslations removes "idea_translations" edges to IdeaTranslation entities.
func (lu *LanguageUpdate) RemoveIdeaTranslations(i ...*IdeaTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return lu.RemoveIdeaTranslationIDs(ids...)
}

// ClearResearchProjectTranslations clears all "research_project_translations" edges to the ResearchProjectTranslation entity.
func (lu *LanguageUpdate) ClearResearchProjectTranslations() *LanguageUpdate {
	lu.mutation.ClearResearchProjectTranslations()
	return lu
}

// RemoveResearchProjectTranslationIDs removes the "research_project_translations" edge to ResearchProjectTranslation entities by IDs.
func (lu *LanguageUpdate) RemoveResearchProjectTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.RemoveResearchProjectTranslationIDs(ids...)
	return lu
}

// RemoveResearchProjectTranslations removes "research_project_translations" edges to ResearchProjectTranslation entities.
func (lu *LanguageUpdate) RemoveResearchProjectTranslations(r ...*ResearchProjectTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return lu.RemoveResearchProjectTranslationIDs(ids...)
}

// ClearResearchProjectDetailTranslations clears all "research_project_detail_translations" edges to the ResearchProjectDetailTranslation entity.
func (lu *LanguageUpdate) ClearResearchProjectDetailTranslations() *LanguageUpdate {
	lu.mutation.ClearResearchProjectDetailTranslations()
	return lu
}

// RemoveResearchProjectDetailTranslationIDs removes the "research_project_detail_translations" edge to ResearchProjectDetailTranslation entities by IDs.
func (lu *LanguageUpdate) RemoveResearchProjectDetailTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.RemoveResearchProjectDetailTranslationIDs(ids...)
	return lu
}

// RemoveResearchProjectDetailTranslations removes "research_project_detail_translations" edges to ResearchProjectDetailTranslation entities.
func (lu *LanguageUpdate) RemoveResearchProjectDetailTranslations(r ...*ResearchProjectDetailTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return lu.RemoveResearchProjectDetailTranslationIDs(ids...)
}

// ClearPublicationTranslations clears all "publication_translations" edges to the PublicationTranslation entity.
func (lu *LanguageUpdate) ClearPublicationTranslations() *LanguageUpdate {
	lu.mutation.ClearPublicationTranslations()
	return lu
}

// RemovePublicationTranslationIDs removes the "publication_translations" edge to PublicationTranslation entities by IDs.
func (lu *LanguageUpdate) RemovePublicationTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.RemovePublicationTranslationIDs(ids...)
	return lu
}

// RemovePublicationTranslations removes "publication_translations" edges to PublicationTranslation entities.
func (lu *LanguageUpdate) RemovePublicationTranslations(p ...*PublicationTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lu.RemovePublicationTranslationIDs(ids...)
}

// ClearAwardTranslations clears all "award_translations" edges to the AwardTranslation entity.
func (lu *LanguageUpdate) ClearAwardTranslations() *LanguageUpdate {
	lu.mutation.ClearAwardTranslations()
	return lu
}

// RemoveAwardTranslationIDs removes the "award_translations" edge to AwardTranslation entities by IDs.
func (lu *LanguageUpdate) RemoveAwardTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.RemoveAwardTranslationIDs(ids...)
	return lu
}

// RemoveAwardTranslations removes "award_translations" edges to AwardTranslation entities.
func (lu *LanguageUpdate) RemoveAwardTranslations(a ...*AwardTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return lu.RemoveAwardTranslationIDs(ids...)
}

// ClearRecentUpdateTranslations clears all "recent_update_translations" edges to the RecentUpdateTranslation entity.
func (lu *LanguageUpdate) ClearRecentUpdateTranslations() *LanguageUpdate {
	lu.mutation.ClearRecentUpdateTranslations()
	return lu
}

// RemoveRecentUpdateTranslationIDs removes the "recent_update_translations" edge to RecentUpdateTranslation entities by IDs.
func (lu *LanguageUpdate) RemoveRecentUpdateTranslationIDs(ids ...uuid.UUID) *LanguageUpdate {
	lu.mutation.RemoveRecentUpdateTranslationIDs(ids...)
	return lu
}

// RemoveRecentUpdateTranslations removes "recent_update_translations" edges to RecentUpdateTranslation entities.
func (lu *LanguageUpdate) RemoveRecentUpdateTranslations(r ...*RecentUpdateTranslation) *LanguageUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return lu.RemoveRecentUpdateTranslationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LanguageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LanguageUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LanguageUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LanguageUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LanguageUpdate) check() error {
	if v, ok := lu.mutation.Name(); ok {
		if err := language.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Language.name": %w`, err)}
		}
	}
	if v, ok := lu.mutation.NativeName(); ok {
		if err := language.NativeNameValidator(v); err != nil {
			return &ValidationError{Name: "native_name", err: fmt.Errorf(`ent: validator failed for field "Language.native_name": %w`, err)}
		}
	}
	return nil
}

func (lu *LanguageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(language.Table, language.Columns, sqlgraph.NewFieldSpec(language.FieldID, field.TypeString))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.Name(); ok {
		_spec.SetField(language.FieldName, field.TypeString, value)
	}
	if value, ok := lu.mutation.NativeName(); ok {
		_spec.SetField(language.FieldNativeName, field.TypeString, value)
	}
	if value, ok := lu.mutation.IsActive(); ok {
		_spec.SetField(language.FieldIsActive, field.TypeBool, value)
	}
	if lu.mutation.PersonalInfoTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.PersonalInfoTranslationsTable,
			Columns: []string{language.PersonalInfoTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalinfotranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedPersonalInfoTranslationsIDs(); len(nodes) > 0 && !lu.mutation.PersonalInfoTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.PersonalInfoTranslationsTable,
			Columns: []string{language.PersonalInfoTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalinfotranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.PersonalInfoTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.PersonalInfoTranslationsTable,
			Columns: []string{language.PersonalInfoTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalinfotranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.EducationTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.EducationTranslationsTable,
			Columns: []string{language.EducationTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationtranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedEducationTranslationsIDs(); len(nodes) > 0 && !lu.mutation.EducationTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.EducationTranslationsTable,
			Columns: []string{language.EducationTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.EducationTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.EducationTranslationsTable,
			Columns: []string{language.EducationTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.EducationDetailTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.EducationDetailTranslationsTable,
			Columns: []string{language.EducationDetailTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedEducationDetailTranslationsIDs(); len(nodes) > 0 && !lu.mutation.EducationDetailTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.EducationDetailTranslationsTable,
			Columns: []string{language.EducationDetailTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.EducationDetailTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.EducationDetailTranslationsTable,
			Columns: []string{language.EducationDetailTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.WorkExperienceTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.WorkExperienceTranslationsTable,
			Columns: []string{language.WorkExperienceTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperiencetranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedWorkExperienceTranslationsIDs(); len(nodes) > 0 && !lu.mutation.WorkExperienceTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.WorkExperienceTranslationsTable,
			Columns: []string{language.WorkExperienceTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperiencetranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.WorkExperienceTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.WorkExperienceTranslationsTable,
			Columns: []string{language.WorkExperienceTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperiencetranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.WorkExperienceDetailTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.WorkExperienceDetailTranslationsTable,
			Columns: []string{language.WorkExperienceDetailTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperiencedetailtranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedWorkExperienceDetailTranslationsIDs(); len(nodes) > 0 && !lu.mutation.WorkExperienceDetailTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.WorkExperienceDetailTranslationsTable,
			Columns: []string{language.WorkExperienceDetailTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperiencedetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.WorkExperienceDetailTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.WorkExperienceDetailTranslationsTable,
			Columns: []string{language.WorkExperienceDetailTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperiencedetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.ProjectTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ProjectTranslationsTable,
			Columns: []string{language.ProjectTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedProjectTranslationsIDs(); len(nodes) > 0 && !lu.mutation.ProjectTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ProjectTranslationsTable,
			Columns: []string{language.ProjectTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.ProjectTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ProjectTranslationsTable,
			Columns: []string{language.ProjectTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.ProjectDetailTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ProjectDetailTranslationsTable,
			Columns: []string{language.ProjectDetailTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedProjectDetailTranslationsIDs(); len(nodes) > 0 && !lu.mutation.ProjectDetailTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ProjectDetailTranslationsTable,
			Columns: []string{language.ProjectDetailTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.ProjectDetailTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ProjectDetailTranslationsTable,
			Columns: []string{language.ProjectDetailTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.ProjectImageTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ProjectImageTranslationsTable,
			Columns: []string{language.ProjectImageTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectimagetranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedProjectImageTranslationsIDs(); len(nodes) > 0 && !lu.mutation.ProjectImageTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ProjectImageTranslationsTable,
			Columns: []string{language.ProjectImageTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectimagetranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.ProjectImageTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ProjectImageTranslationsTable,
			Columns: []string{language.ProjectImageTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectimagetranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.BlogCategoryTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.BlogCategoryTranslationsTable,
			Columns: []string{language.BlogCategoryTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcategorytranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedBlogCategoryTranslationsIDs(); len(nodes) > 0 && !lu.mutation.BlogCategoryTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.BlogCategoryTranslationsTable,
			Columns: []string{language.BlogCategoryTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcategorytranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.BlogCategoryTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.BlogCategoryTranslationsTable,
			Columns: []string{language.BlogCategoryTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcategorytranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.BlogPostTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.BlogPostTranslationsTable,
			Columns: []string{language.BlogPostTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogposttranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedBlogPostTranslationsIDs(); len(nodes) > 0 && !lu.mutation.BlogPostTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.BlogPostTranslationsTable,
			Columns: []string{language.BlogPostTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogposttranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.BlogPostTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.BlogPostTranslationsTable,
			Columns: []string{language.BlogPostTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogposttranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.BlogSeriesTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.BlogSeriesTranslationsTable,
			Columns: []string{language.BlogSeriesTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogseriestranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedBlogSeriesTranslationsIDs(); len(nodes) > 0 && !lu.mutation.BlogSeriesTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.BlogSeriesTranslationsTable,
			Columns: []string{language.BlogSeriesTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogseriestranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.BlogSeriesTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.BlogSeriesTranslationsTable,
			Columns: []string{language.BlogSeriesTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogseriestranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.IdeaTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.IdeaTranslationsTable,
			Columns: []string{language.IdeaTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideatranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedIdeaTranslationsIDs(); len(nodes) > 0 && !lu.mutation.IdeaTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.IdeaTranslationsTable,
			Columns: []string{language.IdeaTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideatranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.IdeaTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.IdeaTranslationsTable,
			Columns: []string{language.IdeaTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideatranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.ResearchProjectTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ResearchProjectTranslationsTable,
			Columns: []string{language.ResearchProjectTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojecttranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedResearchProjectTranslationsIDs(); len(nodes) > 0 && !lu.mutation.ResearchProjectTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ResearchProjectTranslationsTable,
			Columns: []string{language.ResearchProjectTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojecttranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.ResearchProjectTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ResearchProjectTranslationsTable,
			Columns: []string{language.ResearchProjectTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojecttranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.ResearchProjectDetailTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ResearchProjectDetailTranslationsTable,
			Columns: []string{language.ResearchProjectDetailTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojectdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedResearchProjectDetailTranslationsIDs(); len(nodes) > 0 && !lu.mutation.ResearchProjectDetailTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ResearchProjectDetailTranslationsTable,
			Columns: []string{language.ResearchProjectDetailTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojectdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.ResearchProjectDetailTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ResearchProjectDetailTranslationsTable,
			Columns: []string{language.ResearchProjectDetailTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojectdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.PublicationTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.PublicationTranslationsTable,
			Columns: []string{language.PublicationTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publicationtranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedPublicationTranslationsIDs(); len(nodes) > 0 && !lu.mutation.PublicationTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.PublicationTranslationsTable,
			Columns: []string{language.PublicationTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publicationtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.PublicationTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.PublicationTranslationsTable,
			Columns: []string{language.PublicationTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publicationtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.AwardTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.AwardTranslationsTable,
			Columns: []string{language.AwardTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(awardtranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedAwardTranslationsIDs(); len(nodes) > 0 && !lu.mutation.AwardTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.AwardTranslationsTable,
			Columns: []string{language.AwardTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(awardtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.AwardTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.AwardTranslationsTable,
			Columns: []string{language.AwardTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(awardtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.RecentUpdateTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.RecentUpdateTranslationsTable,
			Columns: []string{language.RecentUpdateTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recentupdatetranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedRecentUpdateTranslationsIDs(); len(nodes) > 0 && !lu.mutation.RecentUpdateTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.RecentUpdateTranslationsTable,
			Columns: []string{language.RecentUpdateTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recentupdatetranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RecentUpdateTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.RecentUpdateTranslationsTable,
			Columns: []string{language.RecentUpdateTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recentupdatetranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{language.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LanguageUpdateOne is the builder for updating a single Language entity.
type LanguageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LanguageMutation
}

// SetName sets the "name" field.
func (luo *LanguageUpdateOne) SetName(s string) *LanguageUpdateOne {
	luo.mutation.SetName(s)
	return luo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (luo *LanguageUpdateOne) SetNillableName(s *string) *LanguageUpdateOne {
	if s != nil {
		luo.SetName(*s)
	}
	return luo
}

// SetNativeName sets the "native_name" field.
func (luo *LanguageUpdateOne) SetNativeName(s string) *LanguageUpdateOne {
	luo.mutation.SetNativeName(s)
	return luo
}

// SetNillableNativeName sets the "native_name" field if the given value is not nil.
func (luo *LanguageUpdateOne) SetNillableNativeName(s *string) *LanguageUpdateOne {
	if s != nil {
		luo.SetNativeName(*s)
	}
	return luo
}

// SetIsActive sets the "is_active" field.
func (luo *LanguageUpdateOne) SetIsActive(b bool) *LanguageUpdateOne {
	luo.mutation.SetIsActive(b)
	return luo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (luo *LanguageUpdateOne) SetNillableIsActive(b *bool) *LanguageUpdateOne {
	if b != nil {
		luo.SetIsActive(*b)
	}
	return luo
}

// AddPersonalInfoTranslationIDs adds the "personal_info_translations" edge to the PersonalInfoTranslation entity by IDs.
func (luo *LanguageUpdateOne) AddPersonalInfoTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.AddPersonalInfoTranslationIDs(ids...)
	return luo
}

// AddPersonalInfoTranslations adds the "personal_info_translations" edges to the PersonalInfoTranslation entity.
func (luo *LanguageUpdateOne) AddPersonalInfoTranslations(p ...*PersonalInfoTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return luo.AddPersonalInfoTranslationIDs(ids...)
}

// AddEducationTranslationIDs adds the "education_translations" edge to the EducationTranslation entity by IDs.
func (luo *LanguageUpdateOne) AddEducationTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.AddEducationTranslationIDs(ids...)
	return luo
}

// AddEducationTranslations adds the "education_translations" edges to the EducationTranslation entity.
func (luo *LanguageUpdateOne) AddEducationTranslations(e ...*EducationTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return luo.AddEducationTranslationIDs(ids...)
}

// AddEducationDetailTranslationIDs adds the "education_detail_translations" edge to the EducationDetailTranslation entity by IDs.
func (luo *LanguageUpdateOne) AddEducationDetailTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.AddEducationDetailTranslationIDs(ids...)
	return luo
}

// AddEducationDetailTranslations adds the "education_detail_translations" edges to the EducationDetailTranslation entity.
func (luo *LanguageUpdateOne) AddEducationDetailTranslations(e ...*EducationDetailTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return luo.AddEducationDetailTranslationIDs(ids...)
}

// AddWorkExperienceTranslationIDs adds the "work_experience_translations" edge to the WorkExperienceTranslation entity by IDs.
func (luo *LanguageUpdateOne) AddWorkExperienceTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.AddWorkExperienceTranslationIDs(ids...)
	return luo
}

// AddWorkExperienceTranslations adds the "work_experience_translations" edges to the WorkExperienceTranslation entity.
func (luo *LanguageUpdateOne) AddWorkExperienceTranslations(w ...*WorkExperienceTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return luo.AddWorkExperienceTranslationIDs(ids...)
}

// AddWorkExperienceDetailTranslationIDs adds the "work_experience_detail_translations" edge to the WorkExperienceDetailTranslation entity by IDs.
func (luo *LanguageUpdateOne) AddWorkExperienceDetailTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.AddWorkExperienceDetailTranslationIDs(ids...)
	return luo
}

// AddWorkExperienceDetailTranslations adds the "work_experience_detail_translations" edges to the WorkExperienceDetailTranslation entity.
func (luo *LanguageUpdateOne) AddWorkExperienceDetailTranslations(w ...*WorkExperienceDetailTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return luo.AddWorkExperienceDetailTranslationIDs(ids...)
}

// AddProjectTranslationIDs adds the "project_translations" edge to the ProjectTranslation entity by IDs.
func (luo *LanguageUpdateOne) AddProjectTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.AddProjectTranslationIDs(ids...)
	return luo
}

// AddProjectTranslations adds the "project_translations" edges to the ProjectTranslation entity.
func (luo *LanguageUpdateOne) AddProjectTranslations(p ...*ProjectTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return luo.AddProjectTranslationIDs(ids...)
}

// AddProjectDetailTranslationIDs adds the "project_detail_translations" edge to the ProjectDetailTranslation entity by IDs.
func (luo *LanguageUpdateOne) AddProjectDetailTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.AddProjectDetailTranslationIDs(ids...)
	return luo
}

// AddProjectDetailTranslations adds the "project_detail_translations" edges to the ProjectDetailTranslation entity.
func (luo *LanguageUpdateOne) AddProjectDetailTranslations(p ...*ProjectDetailTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return luo.AddProjectDetailTranslationIDs(ids...)
}

// AddProjectImageTranslationIDs adds the "project_image_translations" edge to the ProjectImageTranslation entity by IDs.
func (luo *LanguageUpdateOne) AddProjectImageTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.AddProjectImageTranslationIDs(ids...)
	return luo
}

// AddProjectImageTranslations adds the "project_image_translations" edges to the ProjectImageTranslation entity.
func (luo *LanguageUpdateOne) AddProjectImageTranslations(p ...*ProjectImageTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return luo.AddProjectImageTranslationIDs(ids...)
}

// AddBlogCategoryTranslationIDs adds the "blog_category_translations" edge to the BlogCategoryTranslation entity by IDs.
func (luo *LanguageUpdateOne) AddBlogCategoryTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.AddBlogCategoryTranslationIDs(ids...)
	return luo
}

// AddBlogCategoryTranslations adds the "blog_category_translations" edges to the BlogCategoryTranslation entity.
func (luo *LanguageUpdateOne) AddBlogCategoryTranslations(b ...*BlogCategoryTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return luo.AddBlogCategoryTranslationIDs(ids...)
}

// AddBlogPostTranslationIDs adds the "blog_post_translations" edge to the BlogPostTranslation entity by IDs.
func (luo *LanguageUpdateOne) AddBlogPostTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.AddBlogPostTranslationIDs(ids...)
	return luo
}

// AddBlogPostTranslations adds the "blog_post_translations" edges to the BlogPostTranslation entity.
func (luo *LanguageUpdateOne) AddBlogPostTranslations(b ...*BlogPostTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return luo.AddBlogPostTranslationIDs(ids...)
}

// AddBlogSeriesTranslationIDs adds the "blog_series_translations" edge to the BlogSeriesTranslation entity by IDs.
func (luo *LanguageUpdateOne) AddBlogSeriesTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.AddBlogSeriesTranslationIDs(ids...)
	return luo
}

// AddBlogSeriesTranslations adds the "blog_series_translations" edges to the BlogSeriesTranslation entity.
func (luo *LanguageUpdateOne) AddBlogSeriesTranslations(b ...*BlogSeriesTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return luo.AddBlogSeriesTranslationIDs(ids...)
}

// AddIdeaTranslationIDs adds the "idea_translations" edge to the IdeaTranslation entity by IDs.
func (luo *LanguageUpdateOne) AddIdeaTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.AddIdeaTranslationIDs(ids...)
	return luo
}

// AddIdeaTranslations adds the "idea_translations" edges to the IdeaTranslation entity.
func (luo *LanguageUpdateOne) AddIdeaTranslations(i ...*IdeaTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return luo.AddIdeaTranslationIDs(ids...)
}

// AddResearchProjectTranslationIDs adds the "research_project_translations" edge to the ResearchProjectTranslation entity by IDs.
func (luo *LanguageUpdateOne) AddResearchProjectTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.AddResearchProjectTranslationIDs(ids...)
	return luo
}

// AddResearchProjectTranslations adds the "research_project_translations" edges to the ResearchProjectTranslation entity.
func (luo *LanguageUpdateOne) AddResearchProjectTranslations(r ...*ResearchProjectTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return luo.AddResearchProjectTranslationIDs(ids...)
}

// AddResearchProjectDetailTranslationIDs adds the "research_project_detail_translations" edge to the ResearchProjectDetailTranslation entity by IDs.
func (luo *LanguageUpdateOne) AddResearchProjectDetailTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.AddResearchProjectDetailTranslationIDs(ids...)
	return luo
}

// AddResearchProjectDetailTranslations adds the "research_project_detail_translations" edges to the ResearchProjectDetailTranslation entity.
func (luo *LanguageUpdateOne) AddResearchProjectDetailTranslations(r ...*ResearchProjectDetailTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return luo.AddResearchProjectDetailTranslationIDs(ids...)
}

// AddPublicationTranslationIDs adds the "publication_translations" edge to the PublicationTranslation entity by IDs.
func (luo *LanguageUpdateOne) AddPublicationTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.AddPublicationTranslationIDs(ids...)
	return luo
}

// AddPublicationTranslations adds the "publication_translations" edges to the PublicationTranslation entity.
func (luo *LanguageUpdateOne) AddPublicationTranslations(p ...*PublicationTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return luo.AddPublicationTranslationIDs(ids...)
}

// AddAwardTranslationIDs adds the "award_translations" edge to the AwardTranslation entity by IDs.
func (luo *LanguageUpdateOne) AddAwardTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.AddAwardTranslationIDs(ids...)
	return luo
}

// AddAwardTranslations adds the "award_translations" edges to the AwardTranslation entity.
func (luo *LanguageUpdateOne) AddAwardTranslations(a ...*AwardTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return luo.AddAwardTranslationIDs(ids...)
}

// AddRecentUpdateTranslationIDs adds the "recent_update_translations" edge to the RecentUpdateTranslation entity by IDs.
func (luo *LanguageUpdateOne) AddRecentUpdateTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.AddRecentUpdateTranslationIDs(ids...)
	return luo
}

// AddRecentUpdateTranslations adds the "recent_update_translations" edges to the RecentUpdateTranslation entity.
func (luo *LanguageUpdateOne) AddRecentUpdateTranslations(r ...*RecentUpdateTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return luo.AddRecentUpdateTranslationIDs(ids...)
}

// Mutation returns the LanguageMutation object of the builder.
func (luo *LanguageUpdateOne) Mutation() *LanguageMutation {
	return luo.mutation
}

// ClearPersonalInfoTranslations clears all "personal_info_translations" edges to the PersonalInfoTranslation entity.
func (luo *LanguageUpdateOne) ClearPersonalInfoTranslations() *LanguageUpdateOne {
	luo.mutation.ClearPersonalInfoTranslations()
	return luo
}

// RemovePersonalInfoTranslationIDs removes the "personal_info_translations" edge to PersonalInfoTranslation entities by IDs.
func (luo *LanguageUpdateOne) RemovePersonalInfoTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.RemovePersonalInfoTranslationIDs(ids...)
	return luo
}

// RemovePersonalInfoTranslations removes "personal_info_translations" edges to PersonalInfoTranslation entities.
func (luo *LanguageUpdateOne) RemovePersonalInfoTranslations(p ...*PersonalInfoTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return luo.RemovePersonalInfoTranslationIDs(ids...)
}

// ClearEducationTranslations clears all "education_translations" edges to the EducationTranslation entity.
func (luo *LanguageUpdateOne) ClearEducationTranslations() *LanguageUpdateOne {
	luo.mutation.ClearEducationTranslations()
	return luo
}

// RemoveEducationTranslationIDs removes the "education_translations" edge to EducationTranslation entities by IDs.
func (luo *LanguageUpdateOne) RemoveEducationTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.RemoveEducationTranslationIDs(ids...)
	return luo
}

// RemoveEducationTranslations removes "education_translations" edges to EducationTranslation entities.
func (luo *LanguageUpdateOne) RemoveEducationTranslations(e ...*EducationTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return luo.RemoveEducationTranslationIDs(ids...)
}

// ClearEducationDetailTranslations clears all "education_detail_translations" edges to the EducationDetailTranslation entity.
func (luo *LanguageUpdateOne) ClearEducationDetailTranslations() *LanguageUpdateOne {
	luo.mutation.ClearEducationDetailTranslations()
	return luo
}

// RemoveEducationDetailTranslationIDs removes the "education_detail_translations" edge to EducationDetailTranslation entities by IDs.
func (luo *LanguageUpdateOne) RemoveEducationDetailTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.RemoveEducationDetailTranslationIDs(ids...)
	return luo
}

// RemoveEducationDetailTranslations removes "education_detail_translations" edges to EducationDetailTranslation entities.
func (luo *LanguageUpdateOne) RemoveEducationDetailTranslations(e ...*EducationDetailTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return luo.RemoveEducationDetailTranslationIDs(ids...)
}

// ClearWorkExperienceTranslations clears all "work_experience_translations" edges to the WorkExperienceTranslation entity.
func (luo *LanguageUpdateOne) ClearWorkExperienceTranslations() *LanguageUpdateOne {
	luo.mutation.ClearWorkExperienceTranslations()
	return luo
}

// RemoveWorkExperienceTranslationIDs removes the "work_experience_translations" edge to WorkExperienceTranslation entities by IDs.
func (luo *LanguageUpdateOne) RemoveWorkExperienceTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.RemoveWorkExperienceTranslationIDs(ids...)
	return luo
}

// RemoveWorkExperienceTranslations removes "work_experience_translations" edges to WorkExperienceTranslation entities.
func (luo *LanguageUpdateOne) RemoveWorkExperienceTranslations(w ...*WorkExperienceTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return luo.RemoveWorkExperienceTranslationIDs(ids...)
}

// ClearWorkExperienceDetailTranslations clears all "work_experience_detail_translations" edges to the WorkExperienceDetailTranslation entity.
func (luo *LanguageUpdateOne) ClearWorkExperienceDetailTranslations() *LanguageUpdateOne {
	luo.mutation.ClearWorkExperienceDetailTranslations()
	return luo
}

// RemoveWorkExperienceDetailTranslationIDs removes the "work_experience_detail_translations" edge to WorkExperienceDetailTranslation entities by IDs.
func (luo *LanguageUpdateOne) RemoveWorkExperienceDetailTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.RemoveWorkExperienceDetailTranslationIDs(ids...)
	return luo
}

// RemoveWorkExperienceDetailTranslations removes "work_experience_detail_translations" edges to WorkExperienceDetailTranslation entities.
func (luo *LanguageUpdateOne) RemoveWorkExperienceDetailTranslations(w ...*WorkExperienceDetailTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return luo.RemoveWorkExperienceDetailTranslationIDs(ids...)
}

// ClearProjectTranslations clears all "project_translations" edges to the ProjectTranslation entity.
func (luo *LanguageUpdateOne) ClearProjectTranslations() *LanguageUpdateOne {
	luo.mutation.ClearProjectTranslations()
	return luo
}

// RemoveProjectTranslationIDs removes the "project_translations" edge to ProjectTranslation entities by IDs.
func (luo *LanguageUpdateOne) RemoveProjectTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.RemoveProjectTranslationIDs(ids...)
	return luo
}

// RemoveProjectTranslations removes "project_translations" edges to ProjectTranslation entities.
func (luo *LanguageUpdateOne) RemoveProjectTranslations(p ...*ProjectTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return luo.RemoveProjectTranslationIDs(ids...)
}

// ClearProjectDetailTranslations clears all "project_detail_translations" edges to the ProjectDetailTranslation entity.
func (luo *LanguageUpdateOne) ClearProjectDetailTranslations() *LanguageUpdateOne {
	luo.mutation.ClearProjectDetailTranslations()
	return luo
}

// RemoveProjectDetailTranslationIDs removes the "project_detail_translations" edge to ProjectDetailTranslation entities by IDs.
func (luo *LanguageUpdateOne) RemoveProjectDetailTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.RemoveProjectDetailTranslationIDs(ids...)
	return luo
}

// RemoveProjectDetailTranslations removes "project_detail_translations" edges to ProjectDetailTranslation entities.
func (luo *LanguageUpdateOne) RemoveProjectDetailTranslations(p ...*ProjectDetailTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return luo.RemoveProjectDetailTranslationIDs(ids...)
}

// ClearProjectImageTranslations clears all "project_image_translations" edges to the ProjectImageTranslation entity.
func (luo *LanguageUpdateOne) ClearProjectImageTranslations() *LanguageUpdateOne {
	luo.mutation.ClearProjectImageTranslations()
	return luo
}

// RemoveProjectImageTranslationIDs removes the "project_image_translations" edge to ProjectImageTranslation entities by IDs.
func (luo *LanguageUpdateOne) RemoveProjectImageTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.RemoveProjectImageTranslationIDs(ids...)
	return luo
}

// RemoveProjectImageTranslations removes "project_image_translations" edges to ProjectImageTranslation entities.
func (luo *LanguageUpdateOne) RemoveProjectImageTranslations(p ...*ProjectImageTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return luo.RemoveProjectImageTranslationIDs(ids...)
}

// ClearBlogCategoryTranslations clears all "blog_category_translations" edges to the BlogCategoryTranslation entity.
func (luo *LanguageUpdateOne) ClearBlogCategoryTranslations() *LanguageUpdateOne {
	luo.mutation.ClearBlogCategoryTranslations()
	return luo
}

// RemoveBlogCategoryTranslationIDs removes the "blog_category_translations" edge to BlogCategoryTranslation entities by IDs.
func (luo *LanguageUpdateOne) RemoveBlogCategoryTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.RemoveBlogCategoryTranslationIDs(ids...)
	return luo
}

// RemoveBlogCategoryTranslations removes "blog_category_translations" edges to BlogCategoryTranslation entities.
func (luo *LanguageUpdateOne) RemoveBlogCategoryTranslations(b ...*BlogCategoryTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return luo.RemoveBlogCategoryTranslationIDs(ids...)
}

// ClearBlogPostTranslations clears all "blog_post_translations" edges to the BlogPostTranslation entity.
func (luo *LanguageUpdateOne) ClearBlogPostTranslations() *LanguageUpdateOne {
	luo.mutation.ClearBlogPostTranslations()
	return luo
}

// RemoveBlogPostTranslationIDs removes the "blog_post_translations" edge to BlogPostTranslation entities by IDs.
func (luo *LanguageUpdateOne) RemoveBlogPostTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.RemoveBlogPostTranslationIDs(ids...)
	return luo
}

// RemoveBlogPostTranslations removes "blog_post_translations" edges to BlogPostTranslation entities.
func (luo *LanguageUpdateOne) RemoveBlogPostTranslations(b ...*BlogPostTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return luo.RemoveBlogPostTranslationIDs(ids...)
}

// ClearBlogSeriesTranslations clears all "blog_series_translations" edges to the BlogSeriesTranslation entity.
func (luo *LanguageUpdateOne) ClearBlogSeriesTranslations() *LanguageUpdateOne {
	luo.mutation.ClearBlogSeriesTranslations()
	return luo
}

// RemoveBlogSeriesTranslationIDs removes the "blog_series_translations" edge to BlogSeriesTranslation entities by IDs.
func (luo *LanguageUpdateOne) RemoveBlogSeriesTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.RemoveBlogSeriesTranslationIDs(ids...)
	return luo
}

// RemoveBlogSeriesTranslations removes "blog_series_translations" edges to BlogSeriesTranslation entities.
func (luo *LanguageUpdateOne) RemoveBlogSeriesTranslations(b ...*BlogSeriesTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return luo.RemoveBlogSeriesTranslationIDs(ids...)
}

// ClearIdeaTranslations clears all "idea_translations" edges to the IdeaTranslation entity.
func (luo *LanguageUpdateOne) ClearIdeaTranslations() *LanguageUpdateOne {
	luo.mutation.ClearIdeaTranslations()
	return luo
}

// RemoveIdeaTranslationIDs removes the "idea_translations" edge to IdeaTranslation entities by IDs.
func (luo *LanguageUpdateOne) RemoveIdeaTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.RemoveIdeaTranslationIDs(ids...)
	return luo
}

// RemoveIdeaTranslations removes "idea_translations" edges to IdeaTranslation entities.
func (luo *LanguageUpdateOne) RemoveIdeaTranslations(i ...*IdeaTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return luo.RemoveIdeaTranslationIDs(ids...)
}

// ClearResearchProjectTranslations clears all "research_project_translations" edges to the ResearchProjectTranslation entity.
func (luo *LanguageUpdateOne) ClearResearchProjectTranslations() *LanguageUpdateOne {
	luo.mutation.ClearResearchProjectTranslations()
	return luo
}

// RemoveResearchProjectTranslationIDs removes the "research_project_translations" edge to ResearchProjectTranslation entities by IDs.
func (luo *LanguageUpdateOne) RemoveResearchProjectTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.RemoveResearchProjectTranslationIDs(ids...)
	return luo
}

// RemoveResearchProjectTranslations removes "research_project_translations" edges to ResearchProjectTranslation entities.
func (luo *LanguageUpdateOne) RemoveResearchProjectTranslations(r ...*ResearchProjectTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return luo.RemoveResearchProjectTranslationIDs(ids...)
}

// ClearResearchProjectDetailTranslations clears all "research_project_detail_translations" edges to the ResearchProjectDetailTranslation entity.
func (luo *LanguageUpdateOne) ClearResearchProjectDetailTranslations() *LanguageUpdateOne {
	luo.mutation.ClearResearchProjectDetailTranslations()
	return luo
}

// RemoveResearchProjectDetailTranslationIDs removes the "research_project_detail_translations" edge to ResearchProjectDetailTranslation entities by IDs.
func (luo *LanguageUpdateOne) RemoveResearchProjectDetailTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.RemoveResearchProjectDetailTranslationIDs(ids...)
	return luo
}

// RemoveResearchProjectDetailTranslations removes "research_project_detail_translations" edges to ResearchProjectDetailTranslation entities.
func (luo *LanguageUpdateOne) RemoveResearchProjectDetailTranslations(r ...*ResearchProjectDetailTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return luo.RemoveResearchProjectDetailTranslationIDs(ids...)
}

// ClearPublicationTranslations clears all "publication_translations" edges to the PublicationTranslation entity.
func (luo *LanguageUpdateOne) ClearPublicationTranslations() *LanguageUpdateOne {
	luo.mutation.ClearPublicationTranslations()
	return luo
}

// RemovePublicationTranslationIDs removes the "publication_translations" edge to PublicationTranslation entities by IDs.
func (luo *LanguageUpdateOne) RemovePublicationTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.RemovePublicationTranslationIDs(ids...)
	return luo
}

// RemovePublicationTranslations removes "publication_translations" edges to PublicationTranslation entities.
func (luo *LanguageUpdateOne) RemovePublicationTranslations(p ...*PublicationTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return luo.RemovePublicationTranslationIDs(ids...)
}

// ClearAwardTranslations clears all "award_translations" edges to the AwardTranslation entity.
func (luo *LanguageUpdateOne) ClearAwardTranslations() *LanguageUpdateOne {
	luo.mutation.ClearAwardTranslations()
	return luo
}

// RemoveAwardTranslationIDs removes the "award_translations" edge to AwardTranslation entities by IDs.
func (luo *LanguageUpdateOne) RemoveAwardTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.RemoveAwardTranslationIDs(ids...)
	return luo
}

// RemoveAwardTranslations removes "award_translations" edges to AwardTranslation entities.
func (luo *LanguageUpdateOne) RemoveAwardTranslations(a ...*AwardTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return luo.RemoveAwardTranslationIDs(ids...)
}

// ClearRecentUpdateTranslations clears all "recent_update_translations" edges to the RecentUpdateTranslation entity.
func (luo *LanguageUpdateOne) ClearRecentUpdateTranslations() *LanguageUpdateOne {
	luo.mutation.ClearRecentUpdateTranslations()
	return luo
}

// RemoveRecentUpdateTranslationIDs removes the "recent_update_translations" edge to RecentUpdateTranslation entities by IDs.
func (luo *LanguageUpdateOne) RemoveRecentUpdateTranslationIDs(ids ...uuid.UUID) *LanguageUpdateOne {
	luo.mutation.RemoveRecentUpdateTranslationIDs(ids...)
	return luo
}

// RemoveRecentUpdateTranslations removes "recent_update_translations" edges to RecentUpdateTranslation entities.
func (luo *LanguageUpdateOne) RemoveRecentUpdateTranslations(r ...*RecentUpdateTranslation) *LanguageUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return luo.RemoveRecentUpdateTranslationIDs(ids...)
}

// Where appends a list predicates to the LanguageUpdate builder.
func (luo *LanguageUpdateOne) Where(ps ...predicate.Language) *LanguageUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LanguageUpdateOne) Select(field string, fields ...string) *LanguageUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Language entity.
func (luo *LanguageUpdateOne) Save(ctx context.Context) (*Language, error) {
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LanguageUpdateOne) SaveX(ctx context.Context) *Language {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LanguageUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LanguageUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LanguageUpdateOne) check() error {
	if v, ok := luo.mutation.Name(); ok {
		if err := language.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Language.name": %w`, err)}
		}
	}
	if v, ok := luo.mutation.NativeName(); ok {
		if err := language.NativeNameValidator(v); err != nil {
			return &ValidationError{Name: "native_name", err: fmt.Errorf(`ent: validator failed for field "Language.native_name": %w`, err)}
		}
	}
	return nil
}

func (luo *LanguageUpdateOne) sqlSave(ctx context.Context) (_node *Language, err error) {
	if err := luo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(language.Table, language.Columns, sqlgraph.NewFieldSpec(language.FieldID, field.TypeString))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Language.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, language.FieldID)
		for _, f := range fields {
			if !language.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != language.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.Name(); ok {
		_spec.SetField(language.FieldName, field.TypeString, value)
	}
	if value, ok := luo.mutation.NativeName(); ok {
		_spec.SetField(language.FieldNativeName, field.TypeString, value)
	}
	if value, ok := luo.mutation.IsActive(); ok {
		_spec.SetField(language.FieldIsActive, field.TypeBool, value)
	}
	if luo.mutation.PersonalInfoTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.PersonalInfoTranslationsTable,
			Columns: []string{language.PersonalInfoTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalinfotranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedPersonalInfoTranslationsIDs(); len(nodes) > 0 && !luo.mutation.PersonalInfoTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.PersonalInfoTranslationsTable,
			Columns: []string{language.PersonalInfoTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalinfotranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.PersonalInfoTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.PersonalInfoTranslationsTable,
			Columns: []string{language.PersonalInfoTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalinfotranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.EducationTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.EducationTranslationsTable,
			Columns: []string{language.EducationTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationtranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedEducationTranslationsIDs(); len(nodes) > 0 && !luo.mutation.EducationTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.EducationTranslationsTable,
			Columns: []string{language.EducationTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.EducationTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.EducationTranslationsTable,
			Columns: []string{language.EducationTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.EducationDetailTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.EducationDetailTranslationsTable,
			Columns: []string{language.EducationDetailTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedEducationDetailTranslationsIDs(); len(nodes) > 0 && !luo.mutation.EducationDetailTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.EducationDetailTranslationsTable,
			Columns: []string{language.EducationDetailTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.EducationDetailTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.EducationDetailTranslationsTable,
			Columns: []string{language.EducationDetailTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.WorkExperienceTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.WorkExperienceTranslationsTable,
			Columns: []string{language.WorkExperienceTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperiencetranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedWorkExperienceTranslationsIDs(); len(nodes) > 0 && !luo.mutation.WorkExperienceTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.WorkExperienceTranslationsTable,
			Columns: []string{language.WorkExperienceTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperiencetranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.WorkExperienceTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.WorkExperienceTranslationsTable,
			Columns: []string{language.WorkExperienceTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperiencetranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.WorkExperienceDetailTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.WorkExperienceDetailTranslationsTable,
			Columns: []string{language.WorkExperienceDetailTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperiencedetailtranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedWorkExperienceDetailTranslationsIDs(); len(nodes) > 0 && !luo.mutation.WorkExperienceDetailTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.WorkExperienceDetailTranslationsTable,
			Columns: []string{language.WorkExperienceDetailTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperiencedetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.WorkExperienceDetailTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.WorkExperienceDetailTranslationsTable,
			Columns: []string{language.WorkExperienceDetailTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperiencedetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.ProjectTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ProjectTranslationsTable,
			Columns: []string{language.ProjectTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedProjectTranslationsIDs(); len(nodes) > 0 && !luo.mutation.ProjectTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ProjectTranslationsTable,
			Columns: []string{language.ProjectTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.ProjectTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ProjectTranslationsTable,
			Columns: []string{language.ProjectTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.ProjectDetailTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ProjectDetailTranslationsTable,
			Columns: []string{language.ProjectDetailTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedProjectDetailTranslationsIDs(); len(nodes) > 0 && !luo.mutation.ProjectDetailTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ProjectDetailTranslationsTable,
			Columns: []string{language.ProjectDetailTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.ProjectDetailTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ProjectDetailTranslationsTable,
			Columns: []string{language.ProjectDetailTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.ProjectImageTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ProjectImageTranslationsTable,
			Columns: []string{language.ProjectImageTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectimagetranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedProjectImageTranslationsIDs(); len(nodes) > 0 && !luo.mutation.ProjectImageTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ProjectImageTranslationsTable,
			Columns: []string{language.ProjectImageTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectimagetranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.ProjectImageTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ProjectImageTranslationsTable,
			Columns: []string{language.ProjectImageTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectimagetranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.BlogCategoryTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.BlogCategoryTranslationsTable,
			Columns: []string{language.BlogCategoryTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcategorytranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedBlogCategoryTranslationsIDs(); len(nodes) > 0 && !luo.mutation.BlogCategoryTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.BlogCategoryTranslationsTable,
			Columns: []string{language.BlogCategoryTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcategorytranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.BlogCategoryTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.BlogCategoryTranslationsTable,
			Columns: []string{language.BlogCategoryTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcategorytranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.BlogPostTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.BlogPostTranslationsTable,
			Columns: []string{language.BlogPostTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogposttranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedBlogPostTranslationsIDs(); len(nodes) > 0 && !luo.mutation.BlogPostTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.BlogPostTranslationsTable,
			Columns: []string{language.BlogPostTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogposttranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.BlogPostTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.BlogPostTranslationsTable,
			Columns: []string{language.BlogPostTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogposttranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.BlogSeriesTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.BlogSeriesTranslationsTable,
			Columns: []string{language.BlogSeriesTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogseriestranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedBlogSeriesTranslationsIDs(); len(nodes) > 0 && !luo.mutation.BlogSeriesTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.BlogSeriesTranslationsTable,
			Columns: []string{language.BlogSeriesTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogseriestranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.BlogSeriesTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.BlogSeriesTranslationsTable,
			Columns: []string{language.BlogSeriesTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogseriestranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.IdeaTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.IdeaTranslationsTable,
			Columns: []string{language.IdeaTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideatranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedIdeaTranslationsIDs(); len(nodes) > 0 && !luo.mutation.IdeaTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.IdeaTranslationsTable,
			Columns: []string{language.IdeaTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideatranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.IdeaTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.IdeaTranslationsTable,
			Columns: []string{language.IdeaTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ideatranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.ResearchProjectTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ResearchProjectTranslationsTable,
			Columns: []string{language.ResearchProjectTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojecttranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedResearchProjectTranslationsIDs(); len(nodes) > 0 && !luo.mutation.ResearchProjectTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ResearchProjectTranslationsTable,
			Columns: []string{language.ResearchProjectTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojecttranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.ResearchProjectTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ResearchProjectTranslationsTable,
			Columns: []string{language.ResearchProjectTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojecttranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.ResearchProjectDetailTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ResearchProjectDetailTranslationsTable,
			Columns: []string{language.ResearchProjectDetailTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojectdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedResearchProjectDetailTranslationsIDs(); len(nodes) > 0 && !luo.mutation.ResearchProjectDetailTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ResearchProjectDetailTranslationsTable,
			Columns: []string{language.ResearchProjectDetailTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojectdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.ResearchProjectDetailTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.ResearchProjectDetailTranslationsTable,
			Columns: []string{language.ResearchProjectDetailTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojectdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.PublicationTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.PublicationTranslationsTable,
			Columns: []string{language.PublicationTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publicationtranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedPublicationTranslationsIDs(); len(nodes) > 0 && !luo.mutation.PublicationTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.PublicationTranslationsTable,
			Columns: []string{language.PublicationTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publicationtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.PublicationTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.PublicationTranslationsTable,
			Columns: []string{language.PublicationTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publicationtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.AwardTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.AwardTranslationsTable,
			Columns: []string{language.AwardTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(awardtranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedAwardTranslationsIDs(); len(nodes) > 0 && !luo.mutation.AwardTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.AwardTranslationsTable,
			Columns: []string{language.AwardTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(awardtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.AwardTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.AwardTranslationsTable,
			Columns: []string{language.AwardTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(awardtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.RecentUpdateTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.RecentUpdateTranslationsTable,
			Columns: []string{language.RecentUpdateTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recentupdatetranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedRecentUpdateTranslationsIDs(); len(nodes) > 0 && !luo.mutation.RecentUpdateTranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.RecentUpdateTranslationsTable,
			Columns: []string{language.RecentUpdateTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recentupdatetranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RecentUpdateTranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   language.RecentUpdateTranslationsTable,
			Columns: []string{language.RecentUpdateTranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recentupdatetranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Language{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{language.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
