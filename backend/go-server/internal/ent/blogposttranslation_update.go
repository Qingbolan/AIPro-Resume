// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/blogpost"
	"silan-backend/internal/ent/blogposttranslation"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BlogPostTranslationUpdate is the builder for updating BlogPostTranslation entities.
type BlogPostTranslationUpdate struct {
	config
	hooks    []Hook
	mutation *BlogPostTranslationMutation
}

// Where appends a list predicates to the BlogPostTranslationUpdate builder.
func (bptu *BlogPostTranslationUpdate) Where(ps ...predicate.BlogPostTranslation) *BlogPostTranslationUpdate {
	bptu.mutation.Where(ps...)
	return bptu
}

// SetBlogPostID sets the "blog_post_id" field.
func (bptu *BlogPostTranslationUpdate) SetBlogPostID(u uuid.UUID) *BlogPostTranslationUpdate {
	bptu.mutation.SetBlogPostID(u)
	return bptu
}

// SetNillableBlogPostID sets the "blog_post_id" field if the given value is not nil.
func (bptu *BlogPostTranslationUpdate) SetNillableBlogPostID(u *uuid.UUID) *BlogPostTranslationUpdate {
	if u != nil {
		bptu.SetBlogPostID(*u)
	}
	return bptu
}

// SetLanguageCode sets the "language_code" field.
func (bptu *BlogPostTranslationUpdate) SetLanguageCode(s string) *BlogPostTranslationUpdate {
	bptu.mutation.SetLanguageCode(s)
	return bptu
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (bptu *BlogPostTranslationUpdate) SetNillableLanguageCode(s *string) *BlogPostTranslationUpdate {
	if s != nil {
		bptu.SetLanguageCode(*s)
	}
	return bptu
}

// SetTitle sets the "title" field.
func (bptu *BlogPostTranslationUpdate) SetTitle(s string) *BlogPostTranslationUpdate {
	bptu.mutation.SetTitle(s)
	return bptu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (bptu *BlogPostTranslationUpdate) SetNillableTitle(s *string) *BlogPostTranslationUpdate {
	if s != nil {
		bptu.SetTitle(*s)
	}
	return bptu
}

// SetExcerpt sets the "excerpt" field.
func (bptu *BlogPostTranslationUpdate) SetExcerpt(s string) *BlogPostTranslationUpdate {
	bptu.mutation.SetExcerpt(s)
	return bptu
}

// SetNillableExcerpt sets the "excerpt" field if the given value is not nil.
func (bptu *BlogPostTranslationUpdate) SetNillableExcerpt(s *string) *BlogPostTranslationUpdate {
	if s != nil {
		bptu.SetExcerpt(*s)
	}
	return bptu
}

// ClearExcerpt clears the value of the "excerpt" field.
func (bptu *BlogPostTranslationUpdate) ClearExcerpt() *BlogPostTranslationUpdate {
	bptu.mutation.ClearExcerpt()
	return bptu
}

// SetContent sets the "content" field.
func (bptu *BlogPostTranslationUpdate) SetContent(s string) *BlogPostTranslationUpdate {
	bptu.mutation.SetContent(s)
	return bptu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (bptu *BlogPostTranslationUpdate) SetNillableContent(s *string) *BlogPostTranslationUpdate {
	if s != nil {
		bptu.SetContent(*s)
	}
	return bptu
}

// SetUpdatedAt sets the "updated_at" field.
func (bptu *BlogPostTranslationUpdate) SetUpdatedAt(t time.Time) *BlogPostTranslationUpdate {
	bptu.mutation.SetUpdatedAt(t)
	return bptu
}

// SetBlogPost sets the "blog_post" edge to the BlogPost entity.
func (bptu *BlogPostTranslationUpdate) SetBlogPost(b *BlogPost) *BlogPostTranslationUpdate {
	return bptu.SetBlogPostID(b.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (bptu *BlogPostTranslationUpdate) SetLanguageID(id string) *BlogPostTranslationUpdate {
	bptu.mutation.SetLanguageID(id)
	return bptu
}

// SetLanguage sets the "language" edge to the Language entity.
func (bptu *BlogPostTranslationUpdate) SetLanguage(l *Language) *BlogPostTranslationUpdate {
	return bptu.SetLanguageID(l.ID)
}

// Mutation returns the BlogPostTranslationMutation object of the builder.
func (bptu *BlogPostTranslationUpdate) Mutation() *BlogPostTranslationMutation {
	return bptu.mutation
}

// ClearBlogPost clears the "blog_post" edge to the BlogPost entity.
func (bptu *BlogPostTranslationUpdate) ClearBlogPost() *BlogPostTranslationUpdate {
	bptu.mutation.ClearBlogPost()
	return bptu
}

// ClearLanguage clears the "language" edge to the Language entity.
func (bptu *BlogPostTranslationUpdate) ClearLanguage() *BlogPostTranslationUpdate {
	bptu.mutation.ClearLanguage()
	return bptu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bptu *BlogPostTranslationUpdate) Save(ctx context.Context) (int, error) {
	bptu.defaults()
	return withHooks(ctx, bptu.sqlSave, bptu.mutation, bptu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bptu *BlogPostTranslationUpdate) SaveX(ctx context.Context) int {
	affected, err := bptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bptu *BlogPostTranslationUpdate) Exec(ctx context.Context) error {
	_, err := bptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bptu *BlogPostTranslationUpdate) ExecX(ctx context.Context) {
	if err := bptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bptu *BlogPostTranslationUpdate) defaults() {
	if _, ok := bptu.mutation.UpdatedAt(); !ok {
		v := blogposttranslation.UpdateDefaultUpdatedAt()
		bptu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bptu *BlogPostTranslationUpdate) check() error {
	if v, ok := bptu.mutation.LanguageCode(); ok {
		if err := blogposttranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "BlogPostTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := bptu.mutation.Title(); ok {
		if err := blogposttranslation.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "BlogPostTranslation.title": %w`, err)}
		}
	}
	if v, ok := bptu.mutation.Content(); ok {
		if err := blogposttranslation.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "BlogPostTranslation.content": %w`, err)}
		}
	}
	if bptu.mutation.BlogPostCleared() && len(bptu.mutation.BlogPostIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlogPostTranslation.blog_post"`)
	}
	if bptu.mutation.LanguageCleared() && len(bptu.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlogPostTranslation.language"`)
	}
	return nil
}

func (bptu *BlogPostTranslationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bptu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(blogposttranslation.Table, blogposttranslation.Columns, sqlgraph.NewFieldSpec(blogposttranslation.FieldID, field.TypeUUID))
	if ps := bptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bptu.mutation.Title(); ok {
		_spec.SetField(blogposttranslation.FieldTitle, field.TypeString, value)
	}
	if value, ok := bptu.mutation.Excerpt(); ok {
		_spec.SetField(blogposttranslation.FieldExcerpt, field.TypeString, value)
	}
	if bptu.mutation.ExcerptCleared() {
		_spec.ClearField(blogposttranslation.FieldExcerpt, field.TypeString)
	}
	if value, ok := bptu.mutation.Content(); ok {
		_spec.SetField(blogposttranslation.FieldContent, field.TypeString, value)
	}
	if value, ok := bptu.mutation.UpdatedAt(); ok {
		_spec.SetField(blogposttranslation.FieldUpdatedAt, field.TypeTime, value)
	}
	if bptu.mutation.BlogPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogposttranslation.BlogPostTable,
			Columns: []string{blogposttranslation.BlogPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bptu.mutation.BlogPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogposttranslation.BlogPostTable,
			Columns: []string{blogposttranslation.BlogPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bptu.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogposttranslation.LanguageTable,
			Columns: []string{blogposttranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bptu.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogposttranslation.LanguageTable,
			Columns: []string{blogposttranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blogposttranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bptu.mutation.done = true
	return n, nil
}

// BlogPostTranslationUpdateOne is the builder for updating a single BlogPostTranslation entity.
type BlogPostTranslationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlogPostTranslationMutation
}

// SetBlogPostID sets the "blog_post_id" field.
func (bptuo *BlogPostTranslationUpdateOne) SetBlogPostID(u uuid.UUID) *BlogPostTranslationUpdateOne {
	bptuo.mutation.SetBlogPostID(u)
	return bptuo
}

// SetNillableBlogPostID sets the "blog_post_id" field if the given value is not nil.
func (bptuo *BlogPostTranslationUpdateOne) SetNillableBlogPostID(u *uuid.UUID) *BlogPostTranslationUpdateOne {
	if u != nil {
		bptuo.SetBlogPostID(*u)
	}
	return bptuo
}

// SetLanguageCode sets the "language_code" field.
func (bptuo *BlogPostTranslationUpdateOne) SetLanguageCode(s string) *BlogPostTranslationUpdateOne {
	bptuo.mutation.SetLanguageCode(s)
	return bptuo
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (bptuo *BlogPostTranslationUpdateOne) SetNillableLanguageCode(s *string) *BlogPostTranslationUpdateOne {
	if s != nil {
		bptuo.SetLanguageCode(*s)
	}
	return bptuo
}

// SetTitle sets the "title" field.
func (bptuo *BlogPostTranslationUpdateOne) SetTitle(s string) *BlogPostTranslationUpdateOne {
	bptuo.mutation.SetTitle(s)
	return bptuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (bptuo *BlogPostTranslationUpdateOne) SetNillableTitle(s *string) *BlogPostTranslationUpdateOne {
	if s != nil {
		bptuo.SetTitle(*s)
	}
	return bptuo
}

// SetExcerpt sets the "excerpt" field.
func (bptuo *BlogPostTranslationUpdateOne) SetExcerpt(s string) *BlogPostTranslationUpdateOne {
	bptuo.mutation.SetExcerpt(s)
	return bptuo
}

// SetNillableExcerpt sets the "excerpt" field if the given value is not nil.
func (bptuo *BlogPostTranslationUpdateOne) SetNillableExcerpt(s *string) *BlogPostTranslationUpdateOne {
	if s != nil {
		bptuo.SetExcerpt(*s)
	}
	return bptuo
}

// ClearExcerpt clears the value of the "excerpt" field.
func (bptuo *BlogPostTranslationUpdateOne) ClearExcerpt() *BlogPostTranslationUpdateOne {
	bptuo.mutation.ClearExcerpt()
	return bptuo
}

// SetContent sets the "content" field.
func (bptuo *BlogPostTranslationUpdateOne) SetContent(s string) *BlogPostTranslationUpdateOne {
	bptuo.mutation.SetContent(s)
	return bptuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (bptuo *BlogPostTranslationUpdateOne) SetNillableContent(s *string) *BlogPostTranslationUpdateOne {
	if s != nil {
		bptuo.SetContent(*s)
	}
	return bptuo
}

// SetUpdatedAt sets the "updated_at" field.
func (bptuo *BlogPostTranslationUpdateOne) SetUpdatedAt(t time.Time) *BlogPostTranslationUpdateOne {
	bptuo.mutation.SetUpdatedAt(t)
	return bptuo
}

// SetBlogPost sets the "blog_post" edge to the BlogPost entity.
func (bptuo *BlogPostTranslationUpdateOne) SetBlogPost(b *BlogPost) *BlogPostTranslationUpdateOne {
	return bptuo.SetBlogPostID(b.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (bptuo *BlogPostTranslationUpdateOne) SetLanguageID(id string) *BlogPostTranslationUpdateOne {
	bptuo.mutation.SetLanguageID(id)
	return bptuo
}

// SetLanguage sets the "language" edge to the Language entity.
func (bptuo *BlogPostTranslationUpdateOne) SetLanguage(l *Language) *BlogPostTranslationUpdateOne {
	return bptuo.SetLanguageID(l.ID)
}

// Mutation returns the BlogPostTranslationMutation object of the builder.
func (bptuo *BlogPostTranslationUpdateOne) Mutation() *BlogPostTranslationMutation {
	return bptuo.mutation
}

// ClearBlogPost clears the "blog_post" edge to the BlogPost entity.
func (bptuo *BlogPostTranslationUpdateOne) ClearBlogPost() *BlogPostTranslationUpdateOne {
	bptuo.mutation.ClearBlogPost()
	return bptuo
}

// ClearLanguage clears the "language" edge to the Language entity.
func (bptuo *BlogPostTranslationUpdateOne) ClearLanguage() *BlogPostTranslationUpdateOne {
	bptuo.mutation.ClearLanguage()
	return bptuo
}

// Where appends a list predicates to the BlogPostTranslationUpdate builder.
func (bptuo *BlogPostTranslationUpdateOne) Where(ps ...predicate.BlogPostTranslation) *BlogPostTranslationUpdateOne {
	bptuo.mutation.Where(ps...)
	return bptuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bptuo *BlogPostTranslationUpdateOne) Select(field string, fields ...string) *BlogPostTranslationUpdateOne {
	bptuo.fields = append([]string{field}, fields...)
	return bptuo
}

// Save executes the query and returns the updated BlogPostTranslation entity.
func (bptuo *BlogPostTranslationUpdateOne) Save(ctx context.Context) (*BlogPostTranslation, error) {
	bptuo.defaults()
	return withHooks(ctx, bptuo.sqlSave, bptuo.mutation, bptuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bptuo *BlogPostTranslationUpdateOne) SaveX(ctx context.Context) *BlogPostTranslation {
	node, err := bptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bptuo *BlogPostTranslationUpdateOne) Exec(ctx context.Context) error {
	_, err := bptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bptuo *BlogPostTranslationUpdateOne) ExecX(ctx context.Context) {
	if err := bptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bptuo *BlogPostTranslationUpdateOne) defaults() {
	if _, ok := bptuo.mutation.UpdatedAt(); !ok {
		v := blogposttranslation.UpdateDefaultUpdatedAt()
		bptuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bptuo *BlogPostTranslationUpdateOne) check() error {
	if v, ok := bptuo.mutation.LanguageCode(); ok {
		if err := blogposttranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "BlogPostTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := bptuo.mutation.Title(); ok {
		if err := blogposttranslation.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "BlogPostTranslation.title": %w`, err)}
		}
	}
	if v, ok := bptuo.mutation.Content(); ok {
		if err := blogposttranslation.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "BlogPostTranslation.content": %w`, err)}
		}
	}
	if bptuo.mutation.BlogPostCleared() && len(bptuo.mutation.BlogPostIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlogPostTranslation.blog_post"`)
	}
	if bptuo.mutation.LanguageCleared() && len(bptuo.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlogPostTranslation.language"`)
	}
	return nil
}

func (bptuo *BlogPostTranslationUpdateOne) sqlSave(ctx context.Context) (_node *BlogPostTranslation, err error) {
	if err := bptuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blogposttranslation.Table, blogposttranslation.Columns, sqlgraph.NewFieldSpec(blogposttranslation.FieldID, field.TypeUUID))
	id, ok := bptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlogPostTranslation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blogposttranslation.FieldID)
		for _, f := range fields {
			if !blogposttranslation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blogposttranslation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bptuo.mutation.Title(); ok {
		_spec.SetField(blogposttranslation.FieldTitle, field.TypeString, value)
	}
	if value, ok := bptuo.mutation.Excerpt(); ok {
		_spec.SetField(blogposttranslation.FieldExcerpt, field.TypeString, value)
	}
	if bptuo.mutation.ExcerptCleared() {
		_spec.ClearField(blogposttranslation.FieldExcerpt, field.TypeString)
	}
	if value, ok := bptuo.mutation.Content(); ok {
		_spec.SetField(blogposttranslation.FieldContent, field.TypeString, value)
	}
	if value, ok := bptuo.mutation.UpdatedAt(); ok {
		_spec.SetField(blogposttranslation.FieldUpdatedAt, field.TypeTime, value)
	}
	if bptuo.mutation.BlogPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogposttranslation.BlogPostTable,
			Columns: []string{blogposttranslation.BlogPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bptuo.mutation.BlogPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogposttranslation.BlogPostTable,
			Columns: []string{blogposttranslation.BlogPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bptuo.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogposttranslation.LanguageTable,
			Columns: []string{blogposttranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bptuo.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogposttranslation.LanguageTable,
			Columns: []string{blogposttranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BlogPostTranslation{config: bptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blogposttranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bptuo.mutation.done = true
	return _node, nil
}
