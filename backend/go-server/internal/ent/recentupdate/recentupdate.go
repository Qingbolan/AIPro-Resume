// Code generated by ent, DO NOT EDIT.

package recentupdate

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the recentupdate type in the database.
	Label = "recent_update"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPriority holds the string denoting the priority field in the database.
	FieldPriority = "priority"
	// FieldExternalID holds the string denoting the external_id field in the database.
	FieldExternalID = "external_id"
	// FieldImageURL holds the string denoting the image_url field in the database.
	FieldImageURL = "image_url"
	// FieldVideoURL holds the string denoting the video_url field in the database.
	FieldVideoURL = "video_url"
	// FieldDocumentURL holds the string denoting the document_url field in the database.
	FieldDocumentURL = "document_url"
	// FieldGallery holds the string denoting the gallery field in the database.
	FieldGallery = "gallery"
	// FieldAttachments holds the string denoting the attachments field in the database.
	FieldAttachments = "attachments"
	// FieldMediaMetadata holds the string denoting the media_metadata field in the database.
	FieldMediaMetadata = "media_metadata"
	// FieldDemoURL holds the string denoting the demo_url field in the database.
	FieldDemoURL = "demo_url"
	// FieldGithubURL holds the string denoting the github_url field in the database.
	FieldGithubURL = "github_url"
	// FieldExternalURL holds the string denoting the external_url field in the database.
	FieldExternalURL = "external_url"
	// FieldSocialLinks holds the string denoting the social_links field in the database.
	FieldSocialLinks = "social_links"
	// FieldSortOrder holds the string denoting the sort_order field in the database.
	FieldSortOrder = "sort_order"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeTranslations holds the string denoting the translations edge name in mutations.
	EdgeTranslations = "translations"
	// Table holds the table name of the recentupdate in the database.
	Table = "recent_updates"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "recent_updates"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// TranslationsTable is the table that holds the translations relation/edge.
	TranslationsTable = "recent_update_translations"
	// TranslationsInverseTable is the table name for the RecentUpdateTranslation entity.
	// It exists in this package in order to avoid circular dependency with the "recentupdatetranslation" package.
	TranslationsInverseTable = "recent_update_translations"
	// TranslationsColumn is the table column denoting the translations relation/edge.
	TranslationsColumn = "recent_update_id"
)

// Columns holds all SQL columns for recentupdate fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldType,
	FieldTitle,
	FieldDescription,
	FieldDate,
	FieldTags,
	FieldStatus,
	FieldPriority,
	FieldExternalID,
	FieldImageURL,
	FieldVideoURL,
	FieldDocumentURL,
	FieldGallery,
	FieldAttachments,
	FieldMediaMetadata,
	FieldDemoURL,
	FieldGithubURL,
	FieldExternalURL,
	FieldSocialLinks,
	FieldSortOrder,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// ExternalIDValidator is a validator for the "external_id" field. It is called by the builders before save.
	ExternalIDValidator func(string) error
	// ImageURLValidator is a validator for the "image_url" field. It is called by the builders before save.
	ImageURLValidator func(string) error
	// VideoURLValidator is a validator for the "video_url" field. It is called by the builders before save.
	VideoURLValidator func(string) error
	// DocumentURLValidator is a validator for the "document_url" field. It is called by the builders before save.
	DocumentURLValidator func(string) error
	// DemoURLValidator is a validator for the "demo_url" field. It is called by the builders before save.
	DemoURLValidator func(string) error
	// GithubURLValidator is a validator for the "github_url" field. It is called by the builders before save.
	GithubURLValidator func(string) error
	// ExternalURLValidator is a validator for the "external_url" field. It is called by the builders before save.
	ExternalURLValidator func(string) error
	// DefaultSortOrder holds the default value on creation for the "sort_order" field.
	DefaultSortOrder int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// TypeProject is the default value of the Type enum.
const DefaultType = TypeProject

// Type values.
const (
	TypeWork        Type = "work"
	TypeEducation   Type = "education"
	TypeResearch    Type = "research"
	TypePublication Type = "publication"
	TypeProject     Type = "project"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeWork, TypeEducation, TypeResearch, TypePublication, TypeProject:
		return nil
	default:
		return fmt.Errorf("recentupdate: invalid enum value for type field: %q", _type)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusActive is the default value of the Status enum.
const DefaultStatus = StatusActive

// Status values.
const (
	StatusActive    Status = "active"
	StatusOngoing   Status = "ongoing"
	StatusCompleted Status = "completed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusActive, StatusOngoing, StatusCompleted:
		return nil
	default:
		return fmt.Errorf("recentupdate: invalid enum value for status field: %q", s)
	}
}

// Priority defines the type for the "priority" enum field.
type Priority string

// PriorityMedium is the default value of the Priority enum.
const DefaultPriority = PriorityMedium

// Priority values.
const (
	PriorityHigh   Priority = "high"
	PriorityMedium Priority = "medium"
	PriorityLow    Priority = "low"
)

func (pr Priority) String() string {
	return string(pr)
}

// PriorityValidator is a validator for the "priority" field enum values. It is called by the builders before save.
func PriorityValidator(pr Priority) error {
	switch pr {
	case PriorityHigh, PriorityMedium, PriorityLow:
		return nil
	default:
		return fmt.Errorf("recentupdate: invalid enum value for priority field: %q", pr)
	}
}

// OrderOption defines the ordering options for the RecentUpdate queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPriority orders the results by the priority field.
func ByPriority(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriority, opts...).ToFunc()
}

// ByExternalID orders the results by the external_id field.
func ByExternalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalID, opts...).ToFunc()
}

// ByImageURL orders the results by the image_url field.
func ByImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageURL, opts...).ToFunc()
}

// ByVideoURL orders the results by the video_url field.
func ByVideoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVideoURL, opts...).ToFunc()
}

// ByDocumentURL orders the results by the document_url field.
func ByDocumentURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDocumentURL, opts...).ToFunc()
}

// ByDemoURL orders the results by the demo_url field.
func ByDemoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDemoURL, opts...).ToFunc()
}

// ByGithubURL orders the results by the github_url field.
func ByGithubURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGithubURL, opts...).ToFunc()
}

// ByExternalURL orders the results by the external_url field.
func ByExternalURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalURL, opts...).ToFunc()
}

// BySortOrder orders the results by the sort_order field.
func BySortOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSortOrder, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByTranslationsCount orders the results by translations count.
func ByTranslationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTranslationsStep(), opts...)
	}
}

// ByTranslations orders the results by translations terms.
func ByTranslations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTranslationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newTranslationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TranslationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TranslationsTable, TranslationsColumn),
	)
}
