// Code generated by ent, DO NOT EDIT.

package recentupdate

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldUserID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldDescription, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldDate, v))
}

// ExternalID applies equality check predicate on the "external_id" field. It's identical to ExternalIDEQ.
func ExternalID(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldExternalID, v))
}

// ImageURL applies equality check predicate on the "image_url" field. It's identical to ImageURLEQ.
func ImageURL(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldImageURL, v))
}

// VideoURL applies equality check predicate on the "video_url" field. It's identical to VideoURLEQ.
func VideoURL(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldVideoURL, v))
}

// DocumentURL applies equality check predicate on the "document_url" field. It's identical to DocumentURLEQ.
func DocumentURL(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldDocumentURL, v))
}

// DemoURL applies equality check predicate on the "demo_url" field. It's identical to DemoURLEQ.
func DemoURL(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldDemoURL, v))
}

// GithubURL applies equality check predicate on the "github_url" field. It's identical to GithubURLEQ.
func GithubURL(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldGithubURL, v))
}

// ExternalURL applies equality check predicate on the "external_url" field. It's identical to ExternalURLEQ.
func ExternalURL(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldExternalURL, v))
}

// SortOrder applies equality check predicate on the "sort_order" field. It's identical to SortOrderEQ.
func SortOrder(v int) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldSortOrder, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotIn(FieldUserID, vs...))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotIn(FieldType, vs...))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldContainsFold(FieldDescription, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldLTE(FieldDate, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotNull(FieldTags))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotIn(FieldStatus, vs...))
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v Priority) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldPriority, v))
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v Priority) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNEQ(FieldPriority, v))
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...Priority) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIn(FieldPriority, vs...))
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...Priority) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotIn(FieldPriority, vs...))
}

// ExternalIDEQ applies the EQ predicate on the "external_id" field.
func ExternalIDEQ(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldExternalID, v))
}

// ExternalIDNEQ applies the NEQ predicate on the "external_id" field.
func ExternalIDNEQ(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNEQ(FieldExternalID, v))
}

// ExternalIDIn applies the In predicate on the "external_id" field.
func ExternalIDIn(vs ...string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIn(FieldExternalID, vs...))
}

// ExternalIDNotIn applies the NotIn predicate on the "external_id" field.
func ExternalIDNotIn(vs ...string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotIn(FieldExternalID, vs...))
}

// ExternalIDGT applies the GT predicate on the "external_id" field.
func ExternalIDGT(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldGT(FieldExternalID, v))
}

// ExternalIDGTE applies the GTE predicate on the "external_id" field.
func ExternalIDGTE(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldGTE(FieldExternalID, v))
}

// ExternalIDLT applies the LT predicate on the "external_id" field.
func ExternalIDLT(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldLT(FieldExternalID, v))
}

// ExternalIDLTE applies the LTE predicate on the "external_id" field.
func ExternalIDLTE(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldLTE(FieldExternalID, v))
}

// ExternalIDContains applies the Contains predicate on the "external_id" field.
func ExternalIDContains(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldContains(FieldExternalID, v))
}

// ExternalIDHasPrefix applies the HasPrefix predicate on the "external_id" field.
func ExternalIDHasPrefix(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldHasPrefix(FieldExternalID, v))
}

// ExternalIDHasSuffix applies the HasSuffix predicate on the "external_id" field.
func ExternalIDHasSuffix(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldHasSuffix(FieldExternalID, v))
}

// ExternalIDIsNil applies the IsNil predicate on the "external_id" field.
func ExternalIDIsNil() predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIsNull(FieldExternalID))
}

// ExternalIDNotNil applies the NotNil predicate on the "external_id" field.
func ExternalIDNotNil() predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotNull(FieldExternalID))
}

// ExternalIDEqualFold applies the EqualFold predicate on the "external_id" field.
func ExternalIDEqualFold(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEqualFold(FieldExternalID, v))
}

// ExternalIDContainsFold applies the ContainsFold predicate on the "external_id" field.
func ExternalIDContainsFold(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldContainsFold(FieldExternalID, v))
}

// ImageURLEQ applies the EQ predicate on the "image_url" field.
func ImageURLEQ(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldImageURL, v))
}

// ImageURLNEQ applies the NEQ predicate on the "image_url" field.
func ImageURLNEQ(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNEQ(FieldImageURL, v))
}

// ImageURLIn applies the In predicate on the "image_url" field.
func ImageURLIn(vs ...string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIn(FieldImageURL, vs...))
}

// ImageURLNotIn applies the NotIn predicate on the "image_url" field.
func ImageURLNotIn(vs ...string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotIn(FieldImageURL, vs...))
}

// ImageURLGT applies the GT predicate on the "image_url" field.
func ImageURLGT(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldGT(FieldImageURL, v))
}

// ImageURLGTE applies the GTE predicate on the "image_url" field.
func ImageURLGTE(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldGTE(FieldImageURL, v))
}

// ImageURLLT applies the LT predicate on the "image_url" field.
func ImageURLLT(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldLT(FieldImageURL, v))
}

// ImageURLLTE applies the LTE predicate on the "image_url" field.
func ImageURLLTE(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldLTE(FieldImageURL, v))
}

// ImageURLContains applies the Contains predicate on the "image_url" field.
func ImageURLContains(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldContains(FieldImageURL, v))
}

// ImageURLHasPrefix applies the HasPrefix predicate on the "image_url" field.
func ImageURLHasPrefix(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldHasPrefix(FieldImageURL, v))
}

// ImageURLHasSuffix applies the HasSuffix predicate on the "image_url" field.
func ImageURLHasSuffix(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldHasSuffix(FieldImageURL, v))
}

// ImageURLIsNil applies the IsNil predicate on the "image_url" field.
func ImageURLIsNil() predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIsNull(FieldImageURL))
}

// ImageURLNotNil applies the NotNil predicate on the "image_url" field.
func ImageURLNotNil() predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotNull(FieldImageURL))
}

// ImageURLEqualFold applies the EqualFold predicate on the "image_url" field.
func ImageURLEqualFold(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEqualFold(FieldImageURL, v))
}

// ImageURLContainsFold applies the ContainsFold predicate on the "image_url" field.
func ImageURLContainsFold(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldContainsFold(FieldImageURL, v))
}

// VideoURLEQ applies the EQ predicate on the "video_url" field.
func VideoURLEQ(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldVideoURL, v))
}

// VideoURLNEQ applies the NEQ predicate on the "video_url" field.
func VideoURLNEQ(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNEQ(FieldVideoURL, v))
}

// VideoURLIn applies the In predicate on the "video_url" field.
func VideoURLIn(vs ...string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIn(FieldVideoURL, vs...))
}

// VideoURLNotIn applies the NotIn predicate on the "video_url" field.
func VideoURLNotIn(vs ...string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotIn(FieldVideoURL, vs...))
}

// VideoURLGT applies the GT predicate on the "video_url" field.
func VideoURLGT(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldGT(FieldVideoURL, v))
}

// VideoURLGTE applies the GTE predicate on the "video_url" field.
func VideoURLGTE(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldGTE(FieldVideoURL, v))
}

// VideoURLLT applies the LT predicate on the "video_url" field.
func VideoURLLT(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldLT(FieldVideoURL, v))
}

// VideoURLLTE applies the LTE predicate on the "video_url" field.
func VideoURLLTE(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldLTE(FieldVideoURL, v))
}

// VideoURLContains applies the Contains predicate on the "video_url" field.
func VideoURLContains(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldContains(FieldVideoURL, v))
}

// VideoURLHasPrefix applies the HasPrefix predicate on the "video_url" field.
func VideoURLHasPrefix(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldHasPrefix(FieldVideoURL, v))
}

// VideoURLHasSuffix applies the HasSuffix predicate on the "video_url" field.
func VideoURLHasSuffix(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldHasSuffix(FieldVideoURL, v))
}

// VideoURLIsNil applies the IsNil predicate on the "video_url" field.
func VideoURLIsNil() predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIsNull(FieldVideoURL))
}

// VideoURLNotNil applies the NotNil predicate on the "video_url" field.
func VideoURLNotNil() predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotNull(FieldVideoURL))
}

// VideoURLEqualFold applies the EqualFold predicate on the "video_url" field.
func VideoURLEqualFold(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEqualFold(FieldVideoURL, v))
}

// VideoURLContainsFold applies the ContainsFold predicate on the "video_url" field.
func VideoURLContainsFold(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldContainsFold(FieldVideoURL, v))
}

// DocumentURLEQ applies the EQ predicate on the "document_url" field.
func DocumentURLEQ(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldDocumentURL, v))
}

// DocumentURLNEQ applies the NEQ predicate on the "document_url" field.
func DocumentURLNEQ(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNEQ(FieldDocumentURL, v))
}

// DocumentURLIn applies the In predicate on the "document_url" field.
func DocumentURLIn(vs ...string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIn(FieldDocumentURL, vs...))
}

// DocumentURLNotIn applies the NotIn predicate on the "document_url" field.
func DocumentURLNotIn(vs ...string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotIn(FieldDocumentURL, vs...))
}

// DocumentURLGT applies the GT predicate on the "document_url" field.
func DocumentURLGT(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldGT(FieldDocumentURL, v))
}

// DocumentURLGTE applies the GTE predicate on the "document_url" field.
func DocumentURLGTE(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldGTE(FieldDocumentURL, v))
}

// DocumentURLLT applies the LT predicate on the "document_url" field.
func DocumentURLLT(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldLT(FieldDocumentURL, v))
}

// DocumentURLLTE applies the LTE predicate on the "document_url" field.
func DocumentURLLTE(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldLTE(FieldDocumentURL, v))
}

// DocumentURLContains applies the Contains predicate on the "document_url" field.
func DocumentURLContains(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldContains(FieldDocumentURL, v))
}

// DocumentURLHasPrefix applies the HasPrefix predicate on the "document_url" field.
func DocumentURLHasPrefix(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldHasPrefix(FieldDocumentURL, v))
}

// DocumentURLHasSuffix applies the HasSuffix predicate on the "document_url" field.
func DocumentURLHasSuffix(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldHasSuffix(FieldDocumentURL, v))
}

// DocumentURLIsNil applies the IsNil predicate on the "document_url" field.
func DocumentURLIsNil() predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIsNull(FieldDocumentURL))
}

// DocumentURLNotNil applies the NotNil predicate on the "document_url" field.
func DocumentURLNotNil() predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotNull(FieldDocumentURL))
}

// DocumentURLEqualFold applies the EqualFold predicate on the "document_url" field.
func DocumentURLEqualFold(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEqualFold(FieldDocumentURL, v))
}

// DocumentURLContainsFold applies the ContainsFold predicate on the "document_url" field.
func DocumentURLContainsFold(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldContainsFold(FieldDocumentURL, v))
}

// GalleryIsNil applies the IsNil predicate on the "gallery" field.
func GalleryIsNil() predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIsNull(FieldGallery))
}

// GalleryNotNil applies the NotNil predicate on the "gallery" field.
func GalleryNotNil() predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotNull(FieldGallery))
}

// AttachmentsIsNil applies the IsNil predicate on the "attachments" field.
func AttachmentsIsNil() predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIsNull(FieldAttachments))
}

// AttachmentsNotNil applies the NotNil predicate on the "attachments" field.
func AttachmentsNotNil() predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotNull(FieldAttachments))
}

// MediaMetadataIsNil applies the IsNil predicate on the "media_metadata" field.
func MediaMetadataIsNil() predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIsNull(FieldMediaMetadata))
}

// MediaMetadataNotNil applies the NotNil predicate on the "media_metadata" field.
func MediaMetadataNotNil() predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotNull(FieldMediaMetadata))
}

// DemoURLEQ applies the EQ predicate on the "demo_url" field.
func DemoURLEQ(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldDemoURL, v))
}

// DemoURLNEQ applies the NEQ predicate on the "demo_url" field.
func DemoURLNEQ(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNEQ(FieldDemoURL, v))
}

// DemoURLIn applies the In predicate on the "demo_url" field.
func DemoURLIn(vs ...string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIn(FieldDemoURL, vs...))
}

// DemoURLNotIn applies the NotIn predicate on the "demo_url" field.
func DemoURLNotIn(vs ...string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotIn(FieldDemoURL, vs...))
}

// DemoURLGT applies the GT predicate on the "demo_url" field.
func DemoURLGT(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldGT(FieldDemoURL, v))
}

// DemoURLGTE applies the GTE predicate on the "demo_url" field.
func DemoURLGTE(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldGTE(FieldDemoURL, v))
}

// DemoURLLT applies the LT predicate on the "demo_url" field.
func DemoURLLT(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldLT(FieldDemoURL, v))
}

// DemoURLLTE applies the LTE predicate on the "demo_url" field.
func DemoURLLTE(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldLTE(FieldDemoURL, v))
}

// DemoURLContains applies the Contains predicate on the "demo_url" field.
func DemoURLContains(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldContains(FieldDemoURL, v))
}

// DemoURLHasPrefix applies the HasPrefix predicate on the "demo_url" field.
func DemoURLHasPrefix(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldHasPrefix(FieldDemoURL, v))
}

// DemoURLHasSuffix applies the HasSuffix predicate on the "demo_url" field.
func DemoURLHasSuffix(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldHasSuffix(FieldDemoURL, v))
}

// DemoURLIsNil applies the IsNil predicate on the "demo_url" field.
func DemoURLIsNil() predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIsNull(FieldDemoURL))
}

// DemoURLNotNil applies the NotNil predicate on the "demo_url" field.
func DemoURLNotNil() predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotNull(FieldDemoURL))
}

// DemoURLEqualFold applies the EqualFold predicate on the "demo_url" field.
func DemoURLEqualFold(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEqualFold(FieldDemoURL, v))
}

// DemoURLContainsFold applies the ContainsFold predicate on the "demo_url" field.
func DemoURLContainsFold(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldContainsFold(FieldDemoURL, v))
}

// GithubURLEQ applies the EQ predicate on the "github_url" field.
func GithubURLEQ(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldGithubURL, v))
}

// GithubURLNEQ applies the NEQ predicate on the "github_url" field.
func GithubURLNEQ(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNEQ(FieldGithubURL, v))
}

// GithubURLIn applies the In predicate on the "github_url" field.
func GithubURLIn(vs ...string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIn(FieldGithubURL, vs...))
}

// GithubURLNotIn applies the NotIn predicate on the "github_url" field.
func GithubURLNotIn(vs ...string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotIn(FieldGithubURL, vs...))
}

// GithubURLGT applies the GT predicate on the "github_url" field.
func GithubURLGT(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldGT(FieldGithubURL, v))
}

// GithubURLGTE applies the GTE predicate on the "github_url" field.
func GithubURLGTE(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldGTE(FieldGithubURL, v))
}

// GithubURLLT applies the LT predicate on the "github_url" field.
func GithubURLLT(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldLT(FieldGithubURL, v))
}

// GithubURLLTE applies the LTE predicate on the "github_url" field.
func GithubURLLTE(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldLTE(FieldGithubURL, v))
}

// GithubURLContains applies the Contains predicate on the "github_url" field.
func GithubURLContains(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldContains(FieldGithubURL, v))
}

// GithubURLHasPrefix applies the HasPrefix predicate on the "github_url" field.
func GithubURLHasPrefix(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldHasPrefix(FieldGithubURL, v))
}

// GithubURLHasSuffix applies the HasSuffix predicate on the "github_url" field.
func GithubURLHasSuffix(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldHasSuffix(FieldGithubURL, v))
}

// GithubURLIsNil applies the IsNil predicate on the "github_url" field.
func GithubURLIsNil() predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIsNull(FieldGithubURL))
}

// GithubURLNotNil applies the NotNil predicate on the "github_url" field.
func GithubURLNotNil() predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotNull(FieldGithubURL))
}

// GithubURLEqualFold applies the EqualFold predicate on the "github_url" field.
func GithubURLEqualFold(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEqualFold(FieldGithubURL, v))
}

// GithubURLContainsFold applies the ContainsFold predicate on the "github_url" field.
func GithubURLContainsFold(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldContainsFold(FieldGithubURL, v))
}

// ExternalURLEQ applies the EQ predicate on the "external_url" field.
func ExternalURLEQ(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldExternalURL, v))
}

// ExternalURLNEQ applies the NEQ predicate on the "external_url" field.
func ExternalURLNEQ(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNEQ(FieldExternalURL, v))
}

// ExternalURLIn applies the In predicate on the "external_url" field.
func ExternalURLIn(vs ...string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIn(FieldExternalURL, vs...))
}

// ExternalURLNotIn applies the NotIn predicate on the "external_url" field.
func ExternalURLNotIn(vs ...string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotIn(FieldExternalURL, vs...))
}

// ExternalURLGT applies the GT predicate on the "external_url" field.
func ExternalURLGT(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldGT(FieldExternalURL, v))
}

// ExternalURLGTE applies the GTE predicate on the "external_url" field.
func ExternalURLGTE(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldGTE(FieldExternalURL, v))
}

// ExternalURLLT applies the LT predicate on the "external_url" field.
func ExternalURLLT(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldLT(FieldExternalURL, v))
}

// ExternalURLLTE applies the LTE predicate on the "external_url" field.
func ExternalURLLTE(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldLTE(FieldExternalURL, v))
}

// ExternalURLContains applies the Contains predicate on the "external_url" field.
func ExternalURLContains(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldContains(FieldExternalURL, v))
}

// ExternalURLHasPrefix applies the HasPrefix predicate on the "external_url" field.
func ExternalURLHasPrefix(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldHasPrefix(FieldExternalURL, v))
}

// ExternalURLHasSuffix applies the HasSuffix predicate on the "external_url" field.
func ExternalURLHasSuffix(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldHasSuffix(FieldExternalURL, v))
}

// ExternalURLIsNil applies the IsNil predicate on the "external_url" field.
func ExternalURLIsNil() predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIsNull(FieldExternalURL))
}

// ExternalURLNotNil applies the NotNil predicate on the "external_url" field.
func ExternalURLNotNil() predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotNull(FieldExternalURL))
}

// ExternalURLEqualFold applies the EqualFold predicate on the "external_url" field.
func ExternalURLEqualFold(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEqualFold(FieldExternalURL, v))
}

// ExternalURLContainsFold applies the ContainsFold predicate on the "external_url" field.
func ExternalURLContainsFold(v string) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldContainsFold(FieldExternalURL, v))
}

// SocialLinksIsNil applies the IsNil predicate on the "social_links" field.
func SocialLinksIsNil() predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIsNull(FieldSocialLinks))
}

// SocialLinksNotNil applies the NotNil predicate on the "social_links" field.
func SocialLinksNotNil() predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotNull(FieldSocialLinks))
}

// SortOrderEQ applies the EQ predicate on the "sort_order" field.
func SortOrderEQ(v int) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldSortOrder, v))
}

// SortOrderNEQ applies the NEQ predicate on the "sort_order" field.
func SortOrderNEQ(v int) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNEQ(FieldSortOrder, v))
}

// SortOrderIn applies the In predicate on the "sort_order" field.
func SortOrderIn(vs ...int) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIn(FieldSortOrder, vs...))
}

// SortOrderNotIn applies the NotIn predicate on the "sort_order" field.
func SortOrderNotIn(vs ...int) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotIn(FieldSortOrder, vs...))
}

// SortOrderGT applies the GT predicate on the "sort_order" field.
func SortOrderGT(v int) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldGT(FieldSortOrder, v))
}

// SortOrderGTE applies the GTE predicate on the "sort_order" field.
func SortOrderGTE(v int) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldGTE(FieldSortOrder, v))
}

// SortOrderLT applies the LT predicate on the "sort_order" field.
func SortOrderLT(v int) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldLT(FieldSortOrder, v))
}

// SortOrderLTE applies the LTE predicate on the "sort_order" field.
func SortOrderLTE(v int) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldLTE(FieldSortOrder, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.RecentUpdate {
	return predicate.RecentUpdate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.RecentUpdate {
	return predicate.RecentUpdate(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTranslations applies the HasEdge predicate on the "translations" edge.
func HasTranslations() predicate.RecentUpdate {
	return predicate.RecentUpdate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TranslationsTable, TranslationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTranslationsWith applies the HasEdge predicate on the "translations" edge with a given conditions (other predicates).
func HasTranslationsWith(preds ...predicate.RecentUpdateTranslation) predicate.RecentUpdate {
	return predicate.RecentUpdate(func(s *sql.Selector) {
		step := newTranslationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RecentUpdate) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RecentUpdate) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RecentUpdate) predicate.RecentUpdate {
	return predicate.RecentUpdate(sql.NotPredicates(p))
}
