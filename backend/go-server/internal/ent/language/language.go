// Code generated by ent, DO NOT EDIT.

package language

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the language type in the database.
	Label = "language"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "code"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldNativeName holds the string denoting the native_name field in the database.
	FieldNativeName = "native_name"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgePersonalInfoTranslations holds the string denoting the personal_info_translations edge name in mutations.
	EdgePersonalInfoTranslations = "personal_info_translations"
	// EdgeEducationTranslations holds the string denoting the education_translations edge name in mutations.
	EdgeEducationTranslations = "education_translations"
	// EdgeEducationDetailTranslations holds the string denoting the education_detail_translations edge name in mutations.
	EdgeEducationDetailTranslations = "education_detail_translations"
	// EdgeWorkExperienceTranslations holds the string denoting the work_experience_translations edge name in mutations.
	EdgeWorkExperienceTranslations = "work_experience_translations"
	// EdgeWorkExperienceDetailTranslations holds the string denoting the work_experience_detail_translations edge name in mutations.
	EdgeWorkExperienceDetailTranslations = "work_experience_detail_translations"
	// EdgeProjectTranslations holds the string denoting the project_translations edge name in mutations.
	EdgeProjectTranslations = "project_translations"
	// EdgeProjectDetailTranslations holds the string denoting the project_detail_translations edge name in mutations.
	EdgeProjectDetailTranslations = "project_detail_translations"
	// EdgeProjectImageTranslations holds the string denoting the project_image_translations edge name in mutations.
	EdgeProjectImageTranslations = "project_image_translations"
	// EdgeBlogCategoryTranslations holds the string denoting the blog_category_translations edge name in mutations.
	EdgeBlogCategoryTranslations = "blog_category_translations"
	// EdgeBlogPostTranslations holds the string denoting the blog_post_translations edge name in mutations.
	EdgeBlogPostTranslations = "blog_post_translations"
	// EdgeBlogSeriesTranslations holds the string denoting the blog_series_translations edge name in mutations.
	EdgeBlogSeriesTranslations = "blog_series_translations"
	// EdgeIdeaTranslations holds the string denoting the idea_translations edge name in mutations.
	EdgeIdeaTranslations = "idea_translations"
	// EdgeResearchProjectTranslations holds the string denoting the research_project_translations edge name in mutations.
	EdgeResearchProjectTranslations = "research_project_translations"
	// EdgeResearchProjectDetailTranslations holds the string denoting the research_project_detail_translations edge name in mutations.
	EdgeResearchProjectDetailTranslations = "research_project_detail_translations"
	// EdgePublicationTranslations holds the string denoting the publication_translations edge name in mutations.
	EdgePublicationTranslations = "publication_translations"
	// EdgeAwardTranslations holds the string denoting the award_translations edge name in mutations.
	EdgeAwardTranslations = "award_translations"
	// EdgeRecentUpdateTranslations holds the string denoting the recent_update_translations edge name in mutations.
	EdgeRecentUpdateTranslations = "recent_update_translations"
	// PersonalInfoTranslationFieldID holds the string denoting the ID field of the PersonalInfoTranslation.
	PersonalInfoTranslationFieldID = "id"
	// EducationTranslationFieldID holds the string denoting the ID field of the EducationTranslation.
	EducationTranslationFieldID = "id"
	// EducationDetailTranslationFieldID holds the string denoting the ID field of the EducationDetailTranslation.
	EducationDetailTranslationFieldID = "id"
	// WorkExperienceTranslationFieldID holds the string denoting the ID field of the WorkExperienceTranslation.
	WorkExperienceTranslationFieldID = "id"
	// WorkExperienceDetailTranslationFieldID holds the string denoting the ID field of the WorkExperienceDetailTranslation.
	WorkExperienceDetailTranslationFieldID = "id"
	// ProjectTranslationFieldID holds the string denoting the ID field of the ProjectTranslation.
	ProjectTranslationFieldID = "id"
	// ProjectDetailTranslationFieldID holds the string denoting the ID field of the ProjectDetailTranslation.
	ProjectDetailTranslationFieldID = "id"
	// ProjectImageTranslationFieldID holds the string denoting the ID field of the ProjectImageTranslation.
	ProjectImageTranslationFieldID = "id"
	// BlogCategoryTranslationFieldID holds the string denoting the ID field of the BlogCategoryTranslation.
	BlogCategoryTranslationFieldID = "id"
	// BlogPostTranslationFieldID holds the string denoting the ID field of the BlogPostTranslation.
	BlogPostTranslationFieldID = "id"
	// BlogSeriesTranslationFieldID holds the string denoting the ID field of the BlogSeriesTranslation.
	BlogSeriesTranslationFieldID = "id"
	// IdeaTranslationFieldID holds the string denoting the ID field of the IdeaTranslation.
	IdeaTranslationFieldID = "id"
	// ResearchProjectTranslationFieldID holds the string denoting the ID field of the ResearchProjectTranslation.
	ResearchProjectTranslationFieldID = "id"
	// ResearchProjectDetailTranslationFieldID holds the string denoting the ID field of the ResearchProjectDetailTranslation.
	ResearchProjectDetailTranslationFieldID = "id"
	// PublicationTranslationFieldID holds the string denoting the ID field of the PublicationTranslation.
	PublicationTranslationFieldID = "id"
	// AwardTranslationFieldID holds the string denoting the ID field of the AwardTranslation.
	AwardTranslationFieldID = "id"
	// RecentUpdateTranslationFieldID holds the string denoting the ID field of the RecentUpdateTranslation.
	RecentUpdateTranslationFieldID = "id"
	// Table holds the table name of the language in the database.
	Table = "languages"
	// PersonalInfoTranslationsTable is the table that holds the personal_info_translations relation/edge.
	PersonalInfoTranslationsTable = "personal_info_translations"
	// PersonalInfoTranslationsInverseTable is the table name for the PersonalInfoTranslation entity.
	// It exists in this package in order to avoid circular dependency with the "personalinfotranslation" package.
	PersonalInfoTranslationsInverseTable = "personal_info_translations"
	// PersonalInfoTranslationsColumn is the table column denoting the personal_info_translations relation/edge.
	PersonalInfoTranslationsColumn = "language_code"
	// EducationTranslationsTable is the table that holds the education_translations relation/edge.
	EducationTranslationsTable = "education_translations"
	// EducationTranslationsInverseTable is the table name for the EducationTranslation entity.
	// It exists in this package in order to avoid circular dependency with the "educationtranslation" package.
	EducationTranslationsInverseTable = "education_translations"
	// EducationTranslationsColumn is the table column denoting the education_translations relation/edge.
	EducationTranslationsColumn = "language_code"
	// EducationDetailTranslationsTable is the table that holds the education_detail_translations relation/edge.
	EducationDetailTranslationsTable = "education_detail_translations"
	// EducationDetailTranslationsInverseTable is the table name for the EducationDetailTranslation entity.
	// It exists in this package in order to avoid circular dependency with the "educationdetailtranslation" package.
	EducationDetailTranslationsInverseTable = "education_detail_translations"
	// EducationDetailTranslationsColumn is the table column denoting the education_detail_translations relation/edge.
	EducationDetailTranslationsColumn = "language_code"
	// WorkExperienceTranslationsTable is the table that holds the work_experience_translations relation/edge.
	WorkExperienceTranslationsTable = "work_experience_translations"
	// WorkExperienceTranslationsInverseTable is the table name for the WorkExperienceTranslation entity.
	// It exists in this package in order to avoid circular dependency with the "workexperiencetranslation" package.
	WorkExperienceTranslationsInverseTable = "work_experience_translations"
	// WorkExperienceTranslationsColumn is the table column denoting the work_experience_translations relation/edge.
	WorkExperienceTranslationsColumn = "language_code"
	// WorkExperienceDetailTranslationsTable is the table that holds the work_experience_detail_translations relation/edge.
	WorkExperienceDetailTranslationsTable = "work_experience_detail_translations"
	// WorkExperienceDetailTranslationsInverseTable is the table name for the WorkExperienceDetailTranslation entity.
	// It exists in this package in order to avoid circular dependency with the "workexperiencedetailtranslation" package.
	WorkExperienceDetailTranslationsInverseTable = "work_experience_detail_translations"
	// WorkExperienceDetailTranslationsColumn is the table column denoting the work_experience_detail_translations relation/edge.
	WorkExperienceDetailTranslationsColumn = "language_code"
	// ProjectTranslationsTable is the table that holds the project_translations relation/edge.
	ProjectTranslationsTable = "project_translations"
	// ProjectTranslationsInverseTable is the table name for the ProjectTranslation entity.
	// It exists in this package in order to avoid circular dependency with the "projecttranslation" package.
	ProjectTranslationsInverseTable = "project_translations"
	// ProjectTranslationsColumn is the table column denoting the project_translations relation/edge.
	ProjectTranslationsColumn = "language_code"
	// ProjectDetailTranslationsTable is the table that holds the project_detail_translations relation/edge.
	ProjectDetailTranslationsTable = "project_detail_translations"
	// ProjectDetailTranslationsInverseTable is the table name for the ProjectDetailTranslation entity.
	// It exists in this package in order to avoid circular dependency with the "projectdetailtranslation" package.
	ProjectDetailTranslationsInverseTable = "project_detail_translations"
	// ProjectDetailTranslationsColumn is the table column denoting the project_detail_translations relation/edge.
	ProjectDetailTranslationsColumn = "language_code"
	// ProjectImageTranslationsTable is the table that holds the project_image_translations relation/edge.
	ProjectImageTranslationsTable = "project_image_translations"
	// ProjectImageTranslationsInverseTable is the table name for the ProjectImageTranslation entity.
	// It exists in this package in order to avoid circular dependency with the "projectimagetranslation" package.
	ProjectImageTranslationsInverseTable = "project_image_translations"
	// ProjectImageTranslationsColumn is the table column denoting the project_image_translations relation/edge.
	ProjectImageTranslationsColumn = "language_code"
	// BlogCategoryTranslationsTable is the table that holds the blog_category_translations relation/edge.
	BlogCategoryTranslationsTable = "blog_category_translations"
	// BlogCategoryTranslationsInverseTable is the table name for the BlogCategoryTranslation entity.
	// It exists in this package in order to avoid circular dependency with the "blogcategorytranslation" package.
	BlogCategoryTranslationsInverseTable = "blog_category_translations"
	// BlogCategoryTranslationsColumn is the table column denoting the blog_category_translations relation/edge.
	BlogCategoryTranslationsColumn = "language_code"
	// BlogPostTranslationsTable is the table that holds the blog_post_translations relation/edge.
	BlogPostTranslationsTable = "blog_post_translations"
	// BlogPostTranslationsInverseTable is the table name for the BlogPostTranslation entity.
	// It exists in this package in order to avoid circular dependency with the "blogposttranslation" package.
	BlogPostTranslationsInverseTable = "blog_post_translations"
	// BlogPostTranslationsColumn is the table column denoting the blog_post_translations relation/edge.
	BlogPostTranslationsColumn = "language_code"
	// BlogSeriesTranslationsTable is the table that holds the blog_series_translations relation/edge.
	BlogSeriesTranslationsTable = "blog_series_translations"
	// BlogSeriesTranslationsInverseTable is the table name for the BlogSeriesTranslation entity.
	// It exists in this package in order to avoid circular dependency with the "blogseriestranslation" package.
	BlogSeriesTranslationsInverseTable = "blog_series_translations"
	// BlogSeriesTranslationsColumn is the table column denoting the blog_series_translations relation/edge.
	BlogSeriesTranslationsColumn = "language_code"
	// IdeaTranslationsTable is the table that holds the idea_translations relation/edge.
	IdeaTranslationsTable = "idea_translations"
	// IdeaTranslationsInverseTable is the table name for the IdeaTranslation entity.
	// It exists in this package in order to avoid circular dependency with the "ideatranslation" package.
	IdeaTranslationsInverseTable = "idea_translations"
	// IdeaTranslationsColumn is the table column denoting the idea_translations relation/edge.
	IdeaTranslationsColumn = "language_code"
	// ResearchProjectTranslationsTable is the table that holds the research_project_translations relation/edge.
	ResearchProjectTranslationsTable = "research_project_translations"
	// ResearchProjectTranslationsInverseTable is the table name for the ResearchProjectTranslation entity.
	// It exists in this package in order to avoid circular dependency with the "researchprojecttranslation" package.
	ResearchProjectTranslationsInverseTable = "research_project_translations"
	// ResearchProjectTranslationsColumn is the table column denoting the research_project_translations relation/edge.
	ResearchProjectTranslationsColumn = "language_code"
	// ResearchProjectDetailTranslationsTable is the table that holds the research_project_detail_translations relation/edge.
	ResearchProjectDetailTranslationsTable = "research_project_detail_translations"
	// ResearchProjectDetailTranslationsInverseTable is the table name for the ResearchProjectDetailTranslation entity.
	// It exists in this package in order to avoid circular dependency with the "researchprojectdetailtranslation" package.
	ResearchProjectDetailTranslationsInverseTable = "research_project_detail_translations"
	// ResearchProjectDetailTranslationsColumn is the table column denoting the research_project_detail_translations relation/edge.
	ResearchProjectDetailTranslationsColumn = "language_code"
	// PublicationTranslationsTable is the table that holds the publication_translations relation/edge.
	PublicationTranslationsTable = "publication_translations"
	// PublicationTranslationsInverseTable is the table name for the PublicationTranslation entity.
	// It exists in this package in order to avoid circular dependency with the "publicationtranslation" package.
	PublicationTranslationsInverseTable = "publication_translations"
	// PublicationTranslationsColumn is the table column denoting the publication_translations relation/edge.
	PublicationTranslationsColumn = "language_code"
	// AwardTranslationsTable is the table that holds the award_translations relation/edge.
	AwardTranslationsTable = "award_translations"
	// AwardTranslationsInverseTable is the table name for the AwardTranslation entity.
	// It exists in this package in order to avoid circular dependency with the "awardtranslation" package.
	AwardTranslationsInverseTable = "award_translations"
	// AwardTranslationsColumn is the table column denoting the award_translations relation/edge.
	AwardTranslationsColumn = "language_code"
	// RecentUpdateTranslationsTable is the table that holds the recent_update_translations relation/edge.
	RecentUpdateTranslationsTable = "recent_update_translations"
	// RecentUpdateTranslationsInverseTable is the table name for the RecentUpdateTranslation entity.
	// It exists in this package in order to avoid circular dependency with the "recentupdatetranslation" package.
	RecentUpdateTranslationsInverseTable = "recent_update_translations"
	// RecentUpdateTranslationsColumn is the table column denoting the recent_update_translations relation/edge.
	RecentUpdateTranslationsColumn = "language_code"
)

// Columns holds all SQL columns for language fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldNativeName,
	FieldIsActive,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// NativeNameValidator is a validator for the "native_name" field. It is called by the builders before save.
	NativeNameValidator func(string) error
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Language queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByNativeName orders the results by the native_name field.
func ByNativeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNativeName, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByPersonalInfoTranslationsCount orders the results by personal_info_translations count.
func ByPersonalInfoTranslationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPersonalInfoTranslationsStep(), opts...)
	}
}

// ByPersonalInfoTranslations orders the results by personal_info_translations terms.
func ByPersonalInfoTranslations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPersonalInfoTranslationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEducationTranslationsCount orders the results by education_translations count.
func ByEducationTranslationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEducationTranslationsStep(), opts...)
	}
}

// ByEducationTranslations orders the results by education_translations terms.
func ByEducationTranslations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEducationTranslationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEducationDetailTranslationsCount orders the results by education_detail_translations count.
func ByEducationDetailTranslationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEducationDetailTranslationsStep(), opts...)
	}
}

// ByEducationDetailTranslations orders the results by education_detail_translations terms.
func ByEducationDetailTranslations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEducationDetailTranslationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWorkExperienceTranslationsCount orders the results by work_experience_translations count.
func ByWorkExperienceTranslationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWorkExperienceTranslationsStep(), opts...)
	}
}

// ByWorkExperienceTranslations orders the results by work_experience_translations terms.
func ByWorkExperienceTranslations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkExperienceTranslationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWorkExperienceDetailTranslationsCount orders the results by work_experience_detail_translations count.
func ByWorkExperienceDetailTranslationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWorkExperienceDetailTranslationsStep(), opts...)
	}
}

// ByWorkExperienceDetailTranslations orders the results by work_experience_detail_translations terms.
func ByWorkExperienceDetailTranslations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkExperienceDetailTranslationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProjectTranslationsCount orders the results by project_translations count.
func ByProjectTranslationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProjectTranslationsStep(), opts...)
	}
}

// ByProjectTranslations orders the results by project_translations terms.
func ByProjectTranslations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectTranslationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProjectDetailTranslationsCount orders the results by project_detail_translations count.
func ByProjectDetailTranslationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProjectDetailTranslationsStep(), opts...)
	}
}

// ByProjectDetailTranslations orders the results by project_detail_translations terms.
func ByProjectDetailTranslations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectDetailTranslationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProjectImageTranslationsCount orders the results by project_image_translations count.
func ByProjectImageTranslationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProjectImageTranslationsStep(), opts...)
	}
}

// ByProjectImageTranslations orders the results by project_image_translations terms.
func ByProjectImageTranslations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectImageTranslationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBlogCategoryTranslationsCount orders the results by blog_category_translations count.
func ByBlogCategoryTranslationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBlogCategoryTranslationsStep(), opts...)
	}
}

// ByBlogCategoryTranslations orders the results by blog_category_translations terms.
func ByBlogCategoryTranslations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlogCategoryTranslationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBlogPostTranslationsCount orders the results by blog_post_translations count.
func ByBlogPostTranslationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBlogPostTranslationsStep(), opts...)
	}
}

// ByBlogPostTranslations orders the results by blog_post_translations terms.
func ByBlogPostTranslations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlogPostTranslationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBlogSeriesTranslationsCount orders the results by blog_series_translations count.
func ByBlogSeriesTranslationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBlogSeriesTranslationsStep(), opts...)
	}
}

// ByBlogSeriesTranslations orders the results by blog_series_translations terms.
func ByBlogSeriesTranslations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlogSeriesTranslationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIdeaTranslationsCount orders the results by idea_translations count.
func ByIdeaTranslationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIdeaTranslationsStep(), opts...)
	}
}

// ByIdeaTranslations orders the results by idea_translations terms.
func ByIdeaTranslations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIdeaTranslationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByResearchProjectTranslationsCount orders the results by research_project_translations count.
func ByResearchProjectTranslationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newResearchProjectTranslationsStep(), opts...)
	}
}

// ByResearchProjectTranslations orders the results by research_project_translations terms.
func ByResearchProjectTranslations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResearchProjectTranslationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByResearchProjectDetailTranslationsCount orders the results by research_project_detail_translations count.
func ByResearchProjectDetailTranslationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newResearchProjectDetailTranslationsStep(), opts...)
	}
}

// ByResearchProjectDetailTranslations orders the results by research_project_detail_translations terms.
func ByResearchProjectDetailTranslations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResearchProjectDetailTranslationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPublicationTranslationsCount orders the results by publication_translations count.
func ByPublicationTranslationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPublicationTranslationsStep(), opts...)
	}
}

// ByPublicationTranslations orders the results by publication_translations terms.
func ByPublicationTranslations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPublicationTranslationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAwardTranslationsCount orders the results by award_translations count.
func ByAwardTranslationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAwardTranslationsStep(), opts...)
	}
}

// ByAwardTranslations orders the results by award_translations terms.
func ByAwardTranslations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAwardTranslationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRecentUpdateTranslationsCount orders the results by recent_update_translations count.
func ByRecentUpdateTranslationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRecentUpdateTranslationsStep(), opts...)
	}
}

// ByRecentUpdateTranslations orders the results by recent_update_translations terms.
func ByRecentUpdateTranslations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecentUpdateTranslationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPersonalInfoTranslationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PersonalInfoTranslationsInverseTable, PersonalInfoTranslationFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PersonalInfoTranslationsTable, PersonalInfoTranslationsColumn),
	)
}
func newEducationTranslationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EducationTranslationsInverseTable, EducationTranslationFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EducationTranslationsTable, EducationTranslationsColumn),
	)
}
func newEducationDetailTranslationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EducationDetailTranslationsInverseTable, EducationDetailTranslationFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EducationDetailTranslationsTable, EducationDetailTranslationsColumn),
	)
}
func newWorkExperienceTranslationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkExperienceTranslationsInverseTable, WorkExperienceTranslationFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, WorkExperienceTranslationsTable, WorkExperienceTranslationsColumn),
	)
}
func newWorkExperienceDetailTranslationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkExperienceDetailTranslationsInverseTable, WorkExperienceDetailTranslationFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, WorkExperienceDetailTranslationsTable, WorkExperienceDetailTranslationsColumn),
	)
}
func newProjectTranslationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectTranslationsInverseTable, ProjectTranslationFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProjectTranslationsTable, ProjectTranslationsColumn),
	)
}
func newProjectDetailTranslationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectDetailTranslationsInverseTable, ProjectDetailTranslationFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProjectDetailTranslationsTable, ProjectDetailTranslationsColumn),
	)
}
func newProjectImageTranslationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectImageTranslationsInverseTable, ProjectImageTranslationFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProjectImageTranslationsTable, ProjectImageTranslationsColumn),
	)
}
func newBlogCategoryTranslationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlogCategoryTranslationsInverseTable, BlogCategoryTranslationFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BlogCategoryTranslationsTable, BlogCategoryTranslationsColumn),
	)
}
func newBlogPostTranslationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlogPostTranslationsInverseTable, BlogPostTranslationFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BlogPostTranslationsTable, BlogPostTranslationsColumn),
	)
}
func newBlogSeriesTranslationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlogSeriesTranslationsInverseTable, BlogSeriesTranslationFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BlogSeriesTranslationsTable, BlogSeriesTranslationsColumn),
	)
}
func newIdeaTranslationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IdeaTranslationsInverseTable, IdeaTranslationFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IdeaTranslationsTable, IdeaTranslationsColumn),
	)
}
func newResearchProjectTranslationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResearchProjectTranslationsInverseTable, ResearchProjectTranslationFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ResearchProjectTranslationsTable, ResearchProjectTranslationsColumn),
	)
}
func newResearchProjectDetailTranslationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResearchProjectDetailTranslationsInverseTable, ResearchProjectDetailTranslationFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ResearchProjectDetailTranslationsTable, ResearchProjectDetailTranslationsColumn),
	)
}
func newPublicationTranslationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PublicationTranslationsInverseTable, PublicationTranslationFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PublicationTranslationsTable, PublicationTranslationsColumn),
	)
}
func newAwardTranslationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AwardTranslationsInverseTable, AwardTranslationFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AwardTranslationsTable, AwardTranslationsColumn),
	)
}
func newRecentUpdateTranslationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecentUpdateTranslationsInverseTable, RecentUpdateTranslationFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RecentUpdateTranslationsTable, RecentUpdateTranslationsColumn),
	)
}
