// Code generated by ent, DO NOT EDIT.

package language

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Language {
	return predicate.Language(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Language {
	return predicate.Language(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Language {
	return predicate.Language(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Language {
	return predicate.Language(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Language {
	return predicate.Language(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Language {
	return predicate.Language(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Language {
	return predicate.Language(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Language {
	return predicate.Language(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Language {
	return predicate.Language(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldName, v))
}

// NativeName applies equality check predicate on the "native_name" field. It's identical to NativeNameEQ.
func NativeName(v string) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldNativeName, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldIsActive, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldCreatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Language {
	return predicate.Language(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Language {
	return predicate.Language(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Language {
	return predicate.Language(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Language {
	return predicate.Language(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Language {
	return predicate.Language(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Language {
	return predicate.Language(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Language {
	return predicate.Language(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Language {
	return predicate.Language(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Language {
	return predicate.Language(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Language {
	return predicate.Language(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Language {
	return predicate.Language(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Language {
	return predicate.Language(sql.FieldContainsFold(FieldName, v))
}

// NativeNameEQ applies the EQ predicate on the "native_name" field.
func NativeNameEQ(v string) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldNativeName, v))
}

// NativeNameNEQ applies the NEQ predicate on the "native_name" field.
func NativeNameNEQ(v string) predicate.Language {
	return predicate.Language(sql.FieldNEQ(FieldNativeName, v))
}

// NativeNameIn applies the In predicate on the "native_name" field.
func NativeNameIn(vs ...string) predicate.Language {
	return predicate.Language(sql.FieldIn(FieldNativeName, vs...))
}

// NativeNameNotIn applies the NotIn predicate on the "native_name" field.
func NativeNameNotIn(vs ...string) predicate.Language {
	return predicate.Language(sql.FieldNotIn(FieldNativeName, vs...))
}

// NativeNameGT applies the GT predicate on the "native_name" field.
func NativeNameGT(v string) predicate.Language {
	return predicate.Language(sql.FieldGT(FieldNativeName, v))
}

// NativeNameGTE applies the GTE predicate on the "native_name" field.
func NativeNameGTE(v string) predicate.Language {
	return predicate.Language(sql.FieldGTE(FieldNativeName, v))
}

// NativeNameLT applies the LT predicate on the "native_name" field.
func NativeNameLT(v string) predicate.Language {
	return predicate.Language(sql.FieldLT(FieldNativeName, v))
}

// NativeNameLTE applies the LTE predicate on the "native_name" field.
func NativeNameLTE(v string) predicate.Language {
	return predicate.Language(sql.FieldLTE(FieldNativeName, v))
}

// NativeNameContains applies the Contains predicate on the "native_name" field.
func NativeNameContains(v string) predicate.Language {
	return predicate.Language(sql.FieldContains(FieldNativeName, v))
}

// NativeNameHasPrefix applies the HasPrefix predicate on the "native_name" field.
func NativeNameHasPrefix(v string) predicate.Language {
	return predicate.Language(sql.FieldHasPrefix(FieldNativeName, v))
}

// NativeNameHasSuffix applies the HasSuffix predicate on the "native_name" field.
func NativeNameHasSuffix(v string) predicate.Language {
	return predicate.Language(sql.FieldHasSuffix(FieldNativeName, v))
}

// NativeNameEqualFold applies the EqualFold predicate on the "native_name" field.
func NativeNameEqualFold(v string) predicate.Language {
	return predicate.Language(sql.FieldEqualFold(FieldNativeName, v))
}

// NativeNameContainsFold applies the ContainsFold predicate on the "native_name" field.
func NativeNameContainsFold(v string) predicate.Language {
	return predicate.Language(sql.FieldContainsFold(FieldNativeName, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.Language {
	return predicate.Language(sql.FieldNEQ(FieldIsActive, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Language {
	return predicate.Language(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Language {
	return predicate.Language(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Language {
	return predicate.Language(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Language {
	return predicate.Language(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Language {
	return predicate.Language(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Language {
	return predicate.Language(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Language {
	return predicate.Language(sql.FieldLTE(FieldCreatedAt, v))
}

// HasPersonalInfoTranslations applies the HasEdge predicate on the "personal_info_translations" edge.
func HasPersonalInfoTranslations() predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PersonalInfoTranslationsTable, PersonalInfoTranslationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPersonalInfoTranslationsWith applies the HasEdge predicate on the "personal_info_translations" edge with a given conditions (other predicates).
func HasPersonalInfoTranslationsWith(preds ...predicate.PersonalInfoTranslation) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := newPersonalInfoTranslationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEducationTranslations applies the HasEdge predicate on the "education_translations" edge.
func HasEducationTranslations() predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EducationTranslationsTable, EducationTranslationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEducationTranslationsWith applies the HasEdge predicate on the "education_translations" edge with a given conditions (other predicates).
func HasEducationTranslationsWith(preds ...predicate.EducationTranslation) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := newEducationTranslationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEducationDetailTranslations applies the HasEdge predicate on the "education_detail_translations" edge.
func HasEducationDetailTranslations() predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EducationDetailTranslationsTable, EducationDetailTranslationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEducationDetailTranslationsWith applies the HasEdge predicate on the "education_detail_translations" edge with a given conditions (other predicates).
func HasEducationDetailTranslationsWith(preds ...predicate.EducationDetailTranslation) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := newEducationDetailTranslationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkExperienceTranslations applies the HasEdge predicate on the "work_experience_translations" edge.
func HasWorkExperienceTranslations() predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkExperienceTranslationsTable, WorkExperienceTranslationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkExperienceTranslationsWith applies the HasEdge predicate on the "work_experience_translations" edge with a given conditions (other predicates).
func HasWorkExperienceTranslationsWith(preds ...predicate.WorkExperienceTranslation) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := newWorkExperienceTranslationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkExperienceDetailTranslations applies the HasEdge predicate on the "work_experience_detail_translations" edge.
func HasWorkExperienceDetailTranslations() predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkExperienceDetailTranslationsTable, WorkExperienceDetailTranslationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkExperienceDetailTranslationsWith applies the HasEdge predicate on the "work_experience_detail_translations" edge with a given conditions (other predicates).
func HasWorkExperienceDetailTranslationsWith(preds ...predicate.WorkExperienceDetailTranslation) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := newWorkExperienceDetailTranslationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProjectTranslations applies the HasEdge predicate on the "project_translations" edge.
func HasProjectTranslations() predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProjectTranslationsTable, ProjectTranslationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectTranslationsWith applies the HasEdge predicate on the "project_translations" edge with a given conditions (other predicates).
func HasProjectTranslationsWith(preds ...predicate.ProjectTranslation) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := newProjectTranslationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProjectDetailTranslations applies the HasEdge predicate on the "project_detail_translations" edge.
func HasProjectDetailTranslations() predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProjectDetailTranslationsTable, ProjectDetailTranslationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectDetailTranslationsWith applies the HasEdge predicate on the "project_detail_translations" edge with a given conditions (other predicates).
func HasProjectDetailTranslationsWith(preds ...predicate.ProjectDetailTranslation) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := newProjectDetailTranslationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProjectImageTranslations applies the HasEdge predicate on the "project_image_translations" edge.
func HasProjectImageTranslations() predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProjectImageTranslationsTable, ProjectImageTranslationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectImageTranslationsWith applies the HasEdge predicate on the "project_image_translations" edge with a given conditions (other predicates).
func HasProjectImageTranslationsWith(preds ...predicate.ProjectImageTranslation) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := newProjectImageTranslationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlogCategoryTranslations applies the HasEdge predicate on the "blog_category_translations" edge.
func HasBlogCategoryTranslations() predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BlogCategoryTranslationsTable, BlogCategoryTranslationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlogCategoryTranslationsWith applies the HasEdge predicate on the "blog_category_translations" edge with a given conditions (other predicates).
func HasBlogCategoryTranslationsWith(preds ...predicate.BlogCategoryTranslation) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := newBlogCategoryTranslationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlogPostTranslations applies the HasEdge predicate on the "blog_post_translations" edge.
func HasBlogPostTranslations() predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BlogPostTranslationsTable, BlogPostTranslationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlogPostTranslationsWith applies the HasEdge predicate on the "blog_post_translations" edge with a given conditions (other predicates).
func HasBlogPostTranslationsWith(preds ...predicate.BlogPostTranslation) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := newBlogPostTranslationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlogSeriesTranslations applies the HasEdge predicate on the "blog_series_translations" edge.
func HasBlogSeriesTranslations() predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BlogSeriesTranslationsTable, BlogSeriesTranslationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlogSeriesTranslationsWith applies the HasEdge predicate on the "blog_series_translations" edge with a given conditions (other predicates).
func HasBlogSeriesTranslationsWith(preds ...predicate.BlogSeriesTranslation) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := newBlogSeriesTranslationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIdeaTranslations applies the HasEdge predicate on the "idea_translations" edge.
func HasIdeaTranslations() predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IdeaTranslationsTable, IdeaTranslationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIdeaTranslationsWith applies the HasEdge predicate on the "idea_translations" edge with a given conditions (other predicates).
func HasIdeaTranslationsWith(preds ...predicate.IdeaTranslation) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := newIdeaTranslationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasResearchProjectTranslations applies the HasEdge predicate on the "research_project_translations" edge.
func HasResearchProjectTranslations() predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ResearchProjectTranslationsTable, ResearchProjectTranslationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResearchProjectTranslationsWith applies the HasEdge predicate on the "research_project_translations" edge with a given conditions (other predicates).
func HasResearchProjectTranslationsWith(preds ...predicate.ResearchProjectTranslation) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := newResearchProjectTranslationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasResearchProjectDetailTranslations applies the HasEdge predicate on the "research_project_detail_translations" edge.
func HasResearchProjectDetailTranslations() predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ResearchProjectDetailTranslationsTable, ResearchProjectDetailTranslationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResearchProjectDetailTranslationsWith applies the HasEdge predicate on the "research_project_detail_translations" edge with a given conditions (other predicates).
func HasResearchProjectDetailTranslationsWith(preds ...predicate.ResearchProjectDetailTranslation) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := newResearchProjectDetailTranslationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPublicationTranslations applies the HasEdge predicate on the "publication_translations" edge.
func HasPublicationTranslations() predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PublicationTranslationsTable, PublicationTranslationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPublicationTranslationsWith applies the HasEdge predicate on the "publication_translations" edge with a given conditions (other predicates).
func HasPublicationTranslationsWith(preds ...predicate.PublicationTranslation) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := newPublicationTranslationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAwardTranslations applies the HasEdge predicate on the "award_translations" edge.
func HasAwardTranslations() predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AwardTranslationsTable, AwardTranslationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAwardTranslationsWith applies the HasEdge predicate on the "award_translations" edge with a given conditions (other predicates).
func HasAwardTranslationsWith(preds ...predicate.AwardTranslation) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := newAwardTranslationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRecentUpdateTranslations applies the HasEdge predicate on the "recent_update_translations" edge.
func HasRecentUpdateTranslations() predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RecentUpdateTranslationsTable, RecentUpdateTranslationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecentUpdateTranslationsWith applies the HasEdge predicate on the "recent_update_translations" edge with a given conditions (other predicates).
func HasRecentUpdateTranslationsWith(preds ...predicate.RecentUpdateTranslation) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := newRecentUpdateTranslationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Language) predicate.Language {
	return predicate.Language(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Language) predicate.Language {
	return predicate.Language(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Language) predicate.Language {
	return predicate.Language(sql.NotPredicates(p))
}
