// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/educationdetail"
	"silan-backend/internal/ent/educationdetailtranslation"
	"silan-backend/internal/ent/language"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// EducationDetailTranslationCreate is the builder for creating a EducationDetailTranslation entity.
type EducationDetailTranslationCreate struct {
	config
	mutation *EducationDetailTranslationMutation
	hooks    []Hook
}

// SetEducationDetailID sets the "education_detail_id" field.
func (edtc *EducationDetailTranslationCreate) SetEducationDetailID(u uuid.UUID) *EducationDetailTranslationCreate {
	edtc.mutation.SetEducationDetailID(u)
	return edtc
}

// SetLanguageCode sets the "language_code" field.
func (edtc *EducationDetailTranslationCreate) SetLanguageCode(s string) *EducationDetailTranslationCreate {
	edtc.mutation.SetLanguageCode(s)
	return edtc
}

// SetDetailText sets the "detail_text" field.
func (edtc *EducationDetailTranslationCreate) SetDetailText(s string) *EducationDetailTranslationCreate {
	edtc.mutation.SetDetailText(s)
	return edtc
}

// SetCreatedAt sets the "created_at" field.
func (edtc *EducationDetailTranslationCreate) SetCreatedAt(t time.Time) *EducationDetailTranslationCreate {
	edtc.mutation.SetCreatedAt(t)
	return edtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (edtc *EducationDetailTranslationCreate) SetNillableCreatedAt(t *time.Time) *EducationDetailTranslationCreate {
	if t != nil {
		edtc.SetCreatedAt(*t)
	}
	return edtc
}

// SetID sets the "id" field.
func (edtc *EducationDetailTranslationCreate) SetID(u uuid.UUID) *EducationDetailTranslationCreate {
	edtc.mutation.SetID(u)
	return edtc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (edtc *EducationDetailTranslationCreate) SetNillableID(u *uuid.UUID) *EducationDetailTranslationCreate {
	if u != nil {
		edtc.SetID(*u)
	}
	return edtc
}

// SetEducationDetail sets the "education_detail" edge to the EducationDetail entity.
func (edtc *EducationDetailTranslationCreate) SetEducationDetail(e *EducationDetail) *EducationDetailTranslationCreate {
	return edtc.SetEducationDetailID(e.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (edtc *EducationDetailTranslationCreate) SetLanguageID(id string) *EducationDetailTranslationCreate {
	edtc.mutation.SetLanguageID(id)
	return edtc
}

// SetLanguage sets the "language" edge to the Language entity.
func (edtc *EducationDetailTranslationCreate) SetLanguage(l *Language) *EducationDetailTranslationCreate {
	return edtc.SetLanguageID(l.ID)
}

// Mutation returns the EducationDetailTranslationMutation object of the builder.
func (edtc *EducationDetailTranslationCreate) Mutation() *EducationDetailTranslationMutation {
	return edtc.mutation
}

// Save creates the EducationDetailTranslation in the database.
func (edtc *EducationDetailTranslationCreate) Save(ctx context.Context) (*EducationDetailTranslation, error) {
	edtc.defaults()
	return withHooks(ctx, edtc.sqlSave, edtc.mutation, edtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (edtc *EducationDetailTranslationCreate) SaveX(ctx context.Context) *EducationDetailTranslation {
	v, err := edtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (edtc *EducationDetailTranslationCreate) Exec(ctx context.Context) error {
	_, err := edtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (edtc *EducationDetailTranslationCreate) ExecX(ctx context.Context) {
	if err := edtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (edtc *EducationDetailTranslationCreate) defaults() {
	if _, ok := edtc.mutation.CreatedAt(); !ok {
		v := educationdetailtranslation.DefaultCreatedAt()
		edtc.mutation.SetCreatedAt(v)
	}
	if _, ok := edtc.mutation.ID(); !ok {
		v := educationdetailtranslation.DefaultID()
		edtc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (edtc *EducationDetailTranslationCreate) check() error {
	if _, ok := edtc.mutation.EducationDetailID(); !ok {
		return &ValidationError{Name: "education_detail_id", err: errors.New(`ent: missing required field "EducationDetailTranslation.education_detail_id"`)}
	}
	if _, ok := edtc.mutation.LanguageCode(); !ok {
		return &ValidationError{Name: "language_code", err: errors.New(`ent: missing required field "EducationDetailTranslation.language_code"`)}
	}
	if v, ok := edtc.mutation.LanguageCode(); ok {
		if err := educationdetailtranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "EducationDetailTranslation.language_code": %w`, err)}
		}
	}
	if _, ok := edtc.mutation.DetailText(); !ok {
		return &ValidationError{Name: "detail_text", err: errors.New(`ent: missing required field "EducationDetailTranslation.detail_text"`)}
	}
	if v, ok := edtc.mutation.DetailText(); ok {
		if err := educationdetailtranslation.DetailTextValidator(v); err != nil {
			return &ValidationError{Name: "detail_text", err: fmt.Errorf(`ent: validator failed for field "EducationDetailTranslation.detail_text": %w`, err)}
		}
	}
	if _, ok := edtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EducationDetailTranslation.created_at"`)}
	}
	if len(edtc.mutation.EducationDetailIDs()) == 0 {
		return &ValidationError{Name: "education_detail", err: errors.New(`ent: missing required edge "EducationDetailTranslation.education_detail"`)}
	}
	if len(edtc.mutation.LanguageIDs()) == 0 {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required edge "EducationDetailTranslation.language"`)}
	}
	return nil
}

func (edtc *EducationDetailTranslationCreate) sqlSave(ctx context.Context) (*EducationDetailTranslation, error) {
	if err := edtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := edtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, edtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	edtc.mutation.id = &_node.ID
	edtc.mutation.done = true
	return _node, nil
}

func (edtc *EducationDetailTranslationCreate) createSpec() (*EducationDetailTranslation, *sqlgraph.CreateSpec) {
	var (
		_node = &EducationDetailTranslation{config: edtc.config}
		_spec = sqlgraph.NewCreateSpec(educationdetailtranslation.Table, sqlgraph.NewFieldSpec(educationdetailtranslation.FieldID, field.TypeUUID))
	)
	if id, ok := edtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := edtc.mutation.DetailText(); ok {
		_spec.SetField(educationdetailtranslation.FieldDetailText, field.TypeString, value)
		_node.DetailText = value
	}
	if value, ok := edtc.mutation.CreatedAt(); ok {
		_spec.SetField(educationdetailtranslation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := edtc.mutation.EducationDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   educationdetailtranslation.EducationDetailTable,
			Columns: []string{educationdetailtranslation.EducationDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationdetail.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EducationDetailID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := edtc.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   educationdetailtranslation.LanguageTable,
			Columns: []string{educationdetailtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LanguageCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EducationDetailTranslationCreateBulk is the builder for creating many EducationDetailTranslation entities in bulk.
type EducationDetailTranslationCreateBulk struct {
	config
	err      error
	builders []*EducationDetailTranslationCreate
}

// Save creates the EducationDetailTranslation entities in the database.
func (edtcb *EducationDetailTranslationCreateBulk) Save(ctx context.Context) ([]*EducationDetailTranslation, error) {
	if edtcb.err != nil {
		return nil, edtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(edtcb.builders))
	nodes := make([]*EducationDetailTranslation, len(edtcb.builders))
	mutators := make([]Mutator, len(edtcb.builders))
	for i := range edtcb.builders {
		func(i int, root context.Context) {
			builder := edtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EducationDetailTranslationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, edtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, edtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, edtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (edtcb *EducationDetailTranslationCreateBulk) SaveX(ctx context.Context) []*EducationDetailTranslation {
	v, err := edtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (edtcb *EducationDetailTranslationCreateBulk) Exec(ctx context.Context) error {
	_, err := edtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (edtcb *EducationDetailTranslationCreateBulk) ExecX(ctx context.Context) {
	if err := edtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
