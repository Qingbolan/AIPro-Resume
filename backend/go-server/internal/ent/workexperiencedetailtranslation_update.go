// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/workexperiencedetail"
	"silan-backend/internal/ent/workexperiencedetailtranslation"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkExperienceDetailTranslationUpdate is the builder for updating WorkExperienceDetailTranslation entities.
type WorkExperienceDetailTranslationUpdate struct {
	config
	hooks    []Hook
	mutation *WorkExperienceDetailTranslationMutation
}

// Where appends a list predicates to the WorkExperienceDetailTranslationUpdate builder.
func (wedtu *WorkExperienceDetailTranslationUpdate) Where(ps ...predicate.WorkExperienceDetailTranslation) *WorkExperienceDetailTranslationUpdate {
	wedtu.mutation.Where(ps...)
	return wedtu
}

// SetWorkExperienceDetailID sets the "work_experience_detail_id" field.
func (wedtu *WorkExperienceDetailTranslationUpdate) SetWorkExperienceDetailID(u uuid.UUID) *WorkExperienceDetailTranslationUpdate {
	wedtu.mutation.SetWorkExperienceDetailID(u)
	return wedtu
}

// SetNillableWorkExperienceDetailID sets the "work_experience_detail_id" field if the given value is not nil.
func (wedtu *WorkExperienceDetailTranslationUpdate) SetNillableWorkExperienceDetailID(u *uuid.UUID) *WorkExperienceDetailTranslationUpdate {
	if u != nil {
		wedtu.SetWorkExperienceDetailID(*u)
	}
	return wedtu
}

// SetLanguageCode sets the "language_code" field.
func (wedtu *WorkExperienceDetailTranslationUpdate) SetLanguageCode(s string) *WorkExperienceDetailTranslationUpdate {
	wedtu.mutation.SetLanguageCode(s)
	return wedtu
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (wedtu *WorkExperienceDetailTranslationUpdate) SetNillableLanguageCode(s *string) *WorkExperienceDetailTranslationUpdate {
	if s != nil {
		wedtu.SetLanguageCode(*s)
	}
	return wedtu
}

// SetDetailText sets the "detail_text" field.
func (wedtu *WorkExperienceDetailTranslationUpdate) SetDetailText(s string) *WorkExperienceDetailTranslationUpdate {
	wedtu.mutation.SetDetailText(s)
	return wedtu
}

// SetNillableDetailText sets the "detail_text" field if the given value is not nil.
func (wedtu *WorkExperienceDetailTranslationUpdate) SetNillableDetailText(s *string) *WorkExperienceDetailTranslationUpdate {
	if s != nil {
		wedtu.SetDetailText(*s)
	}
	return wedtu
}

// SetUpdatedAt sets the "updated_at" field.
func (wedtu *WorkExperienceDetailTranslationUpdate) SetUpdatedAt(t time.Time) *WorkExperienceDetailTranslationUpdate {
	wedtu.mutation.SetUpdatedAt(t)
	return wedtu
}

// SetWorkExperienceDetail sets the "work_experience_detail" edge to the WorkExperienceDetail entity.
func (wedtu *WorkExperienceDetailTranslationUpdate) SetWorkExperienceDetail(w *WorkExperienceDetail) *WorkExperienceDetailTranslationUpdate {
	return wedtu.SetWorkExperienceDetailID(w.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (wedtu *WorkExperienceDetailTranslationUpdate) SetLanguageID(id string) *WorkExperienceDetailTranslationUpdate {
	wedtu.mutation.SetLanguageID(id)
	return wedtu
}

// SetLanguage sets the "language" edge to the Language entity.
func (wedtu *WorkExperienceDetailTranslationUpdate) SetLanguage(l *Language) *WorkExperienceDetailTranslationUpdate {
	return wedtu.SetLanguageID(l.ID)
}

// Mutation returns the WorkExperienceDetailTranslationMutation object of the builder.
func (wedtu *WorkExperienceDetailTranslationUpdate) Mutation() *WorkExperienceDetailTranslationMutation {
	return wedtu.mutation
}

// ClearWorkExperienceDetail clears the "work_experience_detail" edge to the WorkExperienceDetail entity.
func (wedtu *WorkExperienceDetailTranslationUpdate) ClearWorkExperienceDetail() *WorkExperienceDetailTranslationUpdate {
	wedtu.mutation.ClearWorkExperienceDetail()
	return wedtu
}

// ClearLanguage clears the "language" edge to the Language entity.
func (wedtu *WorkExperienceDetailTranslationUpdate) ClearLanguage() *WorkExperienceDetailTranslationUpdate {
	wedtu.mutation.ClearLanguage()
	return wedtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wedtu *WorkExperienceDetailTranslationUpdate) Save(ctx context.Context) (int, error) {
	wedtu.defaults()
	return withHooks(ctx, wedtu.sqlSave, wedtu.mutation, wedtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wedtu *WorkExperienceDetailTranslationUpdate) SaveX(ctx context.Context) int {
	affected, err := wedtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wedtu *WorkExperienceDetailTranslationUpdate) Exec(ctx context.Context) error {
	_, err := wedtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wedtu *WorkExperienceDetailTranslationUpdate) ExecX(ctx context.Context) {
	if err := wedtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wedtu *WorkExperienceDetailTranslationUpdate) defaults() {
	if _, ok := wedtu.mutation.UpdatedAt(); !ok {
		v := workexperiencedetailtranslation.UpdateDefaultUpdatedAt()
		wedtu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wedtu *WorkExperienceDetailTranslationUpdate) check() error {
	if v, ok := wedtu.mutation.LanguageCode(); ok {
		if err := workexperiencedetailtranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "WorkExperienceDetailTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := wedtu.mutation.DetailText(); ok {
		if err := workexperiencedetailtranslation.DetailTextValidator(v); err != nil {
			return &ValidationError{Name: "detail_text", err: fmt.Errorf(`ent: validator failed for field "WorkExperienceDetailTranslation.detail_text": %w`, err)}
		}
	}
	if wedtu.mutation.WorkExperienceDetailCleared() && len(wedtu.mutation.WorkExperienceDetailIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkExperienceDetailTranslation.work_experience_detail"`)
	}
	if wedtu.mutation.LanguageCleared() && len(wedtu.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkExperienceDetailTranslation.language"`)
	}
	return nil
}

func (wedtu *WorkExperienceDetailTranslationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wedtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workexperiencedetailtranslation.Table, workexperiencedetailtranslation.Columns, sqlgraph.NewFieldSpec(workexperiencedetailtranslation.FieldID, field.TypeUUID))
	if ps := wedtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wedtu.mutation.DetailText(); ok {
		_spec.SetField(workexperiencedetailtranslation.FieldDetailText, field.TypeString, value)
	}
	if value, ok := wedtu.mutation.UpdatedAt(); ok {
		_spec.SetField(workexperiencedetailtranslation.FieldUpdatedAt, field.TypeTime, value)
	}
	if wedtu.mutation.WorkExperienceDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workexperiencedetailtranslation.WorkExperienceDetailTable,
			Columns: []string{workexperiencedetailtranslation.WorkExperienceDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperiencedetail.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wedtu.mutation.WorkExperienceDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workexperiencedetailtranslation.WorkExperienceDetailTable,
			Columns: []string{workexperiencedetailtranslation.WorkExperienceDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperiencedetail.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wedtu.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workexperiencedetailtranslation.LanguageTable,
			Columns: []string{workexperiencedetailtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wedtu.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workexperiencedetailtranslation.LanguageTable,
			Columns: []string{workexperiencedetailtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wedtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workexperiencedetailtranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wedtu.mutation.done = true
	return n, nil
}

// WorkExperienceDetailTranslationUpdateOne is the builder for updating a single WorkExperienceDetailTranslation entity.
type WorkExperienceDetailTranslationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkExperienceDetailTranslationMutation
}

// SetWorkExperienceDetailID sets the "work_experience_detail_id" field.
func (wedtuo *WorkExperienceDetailTranslationUpdateOne) SetWorkExperienceDetailID(u uuid.UUID) *WorkExperienceDetailTranslationUpdateOne {
	wedtuo.mutation.SetWorkExperienceDetailID(u)
	return wedtuo
}

// SetNillableWorkExperienceDetailID sets the "work_experience_detail_id" field if the given value is not nil.
func (wedtuo *WorkExperienceDetailTranslationUpdateOne) SetNillableWorkExperienceDetailID(u *uuid.UUID) *WorkExperienceDetailTranslationUpdateOne {
	if u != nil {
		wedtuo.SetWorkExperienceDetailID(*u)
	}
	return wedtuo
}

// SetLanguageCode sets the "language_code" field.
func (wedtuo *WorkExperienceDetailTranslationUpdateOne) SetLanguageCode(s string) *WorkExperienceDetailTranslationUpdateOne {
	wedtuo.mutation.SetLanguageCode(s)
	return wedtuo
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (wedtuo *WorkExperienceDetailTranslationUpdateOne) SetNillableLanguageCode(s *string) *WorkExperienceDetailTranslationUpdateOne {
	if s != nil {
		wedtuo.SetLanguageCode(*s)
	}
	return wedtuo
}

// SetDetailText sets the "detail_text" field.
func (wedtuo *WorkExperienceDetailTranslationUpdateOne) SetDetailText(s string) *WorkExperienceDetailTranslationUpdateOne {
	wedtuo.mutation.SetDetailText(s)
	return wedtuo
}

// SetNillableDetailText sets the "detail_text" field if the given value is not nil.
func (wedtuo *WorkExperienceDetailTranslationUpdateOne) SetNillableDetailText(s *string) *WorkExperienceDetailTranslationUpdateOne {
	if s != nil {
		wedtuo.SetDetailText(*s)
	}
	return wedtuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wedtuo *WorkExperienceDetailTranslationUpdateOne) SetUpdatedAt(t time.Time) *WorkExperienceDetailTranslationUpdateOne {
	wedtuo.mutation.SetUpdatedAt(t)
	return wedtuo
}

// SetWorkExperienceDetail sets the "work_experience_detail" edge to the WorkExperienceDetail entity.
func (wedtuo *WorkExperienceDetailTranslationUpdateOne) SetWorkExperienceDetail(w *WorkExperienceDetail) *WorkExperienceDetailTranslationUpdateOne {
	return wedtuo.SetWorkExperienceDetailID(w.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (wedtuo *WorkExperienceDetailTranslationUpdateOne) SetLanguageID(id string) *WorkExperienceDetailTranslationUpdateOne {
	wedtuo.mutation.SetLanguageID(id)
	return wedtuo
}

// SetLanguage sets the "language" edge to the Language entity.
func (wedtuo *WorkExperienceDetailTranslationUpdateOne) SetLanguage(l *Language) *WorkExperienceDetailTranslationUpdateOne {
	return wedtuo.SetLanguageID(l.ID)
}

// Mutation returns the WorkExperienceDetailTranslationMutation object of the builder.
func (wedtuo *WorkExperienceDetailTranslationUpdateOne) Mutation() *WorkExperienceDetailTranslationMutation {
	return wedtuo.mutation
}

// ClearWorkExperienceDetail clears the "work_experience_detail" edge to the WorkExperienceDetail entity.
func (wedtuo *WorkExperienceDetailTranslationUpdateOne) ClearWorkExperienceDetail() *WorkExperienceDetailTranslationUpdateOne {
	wedtuo.mutation.ClearWorkExperienceDetail()
	return wedtuo
}

// ClearLanguage clears the "language" edge to the Language entity.
func (wedtuo *WorkExperienceDetailTranslationUpdateOne) ClearLanguage() *WorkExperienceDetailTranslationUpdateOne {
	wedtuo.mutation.ClearLanguage()
	return wedtuo
}

// Where appends a list predicates to the WorkExperienceDetailTranslationUpdate builder.
func (wedtuo *WorkExperienceDetailTranslationUpdateOne) Where(ps ...predicate.WorkExperienceDetailTranslation) *WorkExperienceDetailTranslationUpdateOne {
	wedtuo.mutation.Where(ps...)
	return wedtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wedtuo *WorkExperienceDetailTranslationUpdateOne) Select(field string, fields ...string) *WorkExperienceDetailTranslationUpdateOne {
	wedtuo.fields = append([]string{field}, fields...)
	return wedtuo
}

// Save executes the query and returns the updated WorkExperienceDetailTranslation entity.
func (wedtuo *WorkExperienceDetailTranslationUpdateOne) Save(ctx context.Context) (*WorkExperienceDetailTranslation, error) {
	wedtuo.defaults()
	return withHooks(ctx, wedtuo.sqlSave, wedtuo.mutation, wedtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wedtuo *WorkExperienceDetailTranslationUpdateOne) SaveX(ctx context.Context) *WorkExperienceDetailTranslation {
	node, err := wedtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wedtuo *WorkExperienceDetailTranslationUpdateOne) Exec(ctx context.Context) error {
	_, err := wedtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wedtuo *WorkExperienceDetailTranslationUpdateOne) ExecX(ctx context.Context) {
	if err := wedtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wedtuo *WorkExperienceDetailTranslationUpdateOne) defaults() {
	if _, ok := wedtuo.mutation.UpdatedAt(); !ok {
		v := workexperiencedetailtranslation.UpdateDefaultUpdatedAt()
		wedtuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wedtuo *WorkExperienceDetailTranslationUpdateOne) check() error {
	if v, ok := wedtuo.mutation.LanguageCode(); ok {
		if err := workexperiencedetailtranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "WorkExperienceDetailTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := wedtuo.mutation.DetailText(); ok {
		if err := workexperiencedetailtranslation.DetailTextValidator(v); err != nil {
			return &ValidationError{Name: "detail_text", err: fmt.Errorf(`ent: validator failed for field "WorkExperienceDetailTranslation.detail_text": %w`, err)}
		}
	}
	if wedtuo.mutation.WorkExperienceDetailCleared() && len(wedtuo.mutation.WorkExperienceDetailIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkExperienceDetailTranslation.work_experience_detail"`)
	}
	if wedtuo.mutation.LanguageCleared() && len(wedtuo.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkExperienceDetailTranslation.language"`)
	}
	return nil
}

func (wedtuo *WorkExperienceDetailTranslationUpdateOne) sqlSave(ctx context.Context) (_node *WorkExperienceDetailTranslation, err error) {
	if err := wedtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workexperiencedetailtranslation.Table, workexperiencedetailtranslation.Columns, sqlgraph.NewFieldSpec(workexperiencedetailtranslation.FieldID, field.TypeUUID))
	id, ok := wedtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkExperienceDetailTranslation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wedtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workexperiencedetailtranslation.FieldID)
		for _, f := range fields {
			if !workexperiencedetailtranslation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workexperiencedetailtranslation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wedtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wedtuo.mutation.DetailText(); ok {
		_spec.SetField(workexperiencedetailtranslation.FieldDetailText, field.TypeString, value)
	}
	if value, ok := wedtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(workexperiencedetailtranslation.FieldUpdatedAt, field.TypeTime, value)
	}
	if wedtuo.mutation.WorkExperienceDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workexperiencedetailtranslation.WorkExperienceDetailTable,
			Columns: []string{workexperiencedetailtranslation.WorkExperienceDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperiencedetail.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wedtuo.mutation.WorkExperienceDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workexperiencedetailtranslation.WorkExperienceDetailTable,
			Columns: []string{workexperiencedetailtranslation.WorkExperienceDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperiencedetail.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wedtuo.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workexperiencedetailtranslation.LanguageTable,
			Columns: []string{workexperiencedetailtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wedtuo.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workexperiencedetailtranslation.LanguageTable,
			Columns: []string{workexperiencedetailtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkExperienceDetailTranslation{config: wedtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wedtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workexperiencedetailtranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wedtuo.mutation.done = true
	return _node, nil
}
