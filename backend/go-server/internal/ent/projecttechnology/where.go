// Code generated by ent, DO NOT EDIT.

package projecttechnology

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLTE(FieldID, id))
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v uuid.UUID) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldProjectID, v))
}

// TechnologyName applies equality check predicate on the "technology_name" field. It's identical to TechnologyNameEQ.
func TechnologyName(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldTechnologyName, v))
}

// TechnologyType applies equality check predicate on the "technology_type" field. It's identical to TechnologyTypeEQ.
func TechnologyType(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldTechnologyType, v))
}

// SortOrder applies equality check predicate on the "sort_order" field. It's identical to SortOrderEQ.
func SortOrder(v int) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldSortOrder, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldCreatedAt, v))
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v uuid.UUID) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldProjectID, v))
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v uuid.UUID) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNEQ(FieldProjectID, v))
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...uuid.UUID) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldIn(FieldProjectID, vs...))
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...uuid.UUID) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNotIn(FieldProjectID, vs...))
}

// TechnologyNameEQ applies the EQ predicate on the "technology_name" field.
func TechnologyNameEQ(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldTechnologyName, v))
}

// TechnologyNameNEQ applies the NEQ predicate on the "technology_name" field.
func TechnologyNameNEQ(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNEQ(FieldTechnologyName, v))
}

// TechnologyNameIn applies the In predicate on the "technology_name" field.
func TechnologyNameIn(vs ...string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldIn(FieldTechnologyName, vs...))
}

// TechnologyNameNotIn applies the NotIn predicate on the "technology_name" field.
func TechnologyNameNotIn(vs ...string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNotIn(FieldTechnologyName, vs...))
}

// TechnologyNameGT applies the GT predicate on the "technology_name" field.
func TechnologyNameGT(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGT(FieldTechnologyName, v))
}

// TechnologyNameGTE applies the GTE predicate on the "technology_name" field.
func TechnologyNameGTE(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGTE(FieldTechnologyName, v))
}

// TechnologyNameLT applies the LT predicate on the "technology_name" field.
func TechnologyNameLT(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLT(FieldTechnologyName, v))
}

// TechnologyNameLTE applies the LTE predicate on the "technology_name" field.
func TechnologyNameLTE(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLTE(FieldTechnologyName, v))
}

// TechnologyNameContains applies the Contains predicate on the "technology_name" field.
func TechnologyNameContains(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldContains(FieldTechnologyName, v))
}

// TechnologyNameHasPrefix applies the HasPrefix predicate on the "technology_name" field.
func TechnologyNameHasPrefix(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldHasPrefix(FieldTechnologyName, v))
}

// TechnologyNameHasSuffix applies the HasSuffix predicate on the "technology_name" field.
func TechnologyNameHasSuffix(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldHasSuffix(FieldTechnologyName, v))
}

// TechnologyNameEqualFold applies the EqualFold predicate on the "technology_name" field.
func TechnologyNameEqualFold(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEqualFold(FieldTechnologyName, v))
}

// TechnologyNameContainsFold applies the ContainsFold predicate on the "technology_name" field.
func TechnologyNameContainsFold(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldContainsFold(FieldTechnologyName, v))
}

// TechnologyTypeEQ applies the EQ predicate on the "technology_type" field.
func TechnologyTypeEQ(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldTechnologyType, v))
}

// TechnologyTypeNEQ applies the NEQ predicate on the "technology_type" field.
func TechnologyTypeNEQ(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNEQ(FieldTechnologyType, v))
}

// TechnologyTypeIn applies the In predicate on the "technology_type" field.
func TechnologyTypeIn(vs ...string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldIn(FieldTechnologyType, vs...))
}

// TechnologyTypeNotIn applies the NotIn predicate on the "technology_type" field.
func TechnologyTypeNotIn(vs ...string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNotIn(FieldTechnologyType, vs...))
}

// TechnologyTypeGT applies the GT predicate on the "technology_type" field.
func TechnologyTypeGT(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGT(FieldTechnologyType, v))
}

// TechnologyTypeGTE applies the GTE predicate on the "technology_type" field.
func TechnologyTypeGTE(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGTE(FieldTechnologyType, v))
}

// TechnologyTypeLT applies the LT predicate on the "technology_type" field.
func TechnologyTypeLT(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLT(FieldTechnologyType, v))
}

// TechnologyTypeLTE applies the LTE predicate on the "technology_type" field.
func TechnologyTypeLTE(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLTE(FieldTechnologyType, v))
}

// TechnologyTypeContains applies the Contains predicate on the "technology_type" field.
func TechnologyTypeContains(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldContains(FieldTechnologyType, v))
}

// TechnologyTypeHasPrefix applies the HasPrefix predicate on the "technology_type" field.
func TechnologyTypeHasPrefix(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldHasPrefix(FieldTechnologyType, v))
}

// TechnologyTypeHasSuffix applies the HasSuffix predicate on the "technology_type" field.
func TechnologyTypeHasSuffix(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldHasSuffix(FieldTechnologyType, v))
}

// TechnologyTypeIsNil applies the IsNil predicate on the "technology_type" field.
func TechnologyTypeIsNil() predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldIsNull(FieldTechnologyType))
}

// TechnologyTypeNotNil applies the NotNil predicate on the "technology_type" field.
func TechnologyTypeNotNil() predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNotNull(FieldTechnologyType))
}

// TechnologyTypeEqualFold applies the EqualFold predicate on the "technology_type" field.
func TechnologyTypeEqualFold(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEqualFold(FieldTechnologyType, v))
}

// TechnologyTypeContainsFold applies the ContainsFold predicate on the "technology_type" field.
func TechnologyTypeContainsFold(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldContainsFold(FieldTechnologyType, v))
}

// SortOrderEQ applies the EQ predicate on the "sort_order" field.
func SortOrderEQ(v int) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldSortOrder, v))
}

// SortOrderNEQ applies the NEQ predicate on the "sort_order" field.
func SortOrderNEQ(v int) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNEQ(FieldSortOrder, v))
}

// SortOrderIn applies the In predicate on the "sort_order" field.
func SortOrderIn(vs ...int) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldIn(FieldSortOrder, vs...))
}

// SortOrderNotIn applies the NotIn predicate on the "sort_order" field.
func SortOrderNotIn(vs ...int) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNotIn(FieldSortOrder, vs...))
}

// SortOrderGT applies the GT predicate on the "sort_order" field.
func SortOrderGT(v int) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGT(FieldSortOrder, v))
}

// SortOrderGTE applies the GTE predicate on the "sort_order" field.
func SortOrderGTE(v int) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGTE(FieldSortOrder, v))
}

// SortOrderLT applies the LT predicate on the "sort_order" field.
func SortOrderLT(v int) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLT(FieldSortOrder, v))
}

// SortOrderLTE applies the LTE predicate on the "sort_order" field.
func SortOrderLTE(v int) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLTE(FieldSortOrder, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLTE(FieldCreatedAt, v))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.ProjectTechnology {
	return predicate.ProjectTechnology(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProjectTechnology) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProjectTechnology) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProjectTechnology) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.NotPredicates(p))
}
