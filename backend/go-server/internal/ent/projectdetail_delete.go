// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/projectdetail"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectDetailDelete is the builder for deleting a ProjectDetail entity.
type ProjectDetailDelete struct {
	config
	hooks    []Hook
	mutation *ProjectDetailMutation
}

// Where appends a list predicates to the ProjectDetailDelete builder.
func (pdd *ProjectDetailDelete) Where(ps ...predicate.ProjectDetail) *ProjectDetailDelete {
	pdd.mutation.Where(ps...)
	return pdd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pdd *ProjectDetailDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pdd.sqlExec, pdd.mutation, pdd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pdd *ProjectDetailDelete) ExecX(ctx context.Context) int {
	n, err := pdd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pdd *ProjectDetailDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(projectdetail.Table, sqlgraph.NewFieldSpec(projectdetail.FieldID, field.TypeUUID))
	if ps := pdd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pdd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pdd.mutation.done = true
	return affected, err
}

// ProjectDetailDeleteOne is the builder for deleting a single ProjectDetail entity.
type ProjectDetailDeleteOne struct {
	pdd *ProjectDetailDelete
}

// Where appends a list predicates to the ProjectDetailDelete builder.
func (pddo *ProjectDetailDeleteOne) Where(ps ...predicate.ProjectDetail) *ProjectDetailDeleteOne {
	pddo.pdd.mutation.Where(ps...)
	return pddo
}

// Exec executes the deletion query.
func (pddo *ProjectDetailDeleteOne) Exec(ctx context.Context) error {
	n, err := pddo.pdd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{projectdetail.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pddo *ProjectDetailDeleteOne) ExecX(ctx context.Context) {
	if err := pddo.Exec(ctx); err != nil {
		panic(err)
	}
}
