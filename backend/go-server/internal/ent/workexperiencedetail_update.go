// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/workexperience"
	"silan-backend/internal/ent/workexperiencedetail"
	"silan-backend/internal/ent/workexperiencedetailtranslation"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkExperienceDetailUpdate is the builder for updating WorkExperienceDetail entities.
type WorkExperienceDetailUpdate struct {
	config
	hooks    []Hook
	mutation *WorkExperienceDetailMutation
}

// Where appends a list predicates to the WorkExperienceDetailUpdate builder.
func (wedu *WorkExperienceDetailUpdate) Where(ps ...predicate.WorkExperienceDetail) *WorkExperienceDetailUpdate {
	wedu.mutation.Where(ps...)
	return wedu
}

// SetWorkExperienceID sets the "work_experience_id" field.
func (wedu *WorkExperienceDetailUpdate) SetWorkExperienceID(u uuid.UUID) *WorkExperienceDetailUpdate {
	wedu.mutation.SetWorkExperienceID(u)
	return wedu
}

// SetNillableWorkExperienceID sets the "work_experience_id" field if the given value is not nil.
func (wedu *WorkExperienceDetailUpdate) SetNillableWorkExperienceID(u *uuid.UUID) *WorkExperienceDetailUpdate {
	if u != nil {
		wedu.SetWorkExperienceID(*u)
	}
	return wedu
}

// SetDetailText sets the "detail_text" field.
func (wedu *WorkExperienceDetailUpdate) SetDetailText(s string) *WorkExperienceDetailUpdate {
	wedu.mutation.SetDetailText(s)
	return wedu
}

// SetNillableDetailText sets the "detail_text" field if the given value is not nil.
func (wedu *WorkExperienceDetailUpdate) SetNillableDetailText(s *string) *WorkExperienceDetailUpdate {
	if s != nil {
		wedu.SetDetailText(*s)
	}
	return wedu
}

// SetSortOrder sets the "sort_order" field.
func (wedu *WorkExperienceDetailUpdate) SetSortOrder(i int) *WorkExperienceDetailUpdate {
	wedu.mutation.ResetSortOrder()
	wedu.mutation.SetSortOrder(i)
	return wedu
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (wedu *WorkExperienceDetailUpdate) SetNillableSortOrder(i *int) *WorkExperienceDetailUpdate {
	if i != nil {
		wedu.SetSortOrder(*i)
	}
	return wedu
}

// AddSortOrder adds i to the "sort_order" field.
func (wedu *WorkExperienceDetailUpdate) AddSortOrder(i int) *WorkExperienceDetailUpdate {
	wedu.mutation.AddSortOrder(i)
	return wedu
}

// SetUpdatedAt sets the "updated_at" field.
func (wedu *WorkExperienceDetailUpdate) SetUpdatedAt(t time.Time) *WorkExperienceDetailUpdate {
	wedu.mutation.SetUpdatedAt(t)
	return wedu
}

// SetWorkExperience sets the "work_experience" edge to the WorkExperience entity.
func (wedu *WorkExperienceDetailUpdate) SetWorkExperience(w *WorkExperience) *WorkExperienceDetailUpdate {
	return wedu.SetWorkExperienceID(w.ID)
}

// AddTranslationIDs adds the "translations" edge to the WorkExperienceDetailTranslation entity by IDs.
func (wedu *WorkExperienceDetailUpdate) AddTranslationIDs(ids ...uuid.UUID) *WorkExperienceDetailUpdate {
	wedu.mutation.AddTranslationIDs(ids...)
	return wedu
}

// AddTranslations adds the "translations" edges to the WorkExperienceDetailTranslation entity.
func (wedu *WorkExperienceDetailUpdate) AddTranslations(w ...*WorkExperienceDetailTranslation) *WorkExperienceDetailUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wedu.AddTranslationIDs(ids...)
}

// Mutation returns the WorkExperienceDetailMutation object of the builder.
func (wedu *WorkExperienceDetailUpdate) Mutation() *WorkExperienceDetailMutation {
	return wedu.mutation
}

// ClearWorkExperience clears the "work_experience" edge to the WorkExperience entity.
func (wedu *WorkExperienceDetailUpdate) ClearWorkExperience() *WorkExperienceDetailUpdate {
	wedu.mutation.ClearWorkExperience()
	return wedu
}

// ClearTranslations clears all "translations" edges to the WorkExperienceDetailTranslation entity.
func (wedu *WorkExperienceDetailUpdate) ClearTranslations() *WorkExperienceDetailUpdate {
	wedu.mutation.ClearTranslations()
	return wedu
}

// RemoveTranslationIDs removes the "translations" edge to WorkExperienceDetailTranslation entities by IDs.
func (wedu *WorkExperienceDetailUpdate) RemoveTranslationIDs(ids ...uuid.UUID) *WorkExperienceDetailUpdate {
	wedu.mutation.RemoveTranslationIDs(ids...)
	return wedu
}

// RemoveTranslations removes "translations" edges to WorkExperienceDetailTranslation entities.
func (wedu *WorkExperienceDetailUpdate) RemoveTranslations(w ...*WorkExperienceDetailTranslation) *WorkExperienceDetailUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wedu.RemoveTranslationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wedu *WorkExperienceDetailUpdate) Save(ctx context.Context) (int, error) {
	wedu.defaults()
	return withHooks(ctx, wedu.sqlSave, wedu.mutation, wedu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wedu *WorkExperienceDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := wedu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wedu *WorkExperienceDetailUpdate) Exec(ctx context.Context) error {
	_, err := wedu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wedu *WorkExperienceDetailUpdate) ExecX(ctx context.Context) {
	if err := wedu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wedu *WorkExperienceDetailUpdate) defaults() {
	if _, ok := wedu.mutation.UpdatedAt(); !ok {
		v := workexperiencedetail.UpdateDefaultUpdatedAt()
		wedu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wedu *WorkExperienceDetailUpdate) check() error {
	if v, ok := wedu.mutation.DetailText(); ok {
		if err := workexperiencedetail.DetailTextValidator(v); err != nil {
			return &ValidationError{Name: "detail_text", err: fmt.Errorf(`ent: validator failed for field "WorkExperienceDetail.detail_text": %w`, err)}
		}
	}
	if wedu.mutation.WorkExperienceCleared() && len(wedu.mutation.WorkExperienceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkExperienceDetail.work_experience"`)
	}
	return nil
}

func (wedu *WorkExperienceDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wedu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workexperiencedetail.Table, workexperiencedetail.Columns, sqlgraph.NewFieldSpec(workexperiencedetail.FieldID, field.TypeUUID))
	if ps := wedu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wedu.mutation.DetailText(); ok {
		_spec.SetField(workexperiencedetail.FieldDetailText, field.TypeString, value)
	}
	if value, ok := wedu.mutation.SortOrder(); ok {
		_spec.SetField(workexperiencedetail.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := wedu.mutation.AddedSortOrder(); ok {
		_spec.AddField(workexperiencedetail.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := wedu.mutation.UpdatedAt(); ok {
		_spec.SetField(workexperiencedetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if wedu.mutation.WorkExperienceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workexperiencedetail.WorkExperienceTable,
			Columns: []string{workexperiencedetail.WorkExperienceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperience.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wedu.mutation.WorkExperienceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workexperiencedetail.WorkExperienceTable,
			Columns: []string{workexperiencedetail.WorkExperienceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperience.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wedu.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workexperiencedetail.TranslationsTable,
			Columns: []string{workexperiencedetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperiencedetailtranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wedu.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !wedu.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workexperiencedetail.TranslationsTable,
			Columns: []string{workexperiencedetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperiencedetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wedu.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workexperiencedetail.TranslationsTable,
			Columns: []string{workexperiencedetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperiencedetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wedu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workexperiencedetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wedu.mutation.done = true
	return n, nil
}

// WorkExperienceDetailUpdateOne is the builder for updating a single WorkExperienceDetail entity.
type WorkExperienceDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkExperienceDetailMutation
}

// SetWorkExperienceID sets the "work_experience_id" field.
func (weduo *WorkExperienceDetailUpdateOne) SetWorkExperienceID(u uuid.UUID) *WorkExperienceDetailUpdateOne {
	weduo.mutation.SetWorkExperienceID(u)
	return weduo
}

// SetNillableWorkExperienceID sets the "work_experience_id" field if the given value is not nil.
func (weduo *WorkExperienceDetailUpdateOne) SetNillableWorkExperienceID(u *uuid.UUID) *WorkExperienceDetailUpdateOne {
	if u != nil {
		weduo.SetWorkExperienceID(*u)
	}
	return weduo
}

// SetDetailText sets the "detail_text" field.
func (weduo *WorkExperienceDetailUpdateOne) SetDetailText(s string) *WorkExperienceDetailUpdateOne {
	weduo.mutation.SetDetailText(s)
	return weduo
}

// SetNillableDetailText sets the "detail_text" field if the given value is not nil.
func (weduo *WorkExperienceDetailUpdateOne) SetNillableDetailText(s *string) *WorkExperienceDetailUpdateOne {
	if s != nil {
		weduo.SetDetailText(*s)
	}
	return weduo
}

// SetSortOrder sets the "sort_order" field.
func (weduo *WorkExperienceDetailUpdateOne) SetSortOrder(i int) *WorkExperienceDetailUpdateOne {
	weduo.mutation.ResetSortOrder()
	weduo.mutation.SetSortOrder(i)
	return weduo
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (weduo *WorkExperienceDetailUpdateOne) SetNillableSortOrder(i *int) *WorkExperienceDetailUpdateOne {
	if i != nil {
		weduo.SetSortOrder(*i)
	}
	return weduo
}

// AddSortOrder adds i to the "sort_order" field.
func (weduo *WorkExperienceDetailUpdateOne) AddSortOrder(i int) *WorkExperienceDetailUpdateOne {
	weduo.mutation.AddSortOrder(i)
	return weduo
}

// SetUpdatedAt sets the "updated_at" field.
func (weduo *WorkExperienceDetailUpdateOne) SetUpdatedAt(t time.Time) *WorkExperienceDetailUpdateOne {
	weduo.mutation.SetUpdatedAt(t)
	return weduo
}

// SetWorkExperience sets the "work_experience" edge to the WorkExperience entity.
func (weduo *WorkExperienceDetailUpdateOne) SetWorkExperience(w *WorkExperience) *WorkExperienceDetailUpdateOne {
	return weduo.SetWorkExperienceID(w.ID)
}

// AddTranslationIDs adds the "translations" edge to the WorkExperienceDetailTranslation entity by IDs.
func (weduo *WorkExperienceDetailUpdateOne) AddTranslationIDs(ids ...uuid.UUID) *WorkExperienceDetailUpdateOne {
	weduo.mutation.AddTranslationIDs(ids...)
	return weduo
}

// AddTranslations adds the "translations" edges to the WorkExperienceDetailTranslation entity.
func (weduo *WorkExperienceDetailUpdateOne) AddTranslations(w ...*WorkExperienceDetailTranslation) *WorkExperienceDetailUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weduo.AddTranslationIDs(ids...)
}

// Mutation returns the WorkExperienceDetailMutation object of the builder.
func (weduo *WorkExperienceDetailUpdateOne) Mutation() *WorkExperienceDetailMutation {
	return weduo.mutation
}

// ClearWorkExperience clears the "work_experience" edge to the WorkExperience entity.
func (weduo *WorkExperienceDetailUpdateOne) ClearWorkExperience() *WorkExperienceDetailUpdateOne {
	weduo.mutation.ClearWorkExperience()
	return weduo
}

// ClearTranslations clears all "translations" edges to the WorkExperienceDetailTranslation entity.
func (weduo *WorkExperienceDetailUpdateOne) ClearTranslations() *WorkExperienceDetailUpdateOne {
	weduo.mutation.ClearTranslations()
	return weduo
}

// RemoveTranslationIDs removes the "translations" edge to WorkExperienceDetailTranslation entities by IDs.
func (weduo *WorkExperienceDetailUpdateOne) RemoveTranslationIDs(ids ...uuid.UUID) *WorkExperienceDetailUpdateOne {
	weduo.mutation.RemoveTranslationIDs(ids...)
	return weduo
}

// RemoveTranslations removes "translations" edges to WorkExperienceDetailTranslation entities.
func (weduo *WorkExperienceDetailUpdateOne) RemoveTranslations(w ...*WorkExperienceDetailTranslation) *WorkExperienceDetailUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weduo.RemoveTranslationIDs(ids...)
}

// Where appends a list predicates to the WorkExperienceDetailUpdate builder.
func (weduo *WorkExperienceDetailUpdateOne) Where(ps ...predicate.WorkExperienceDetail) *WorkExperienceDetailUpdateOne {
	weduo.mutation.Where(ps...)
	return weduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (weduo *WorkExperienceDetailUpdateOne) Select(field string, fields ...string) *WorkExperienceDetailUpdateOne {
	weduo.fields = append([]string{field}, fields...)
	return weduo
}

// Save executes the query and returns the updated WorkExperienceDetail entity.
func (weduo *WorkExperienceDetailUpdateOne) Save(ctx context.Context) (*WorkExperienceDetail, error) {
	weduo.defaults()
	return withHooks(ctx, weduo.sqlSave, weduo.mutation, weduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (weduo *WorkExperienceDetailUpdateOne) SaveX(ctx context.Context) *WorkExperienceDetail {
	node, err := weduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (weduo *WorkExperienceDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := weduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (weduo *WorkExperienceDetailUpdateOne) ExecX(ctx context.Context) {
	if err := weduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (weduo *WorkExperienceDetailUpdateOne) defaults() {
	if _, ok := weduo.mutation.UpdatedAt(); !ok {
		v := workexperiencedetail.UpdateDefaultUpdatedAt()
		weduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (weduo *WorkExperienceDetailUpdateOne) check() error {
	if v, ok := weduo.mutation.DetailText(); ok {
		if err := workexperiencedetail.DetailTextValidator(v); err != nil {
			return &ValidationError{Name: "detail_text", err: fmt.Errorf(`ent: validator failed for field "WorkExperienceDetail.detail_text": %w`, err)}
		}
	}
	if weduo.mutation.WorkExperienceCleared() && len(weduo.mutation.WorkExperienceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkExperienceDetail.work_experience"`)
	}
	return nil
}

func (weduo *WorkExperienceDetailUpdateOne) sqlSave(ctx context.Context) (_node *WorkExperienceDetail, err error) {
	if err := weduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workexperiencedetail.Table, workexperiencedetail.Columns, sqlgraph.NewFieldSpec(workexperiencedetail.FieldID, field.TypeUUID))
	id, ok := weduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkExperienceDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := weduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workexperiencedetail.FieldID)
		for _, f := range fields {
			if !workexperiencedetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workexperiencedetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := weduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := weduo.mutation.DetailText(); ok {
		_spec.SetField(workexperiencedetail.FieldDetailText, field.TypeString, value)
	}
	if value, ok := weduo.mutation.SortOrder(); ok {
		_spec.SetField(workexperiencedetail.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := weduo.mutation.AddedSortOrder(); ok {
		_spec.AddField(workexperiencedetail.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := weduo.mutation.UpdatedAt(); ok {
		_spec.SetField(workexperiencedetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if weduo.mutation.WorkExperienceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workexperiencedetail.WorkExperienceTable,
			Columns: []string{workexperiencedetail.WorkExperienceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperience.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weduo.mutation.WorkExperienceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workexperiencedetail.WorkExperienceTable,
			Columns: []string{workexperiencedetail.WorkExperienceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperience.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weduo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workexperiencedetail.TranslationsTable,
			Columns: []string{workexperiencedetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperiencedetailtranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weduo.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !weduo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workexperiencedetail.TranslationsTable,
			Columns: []string{workexperiencedetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperiencedetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weduo.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workexperiencedetail.TranslationsTable,
			Columns: []string{workexperiencedetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperiencedetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkExperienceDetail{config: weduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, weduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workexperiencedetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	weduo.mutation.done = true
	return _node, nil
}
