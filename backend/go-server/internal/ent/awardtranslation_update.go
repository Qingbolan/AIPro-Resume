// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/award"
	"silan-backend/internal/ent/awardtranslation"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AwardTranslationUpdate is the builder for updating AwardTranslation entities.
type AwardTranslationUpdate struct {
	config
	hooks    []Hook
	mutation *AwardTranslationMutation
}

// Where appends a list predicates to the AwardTranslationUpdate builder.
func (atu *AwardTranslationUpdate) Where(ps ...predicate.AwardTranslation) *AwardTranslationUpdate {
	atu.mutation.Where(ps...)
	return atu
}

// SetAwardID sets the "award_id" field.
func (atu *AwardTranslationUpdate) SetAwardID(u uuid.UUID) *AwardTranslationUpdate {
	atu.mutation.SetAwardID(u)
	return atu
}

// SetNillableAwardID sets the "award_id" field if the given value is not nil.
func (atu *AwardTranslationUpdate) SetNillableAwardID(u *uuid.UUID) *AwardTranslationUpdate {
	if u != nil {
		atu.SetAwardID(*u)
	}
	return atu
}

// SetLanguageCode sets the "language_code" field.
func (atu *AwardTranslationUpdate) SetLanguageCode(s string) *AwardTranslationUpdate {
	atu.mutation.SetLanguageCode(s)
	return atu
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (atu *AwardTranslationUpdate) SetNillableLanguageCode(s *string) *AwardTranslationUpdate {
	if s != nil {
		atu.SetLanguageCode(*s)
	}
	return atu
}

// SetTitle sets the "title" field.
func (atu *AwardTranslationUpdate) SetTitle(s string) *AwardTranslationUpdate {
	atu.mutation.SetTitle(s)
	return atu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (atu *AwardTranslationUpdate) SetNillableTitle(s *string) *AwardTranslationUpdate {
	if s != nil {
		atu.SetTitle(*s)
	}
	return atu
}

// SetAwardingOrganization sets the "awarding_organization" field.
func (atu *AwardTranslationUpdate) SetAwardingOrganization(s string) *AwardTranslationUpdate {
	atu.mutation.SetAwardingOrganization(s)
	return atu
}

// SetNillableAwardingOrganization sets the "awarding_organization" field if the given value is not nil.
func (atu *AwardTranslationUpdate) SetNillableAwardingOrganization(s *string) *AwardTranslationUpdate {
	if s != nil {
		atu.SetAwardingOrganization(*s)
	}
	return atu
}

// SetAwardType sets the "award_type" field.
func (atu *AwardTranslationUpdate) SetAwardType(s string) *AwardTranslationUpdate {
	atu.mutation.SetAwardType(s)
	return atu
}

// SetNillableAwardType sets the "award_type" field if the given value is not nil.
func (atu *AwardTranslationUpdate) SetNillableAwardType(s *string) *AwardTranslationUpdate {
	if s != nil {
		atu.SetAwardType(*s)
	}
	return atu
}

// ClearAwardType clears the value of the "award_type" field.
func (atu *AwardTranslationUpdate) ClearAwardType() *AwardTranslationUpdate {
	atu.mutation.ClearAwardType()
	return atu
}

// SetDescription sets the "description" field.
func (atu *AwardTranslationUpdate) SetDescription(s string) *AwardTranslationUpdate {
	atu.mutation.SetDescription(s)
	return atu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (atu *AwardTranslationUpdate) SetNillableDescription(s *string) *AwardTranslationUpdate {
	if s != nil {
		atu.SetDescription(*s)
	}
	return atu
}

// ClearDescription clears the value of the "description" field.
func (atu *AwardTranslationUpdate) ClearDescription() *AwardTranslationUpdate {
	atu.mutation.ClearDescription()
	return atu
}

// SetUpdatedAt sets the "updated_at" field.
func (atu *AwardTranslationUpdate) SetUpdatedAt(t time.Time) *AwardTranslationUpdate {
	atu.mutation.SetUpdatedAt(t)
	return atu
}

// SetAward sets the "award" edge to the Award entity.
func (atu *AwardTranslationUpdate) SetAward(a *Award) *AwardTranslationUpdate {
	return atu.SetAwardID(a.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (atu *AwardTranslationUpdate) SetLanguageID(id string) *AwardTranslationUpdate {
	atu.mutation.SetLanguageID(id)
	return atu
}

// SetLanguage sets the "language" edge to the Language entity.
func (atu *AwardTranslationUpdate) SetLanguage(l *Language) *AwardTranslationUpdate {
	return atu.SetLanguageID(l.ID)
}

// Mutation returns the AwardTranslationMutation object of the builder.
func (atu *AwardTranslationUpdate) Mutation() *AwardTranslationMutation {
	return atu.mutation
}

// ClearAward clears the "award" edge to the Award entity.
func (atu *AwardTranslationUpdate) ClearAward() *AwardTranslationUpdate {
	atu.mutation.ClearAward()
	return atu
}

// ClearLanguage clears the "language" edge to the Language entity.
func (atu *AwardTranslationUpdate) ClearLanguage() *AwardTranslationUpdate {
	atu.mutation.ClearLanguage()
	return atu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atu *AwardTranslationUpdate) Save(ctx context.Context) (int, error) {
	atu.defaults()
	return withHooks(ctx, atu.sqlSave, atu.mutation, atu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atu *AwardTranslationUpdate) SaveX(ctx context.Context) int {
	affected, err := atu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atu *AwardTranslationUpdate) Exec(ctx context.Context) error {
	_, err := atu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atu *AwardTranslationUpdate) ExecX(ctx context.Context) {
	if err := atu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atu *AwardTranslationUpdate) defaults() {
	if _, ok := atu.mutation.UpdatedAt(); !ok {
		v := awardtranslation.UpdateDefaultUpdatedAt()
		atu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atu *AwardTranslationUpdate) check() error {
	if v, ok := atu.mutation.LanguageCode(); ok {
		if err := awardtranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "AwardTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := atu.mutation.Title(); ok {
		if err := awardtranslation.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "AwardTranslation.title": %w`, err)}
		}
	}
	if v, ok := atu.mutation.AwardingOrganization(); ok {
		if err := awardtranslation.AwardingOrganizationValidator(v); err != nil {
			return &ValidationError{Name: "awarding_organization", err: fmt.Errorf(`ent: validator failed for field "AwardTranslation.awarding_organization": %w`, err)}
		}
	}
	if v, ok := atu.mutation.AwardType(); ok {
		if err := awardtranslation.AwardTypeValidator(v); err != nil {
			return &ValidationError{Name: "award_type", err: fmt.Errorf(`ent: validator failed for field "AwardTranslation.award_type": %w`, err)}
		}
	}
	if atu.mutation.AwardCleared() && len(atu.mutation.AwardIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AwardTranslation.award"`)
	}
	if atu.mutation.LanguageCleared() && len(atu.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AwardTranslation.language"`)
	}
	return nil
}

func (atu *AwardTranslationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := atu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(awardtranslation.Table, awardtranslation.Columns, sqlgraph.NewFieldSpec(awardtranslation.FieldID, field.TypeUUID))
	if ps := atu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atu.mutation.Title(); ok {
		_spec.SetField(awardtranslation.FieldTitle, field.TypeString, value)
	}
	if value, ok := atu.mutation.AwardingOrganization(); ok {
		_spec.SetField(awardtranslation.FieldAwardingOrganization, field.TypeString, value)
	}
	if value, ok := atu.mutation.AwardType(); ok {
		_spec.SetField(awardtranslation.FieldAwardType, field.TypeString, value)
	}
	if atu.mutation.AwardTypeCleared() {
		_spec.ClearField(awardtranslation.FieldAwardType, field.TypeString)
	}
	if value, ok := atu.mutation.Description(); ok {
		_spec.SetField(awardtranslation.FieldDescription, field.TypeString, value)
	}
	if atu.mutation.DescriptionCleared() {
		_spec.ClearField(awardtranslation.FieldDescription, field.TypeString)
	}
	if value, ok := atu.mutation.UpdatedAt(); ok {
		_spec.SetField(awardtranslation.FieldUpdatedAt, field.TypeTime, value)
	}
	if atu.mutation.AwardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   awardtranslation.AwardTable,
			Columns: []string{awardtranslation.AwardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(award.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.AwardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   awardtranslation.AwardTable,
			Columns: []string{awardtranslation.AwardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(award.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   awardtranslation.LanguageTable,
			Columns: []string{awardtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   awardtranslation.LanguageTable,
			Columns: []string{awardtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, atu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{awardtranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	atu.mutation.done = true
	return n, nil
}

// AwardTranslationUpdateOne is the builder for updating a single AwardTranslation entity.
type AwardTranslationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AwardTranslationMutation
}

// SetAwardID sets the "award_id" field.
func (atuo *AwardTranslationUpdateOne) SetAwardID(u uuid.UUID) *AwardTranslationUpdateOne {
	atuo.mutation.SetAwardID(u)
	return atuo
}

// SetNillableAwardID sets the "award_id" field if the given value is not nil.
func (atuo *AwardTranslationUpdateOne) SetNillableAwardID(u *uuid.UUID) *AwardTranslationUpdateOne {
	if u != nil {
		atuo.SetAwardID(*u)
	}
	return atuo
}

// SetLanguageCode sets the "language_code" field.
func (atuo *AwardTranslationUpdateOne) SetLanguageCode(s string) *AwardTranslationUpdateOne {
	atuo.mutation.SetLanguageCode(s)
	return atuo
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (atuo *AwardTranslationUpdateOne) SetNillableLanguageCode(s *string) *AwardTranslationUpdateOne {
	if s != nil {
		atuo.SetLanguageCode(*s)
	}
	return atuo
}

// SetTitle sets the "title" field.
func (atuo *AwardTranslationUpdateOne) SetTitle(s string) *AwardTranslationUpdateOne {
	atuo.mutation.SetTitle(s)
	return atuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (atuo *AwardTranslationUpdateOne) SetNillableTitle(s *string) *AwardTranslationUpdateOne {
	if s != nil {
		atuo.SetTitle(*s)
	}
	return atuo
}

// SetAwardingOrganization sets the "awarding_organization" field.
func (atuo *AwardTranslationUpdateOne) SetAwardingOrganization(s string) *AwardTranslationUpdateOne {
	atuo.mutation.SetAwardingOrganization(s)
	return atuo
}

// SetNillableAwardingOrganization sets the "awarding_organization" field if the given value is not nil.
func (atuo *AwardTranslationUpdateOne) SetNillableAwardingOrganization(s *string) *AwardTranslationUpdateOne {
	if s != nil {
		atuo.SetAwardingOrganization(*s)
	}
	return atuo
}

// SetAwardType sets the "award_type" field.
func (atuo *AwardTranslationUpdateOne) SetAwardType(s string) *AwardTranslationUpdateOne {
	atuo.mutation.SetAwardType(s)
	return atuo
}

// SetNillableAwardType sets the "award_type" field if the given value is not nil.
func (atuo *AwardTranslationUpdateOne) SetNillableAwardType(s *string) *AwardTranslationUpdateOne {
	if s != nil {
		atuo.SetAwardType(*s)
	}
	return atuo
}

// ClearAwardType clears the value of the "award_type" field.
func (atuo *AwardTranslationUpdateOne) ClearAwardType() *AwardTranslationUpdateOne {
	atuo.mutation.ClearAwardType()
	return atuo
}

// SetDescription sets the "description" field.
func (atuo *AwardTranslationUpdateOne) SetDescription(s string) *AwardTranslationUpdateOne {
	atuo.mutation.SetDescription(s)
	return atuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (atuo *AwardTranslationUpdateOne) SetNillableDescription(s *string) *AwardTranslationUpdateOne {
	if s != nil {
		atuo.SetDescription(*s)
	}
	return atuo
}

// ClearDescription clears the value of the "description" field.
func (atuo *AwardTranslationUpdateOne) ClearDescription() *AwardTranslationUpdateOne {
	atuo.mutation.ClearDescription()
	return atuo
}

// SetUpdatedAt sets the "updated_at" field.
func (atuo *AwardTranslationUpdateOne) SetUpdatedAt(t time.Time) *AwardTranslationUpdateOne {
	atuo.mutation.SetUpdatedAt(t)
	return atuo
}

// SetAward sets the "award" edge to the Award entity.
func (atuo *AwardTranslationUpdateOne) SetAward(a *Award) *AwardTranslationUpdateOne {
	return atuo.SetAwardID(a.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (atuo *AwardTranslationUpdateOne) SetLanguageID(id string) *AwardTranslationUpdateOne {
	atuo.mutation.SetLanguageID(id)
	return atuo
}

// SetLanguage sets the "language" edge to the Language entity.
func (atuo *AwardTranslationUpdateOne) SetLanguage(l *Language) *AwardTranslationUpdateOne {
	return atuo.SetLanguageID(l.ID)
}

// Mutation returns the AwardTranslationMutation object of the builder.
func (atuo *AwardTranslationUpdateOne) Mutation() *AwardTranslationMutation {
	return atuo.mutation
}

// ClearAward clears the "award" edge to the Award entity.
func (atuo *AwardTranslationUpdateOne) ClearAward() *AwardTranslationUpdateOne {
	atuo.mutation.ClearAward()
	return atuo
}

// ClearLanguage clears the "language" edge to the Language entity.
func (atuo *AwardTranslationUpdateOne) ClearLanguage() *AwardTranslationUpdateOne {
	atuo.mutation.ClearLanguage()
	return atuo
}

// Where appends a list predicates to the AwardTranslationUpdate builder.
func (atuo *AwardTranslationUpdateOne) Where(ps ...predicate.AwardTranslation) *AwardTranslationUpdateOne {
	atuo.mutation.Where(ps...)
	return atuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atuo *AwardTranslationUpdateOne) Select(field string, fields ...string) *AwardTranslationUpdateOne {
	atuo.fields = append([]string{field}, fields...)
	return atuo
}

// Save executes the query and returns the updated AwardTranslation entity.
func (atuo *AwardTranslationUpdateOne) Save(ctx context.Context) (*AwardTranslation, error) {
	atuo.defaults()
	return withHooks(ctx, atuo.sqlSave, atuo.mutation, atuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atuo *AwardTranslationUpdateOne) SaveX(ctx context.Context) *AwardTranslation {
	node, err := atuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atuo *AwardTranslationUpdateOne) Exec(ctx context.Context) error {
	_, err := atuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atuo *AwardTranslationUpdateOne) ExecX(ctx context.Context) {
	if err := atuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atuo *AwardTranslationUpdateOne) defaults() {
	if _, ok := atuo.mutation.UpdatedAt(); !ok {
		v := awardtranslation.UpdateDefaultUpdatedAt()
		atuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atuo *AwardTranslationUpdateOne) check() error {
	if v, ok := atuo.mutation.LanguageCode(); ok {
		if err := awardtranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "AwardTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := atuo.mutation.Title(); ok {
		if err := awardtranslation.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "AwardTranslation.title": %w`, err)}
		}
	}
	if v, ok := atuo.mutation.AwardingOrganization(); ok {
		if err := awardtranslation.AwardingOrganizationValidator(v); err != nil {
			return &ValidationError{Name: "awarding_organization", err: fmt.Errorf(`ent: validator failed for field "AwardTranslation.awarding_organization": %w`, err)}
		}
	}
	if v, ok := atuo.mutation.AwardType(); ok {
		if err := awardtranslation.AwardTypeValidator(v); err != nil {
			return &ValidationError{Name: "award_type", err: fmt.Errorf(`ent: validator failed for field "AwardTranslation.award_type": %w`, err)}
		}
	}
	if atuo.mutation.AwardCleared() && len(atuo.mutation.AwardIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AwardTranslation.award"`)
	}
	if atuo.mutation.LanguageCleared() && len(atuo.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AwardTranslation.language"`)
	}
	return nil
}

func (atuo *AwardTranslationUpdateOne) sqlSave(ctx context.Context) (_node *AwardTranslation, err error) {
	if err := atuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(awardtranslation.Table, awardtranslation.Columns, sqlgraph.NewFieldSpec(awardtranslation.FieldID, field.TypeUUID))
	id, ok := atuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AwardTranslation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := atuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, awardtranslation.FieldID)
		for _, f := range fields {
			if !awardtranslation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != awardtranslation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atuo.mutation.Title(); ok {
		_spec.SetField(awardtranslation.FieldTitle, field.TypeString, value)
	}
	if value, ok := atuo.mutation.AwardingOrganization(); ok {
		_spec.SetField(awardtranslation.FieldAwardingOrganization, field.TypeString, value)
	}
	if value, ok := atuo.mutation.AwardType(); ok {
		_spec.SetField(awardtranslation.FieldAwardType, field.TypeString, value)
	}
	if atuo.mutation.AwardTypeCleared() {
		_spec.ClearField(awardtranslation.FieldAwardType, field.TypeString)
	}
	if value, ok := atuo.mutation.Description(); ok {
		_spec.SetField(awardtranslation.FieldDescription, field.TypeString, value)
	}
	if atuo.mutation.DescriptionCleared() {
		_spec.ClearField(awardtranslation.FieldDescription, field.TypeString)
	}
	if value, ok := atuo.mutation.UpdatedAt(); ok {
		_spec.SetField(awardtranslation.FieldUpdatedAt, field.TypeTime, value)
	}
	if atuo.mutation.AwardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   awardtranslation.AwardTable,
			Columns: []string{awardtranslation.AwardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(award.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.AwardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   awardtranslation.AwardTable,
			Columns: []string{awardtranslation.AwardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(award.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   awardtranslation.LanguageTable,
			Columns: []string{awardtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   awardtranslation.LanguageTable,
			Columns: []string{awardtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AwardTranslation{config: atuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{awardtranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	atuo.mutation.done = true
	return _node, nil
}
