// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/projectrelationship"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProjectRelationshipUpdate is the builder for updating ProjectRelationship entities.
type ProjectRelationshipUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectRelationshipMutation
}

// Where appends a list predicates to the ProjectRelationshipUpdate builder.
func (pru *ProjectRelationshipUpdate) Where(ps ...predicate.ProjectRelationship) *ProjectRelationshipUpdate {
	pru.mutation.Where(ps...)
	return pru
}

// SetSourceProjectID sets the "source_project_id" field.
func (pru *ProjectRelationshipUpdate) SetSourceProjectID(u uuid.UUID) *ProjectRelationshipUpdate {
	pru.mutation.SetSourceProjectID(u)
	return pru
}

// SetNillableSourceProjectID sets the "source_project_id" field if the given value is not nil.
func (pru *ProjectRelationshipUpdate) SetNillableSourceProjectID(u *uuid.UUID) *ProjectRelationshipUpdate {
	if u != nil {
		pru.SetSourceProjectID(*u)
	}
	return pru
}

// SetTargetProjectID sets the "target_project_id" field.
func (pru *ProjectRelationshipUpdate) SetTargetProjectID(u uuid.UUID) *ProjectRelationshipUpdate {
	pru.mutation.SetTargetProjectID(u)
	return pru
}

// SetNillableTargetProjectID sets the "target_project_id" field if the given value is not nil.
func (pru *ProjectRelationshipUpdate) SetNillableTargetProjectID(u *uuid.UUID) *ProjectRelationshipUpdate {
	if u != nil {
		pru.SetTargetProjectID(*u)
	}
	return pru
}

// SetRelationshipType sets the "relationship_type" field.
func (pru *ProjectRelationshipUpdate) SetRelationshipType(s string) *ProjectRelationshipUpdate {
	pru.mutation.SetRelationshipType(s)
	return pru
}

// SetNillableRelationshipType sets the "relationship_type" field if the given value is not nil.
func (pru *ProjectRelationshipUpdate) SetNillableRelationshipType(s *string) *ProjectRelationshipUpdate {
	if s != nil {
		pru.SetRelationshipType(*s)
	}
	return pru
}

// SetUpdatedAt sets the "updated_at" field.
func (pru *ProjectRelationshipUpdate) SetUpdatedAt(t time.Time) *ProjectRelationshipUpdate {
	pru.mutation.SetUpdatedAt(t)
	return pru
}

// SetSourceProject sets the "source_project" edge to the Project entity.
func (pru *ProjectRelationshipUpdate) SetSourceProject(p *Project) *ProjectRelationshipUpdate {
	return pru.SetSourceProjectID(p.ID)
}

// SetTargetProject sets the "target_project" edge to the Project entity.
func (pru *ProjectRelationshipUpdate) SetTargetProject(p *Project) *ProjectRelationshipUpdate {
	return pru.SetTargetProjectID(p.ID)
}

// Mutation returns the ProjectRelationshipMutation object of the builder.
func (pru *ProjectRelationshipUpdate) Mutation() *ProjectRelationshipMutation {
	return pru.mutation
}

// ClearSourceProject clears the "source_project" edge to the Project entity.
func (pru *ProjectRelationshipUpdate) ClearSourceProject() *ProjectRelationshipUpdate {
	pru.mutation.ClearSourceProject()
	return pru
}

// ClearTargetProject clears the "target_project" edge to the Project entity.
func (pru *ProjectRelationshipUpdate) ClearTargetProject() *ProjectRelationshipUpdate {
	pru.mutation.ClearTargetProject()
	return pru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *ProjectRelationshipUpdate) Save(ctx context.Context) (int, error) {
	pru.defaults()
	return withHooks(ctx, pru.sqlSave, pru.mutation, pru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pru *ProjectRelationshipUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *ProjectRelationshipUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *ProjectRelationshipUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pru *ProjectRelationshipUpdate) defaults() {
	if _, ok := pru.mutation.UpdatedAt(); !ok {
		v := projectrelationship.UpdateDefaultUpdatedAt()
		pru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pru *ProjectRelationshipUpdate) check() error {
	if v, ok := pru.mutation.RelationshipType(); ok {
		if err := projectrelationship.RelationshipTypeValidator(v); err != nil {
			return &ValidationError{Name: "relationship_type", err: fmt.Errorf(`ent: validator failed for field "ProjectRelationship.relationship_type": %w`, err)}
		}
	}
	if pru.mutation.SourceProjectCleared() && len(pru.mutation.SourceProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectRelationship.source_project"`)
	}
	if pru.mutation.TargetProjectCleared() && len(pru.mutation.TargetProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectRelationship.target_project"`)
	}
	return nil
}

func (pru *ProjectRelationshipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectrelationship.Table, projectrelationship.Columns, sqlgraph.NewFieldSpec(projectrelationship.FieldID, field.TypeUUID))
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.RelationshipType(); ok {
		_spec.SetField(projectrelationship.FieldRelationshipType, field.TypeString, value)
	}
	if value, ok := pru.mutation.UpdatedAt(); ok {
		_spec.SetField(projectrelationship.FieldUpdatedAt, field.TypeTime, value)
	}
	if pru.mutation.SourceProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectrelationship.SourceProjectTable,
			Columns: []string{projectrelationship.SourceProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.SourceProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectrelationship.SourceProjectTable,
			Columns: []string{projectrelationship.SourceProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pru.mutation.TargetProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectrelationship.TargetProjectTable,
			Columns: []string{projectrelationship.TargetProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.TargetProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectrelationship.TargetProjectTable,
			Columns: []string{projectrelationship.TargetProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectrelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pru.mutation.done = true
	return n, nil
}

// ProjectRelationshipUpdateOne is the builder for updating a single ProjectRelationship entity.
type ProjectRelationshipUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectRelationshipMutation
}

// SetSourceProjectID sets the "source_project_id" field.
func (pruo *ProjectRelationshipUpdateOne) SetSourceProjectID(u uuid.UUID) *ProjectRelationshipUpdateOne {
	pruo.mutation.SetSourceProjectID(u)
	return pruo
}

// SetNillableSourceProjectID sets the "source_project_id" field if the given value is not nil.
func (pruo *ProjectRelationshipUpdateOne) SetNillableSourceProjectID(u *uuid.UUID) *ProjectRelationshipUpdateOne {
	if u != nil {
		pruo.SetSourceProjectID(*u)
	}
	return pruo
}

// SetTargetProjectID sets the "target_project_id" field.
func (pruo *ProjectRelationshipUpdateOne) SetTargetProjectID(u uuid.UUID) *ProjectRelationshipUpdateOne {
	pruo.mutation.SetTargetProjectID(u)
	return pruo
}

// SetNillableTargetProjectID sets the "target_project_id" field if the given value is not nil.
func (pruo *ProjectRelationshipUpdateOne) SetNillableTargetProjectID(u *uuid.UUID) *ProjectRelationshipUpdateOne {
	if u != nil {
		pruo.SetTargetProjectID(*u)
	}
	return pruo
}

// SetRelationshipType sets the "relationship_type" field.
func (pruo *ProjectRelationshipUpdateOne) SetRelationshipType(s string) *ProjectRelationshipUpdateOne {
	pruo.mutation.SetRelationshipType(s)
	return pruo
}

// SetNillableRelationshipType sets the "relationship_type" field if the given value is not nil.
func (pruo *ProjectRelationshipUpdateOne) SetNillableRelationshipType(s *string) *ProjectRelationshipUpdateOne {
	if s != nil {
		pruo.SetRelationshipType(*s)
	}
	return pruo
}

// SetUpdatedAt sets the "updated_at" field.
func (pruo *ProjectRelationshipUpdateOne) SetUpdatedAt(t time.Time) *ProjectRelationshipUpdateOne {
	pruo.mutation.SetUpdatedAt(t)
	return pruo
}

// SetSourceProject sets the "source_project" edge to the Project entity.
func (pruo *ProjectRelationshipUpdateOne) SetSourceProject(p *Project) *ProjectRelationshipUpdateOne {
	return pruo.SetSourceProjectID(p.ID)
}

// SetTargetProject sets the "target_project" edge to the Project entity.
func (pruo *ProjectRelationshipUpdateOne) SetTargetProject(p *Project) *ProjectRelationshipUpdateOne {
	return pruo.SetTargetProjectID(p.ID)
}

// Mutation returns the ProjectRelationshipMutation object of the builder.
func (pruo *ProjectRelationshipUpdateOne) Mutation() *ProjectRelationshipMutation {
	return pruo.mutation
}

// ClearSourceProject clears the "source_project" edge to the Project entity.
func (pruo *ProjectRelationshipUpdateOne) ClearSourceProject() *ProjectRelationshipUpdateOne {
	pruo.mutation.ClearSourceProject()
	return pruo
}

// ClearTargetProject clears the "target_project" edge to the Project entity.
func (pruo *ProjectRelationshipUpdateOne) ClearTargetProject() *ProjectRelationshipUpdateOne {
	pruo.mutation.ClearTargetProject()
	return pruo
}

// Where appends a list predicates to the ProjectRelationshipUpdate builder.
func (pruo *ProjectRelationshipUpdateOne) Where(ps ...predicate.ProjectRelationship) *ProjectRelationshipUpdateOne {
	pruo.mutation.Where(ps...)
	return pruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *ProjectRelationshipUpdateOne) Select(field string, fields ...string) *ProjectRelationshipUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated ProjectRelationship entity.
func (pruo *ProjectRelationshipUpdateOne) Save(ctx context.Context) (*ProjectRelationship, error) {
	pruo.defaults()
	return withHooks(ctx, pruo.sqlSave, pruo.mutation, pruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *ProjectRelationshipUpdateOne) SaveX(ctx context.Context) *ProjectRelationship {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *ProjectRelationshipUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *ProjectRelationshipUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pruo *ProjectRelationshipUpdateOne) defaults() {
	if _, ok := pruo.mutation.UpdatedAt(); !ok {
		v := projectrelationship.UpdateDefaultUpdatedAt()
		pruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pruo *ProjectRelationshipUpdateOne) check() error {
	if v, ok := pruo.mutation.RelationshipType(); ok {
		if err := projectrelationship.RelationshipTypeValidator(v); err != nil {
			return &ValidationError{Name: "relationship_type", err: fmt.Errorf(`ent: validator failed for field "ProjectRelationship.relationship_type": %w`, err)}
		}
	}
	if pruo.mutation.SourceProjectCleared() && len(pruo.mutation.SourceProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectRelationship.source_project"`)
	}
	if pruo.mutation.TargetProjectCleared() && len(pruo.mutation.TargetProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectRelationship.target_project"`)
	}
	return nil
}

func (pruo *ProjectRelationshipUpdateOne) sqlSave(ctx context.Context) (_node *ProjectRelationship, err error) {
	if err := pruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectrelationship.Table, projectrelationship.Columns, sqlgraph.NewFieldSpec(projectrelationship.FieldID, field.TypeUUID))
	id, ok := pruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProjectRelationship.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectrelationship.FieldID)
		for _, f := range fields {
			if !projectrelationship.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != projectrelationship.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.RelationshipType(); ok {
		_spec.SetField(projectrelationship.FieldRelationshipType, field.TypeString, value)
	}
	if value, ok := pruo.mutation.UpdatedAt(); ok {
		_spec.SetField(projectrelationship.FieldUpdatedAt, field.TypeTime, value)
	}
	if pruo.mutation.SourceProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectrelationship.SourceProjectTable,
			Columns: []string{projectrelationship.SourceProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.SourceProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectrelationship.SourceProjectTable,
			Columns: []string{projectrelationship.SourceProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pruo.mutation.TargetProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectrelationship.TargetProjectTable,
			Columns: []string{projectrelationship.TargetProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.TargetProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectrelationship.TargetProjectTable,
			Columns: []string{projectrelationship.TargetProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProjectRelationship{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectrelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pruo.mutation.done = true
	return _node, nil
}
