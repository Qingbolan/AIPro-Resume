// Code generated by ent, DO NOT EDIT.

package sociallink

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the sociallink type in the database.
	Label = "social_link"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPersonalInfoID holds the string denoting the personal_info_id field in the database.
	FieldPersonalInfoID = "personal_info_id"
	// FieldPlatform holds the string denoting the platform field in the database.
	FieldPlatform = "platform"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldSortOrder holds the string denoting the sort_order field in the database.
	FieldSortOrder = "sort_order"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgePersonalInfo holds the string denoting the personal_info edge name in mutations.
	EdgePersonalInfo = "personal_info"
	// Table holds the table name of the sociallink in the database.
	Table = "social_links"
	// PersonalInfoTable is the table that holds the personal_info relation/edge.
	PersonalInfoTable = "social_links"
	// PersonalInfoInverseTable is the table name for the PersonalInfo entity.
	// It exists in this package in order to avoid circular dependency with the "personalinfo" package.
	PersonalInfoInverseTable = "personal_info"
	// PersonalInfoColumn is the table column denoting the personal_info relation/edge.
	PersonalInfoColumn = "personal_info_id"
)

// Columns holds all SQL columns for sociallink fields.
var Columns = []string{
	FieldID,
	FieldPersonalInfoID,
	FieldPlatform,
	FieldURL,
	FieldDisplayName,
	FieldIsActive,
	FieldSortOrder,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// PlatformValidator is a validator for the "platform" field. It is called by the builders before save.
	PlatformValidator func(string) error
	// URLValidator is a validator for the "url" field. It is called by the builders before save.
	URLValidator func(string) error
	// DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	DisplayNameValidator func(string) error
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultSortOrder holds the default value on creation for the "sort_order" field.
	DefaultSortOrder int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the SocialLink queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPersonalInfoID orders the results by the personal_info_id field.
func ByPersonalInfoID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPersonalInfoID, opts...).ToFunc()
}

// ByPlatform orders the results by the platform field.
func ByPlatform(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlatform, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// BySortOrder orders the results by the sort_order field.
func BySortOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSortOrder, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByPersonalInfoField orders the results by personal_info field.
func ByPersonalInfoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPersonalInfoStep(), sql.OrderByField(field, opts...))
	}
}
func newPersonalInfoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PersonalInfoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PersonalInfoTable, PersonalInfoColumn),
	)
}
