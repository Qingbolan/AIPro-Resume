// Code generated by ent, DO NOT EDIT.

package sociallink

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldLTE(FieldID, id))
}

// PersonalInfoID applies equality check predicate on the "personal_info_id" field. It's identical to PersonalInfoIDEQ.
func PersonalInfoID(v uuid.UUID) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEQ(FieldPersonalInfoID, v))
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEQ(FieldPlatform, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEQ(FieldURL, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEQ(FieldDisplayName, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEQ(FieldIsActive, v))
}

// SortOrder applies equality check predicate on the "sort_order" field. It's identical to SortOrderEQ.
func SortOrder(v int) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEQ(FieldSortOrder, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEQ(FieldCreatedAt, v))
}

// PersonalInfoIDEQ applies the EQ predicate on the "personal_info_id" field.
func PersonalInfoIDEQ(v uuid.UUID) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEQ(FieldPersonalInfoID, v))
}

// PersonalInfoIDNEQ applies the NEQ predicate on the "personal_info_id" field.
func PersonalInfoIDNEQ(v uuid.UUID) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldNEQ(FieldPersonalInfoID, v))
}

// PersonalInfoIDIn applies the In predicate on the "personal_info_id" field.
func PersonalInfoIDIn(vs ...uuid.UUID) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldIn(FieldPersonalInfoID, vs...))
}

// PersonalInfoIDNotIn applies the NotIn predicate on the "personal_info_id" field.
func PersonalInfoIDNotIn(vs ...uuid.UUID) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldNotIn(FieldPersonalInfoID, vs...))
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEQ(FieldPlatform, v))
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldNEQ(FieldPlatform, v))
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldIn(FieldPlatform, vs...))
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldNotIn(FieldPlatform, vs...))
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldGT(FieldPlatform, v))
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldGTE(FieldPlatform, v))
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldLT(FieldPlatform, v))
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldLTE(FieldPlatform, v))
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldContains(FieldPlatform, v))
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldHasPrefix(FieldPlatform, v))
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldHasSuffix(FieldPlatform, v))
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEqualFold(FieldPlatform, v))
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldContainsFold(FieldPlatform, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldContainsFold(FieldURL, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameIsNil applies the IsNil predicate on the "display_name" field.
func DisplayNameIsNil() predicate.SocialLink {
	return predicate.SocialLink(sql.FieldIsNull(FieldDisplayName))
}

// DisplayNameNotNil applies the NotNil predicate on the "display_name" field.
func DisplayNameNotNil() predicate.SocialLink {
	return predicate.SocialLink(sql.FieldNotNull(FieldDisplayName))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldContainsFold(FieldDisplayName, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldNEQ(FieldIsActive, v))
}

// SortOrderEQ applies the EQ predicate on the "sort_order" field.
func SortOrderEQ(v int) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEQ(FieldSortOrder, v))
}

// SortOrderNEQ applies the NEQ predicate on the "sort_order" field.
func SortOrderNEQ(v int) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldNEQ(FieldSortOrder, v))
}

// SortOrderIn applies the In predicate on the "sort_order" field.
func SortOrderIn(vs ...int) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldIn(FieldSortOrder, vs...))
}

// SortOrderNotIn applies the NotIn predicate on the "sort_order" field.
func SortOrderNotIn(vs ...int) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldNotIn(FieldSortOrder, vs...))
}

// SortOrderGT applies the GT predicate on the "sort_order" field.
func SortOrderGT(v int) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldGT(FieldSortOrder, v))
}

// SortOrderGTE applies the GTE predicate on the "sort_order" field.
func SortOrderGTE(v int) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldGTE(FieldSortOrder, v))
}

// SortOrderLT applies the LT predicate on the "sort_order" field.
func SortOrderLT(v int) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldLT(FieldSortOrder, v))
}

// SortOrderLTE applies the LTE predicate on the "sort_order" field.
func SortOrderLTE(v int) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldLTE(FieldSortOrder, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SocialLink {
	return predicate.SocialLink(sql.FieldLTE(FieldCreatedAt, v))
}

// HasPersonalInfo applies the HasEdge predicate on the "personal_info" edge.
func HasPersonalInfo() predicate.SocialLink {
	return predicate.SocialLink(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PersonalInfoTable, PersonalInfoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPersonalInfoWith applies the HasEdge predicate on the "personal_info" edge with a given conditions (other predicates).
func HasPersonalInfoWith(preds ...predicate.PersonalInfo) predicate.SocialLink {
	return predicate.SocialLink(func(s *sql.Selector) {
		step := newPersonalInfoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SocialLink) predicate.SocialLink {
	return predicate.SocialLink(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SocialLink) predicate.SocialLink {
	return predicate.SocialLink(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SocialLink) predicate.SocialLink {
	return predicate.SocialLink(sql.NotPredicates(p))
}
