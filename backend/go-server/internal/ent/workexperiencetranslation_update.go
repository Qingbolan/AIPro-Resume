// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/workexperience"
	"silan-backend/internal/ent/workexperiencetranslation"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkExperienceTranslationUpdate is the builder for updating WorkExperienceTranslation entities.
type WorkExperienceTranslationUpdate struct {
	config
	hooks    []Hook
	mutation *WorkExperienceTranslationMutation
}

// Where appends a list predicates to the WorkExperienceTranslationUpdate builder.
func (wetu *WorkExperienceTranslationUpdate) Where(ps ...predicate.WorkExperienceTranslation) *WorkExperienceTranslationUpdate {
	wetu.mutation.Where(ps...)
	return wetu
}

// SetWorkExperienceID sets the "work_experience_id" field.
func (wetu *WorkExperienceTranslationUpdate) SetWorkExperienceID(u uuid.UUID) *WorkExperienceTranslationUpdate {
	wetu.mutation.SetWorkExperienceID(u)
	return wetu
}

// SetNillableWorkExperienceID sets the "work_experience_id" field if the given value is not nil.
func (wetu *WorkExperienceTranslationUpdate) SetNillableWorkExperienceID(u *uuid.UUID) *WorkExperienceTranslationUpdate {
	if u != nil {
		wetu.SetWorkExperienceID(*u)
	}
	return wetu
}

// SetLanguageCode sets the "language_code" field.
func (wetu *WorkExperienceTranslationUpdate) SetLanguageCode(s string) *WorkExperienceTranslationUpdate {
	wetu.mutation.SetLanguageCode(s)
	return wetu
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (wetu *WorkExperienceTranslationUpdate) SetNillableLanguageCode(s *string) *WorkExperienceTranslationUpdate {
	if s != nil {
		wetu.SetLanguageCode(*s)
	}
	return wetu
}

// SetCompany sets the "company" field.
func (wetu *WorkExperienceTranslationUpdate) SetCompany(s string) *WorkExperienceTranslationUpdate {
	wetu.mutation.SetCompany(s)
	return wetu
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (wetu *WorkExperienceTranslationUpdate) SetNillableCompany(s *string) *WorkExperienceTranslationUpdate {
	if s != nil {
		wetu.SetCompany(*s)
	}
	return wetu
}

// ClearCompany clears the value of the "company" field.
func (wetu *WorkExperienceTranslationUpdate) ClearCompany() *WorkExperienceTranslationUpdate {
	wetu.mutation.ClearCompany()
	return wetu
}

// SetPosition sets the "position" field.
func (wetu *WorkExperienceTranslationUpdate) SetPosition(s string) *WorkExperienceTranslationUpdate {
	wetu.mutation.SetPosition(s)
	return wetu
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (wetu *WorkExperienceTranslationUpdate) SetNillablePosition(s *string) *WorkExperienceTranslationUpdate {
	if s != nil {
		wetu.SetPosition(*s)
	}
	return wetu
}

// ClearPosition clears the value of the "position" field.
func (wetu *WorkExperienceTranslationUpdate) ClearPosition() *WorkExperienceTranslationUpdate {
	wetu.mutation.ClearPosition()
	return wetu
}

// SetLocation sets the "location" field.
func (wetu *WorkExperienceTranslationUpdate) SetLocation(s string) *WorkExperienceTranslationUpdate {
	wetu.mutation.SetLocation(s)
	return wetu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (wetu *WorkExperienceTranslationUpdate) SetNillableLocation(s *string) *WorkExperienceTranslationUpdate {
	if s != nil {
		wetu.SetLocation(*s)
	}
	return wetu
}

// ClearLocation clears the value of the "location" field.
func (wetu *WorkExperienceTranslationUpdate) ClearLocation() *WorkExperienceTranslationUpdate {
	wetu.mutation.ClearLocation()
	return wetu
}

// SetWorkExperience sets the "work_experience" edge to the WorkExperience entity.
func (wetu *WorkExperienceTranslationUpdate) SetWorkExperience(w *WorkExperience) *WorkExperienceTranslationUpdate {
	return wetu.SetWorkExperienceID(w.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (wetu *WorkExperienceTranslationUpdate) SetLanguageID(id string) *WorkExperienceTranslationUpdate {
	wetu.mutation.SetLanguageID(id)
	return wetu
}

// SetLanguage sets the "language" edge to the Language entity.
func (wetu *WorkExperienceTranslationUpdate) SetLanguage(l *Language) *WorkExperienceTranslationUpdate {
	return wetu.SetLanguageID(l.ID)
}

// Mutation returns the WorkExperienceTranslationMutation object of the builder.
func (wetu *WorkExperienceTranslationUpdate) Mutation() *WorkExperienceTranslationMutation {
	return wetu.mutation
}

// ClearWorkExperience clears the "work_experience" edge to the WorkExperience entity.
func (wetu *WorkExperienceTranslationUpdate) ClearWorkExperience() *WorkExperienceTranslationUpdate {
	wetu.mutation.ClearWorkExperience()
	return wetu
}

// ClearLanguage clears the "language" edge to the Language entity.
func (wetu *WorkExperienceTranslationUpdate) ClearLanguage() *WorkExperienceTranslationUpdate {
	wetu.mutation.ClearLanguage()
	return wetu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wetu *WorkExperienceTranslationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wetu.sqlSave, wetu.mutation, wetu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wetu *WorkExperienceTranslationUpdate) SaveX(ctx context.Context) int {
	affected, err := wetu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wetu *WorkExperienceTranslationUpdate) Exec(ctx context.Context) error {
	_, err := wetu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wetu *WorkExperienceTranslationUpdate) ExecX(ctx context.Context) {
	if err := wetu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wetu *WorkExperienceTranslationUpdate) check() error {
	if v, ok := wetu.mutation.LanguageCode(); ok {
		if err := workexperiencetranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "WorkExperienceTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := wetu.mutation.Company(); ok {
		if err := workexperiencetranslation.CompanyValidator(v); err != nil {
			return &ValidationError{Name: "company", err: fmt.Errorf(`ent: validator failed for field "WorkExperienceTranslation.company": %w`, err)}
		}
	}
	if v, ok := wetu.mutation.Position(); ok {
		if err := workexperiencetranslation.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "WorkExperienceTranslation.position": %w`, err)}
		}
	}
	if v, ok := wetu.mutation.Location(); ok {
		if err := workexperiencetranslation.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "WorkExperienceTranslation.location": %w`, err)}
		}
	}
	if wetu.mutation.WorkExperienceCleared() && len(wetu.mutation.WorkExperienceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkExperienceTranslation.work_experience"`)
	}
	if wetu.mutation.LanguageCleared() && len(wetu.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkExperienceTranslation.language"`)
	}
	return nil
}

func (wetu *WorkExperienceTranslationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wetu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workexperiencetranslation.Table, workexperiencetranslation.Columns, sqlgraph.NewFieldSpec(workexperiencetranslation.FieldID, field.TypeUUID))
	if ps := wetu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wetu.mutation.Company(); ok {
		_spec.SetField(workexperiencetranslation.FieldCompany, field.TypeString, value)
	}
	if wetu.mutation.CompanyCleared() {
		_spec.ClearField(workexperiencetranslation.FieldCompany, field.TypeString)
	}
	if value, ok := wetu.mutation.Position(); ok {
		_spec.SetField(workexperiencetranslation.FieldPosition, field.TypeString, value)
	}
	if wetu.mutation.PositionCleared() {
		_spec.ClearField(workexperiencetranslation.FieldPosition, field.TypeString)
	}
	if value, ok := wetu.mutation.Location(); ok {
		_spec.SetField(workexperiencetranslation.FieldLocation, field.TypeString, value)
	}
	if wetu.mutation.LocationCleared() {
		_spec.ClearField(workexperiencetranslation.FieldLocation, field.TypeString)
	}
	if wetu.mutation.WorkExperienceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workexperiencetranslation.WorkExperienceTable,
			Columns: []string{workexperiencetranslation.WorkExperienceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperience.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wetu.mutation.WorkExperienceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workexperiencetranslation.WorkExperienceTable,
			Columns: []string{workexperiencetranslation.WorkExperienceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperience.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wetu.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workexperiencetranslation.LanguageTable,
			Columns: []string{workexperiencetranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wetu.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workexperiencetranslation.LanguageTable,
			Columns: []string{workexperiencetranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wetu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workexperiencetranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wetu.mutation.done = true
	return n, nil
}

// WorkExperienceTranslationUpdateOne is the builder for updating a single WorkExperienceTranslation entity.
type WorkExperienceTranslationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkExperienceTranslationMutation
}

// SetWorkExperienceID sets the "work_experience_id" field.
func (wetuo *WorkExperienceTranslationUpdateOne) SetWorkExperienceID(u uuid.UUID) *WorkExperienceTranslationUpdateOne {
	wetuo.mutation.SetWorkExperienceID(u)
	return wetuo
}

// SetNillableWorkExperienceID sets the "work_experience_id" field if the given value is not nil.
func (wetuo *WorkExperienceTranslationUpdateOne) SetNillableWorkExperienceID(u *uuid.UUID) *WorkExperienceTranslationUpdateOne {
	if u != nil {
		wetuo.SetWorkExperienceID(*u)
	}
	return wetuo
}

// SetLanguageCode sets the "language_code" field.
func (wetuo *WorkExperienceTranslationUpdateOne) SetLanguageCode(s string) *WorkExperienceTranslationUpdateOne {
	wetuo.mutation.SetLanguageCode(s)
	return wetuo
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (wetuo *WorkExperienceTranslationUpdateOne) SetNillableLanguageCode(s *string) *WorkExperienceTranslationUpdateOne {
	if s != nil {
		wetuo.SetLanguageCode(*s)
	}
	return wetuo
}

// SetCompany sets the "company" field.
func (wetuo *WorkExperienceTranslationUpdateOne) SetCompany(s string) *WorkExperienceTranslationUpdateOne {
	wetuo.mutation.SetCompany(s)
	return wetuo
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (wetuo *WorkExperienceTranslationUpdateOne) SetNillableCompany(s *string) *WorkExperienceTranslationUpdateOne {
	if s != nil {
		wetuo.SetCompany(*s)
	}
	return wetuo
}

// ClearCompany clears the value of the "company" field.
func (wetuo *WorkExperienceTranslationUpdateOne) ClearCompany() *WorkExperienceTranslationUpdateOne {
	wetuo.mutation.ClearCompany()
	return wetuo
}

// SetPosition sets the "position" field.
func (wetuo *WorkExperienceTranslationUpdateOne) SetPosition(s string) *WorkExperienceTranslationUpdateOne {
	wetuo.mutation.SetPosition(s)
	return wetuo
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (wetuo *WorkExperienceTranslationUpdateOne) SetNillablePosition(s *string) *WorkExperienceTranslationUpdateOne {
	if s != nil {
		wetuo.SetPosition(*s)
	}
	return wetuo
}

// ClearPosition clears the value of the "position" field.
func (wetuo *WorkExperienceTranslationUpdateOne) ClearPosition() *WorkExperienceTranslationUpdateOne {
	wetuo.mutation.ClearPosition()
	return wetuo
}

// SetLocation sets the "location" field.
func (wetuo *WorkExperienceTranslationUpdateOne) SetLocation(s string) *WorkExperienceTranslationUpdateOne {
	wetuo.mutation.SetLocation(s)
	return wetuo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (wetuo *WorkExperienceTranslationUpdateOne) SetNillableLocation(s *string) *WorkExperienceTranslationUpdateOne {
	if s != nil {
		wetuo.SetLocation(*s)
	}
	return wetuo
}

// ClearLocation clears the value of the "location" field.
func (wetuo *WorkExperienceTranslationUpdateOne) ClearLocation() *WorkExperienceTranslationUpdateOne {
	wetuo.mutation.ClearLocation()
	return wetuo
}

// SetWorkExperience sets the "work_experience" edge to the WorkExperience entity.
func (wetuo *WorkExperienceTranslationUpdateOne) SetWorkExperience(w *WorkExperience) *WorkExperienceTranslationUpdateOne {
	return wetuo.SetWorkExperienceID(w.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (wetuo *WorkExperienceTranslationUpdateOne) SetLanguageID(id string) *WorkExperienceTranslationUpdateOne {
	wetuo.mutation.SetLanguageID(id)
	return wetuo
}

// SetLanguage sets the "language" edge to the Language entity.
func (wetuo *WorkExperienceTranslationUpdateOne) SetLanguage(l *Language) *WorkExperienceTranslationUpdateOne {
	return wetuo.SetLanguageID(l.ID)
}

// Mutation returns the WorkExperienceTranslationMutation object of the builder.
func (wetuo *WorkExperienceTranslationUpdateOne) Mutation() *WorkExperienceTranslationMutation {
	return wetuo.mutation
}

// ClearWorkExperience clears the "work_experience" edge to the WorkExperience entity.
func (wetuo *WorkExperienceTranslationUpdateOne) ClearWorkExperience() *WorkExperienceTranslationUpdateOne {
	wetuo.mutation.ClearWorkExperience()
	return wetuo
}

// ClearLanguage clears the "language" edge to the Language entity.
func (wetuo *WorkExperienceTranslationUpdateOne) ClearLanguage() *WorkExperienceTranslationUpdateOne {
	wetuo.mutation.ClearLanguage()
	return wetuo
}

// Where appends a list predicates to the WorkExperienceTranslationUpdate builder.
func (wetuo *WorkExperienceTranslationUpdateOne) Where(ps ...predicate.WorkExperienceTranslation) *WorkExperienceTranslationUpdateOne {
	wetuo.mutation.Where(ps...)
	return wetuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wetuo *WorkExperienceTranslationUpdateOne) Select(field string, fields ...string) *WorkExperienceTranslationUpdateOne {
	wetuo.fields = append([]string{field}, fields...)
	return wetuo
}

// Save executes the query and returns the updated WorkExperienceTranslation entity.
func (wetuo *WorkExperienceTranslationUpdateOne) Save(ctx context.Context) (*WorkExperienceTranslation, error) {
	return withHooks(ctx, wetuo.sqlSave, wetuo.mutation, wetuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wetuo *WorkExperienceTranslationUpdateOne) SaveX(ctx context.Context) *WorkExperienceTranslation {
	node, err := wetuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wetuo *WorkExperienceTranslationUpdateOne) Exec(ctx context.Context) error {
	_, err := wetuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wetuo *WorkExperienceTranslationUpdateOne) ExecX(ctx context.Context) {
	if err := wetuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wetuo *WorkExperienceTranslationUpdateOne) check() error {
	if v, ok := wetuo.mutation.LanguageCode(); ok {
		if err := workexperiencetranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "WorkExperienceTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := wetuo.mutation.Company(); ok {
		if err := workexperiencetranslation.CompanyValidator(v); err != nil {
			return &ValidationError{Name: "company", err: fmt.Errorf(`ent: validator failed for field "WorkExperienceTranslation.company": %w`, err)}
		}
	}
	if v, ok := wetuo.mutation.Position(); ok {
		if err := workexperiencetranslation.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "WorkExperienceTranslation.position": %w`, err)}
		}
	}
	if v, ok := wetuo.mutation.Location(); ok {
		if err := workexperiencetranslation.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "WorkExperienceTranslation.location": %w`, err)}
		}
	}
	if wetuo.mutation.WorkExperienceCleared() && len(wetuo.mutation.WorkExperienceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkExperienceTranslation.work_experience"`)
	}
	if wetuo.mutation.LanguageCleared() && len(wetuo.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkExperienceTranslation.language"`)
	}
	return nil
}

func (wetuo *WorkExperienceTranslationUpdateOne) sqlSave(ctx context.Context) (_node *WorkExperienceTranslation, err error) {
	if err := wetuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workexperiencetranslation.Table, workexperiencetranslation.Columns, sqlgraph.NewFieldSpec(workexperiencetranslation.FieldID, field.TypeUUID))
	id, ok := wetuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkExperienceTranslation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wetuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workexperiencetranslation.FieldID)
		for _, f := range fields {
			if !workexperiencetranslation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workexperiencetranslation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wetuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wetuo.mutation.Company(); ok {
		_spec.SetField(workexperiencetranslation.FieldCompany, field.TypeString, value)
	}
	if wetuo.mutation.CompanyCleared() {
		_spec.ClearField(workexperiencetranslation.FieldCompany, field.TypeString)
	}
	if value, ok := wetuo.mutation.Position(); ok {
		_spec.SetField(workexperiencetranslation.FieldPosition, field.TypeString, value)
	}
	if wetuo.mutation.PositionCleared() {
		_spec.ClearField(workexperiencetranslation.FieldPosition, field.TypeString)
	}
	if value, ok := wetuo.mutation.Location(); ok {
		_spec.SetField(workexperiencetranslation.FieldLocation, field.TypeString, value)
	}
	if wetuo.mutation.LocationCleared() {
		_spec.ClearField(workexperiencetranslation.FieldLocation, field.TypeString)
	}
	if wetuo.mutation.WorkExperienceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workexperiencetranslation.WorkExperienceTable,
			Columns: []string{workexperiencetranslation.WorkExperienceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperience.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wetuo.mutation.WorkExperienceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workexperiencetranslation.WorkExperienceTable,
			Columns: []string{workexperiencetranslation.WorkExperienceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperience.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wetuo.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workexperiencetranslation.LanguageTable,
			Columns: []string{workexperiencetranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wetuo.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workexperiencetranslation.LanguageTable,
			Columns: []string{workexperiencetranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkExperienceTranslation{config: wetuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wetuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workexperiencetranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wetuo.mutation.done = true
	return _node, nil
}
