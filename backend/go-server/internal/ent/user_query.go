// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"silan-backend/internal/ent/award"
	"silan-backend/internal/ent/blogpost"
	"silan-backend/internal/ent/education"
	"silan-backend/internal/ent/idea"
	"silan-backend/internal/ent/personalinfo"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/publication"
	"silan-backend/internal/ent/recentupdate"
	"silan-backend/internal/ent/researchproject"
	"silan-backend/internal/ent/user"
	"silan-backend/internal/ent/workexperience"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserQuery is the builder for querying User entities.
type UserQuery struct {
	config
	ctx                  *QueryContext
	order                []user.OrderOption
	inters               []Interceptor
	predicates           []predicate.User
	withPersonalInfos    *PersonalInfoQuery
	withEducations       *EducationQuery
	withWorkExperiences  *WorkExperienceQuery
	withProjects         *ProjectQuery
	withBlogPosts        *BlogPostQuery
	withIdeas            *IdeaQuery
	withResearchProjects *ResearchProjectQuery
	withPublications     *PublicationQuery
	withAwards           *AwardQuery
	withRecentUpdates    *RecentUpdateQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserQuery builder.
func (uq *UserQuery) Where(ps ...predicate.User) *UserQuery {
	uq.predicates = append(uq.predicates, ps...)
	return uq
}

// Limit the number of records to be returned by this query.
func (uq *UserQuery) Limit(limit int) *UserQuery {
	uq.ctx.Limit = &limit
	return uq
}

// Offset to start from.
func (uq *UserQuery) Offset(offset int) *UserQuery {
	uq.ctx.Offset = &offset
	return uq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uq *UserQuery) Unique(unique bool) *UserQuery {
	uq.ctx.Unique = &unique
	return uq
}

// Order specifies how the records should be ordered.
func (uq *UserQuery) Order(o ...user.OrderOption) *UserQuery {
	uq.order = append(uq.order, o...)
	return uq
}

// QueryPersonalInfos chains the current query on the "personal_infos" edge.
func (uq *UserQuery) QueryPersonalInfos() *PersonalInfoQuery {
	query := (&PersonalInfoClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(personalinfo.Table, personalinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PersonalInfosTable, user.PersonalInfosColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEducations chains the current query on the "educations" edge.
func (uq *UserQuery) QueryEducations() *EducationQuery {
	query := (&EducationClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(education.Table, education.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.EducationsTable, user.EducationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkExperiences chains the current query on the "work_experiences" edge.
func (uq *UserQuery) QueryWorkExperiences() *WorkExperienceQuery {
	query := (&WorkExperienceClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(workexperience.Table, workexperience.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.WorkExperiencesTable, user.WorkExperiencesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProjects chains the current query on the "projects" edge.
func (uq *UserQuery) QueryProjects() *ProjectQuery {
	query := (&ProjectClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ProjectsTable, user.ProjectsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBlogPosts chains the current query on the "blog_posts" edge.
func (uq *UserQuery) QueryBlogPosts() *BlogPostQuery {
	query := (&BlogPostClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(blogpost.Table, blogpost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.BlogPostsTable, user.BlogPostsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIdeas chains the current query on the "ideas" edge.
func (uq *UserQuery) QueryIdeas() *IdeaQuery {
	query := (&IdeaClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(idea.Table, idea.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.IdeasTable, user.IdeasColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryResearchProjects chains the current query on the "research_projects" edge.
func (uq *UserQuery) QueryResearchProjects() *ResearchProjectQuery {
	query := (&ResearchProjectClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(researchproject.Table, researchproject.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ResearchProjectsTable, user.ResearchProjectsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPublications chains the current query on the "publications" edge.
func (uq *UserQuery) QueryPublications() *PublicationQuery {
	query := (&PublicationClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(publication.Table, publication.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PublicationsTable, user.PublicationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAwards chains the current query on the "awards" edge.
func (uq *UserQuery) QueryAwards() *AwardQuery {
	query := (&AwardClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(award.Table, award.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AwardsTable, user.AwardsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRecentUpdates chains the current query on the "recent_updates" edge.
func (uq *UserQuery) QueryRecentUpdates() *RecentUpdateQuery {
	query := (&RecentUpdateClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(recentupdate.Table, recentupdate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.RecentUpdatesTable, user.RecentUpdatesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first User entity from the query.
// Returns a *NotFoundError when no User was found.
func (uq *UserQuery) First(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(1).All(setContextOp(ctx, uq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{user.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uq *UserQuery) FirstX(ctx context.Context) *User {
	node, err := uq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first User ID from the query.
// Returns a *NotFoundError when no User ID was found.
func (uq *UserQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = uq.Limit(1).IDs(setContextOp(ctx, uq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{user.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uq *UserQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := uq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single User entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one User entity is found.
// Returns a *NotFoundError when no User entities are found.
func (uq *UserQuery) Only(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(2).All(setContextOp(ctx, uq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{user.Label}
	default:
		return nil, &NotSingularError{user.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uq *UserQuery) OnlyX(ctx context.Context) *User {
	node, err := uq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only User ID in the query.
// Returns a *NotSingularError when more than one User ID is found.
// Returns a *NotFoundError when no entities are found.
func (uq *UserQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = uq.Limit(2).IDs(setContextOp(ctx, uq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{user.Label}
	default:
		err = &NotSingularError{user.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uq *UserQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := uq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Users.
func (uq *UserQuery) All(ctx context.Context) ([]*User, error) {
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryAll)
	if err := uq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*User, *UserQuery]()
	return withInterceptors[[]*User](ctx, uq, qr, uq.inters)
}

// AllX is like All, but panics if an error occurs.
func (uq *UserQuery) AllX(ctx context.Context) []*User {
	nodes, err := uq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of User IDs.
func (uq *UserQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if uq.ctx.Unique == nil && uq.path != nil {
		uq.Unique(true)
	}
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryIDs)
	if err = uq.Select(user.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uq *UserQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := uq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uq *UserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryCount)
	if err := uq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, uq, querierCount[*UserQuery](), uq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (uq *UserQuery) CountX(ctx context.Context) int {
	count, err := uq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uq *UserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryExist)
	switch _, err := uq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (uq *UserQuery) ExistX(ctx context.Context) bool {
	exist, err := uq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uq *UserQuery) Clone() *UserQuery {
	if uq == nil {
		return nil
	}
	return &UserQuery{
		config:               uq.config,
		ctx:                  uq.ctx.Clone(),
		order:                append([]user.OrderOption{}, uq.order...),
		inters:               append([]Interceptor{}, uq.inters...),
		predicates:           append([]predicate.User{}, uq.predicates...),
		withPersonalInfos:    uq.withPersonalInfos.Clone(),
		withEducations:       uq.withEducations.Clone(),
		withWorkExperiences:  uq.withWorkExperiences.Clone(),
		withProjects:         uq.withProjects.Clone(),
		withBlogPosts:        uq.withBlogPosts.Clone(),
		withIdeas:            uq.withIdeas.Clone(),
		withResearchProjects: uq.withResearchProjects.Clone(),
		withPublications:     uq.withPublications.Clone(),
		withAwards:           uq.withAwards.Clone(),
		withRecentUpdates:    uq.withRecentUpdates.Clone(),
		// clone intermediate query.
		sql:  uq.sql.Clone(),
		path: uq.path,
	}
}

// WithPersonalInfos tells the query-builder to eager-load the nodes that are connected to
// the "personal_infos" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithPersonalInfos(opts ...func(*PersonalInfoQuery)) *UserQuery {
	query := (&PersonalInfoClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withPersonalInfos = query
	return uq
}

// WithEducations tells the query-builder to eager-load the nodes that are connected to
// the "educations" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithEducations(opts ...func(*EducationQuery)) *UserQuery {
	query := (&EducationClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withEducations = query
	return uq
}

// WithWorkExperiences tells the query-builder to eager-load the nodes that are connected to
// the "work_experiences" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithWorkExperiences(opts ...func(*WorkExperienceQuery)) *UserQuery {
	query := (&WorkExperienceClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withWorkExperiences = query
	return uq
}

// WithProjects tells the query-builder to eager-load the nodes that are connected to
// the "projects" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithProjects(opts ...func(*ProjectQuery)) *UserQuery {
	query := (&ProjectClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withProjects = query
	return uq
}

// WithBlogPosts tells the query-builder to eager-load the nodes that are connected to
// the "blog_posts" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithBlogPosts(opts ...func(*BlogPostQuery)) *UserQuery {
	query := (&BlogPostClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withBlogPosts = query
	return uq
}

// WithIdeas tells the query-builder to eager-load the nodes that are connected to
// the "ideas" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithIdeas(opts ...func(*IdeaQuery)) *UserQuery {
	query := (&IdeaClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withIdeas = query
	return uq
}

// WithResearchProjects tells the query-builder to eager-load the nodes that are connected to
// the "research_projects" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithResearchProjects(opts ...func(*ResearchProjectQuery)) *UserQuery {
	query := (&ResearchProjectClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withResearchProjects = query
	return uq
}

// WithPublications tells the query-builder to eager-load the nodes that are connected to
// the "publications" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithPublications(opts ...func(*PublicationQuery)) *UserQuery {
	query := (&PublicationClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withPublications = query
	return uq
}

// WithAwards tells the query-builder to eager-load the nodes that are connected to
// the "awards" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithAwards(opts ...func(*AwardQuery)) *UserQuery {
	query := (&AwardClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withAwards = query
	return uq
}

// WithRecentUpdates tells the query-builder to eager-load the nodes that are connected to
// the "recent_updates" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithRecentUpdates(opts ...func(*RecentUpdateQuery)) *UserQuery {
	query := (&RecentUpdateClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withRecentUpdates = query
	return uq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Username string `json:"username,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.User.Query().
//		GroupBy(user.FieldUsername).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (uq *UserQuery) GroupBy(field string, fields ...string) *UserGroupBy {
	uq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserGroupBy{build: uq}
	grbuild.flds = &uq.ctx.Fields
	grbuild.label = user.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Username string `json:"username,omitempty"`
//	}
//
//	client.User.Query().
//		Select(user.FieldUsername).
//		Scan(ctx, &v)
func (uq *UserQuery) Select(fields ...string) *UserSelect {
	uq.ctx.Fields = append(uq.ctx.Fields, fields...)
	sbuild := &UserSelect{UserQuery: uq}
	sbuild.label = user.Label
	sbuild.flds, sbuild.scan = &uq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserSelect configured with the given aggregations.
func (uq *UserQuery) Aggregate(fns ...AggregateFunc) *UserSelect {
	return uq.Select().Aggregate(fns...)
}

func (uq *UserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range uq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, uq); err != nil {
				return err
			}
		}
	}
	for _, f := range uq.ctx.Fields {
		if !user.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if uq.path != nil {
		prev, err := uq.path(ctx)
		if err != nil {
			return err
		}
		uq.sql = prev
	}
	return nil
}

func (uq *UserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*User, error) {
	var (
		nodes       = []*User{}
		_spec       = uq.querySpec()
		loadedTypes = [10]bool{
			uq.withPersonalInfos != nil,
			uq.withEducations != nil,
			uq.withWorkExperiences != nil,
			uq.withProjects != nil,
			uq.withBlogPosts != nil,
			uq.withIdeas != nil,
			uq.withResearchProjects != nil,
			uq.withPublications != nil,
			uq.withAwards != nil,
			uq.withRecentUpdates != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*User).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &User{config: uq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := uq.withPersonalInfos; query != nil {
		if err := uq.loadPersonalInfos(ctx, query, nodes,
			func(n *User) { n.Edges.PersonalInfos = []*PersonalInfo{} },
			func(n *User, e *PersonalInfo) { n.Edges.PersonalInfos = append(n.Edges.PersonalInfos, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withEducations; query != nil {
		if err := uq.loadEducations(ctx, query, nodes,
			func(n *User) { n.Edges.Educations = []*Education{} },
			func(n *User, e *Education) { n.Edges.Educations = append(n.Edges.Educations, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withWorkExperiences; query != nil {
		if err := uq.loadWorkExperiences(ctx, query, nodes,
			func(n *User) { n.Edges.WorkExperiences = []*WorkExperience{} },
			func(n *User, e *WorkExperience) { n.Edges.WorkExperiences = append(n.Edges.WorkExperiences, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withProjects; query != nil {
		if err := uq.loadProjects(ctx, query, nodes,
			func(n *User) { n.Edges.Projects = []*Project{} },
			func(n *User, e *Project) { n.Edges.Projects = append(n.Edges.Projects, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withBlogPosts; query != nil {
		if err := uq.loadBlogPosts(ctx, query, nodes,
			func(n *User) { n.Edges.BlogPosts = []*BlogPost{} },
			func(n *User, e *BlogPost) { n.Edges.BlogPosts = append(n.Edges.BlogPosts, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withIdeas; query != nil {
		if err := uq.loadIdeas(ctx, query, nodes,
			func(n *User) { n.Edges.Ideas = []*Idea{} },
			func(n *User, e *Idea) { n.Edges.Ideas = append(n.Edges.Ideas, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withResearchProjects; query != nil {
		if err := uq.loadResearchProjects(ctx, query, nodes,
			func(n *User) { n.Edges.ResearchProjects = []*ResearchProject{} },
			func(n *User, e *ResearchProject) { n.Edges.ResearchProjects = append(n.Edges.ResearchProjects, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withPublications; query != nil {
		if err := uq.loadPublications(ctx, query, nodes,
			func(n *User) { n.Edges.Publications = []*Publication{} },
			func(n *User, e *Publication) { n.Edges.Publications = append(n.Edges.Publications, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withAwards; query != nil {
		if err := uq.loadAwards(ctx, query, nodes,
			func(n *User) { n.Edges.Awards = []*Award{} },
			func(n *User, e *Award) { n.Edges.Awards = append(n.Edges.Awards, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withRecentUpdates; query != nil {
		if err := uq.loadRecentUpdates(ctx, query, nodes,
			func(n *User) { n.Edges.RecentUpdates = []*RecentUpdate{} },
			func(n *User, e *RecentUpdate) { n.Edges.RecentUpdates = append(n.Edges.RecentUpdates, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (uq *UserQuery) loadPersonalInfos(ctx context.Context, query *PersonalInfoQuery, nodes []*User, init func(*User), assign func(*User, *PersonalInfo)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(personalinfo.FieldUserID)
	}
	query.Where(predicate.PersonalInfo(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.PersonalInfosColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadEducations(ctx context.Context, query *EducationQuery, nodes []*User, init func(*User), assign func(*User, *Education)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(education.FieldUserID)
	}
	query.Where(predicate.Education(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.EducationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadWorkExperiences(ctx context.Context, query *WorkExperienceQuery, nodes []*User, init func(*User), assign func(*User, *WorkExperience)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(workexperience.FieldUserID)
	}
	query.Where(predicate.WorkExperience(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.WorkExperiencesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadProjects(ctx context.Context, query *ProjectQuery, nodes []*User, init func(*User), assign func(*User, *Project)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(project.FieldUserID)
	}
	query.Where(predicate.Project(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.ProjectsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadBlogPosts(ctx context.Context, query *BlogPostQuery, nodes []*User, init func(*User), assign func(*User, *BlogPost)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(blogpost.FieldUserID)
	}
	query.Where(predicate.BlogPost(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.BlogPostsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadIdeas(ctx context.Context, query *IdeaQuery, nodes []*User, init func(*User), assign func(*User, *Idea)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(idea.FieldUserID)
	}
	query.Where(predicate.Idea(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.IdeasColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadResearchProjects(ctx context.Context, query *ResearchProjectQuery, nodes []*User, init func(*User), assign func(*User, *ResearchProject)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(researchproject.FieldUserID)
	}
	query.Where(predicate.ResearchProject(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.ResearchProjectsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadPublications(ctx context.Context, query *PublicationQuery, nodes []*User, init func(*User), assign func(*User, *Publication)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(publication.FieldUserID)
	}
	query.Where(predicate.Publication(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.PublicationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadAwards(ctx context.Context, query *AwardQuery, nodes []*User, init func(*User), assign func(*User, *Award)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(award.FieldUserID)
	}
	query.Where(predicate.Award(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.AwardsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadRecentUpdates(ctx context.Context, query *RecentUpdateQuery, nodes []*User, init func(*User), assign func(*User, *RecentUpdate)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(recentupdate.FieldUserID)
	}
	query.Where(predicate.RecentUpdate(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.RecentUpdatesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (uq *UserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uq.querySpec()
	_spec.Node.Columns = uq.ctx.Fields
	if len(uq.ctx.Fields) > 0 {
		_spec.Unique = uq.ctx.Unique != nil && *uq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, uq.driver, _spec)
}

func (uq *UserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	_spec.From = uq.sql
	if unique := uq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if uq.path != nil {
		_spec.Unique = true
	}
	if fields := uq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for i := range fields {
			if fields[i] != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := uq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uq *UserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uq.driver.Dialect())
	t1 := builder.Table(user.Table)
	columns := uq.ctx.Fields
	if len(columns) == 0 {
		columns = user.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uq.sql != nil {
		selector = uq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uq.ctx.Unique != nil && *uq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range uq.predicates {
		p(selector)
	}
	for _, p := range uq.order {
		p(selector)
	}
	if offset := uq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserGroupBy is the group-by builder for User entities.
type UserGroupBy struct {
	selector
	build *UserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ugb *UserGroupBy) Aggregate(fns ...AggregateFunc) *UserGroupBy {
	ugb.fns = append(ugb.fns, fns...)
	return ugb
}

// Scan applies the selector query and scans the result into the given value.
func (ugb *UserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ugb.build.ctx, ent.OpQueryGroupBy)
	if err := ugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuery, *UserGroupBy](ctx, ugb.build, ugb, ugb.build.inters, v)
}

func (ugb *UserGroupBy) sqlScan(ctx context.Context, root *UserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ugb.fns))
	for _, fn := range ugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ugb.flds)+len(ugb.fns))
		for _, f := range *ugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserSelect is the builder for selecting fields of User entities.
type UserSelect struct {
	*UserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (us *UserSelect) Aggregate(fns ...AggregateFunc) *UserSelect {
	us.fns = append(us.fns, fns...)
	return us
}

// Scan applies the selector query and scans the result into the given value.
func (us *UserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, us.ctx, ent.OpQuerySelect)
	if err := us.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuery, *UserSelect](ctx, us.UserQuery, us, us.inters, v)
}

func (us *UserSelect) sqlScan(ctx context.Context, root *UserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(us.fns))
	for _, fn := range us.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*us.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := us.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
