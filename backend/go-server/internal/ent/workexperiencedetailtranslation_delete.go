// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/workexperiencedetailtranslation"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkExperienceDetailTranslationDelete is the builder for deleting a WorkExperienceDetailTranslation entity.
type WorkExperienceDetailTranslationDelete struct {
	config
	hooks    []Hook
	mutation *WorkExperienceDetailTranslationMutation
}

// Where appends a list predicates to the WorkExperienceDetailTranslationDelete builder.
func (wedtd *WorkExperienceDetailTranslationDelete) Where(ps ...predicate.WorkExperienceDetailTranslation) *WorkExperienceDetailTranslationDelete {
	wedtd.mutation.Where(ps...)
	return wedtd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wedtd *WorkExperienceDetailTranslationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wedtd.sqlExec, wedtd.mutation, wedtd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wedtd *WorkExperienceDetailTranslationDelete) ExecX(ctx context.Context) int {
	n, err := wedtd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wedtd *WorkExperienceDetailTranslationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(workexperiencedetailtranslation.Table, sqlgraph.NewFieldSpec(workexperiencedetailtranslation.FieldID, field.TypeUUID))
	if ps := wedtd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wedtd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wedtd.mutation.done = true
	return affected, err
}

// WorkExperienceDetailTranslationDeleteOne is the builder for deleting a single WorkExperienceDetailTranslation entity.
type WorkExperienceDetailTranslationDeleteOne struct {
	wedtd *WorkExperienceDetailTranslationDelete
}

// Where appends a list predicates to the WorkExperienceDetailTranslationDelete builder.
func (wedtdo *WorkExperienceDetailTranslationDeleteOne) Where(ps ...predicate.WorkExperienceDetailTranslation) *WorkExperienceDetailTranslationDeleteOne {
	wedtdo.wedtd.mutation.Where(ps...)
	return wedtdo
}

// Exec executes the deletion query.
func (wedtdo *WorkExperienceDetailTranslationDeleteOne) Exec(ctx context.Context) error {
	n, err := wedtdo.wedtd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{workexperiencedetailtranslation.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wedtdo *WorkExperienceDetailTranslationDeleteOne) ExecX(ctx context.Context) {
	if err := wedtdo.Exec(ctx); err != nil {
		panic(err)
	}
}
