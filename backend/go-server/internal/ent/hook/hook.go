// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"
	"silan-backend/internal/ent"
)

// The AwardFunc type is an adapter to allow the use of ordinary
// function as Award mutator.
type AwardFunc func(context.Context, *ent.AwardMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AwardFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AwardMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AwardMutation", m)
}

// The AwardTranslationFunc type is an adapter to allow the use of ordinary
// function as AwardTranslation mutator.
type AwardTranslationFunc func(context.Context, *ent.AwardTranslationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AwardTranslationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AwardTranslationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AwardTranslationMutation", m)
}

// The BlogCategoryFunc type is an adapter to allow the use of ordinary
// function as BlogCategory mutator.
type BlogCategoryFunc func(context.Context, *ent.BlogCategoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlogCategoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlogCategoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlogCategoryMutation", m)
}

// The BlogCategoryTranslationFunc type is an adapter to allow the use of ordinary
// function as BlogCategoryTranslation mutator.
type BlogCategoryTranslationFunc func(context.Context, *ent.BlogCategoryTranslationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlogCategoryTranslationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlogCategoryTranslationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlogCategoryTranslationMutation", m)
}

// The BlogCommentFunc type is an adapter to allow the use of ordinary
// function as BlogComment mutator.
type BlogCommentFunc func(context.Context, *ent.BlogCommentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlogCommentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlogCommentMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlogCommentMutation", m)
}

// The BlogPostFunc type is an adapter to allow the use of ordinary
// function as BlogPost mutator.
type BlogPostFunc func(context.Context, *ent.BlogPostMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlogPostFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlogPostMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlogPostMutation", m)
}

// The BlogPostTagFunc type is an adapter to allow the use of ordinary
// function as BlogPostTag mutator.
type BlogPostTagFunc func(context.Context, *ent.BlogPostTagMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlogPostTagFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlogPostTagMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlogPostTagMutation", m)
}

// The BlogPostTranslationFunc type is an adapter to allow the use of ordinary
// function as BlogPostTranslation mutator.
type BlogPostTranslationFunc func(context.Context, *ent.BlogPostTranslationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlogPostTranslationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlogPostTranslationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlogPostTranslationMutation", m)
}

// The BlogSeriesFunc type is an adapter to allow the use of ordinary
// function as BlogSeries mutator.
type BlogSeriesFunc func(context.Context, *ent.BlogSeriesMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlogSeriesFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlogSeriesMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlogSeriesMutation", m)
}

// The BlogSeriesTranslationFunc type is an adapter to allow the use of ordinary
// function as BlogSeriesTranslation mutator.
type BlogSeriesTranslationFunc func(context.Context, *ent.BlogSeriesTranslationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlogSeriesTranslationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlogSeriesTranslationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlogSeriesTranslationMutation", m)
}

// The BlogTagFunc type is an adapter to allow the use of ordinary
// function as BlogTag mutator.
type BlogTagFunc func(context.Context, *ent.BlogTagMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlogTagFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlogTagMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlogTagMutation", m)
}

// The EducationFunc type is an adapter to allow the use of ordinary
// function as Education mutator.
type EducationFunc func(context.Context, *ent.EducationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EducationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.EducationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EducationMutation", m)
}

// The EducationDetailFunc type is an adapter to allow the use of ordinary
// function as EducationDetail mutator.
type EducationDetailFunc func(context.Context, *ent.EducationDetailMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EducationDetailFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.EducationDetailMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EducationDetailMutation", m)
}

// The EducationDetailTranslationFunc type is an adapter to allow the use of ordinary
// function as EducationDetailTranslation mutator.
type EducationDetailTranslationFunc func(context.Context, *ent.EducationDetailTranslationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EducationDetailTranslationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.EducationDetailTranslationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EducationDetailTranslationMutation", m)
}

// The EducationTranslationFunc type is an adapter to allow the use of ordinary
// function as EducationTranslation mutator.
type EducationTranslationFunc func(context.Context, *ent.EducationTranslationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EducationTranslationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.EducationTranslationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EducationTranslationMutation", m)
}

// The IdeaFunc type is an adapter to allow the use of ordinary
// function as Idea mutator.
type IdeaFunc func(context.Context, *ent.IdeaMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f IdeaFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.IdeaMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.IdeaMutation", m)
}

// The IdeaTranslationFunc type is an adapter to allow the use of ordinary
// function as IdeaTranslation mutator.
type IdeaTranslationFunc func(context.Context, *ent.IdeaTranslationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f IdeaTranslationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.IdeaTranslationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.IdeaTranslationMutation", m)
}

// The LanguageFunc type is an adapter to allow the use of ordinary
// function as Language mutator.
type LanguageFunc func(context.Context, *ent.LanguageMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f LanguageFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.LanguageMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.LanguageMutation", m)
}

// The PersonalInfoFunc type is an adapter to allow the use of ordinary
// function as PersonalInfo mutator.
type PersonalInfoFunc func(context.Context, *ent.PersonalInfoMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PersonalInfoFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PersonalInfoMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PersonalInfoMutation", m)
}

// The PersonalInfoTranslationFunc type is an adapter to allow the use of ordinary
// function as PersonalInfoTranslation mutator.
type PersonalInfoTranslationFunc func(context.Context, *ent.PersonalInfoTranslationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PersonalInfoTranslationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PersonalInfoTranslationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PersonalInfoTranslationMutation", m)
}

// The ProjectFunc type is an adapter to allow the use of ordinary
// function as Project mutator.
type ProjectFunc func(context.Context, *ent.ProjectMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProjectFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProjectMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProjectMutation", m)
}

// The ProjectDetailFunc type is an adapter to allow the use of ordinary
// function as ProjectDetail mutator.
type ProjectDetailFunc func(context.Context, *ent.ProjectDetailMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProjectDetailFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProjectDetailMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProjectDetailMutation", m)
}

// The ProjectDetailTranslationFunc type is an adapter to allow the use of ordinary
// function as ProjectDetailTranslation mutator.
type ProjectDetailTranslationFunc func(context.Context, *ent.ProjectDetailTranslationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProjectDetailTranslationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProjectDetailTranslationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProjectDetailTranslationMutation", m)
}

// The ProjectImageFunc type is an adapter to allow the use of ordinary
// function as ProjectImage mutator.
type ProjectImageFunc func(context.Context, *ent.ProjectImageMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProjectImageFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProjectImageMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProjectImageMutation", m)
}

// The ProjectImageTranslationFunc type is an adapter to allow the use of ordinary
// function as ProjectImageTranslation mutator.
type ProjectImageTranslationFunc func(context.Context, *ent.ProjectImageTranslationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProjectImageTranslationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProjectImageTranslationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProjectImageTranslationMutation", m)
}

// The ProjectRelationshipFunc type is an adapter to allow the use of ordinary
// function as ProjectRelationship mutator.
type ProjectRelationshipFunc func(context.Context, *ent.ProjectRelationshipMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProjectRelationshipFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProjectRelationshipMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProjectRelationshipMutation", m)
}

// The ProjectTechnologyFunc type is an adapter to allow the use of ordinary
// function as ProjectTechnology mutator.
type ProjectTechnologyFunc func(context.Context, *ent.ProjectTechnologyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProjectTechnologyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProjectTechnologyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProjectTechnologyMutation", m)
}

// The ProjectTranslationFunc type is an adapter to allow the use of ordinary
// function as ProjectTranslation mutator.
type ProjectTranslationFunc func(context.Context, *ent.ProjectTranslationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProjectTranslationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProjectTranslationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProjectTranslationMutation", m)
}

// The PublicationFunc type is an adapter to allow the use of ordinary
// function as Publication mutator.
type PublicationFunc func(context.Context, *ent.PublicationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PublicationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PublicationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PublicationMutation", m)
}

// The PublicationAuthorFunc type is an adapter to allow the use of ordinary
// function as PublicationAuthor mutator.
type PublicationAuthorFunc func(context.Context, *ent.PublicationAuthorMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PublicationAuthorFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PublicationAuthorMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PublicationAuthorMutation", m)
}

// The PublicationTranslationFunc type is an adapter to allow the use of ordinary
// function as PublicationTranslation mutator.
type PublicationTranslationFunc func(context.Context, *ent.PublicationTranslationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PublicationTranslationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PublicationTranslationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PublicationTranslationMutation", m)
}

// The RecentUpdateFunc type is an adapter to allow the use of ordinary
// function as RecentUpdate mutator.
type RecentUpdateFunc func(context.Context, *ent.RecentUpdateMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RecentUpdateFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.RecentUpdateMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RecentUpdateMutation", m)
}

// The RecentUpdateTranslationFunc type is an adapter to allow the use of ordinary
// function as RecentUpdateTranslation mutator.
type RecentUpdateTranslationFunc func(context.Context, *ent.RecentUpdateTranslationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RecentUpdateTranslationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.RecentUpdateTranslationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RecentUpdateTranslationMutation", m)
}

// The ResearchProjectFunc type is an adapter to allow the use of ordinary
// function as ResearchProject mutator.
type ResearchProjectFunc func(context.Context, *ent.ResearchProjectMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ResearchProjectFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ResearchProjectMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ResearchProjectMutation", m)
}

// The ResearchProjectDetailFunc type is an adapter to allow the use of ordinary
// function as ResearchProjectDetail mutator.
type ResearchProjectDetailFunc func(context.Context, *ent.ResearchProjectDetailMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ResearchProjectDetailFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ResearchProjectDetailMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ResearchProjectDetailMutation", m)
}

// The ResearchProjectDetailTranslationFunc type is an adapter to allow the use of ordinary
// function as ResearchProjectDetailTranslation mutator.
type ResearchProjectDetailTranslationFunc func(context.Context, *ent.ResearchProjectDetailTranslationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ResearchProjectDetailTranslationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ResearchProjectDetailTranslationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ResearchProjectDetailTranslationMutation", m)
}

// The ResearchProjectTranslationFunc type is an adapter to allow the use of ordinary
// function as ResearchProjectTranslation mutator.
type ResearchProjectTranslationFunc func(context.Context, *ent.ResearchProjectTranslationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ResearchProjectTranslationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ResearchProjectTranslationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ResearchProjectTranslationMutation", m)
}

// The SocialLinkFunc type is an adapter to allow the use of ordinary
// function as SocialLink mutator.
type SocialLinkFunc func(context.Context, *ent.SocialLinkMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SocialLinkFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SocialLinkMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SocialLinkMutation", m)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *ent.UserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UserMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserMutation", m)
}

// The WorkExperienceFunc type is an adapter to allow the use of ordinary
// function as WorkExperience mutator.
type WorkExperienceFunc func(context.Context, *ent.WorkExperienceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkExperienceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WorkExperienceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkExperienceMutation", m)
}

// The WorkExperienceDetailFunc type is an adapter to allow the use of ordinary
// function as WorkExperienceDetail mutator.
type WorkExperienceDetailFunc func(context.Context, *ent.WorkExperienceDetailMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkExperienceDetailFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WorkExperienceDetailMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkExperienceDetailMutation", m)
}

// The WorkExperienceDetailTranslationFunc type is an adapter to allow the use of ordinary
// function as WorkExperienceDetailTranslation mutator.
type WorkExperienceDetailTranslationFunc func(context.Context, *ent.WorkExperienceDetailTranslationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkExperienceDetailTranslationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WorkExperienceDetailTranslationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkExperienceDetailTranslationMutation", m)
}

// The WorkExperienceTranslationFunc type is an adapter to allow the use of ordinary
// function as WorkExperienceTranslation mutator.
type WorkExperienceTranslationFunc func(context.Context, *ent.WorkExperienceTranslationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkExperienceTranslationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WorkExperienceTranslationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkExperienceTranslationMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) ent.Hook {
	return func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(context.Context, ent.Mutation) (ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
func Reject(op ent.Op) ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
