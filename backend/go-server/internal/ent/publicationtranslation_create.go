// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/publication"
	"silan-backend/internal/ent/publicationtranslation"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PublicationTranslationCreate is the builder for creating a PublicationTranslation entity.
type PublicationTranslationCreate struct {
	config
	mutation *PublicationTranslationMutation
	hooks    []Hook
}

// SetPublicationID sets the "publication_id" field.
func (ptc *PublicationTranslationCreate) SetPublicationID(u uuid.UUID) *PublicationTranslationCreate {
	ptc.mutation.SetPublicationID(u)
	return ptc
}

// SetLanguageCode sets the "language_code" field.
func (ptc *PublicationTranslationCreate) SetLanguageCode(s string) *PublicationTranslationCreate {
	ptc.mutation.SetLanguageCode(s)
	return ptc
}

// SetTitle sets the "title" field.
func (ptc *PublicationTranslationCreate) SetTitle(s string) *PublicationTranslationCreate {
	ptc.mutation.SetTitle(s)
	return ptc
}

// SetJournalName sets the "journal_name" field.
func (ptc *PublicationTranslationCreate) SetJournalName(s string) *PublicationTranslationCreate {
	ptc.mutation.SetJournalName(s)
	return ptc
}

// SetNillableJournalName sets the "journal_name" field if the given value is not nil.
func (ptc *PublicationTranslationCreate) SetNillableJournalName(s *string) *PublicationTranslationCreate {
	if s != nil {
		ptc.SetJournalName(*s)
	}
	return ptc
}

// SetConferenceName sets the "conference_name" field.
func (ptc *PublicationTranslationCreate) SetConferenceName(s string) *PublicationTranslationCreate {
	ptc.mutation.SetConferenceName(s)
	return ptc
}

// SetNillableConferenceName sets the "conference_name" field if the given value is not nil.
func (ptc *PublicationTranslationCreate) SetNillableConferenceName(s *string) *PublicationTranslationCreate {
	if s != nil {
		ptc.SetConferenceName(*s)
	}
	return ptc
}

// SetCreatedAt sets the "created_at" field.
func (ptc *PublicationTranslationCreate) SetCreatedAt(t time.Time) *PublicationTranslationCreate {
	ptc.mutation.SetCreatedAt(t)
	return ptc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptc *PublicationTranslationCreate) SetNillableCreatedAt(t *time.Time) *PublicationTranslationCreate {
	if t != nil {
		ptc.SetCreatedAt(*t)
	}
	return ptc
}

// SetID sets the "id" field.
func (ptc *PublicationTranslationCreate) SetID(u uuid.UUID) *PublicationTranslationCreate {
	ptc.mutation.SetID(u)
	return ptc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ptc *PublicationTranslationCreate) SetNillableID(u *uuid.UUID) *PublicationTranslationCreate {
	if u != nil {
		ptc.SetID(*u)
	}
	return ptc
}

// SetPublication sets the "publication" edge to the Publication entity.
func (ptc *PublicationTranslationCreate) SetPublication(p *Publication) *PublicationTranslationCreate {
	return ptc.SetPublicationID(p.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (ptc *PublicationTranslationCreate) SetLanguageID(id string) *PublicationTranslationCreate {
	ptc.mutation.SetLanguageID(id)
	return ptc
}

// SetLanguage sets the "language" edge to the Language entity.
func (ptc *PublicationTranslationCreate) SetLanguage(l *Language) *PublicationTranslationCreate {
	return ptc.SetLanguageID(l.ID)
}

// Mutation returns the PublicationTranslationMutation object of the builder.
func (ptc *PublicationTranslationCreate) Mutation() *PublicationTranslationMutation {
	return ptc.mutation
}

// Save creates the PublicationTranslation in the database.
func (ptc *PublicationTranslationCreate) Save(ctx context.Context) (*PublicationTranslation, error) {
	ptc.defaults()
	return withHooks(ctx, ptc.sqlSave, ptc.mutation, ptc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ptc *PublicationTranslationCreate) SaveX(ctx context.Context) *PublicationTranslation {
	v, err := ptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptc *PublicationTranslationCreate) Exec(ctx context.Context) error {
	_, err := ptc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptc *PublicationTranslationCreate) ExecX(ctx context.Context) {
	if err := ptc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptc *PublicationTranslationCreate) defaults() {
	if _, ok := ptc.mutation.CreatedAt(); !ok {
		v := publicationtranslation.DefaultCreatedAt()
		ptc.mutation.SetCreatedAt(v)
	}
	if _, ok := ptc.mutation.ID(); !ok {
		v := publicationtranslation.DefaultID()
		ptc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptc *PublicationTranslationCreate) check() error {
	if _, ok := ptc.mutation.PublicationID(); !ok {
		return &ValidationError{Name: "publication_id", err: errors.New(`ent: missing required field "PublicationTranslation.publication_id"`)}
	}
	if _, ok := ptc.mutation.LanguageCode(); !ok {
		return &ValidationError{Name: "language_code", err: errors.New(`ent: missing required field "PublicationTranslation.language_code"`)}
	}
	if v, ok := ptc.mutation.LanguageCode(); ok {
		if err := publicationtranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "PublicationTranslation.language_code": %w`, err)}
		}
	}
	if _, ok := ptc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "PublicationTranslation.title"`)}
	}
	if v, ok := ptc.mutation.Title(); ok {
		if err := publicationtranslation.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "PublicationTranslation.title": %w`, err)}
		}
	}
	if v, ok := ptc.mutation.JournalName(); ok {
		if err := publicationtranslation.JournalNameValidator(v); err != nil {
			return &ValidationError{Name: "journal_name", err: fmt.Errorf(`ent: validator failed for field "PublicationTranslation.journal_name": %w`, err)}
		}
	}
	if v, ok := ptc.mutation.ConferenceName(); ok {
		if err := publicationtranslation.ConferenceNameValidator(v); err != nil {
			return &ValidationError{Name: "conference_name", err: fmt.Errorf(`ent: validator failed for field "PublicationTranslation.conference_name": %w`, err)}
		}
	}
	if _, ok := ptc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PublicationTranslation.created_at"`)}
	}
	if len(ptc.mutation.PublicationIDs()) == 0 {
		return &ValidationError{Name: "publication", err: errors.New(`ent: missing required edge "PublicationTranslation.publication"`)}
	}
	if len(ptc.mutation.LanguageIDs()) == 0 {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required edge "PublicationTranslation.language"`)}
	}
	return nil
}

func (ptc *PublicationTranslationCreate) sqlSave(ctx context.Context) (*PublicationTranslation, error) {
	if err := ptc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ptc.mutation.id = &_node.ID
	ptc.mutation.done = true
	return _node, nil
}

func (ptc *PublicationTranslationCreate) createSpec() (*PublicationTranslation, *sqlgraph.CreateSpec) {
	var (
		_node = &PublicationTranslation{config: ptc.config}
		_spec = sqlgraph.NewCreateSpec(publicationtranslation.Table, sqlgraph.NewFieldSpec(publicationtranslation.FieldID, field.TypeUUID))
	)
	if id, ok := ptc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ptc.mutation.Title(); ok {
		_spec.SetField(publicationtranslation.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ptc.mutation.JournalName(); ok {
		_spec.SetField(publicationtranslation.FieldJournalName, field.TypeString, value)
		_node.JournalName = value
	}
	if value, ok := ptc.mutation.ConferenceName(); ok {
		_spec.SetField(publicationtranslation.FieldConferenceName, field.TypeString, value)
		_node.ConferenceName = value
	}
	if value, ok := ptc.mutation.CreatedAt(); ok {
		_spec.SetField(publicationtranslation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := ptc.mutation.PublicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   publicationtranslation.PublicationTable,
			Columns: []string{publicationtranslation.PublicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PublicationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ptc.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   publicationtranslation.LanguageTable,
			Columns: []string{publicationtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LanguageCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PublicationTranslationCreateBulk is the builder for creating many PublicationTranslation entities in bulk.
type PublicationTranslationCreateBulk struct {
	config
	err      error
	builders []*PublicationTranslationCreate
}

// Save creates the PublicationTranslation entities in the database.
func (ptcb *PublicationTranslationCreateBulk) Save(ctx context.Context) ([]*PublicationTranslation, error) {
	if ptcb.err != nil {
		return nil, ptcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ptcb.builders))
	nodes := make([]*PublicationTranslation, len(ptcb.builders))
	mutators := make([]Mutator, len(ptcb.builders))
	for i := range ptcb.builders {
		func(i int, root context.Context) {
			builder := ptcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PublicationTranslationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptcb *PublicationTranslationCreateBulk) SaveX(ctx context.Context) []*PublicationTranslation {
	v, err := ptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptcb *PublicationTranslationCreateBulk) Exec(ctx context.Context) error {
	_, err := ptcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptcb *PublicationTranslationCreateBulk) ExecX(ctx context.Context) {
	if err := ptcb.Exec(ctx); err != nil {
		panic(err)
	}
}
