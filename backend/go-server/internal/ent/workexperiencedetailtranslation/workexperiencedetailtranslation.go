// Code generated by ent, DO NOT EDIT.

package workexperiencedetailtranslation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the workexperiencedetailtranslation type in the database.
	Label = "work_experience_detail_translation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldWorkExperienceDetailID holds the string denoting the work_experience_detail_id field in the database.
	FieldWorkExperienceDetailID = "work_experience_detail_id"
	// FieldLanguageCode holds the string denoting the language_code field in the database.
	FieldLanguageCode = "language_code"
	// FieldDetailText holds the string denoting the detail_text field in the database.
	FieldDetailText = "detail_text"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeWorkExperienceDetail holds the string denoting the work_experience_detail edge name in mutations.
	EdgeWorkExperienceDetail = "work_experience_detail"
	// EdgeLanguage holds the string denoting the language edge name in mutations.
	EdgeLanguage = "language"
	// LanguageFieldID holds the string denoting the ID field of the Language.
	LanguageFieldID = "code"
	// Table holds the table name of the workexperiencedetailtranslation in the database.
	Table = "work_experience_detail_translations"
	// WorkExperienceDetailTable is the table that holds the work_experience_detail relation/edge.
	WorkExperienceDetailTable = "work_experience_detail_translations"
	// WorkExperienceDetailInverseTable is the table name for the WorkExperienceDetail entity.
	// It exists in this package in order to avoid circular dependency with the "workexperiencedetail" package.
	WorkExperienceDetailInverseTable = "work_experience_details"
	// WorkExperienceDetailColumn is the table column denoting the work_experience_detail relation/edge.
	WorkExperienceDetailColumn = "work_experience_detail_id"
	// LanguageTable is the table that holds the language relation/edge.
	LanguageTable = "work_experience_detail_translations"
	// LanguageInverseTable is the table name for the Language entity.
	// It exists in this package in order to avoid circular dependency with the "language" package.
	LanguageInverseTable = "languages"
	// LanguageColumn is the table column denoting the language relation/edge.
	LanguageColumn = "language_code"
)

// Columns holds all SQL columns for workexperiencedetailtranslation fields.
var Columns = []string{
	FieldID,
	FieldWorkExperienceDetailID,
	FieldLanguageCode,
	FieldDetailText,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// LanguageCodeValidator is a validator for the "language_code" field. It is called by the builders before save.
	LanguageCodeValidator func(string) error
	// DetailTextValidator is a validator for the "detail_text" field. It is called by the builders before save.
	DetailTextValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the WorkExperienceDetailTranslation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByWorkExperienceDetailID orders the results by the work_experience_detail_id field.
func ByWorkExperienceDetailID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkExperienceDetailID, opts...).ToFunc()
}

// ByLanguageCode orders the results by the language_code field.
func ByLanguageCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguageCode, opts...).ToFunc()
}

// ByDetailText orders the results by the detail_text field.
func ByDetailText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDetailText, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByWorkExperienceDetailField orders the results by work_experience_detail field.
func ByWorkExperienceDetailField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkExperienceDetailStep(), sql.OrderByField(field, opts...))
	}
}

// ByLanguageField orders the results by language field.
func ByLanguageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLanguageStep(), sql.OrderByField(field, opts...))
	}
}
func newWorkExperienceDetailStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkExperienceDetailInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WorkExperienceDetailTable, WorkExperienceDetailColumn),
	)
}
func newLanguageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LanguageInverseTable, LanguageFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LanguageTable, LanguageColumn),
	)
}
