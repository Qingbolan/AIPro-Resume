// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/blogpost"
	"silan-backend/internal/ent/blogtag"
	"silan-backend/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BlogTagUpdate is the builder for updating BlogTag entities.
type BlogTagUpdate struct {
	config
	hooks    []Hook
	mutation *BlogTagMutation
}

// Where appends a list predicates to the BlogTagUpdate builder.
func (btu *BlogTagUpdate) Where(ps ...predicate.BlogTag) *BlogTagUpdate {
	btu.mutation.Where(ps...)
	return btu
}

// SetName sets the "name" field.
func (btu *BlogTagUpdate) SetName(s string) *BlogTagUpdate {
	btu.mutation.SetName(s)
	return btu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (btu *BlogTagUpdate) SetNillableName(s *string) *BlogTagUpdate {
	if s != nil {
		btu.SetName(*s)
	}
	return btu
}

// SetSlug sets the "slug" field.
func (btu *BlogTagUpdate) SetSlug(s string) *BlogTagUpdate {
	btu.mutation.SetSlug(s)
	return btu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (btu *BlogTagUpdate) SetNillableSlug(s *string) *BlogTagUpdate {
	if s != nil {
		btu.SetSlug(*s)
	}
	return btu
}

// SetUsageCount sets the "usage_count" field.
func (btu *BlogTagUpdate) SetUsageCount(i int) *BlogTagUpdate {
	btu.mutation.ResetUsageCount()
	btu.mutation.SetUsageCount(i)
	return btu
}

// SetNillableUsageCount sets the "usage_count" field if the given value is not nil.
func (btu *BlogTagUpdate) SetNillableUsageCount(i *int) *BlogTagUpdate {
	if i != nil {
		btu.SetUsageCount(*i)
	}
	return btu
}

// AddUsageCount adds i to the "usage_count" field.
func (btu *BlogTagUpdate) AddUsageCount(i int) *BlogTagUpdate {
	btu.mutation.AddUsageCount(i)
	return btu
}

// AddBlogPostIDs adds the "blog_posts" edge to the BlogPost entity by IDs.
func (btu *BlogTagUpdate) AddBlogPostIDs(ids ...uuid.UUID) *BlogTagUpdate {
	btu.mutation.AddBlogPostIDs(ids...)
	return btu
}

// AddBlogPosts adds the "blog_posts" edges to the BlogPost entity.
func (btu *BlogTagUpdate) AddBlogPosts(b ...*BlogPost) *BlogTagUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return btu.AddBlogPostIDs(ids...)
}

// Mutation returns the BlogTagMutation object of the builder.
func (btu *BlogTagUpdate) Mutation() *BlogTagMutation {
	return btu.mutation
}

// ClearBlogPosts clears all "blog_posts" edges to the BlogPost entity.
func (btu *BlogTagUpdate) ClearBlogPosts() *BlogTagUpdate {
	btu.mutation.ClearBlogPosts()
	return btu
}

// RemoveBlogPostIDs removes the "blog_posts" edge to BlogPost entities by IDs.
func (btu *BlogTagUpdate) RemoveBlogPostIDs(ids ...uuid.UUID) *BlogTagUpdate {
	btu.mutation.RemoveBlogPostIDs(ids...)
	return btu
}

// RemoveBlogPosts removes "blog_posts" edges to BlogPost entities.
func (btu *BlogTagUpdate) RemoveBlogPosts(b ...*BlogPost) *BlogTagUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return btu.RemoveBlogPostIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (btu *BlogTagUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, btu.sqlSave, btu.mutation, btu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (btu *BlogTagUpdate) SaveX(ctx context.Context) int {
	affected, err := btu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (btu *BlogTagUpdate) Exec(ctx context.Context) error {
	_, err := btu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (btu *BlogTagUpdate) ExecX(ctx context.Context) {
	if err := btu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (btu *BlogTagUpdate) check() error {
	if v, ok := btu.mutation.Name(); ok {
		if err := blogtag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "BlogTag.name": %w`, err)}
		}
	}
	if v, ok := btu.mutation.Slug(); ok {
		if err := blogtag.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "BlogTag.slug": %w`, err)}
		}
	}
	return nil
}

func (btu *BlogTagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := btu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(blogtag.Table, blogtag.Columns, sqlgraph.NewFieldSpec(blogtag.FieldID, field.TypeUUID))
	if ps := btu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := btu.mutation.Name(); ok {
		_spec.SetField(blogtag.FieldName, field.TypeString, value)
	}
	if value, ok := btu.mutation.Slug(); ok {
		_spec.SetField(blogtag.FieldSlug, field.TypeString, value)
	}
	if value, ok := btu.mutation.UsageCount(); ok {
		_spec.SetField(blogtag.FieldUsageCount, field.TypeInt, value)
	}
	if value, ok := btu.mutation.AddedUsageCount(); ok {
		_spec.AddField(blogtag.FieldUsageCount, field.TypeInt, value)
	}
	if btu.mutation.BlogPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   blogtag.BlogPostsTable,
			Columns: blogtag.BlogPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		createE := &BlogPostTagCreate{config: btu.config, mutation: newBlogPostTagMutation(btu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := btu.mutation.RemovedBlogPostsIDs(); len(nodes) > 0 && !btu.mutation.BlogPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   blogtag.BlogPostsTable,
			Columns: blogtag.BlogPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &BlogPostTagCreate{config: btu.config, mutation: newBlogPostTagMutation(btu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := btu.mutation.BlogPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   blogtag.BlogPostsTable,
			Columns: blogtag.BlogPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &BlogPostTagCreate{config: btu.config, mutation: newBlogPostTagMutation(btu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, btu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blogtag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	btu.mutation.done = true
	return n, nil
}

// BlogTagUpdateOne is the builder for updating a single BlogTag entity.
type BlogTagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlogTagMutation
}

// SetName sets the "name" field.
func (btuo *BlogTagUpdateOne) SetName(s string) *BlogTagUpdateOne {
	btuo.mutation.SetName(s)
	return btuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (btuo *BlogTagUpdateOne) SetNillableName(s *string) *BlogTagUpdateOne {
	if s != nil {
		btuo.SetName(*s)
	}
	return btuo
}

// SetSlug sets the "slug" field.
func (btuo *BlogTagUpdateOne) SetSlug(s string) *BlogTagUpdateOne {
	btuo.mutation.SetSlug(s)
	return btuo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (btuo *BlogTagUpdateOne) SetNillableSlug(s *string) *BlogTagUpdateOne {
	if s != nil {
		btuo.SetSlug(*s)
	}
	return btuo
}

// SetUsageCount sets the "usage_count" field.
func (btuo *BlogTagUpdateOne) SetUsageCount(i int) *BlogTagUpdateOne {
	btuo.mutation.ResetUsageCount()
	btuo.mutation.SetUsageCount(i)
	return btuo
}

// SetNillableUsageCount sets the "usage_count" field if the given value is not nil.
func (btuo *BlogTagUpdateOne) SetNillableUsageCount(i *int) *BlogTagUpdateOne {
	if i != nil {
		btuo.SetUsageCount(*i)
	}
	return btuo
}

// AddUsageCount adds i to the "usage_count" field.
func (btuo *BlogTagUpdateOne) AddUsageCount(i int) *BlogTagUpdateOne {
	btuo.mutation.AddUsageCount(i)
	return btuo
}

// AddBlogPostIDs adds the "blog_posts" edge to the BlogPost entity by IDs.
func (btuo *BlogTagUpdateOne) AddBlogPostIDs(ids ...uuid.UUID) *BlogTagUpdateOne {
	btuo.mutation.AddBlogPostIDs(ids...)
	return btuo
}

// AddBlogPosts adds the "blog_posts" edges to the BlogPost entity.
func (btuo *BlogTagUpdateOne) AddBlogPosts(b ...*BlogPost) *BlogTagUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return btuo.AddBlogPostIDs(ids...)
}

// Mutation returns the BlogTagMutation object of the builder.
func (btuo *BlogTagUpdateOne) Mutation() *BlogTagMutation {
	return btuo.mutation
}

// ClearBlogPosts clears all "blog_posts" edges to the BlogPost entity.
func (btuo *BlogTagUpdateOne) ClearBlogPosts() *BlogTagUpdateOne {
	btuo.mutation.ClearBlogPosts()
	return btuo
}

// RemoveBlogPostIDs removes the "blog_posts" edge to BlogPost entities by IDs.
func (btuo *BlogTagUpdateOne) RemoveBlogPostIDs(ids ...uuid.UUID) *BlogTagUpdateOne {
	btuo.mutation.RemoveBlogPostIDs(ids...)
	return btuo
}

// RemoveBlogPosts removes "blog_posts" edges to BlogPost entities.
func (btuo *BlogTagUpdateOne) RemoveBlogPosts(b ...*BlogPost) *BlogTagUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return btuo.RemoveBlogPostIDs(ids...)
}

// Where appends a list predicates to the BlogTagUpdate builder.
func (btuo *BlogTagUpdateOne) Where(ps ...predicate.BlogTag) *BlogTagUpdateOne {
	btuo.mutation.Where(ps...)
	return btuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (btuo *BlogTagUpdateOne) Select(field string, fields ...string) *BlogTagUpdateOne {
	btuo.fields = append([]string{field}, fields...)
	return btuo
}

// Save executes the query and returns the updated BlogTag entity.
func (btuo *BlogTagUpdateOne) Save(ctx context.Context) (*BlogTag, error) {
	return withHooks(ctx, btuo.sqlSave, btuo.mutation, btuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (btuo *BlogTagUpdateOne) SaveX(ctx context.Context) *BlogTag {
	node, err := btuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (btuo *BlogTagUpdateOne) Exec(ctx context.Context) error {
	_, err := btuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (btuo *BlogTagUpdateOne) ExecX(ctx context.Context) {
	if err := btuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (btuo *BlogTagUpdateOne) check() error {
	if v, ok := btuo.mutation.Name(); ok {
		if err := blogtag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "BlogTag.name": %w`, err)}
		}
	}
	if v, ok := btuo.mutation.Slug(); ok {
		if err := blogtag.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "BlogTag.slug": %w`, err)}
		}
	}
	return nil
}

func (btuo *BlogTagUpdateOne) sqlSave(ctx context.Context) (_node *BlogTag, err error) {
	if err := btuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blogtag.Table, blogtag.Columns, sqlgraph.NewFieldSpec(blogtag.FieldID, field.TypeUUID))
	id, ok := btuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlogTag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := btuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blogtag.FieldID)
		for _, f := range fields {
			if !blogtag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blogtag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := btuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := btuo.mutation.Name(); ok {
		_spec.SetField(blogtag.FieldName, field.TypeString, value)
	}
	if value, ok := btuo.mutation.Slug(); ok {
		_spec.SetField(blogtag.FieldSlug, field.TypeString, value)
	}
	if value, ok := btuo.mutation.UsageCount(); ok {
		_spec.SetField(blogtag.FieldUsageCount, field.TypeInt, value)
	}
	if value, ok := btuo.mutation.AddedUsageCount(); ok {
		_spec.AddField(blogtag.FieldUsageCount, field.TypeInt, value)
	}
	if btuo.mutation.BlogPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   blogtag.BlogPostsTable,
			Columns: blogtag.BlogPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		createE := &BlogPostTagCreate{config: btuo.config, mutation: newBlogPostTagMutation(btuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := btuo.mutation.RemovedBlogPostsIDs(); len(nodes) > 0 && !btuo.mutation.BlogPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   blogtag.BlogPostsTable,
			Columns: blogtag.BlogPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &BlogPostTagCreate{config: btuo.config, mutation: newBlogPostTagMutation(btuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := btuo.mutation.BlogPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   blogtag.BlogPostsTable,
			Columns: blogtag.BlogPostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &BlogPostTagCreate{config: btuo.config, mutation: newBlogPostTagMutation(btuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BlogTag{config: btuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, btuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blogtag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	btuo.mutation.done = true
	return _node, nil
}
