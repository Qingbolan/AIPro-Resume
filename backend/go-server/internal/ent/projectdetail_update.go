// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/projectdetail"
	"silan-backend/internal/ent/projectdetailtranslation"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProjectDetailUpdate is the builder for updating ProjectDetail entities.
type ProjectDetailUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectDetailMutation
}

// Where appends a list predicates to the ProjectDetailUpdate builder.
func (pdu *ProjectDetailUpdate) Where(ps ...predicate.ProjectDetail) *ProjectDetailUpdate {
	pdu.mutation.Where(ps...)
	return pdu
}

// SetProjectID sets the "project_id" field.
func (pdu *ProjectDetailUpdate) SetProjectID(u uuid.UUID) *ProjectDetailUpdate {
	pdu.mutation.SetProjectID(u)
	return pdu
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (pdu *ProjectDetailUpdate) SetNillableProjectID(u *uuid.UUID) *ProjectDetailUpdate {
	if u != nil {
		pdu.SetProjectID(*u)
	}
	return pdu
}

// SetDetailedDescription sets the "detailed_description" field.
func (pdu *ProjectDetailUpdate) SetDetailedDescription(s string) *ProjectDetailUpdate {
	pdu.mutation.SetDetailedDescription(s)
	return pdu
}

// SetNillableDetailedDescription sets the "detailed_description" field if the given value is not nil.
func (pdu *ProjectDetailUpdate) SetNillableDetailedDescription(s *string) *ProjectDetailUpdate {
	if s != nil {
		pdu.SetDetailedDescription(*s)
	}
	return pdu
}

// ClearDetailedDescription clears the value of the "detailed_description" field.
func (pdu *ProjectDetailUpdate) ClearDetailedDescription() *ProjectDetailUpdate {
	pdu.mutation.ClearDetailedDescription()
	return pdu
}

// SetGoals sets the "goals" field.
func (pdu *ProjectDetailUpdate) SetGoals(s string) *ProjectDetailUpdate {
	pdu.mutation.SetGoals(s)
	return pdu
}

// SetNillableGoals sets the "goals" field if the given value is not nil.
func (pdu *ProjectDetailUpdate) SetNillableGoals(s *string) *ProjectDetailUpdate {
	if s != nil {
		pdu.SetGoals(*s)
	}
	return pdu
}

// ClearGoals clears the value of the "goals" field.
func (pdu *ProjectDetailUpdate) ClearGoals() *ProjectDetailUpdate {
	pdu.mutation.ClearGoals()
	return pdu
}

// SetChallenges sets the "challenges" field.
func (pdu *ProjectDetailUpdate) SetChallenges(s string) *ProjectDetailUpdate {
	pdu.mutation.SetChallenges(s)
	return pdu
}

// SetNillableChallenges sets the "challenges" field if the given value is not nil.
func (pdu *ProjectDetailUpdate) SetNillableChallenges(s *string) *ProjectDetailUpdate {
	if s != nil {
		pdu.SetChallenges(*s)
	}
	return pdu
}

// ClearChallenges clears the value of the "challenges" field.
func (pdu *ProjectDetailUpdate) ClearChallenges() *ProjectDetailUpdate {
	pdu.mutation.ClearChallenges()
	return pdu
}

// SetSolutions sets the "solutions" field.
func (pdu *ProjectDetailUpdate) SetSolutions(s string) *ProjectDetailUpdate {
	pdu.mutation.SetSolutions(s)
	return pdu
}

// SetNillableSolutions sets the "solutions" field if the given value is not nil.
func (pdu *ProjectDetailUpdate) SetNillableSolutions(s *string) *ProjectDetailUpdate {
	if s != nil {
		pdu.SetSolutions(*s)
	}
	return pdu
}

// ClearSolutions clears the value of the "solutions" field.
func (pdu *ProjectDetailUpdate) ClearSolutions() *ProjectDetailUpdate {
	pdu.mutation.ClearSolutions()
	return pdu
}

// SetLessonsLearned sets the "lessons_learned" field.
func (pdu *ProjectDetailUpdate) SetLessonsLearned(s string) *ProjectDetailUpdate {
	pdu.mutation.SetLessonsLearned(s)
	return pdu
}

// SetNillableLessonsLearned sets the "lessons_learned" field if the given value is not nil.
func (pdu *ProjectDetailUpdate) SetNillableLessonsLearned(s *string) *ProjectDetailUpdate {
	if s != nil {
		pdu.SetLessonsLearned(*s)
	}
	return pdu
}

// ClearLessonsLearned clears the value of the "lessons_learned" field.
func (pdu *ProjectDetailUpdate) ClearLessonsLearned() *ProjectDetailUpdate {
	pdu.mutation.ClearLessonsLearned()
	return pdu
}

// SetFutureEnhancements sets the "future_enhancements" field.
func (pdu *ProjectDetailUpdate) SetFutureEnhancements(s string) *ProjectDetailUpdate {
	pdu.mutation.SetFutureEnhancements(s)
	return pdu
}

// SetNillableFutureEnhancements sets the "future_enhancements" field if the given value is not nil.
func (pdu *ProjectDetailUpdate) SetNillableFutureEnhancements(s *string) *ProjectDetailUpdate {
	if s != nil {
		pdu.SetFutureEnhancements(*s)
	}
	return pdu
}

// ClearFutureEnhancements clears the value of the "future_enhancements" field.
func (pdu *ProjectDetailUpdate) ClearFutureEnhancements() *ProjectDetailUpdate {
	pdu.mutation.ClearFutureEnhancements()
	return pdu
}

// SetLicense sets the "license" field.
func (pdu *ProjectDetailUpdate) SetLicense(s string) *ProjectDetailUpdate {
	pdu.mutation.SetLicense(s)
	return pdu
}

// SetNillableLicense sets the "license" field if the given value is not nil.
func (pdu *ProjectDetailUpdate) SetNillableLicense(s *string) *ProjectDetailUpdate {
	if s != nil {
		pdu.SetLicense(*s)
	}
	return pdu
}

// ClearLicense clears the value of the "license" field.
func (pdu *ProjectDetailUpdate) ClearLicense() *ProjectDetailUpdate {
	pdu.mutation.ClearLicense()
	return pdu
}

// SetVersion sets the "version" field.
func (pdu *ProjectDetailUpdate) SetVersion(s string) *ProjectDetailUpdate {
	pdu.mutation.SetVersion(s)
	return pdu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pdu *ProjectDetailUpdate) SetNillableVersion(s *string) *ProjectDetailUpdate {
	if s != nil {
		pdu.SetVersion(*s)
	}
	return pdu
}

// ClearVersion clears the value of the "version" field.
func (pdu *ProjectDetailUpdate) ClearVersion() *ProjectDetailUpdate {
	pdu.mutation.ClearVersion()
	return pdu
}

// SetUpdatedAt sets the "updated_at" field.
func (pdu *ProjectDetailUpdate) SetUpdatedAt(t time.Time) *ProjectDetailUpdate {
	pdu.mutation.SetUpdatedAt(t)
	return pdu
}

// SetProject sets the "project" edge to the Project entity.
func (pdu *ProjectDetailUpdate) SetProject(p *Project) *ProjectDetailUpdate {
	return pdu.SetProjectID(p.ID)
}

// AddTranslationIDs adds the "translations" edge to the ProjectDetailTranslation entity by IDs.
func (pdu *ProjectDetailUpdate) AddTranslationIDs(ids ...uuid.UUID) *ProjectDetailUpdate {
	pdu.mutation.AddTranslationIDs(ids...)
	return pdu
}

// AddTranslations adds the "translations" edges to the ProjectDetailTranslation entity.
func (pdu *ProjectDetailUpdate) AddTranslations(p ...*ProjectDetailTranslation) *ProjectDetailUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pdu.AddTranslationIDs(ids...)
}

// Mutation returns the ProjectDetailMutation object of the builder.
func (pdu *ProjectDetailUpdate) Mutation() *ProjectDetailMutation {
	return pdu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (pdu *ProjectDetailUpdate) ClearProject() *ProjectDetailUpdate {
	pdu.mutation.ClearProject()
	return pdu
}

// ClearTranslations clears all "translations" edges to the ProjectDetailTranslation entity.
func (pdu *ProjectDetailUpdate) ClearTranslations() *ProjectDetailUpdate {
	pdu.mutation.ClearTranslations()
	return pdu
}

// RemoveTranslationIDs removes the "translations" edge to ProjectDetailTranslation entities by IDs.
func (pdu *ProjectDetailUpdate) RemoveTranslationIDs(ids ...uuid.UUID) *ProjectDetailUpdate {
	pdu.mutation.RemoveTranslationIDs(ids...)
	return pdu
}

// RemoveTranslations removes "translations" edges to ProjectDetailTranslation entities.
func (pdu *ProjectDetailUpdate) RemoveTranslations(p ...*ProjectDetailTranslation) *ProjectDetailUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pdu.RemoveTranslationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pdu *ProjectDetailUpdate) Save(ctx context.Context) (int, error) {
	pdu.defaults()
	return withHooks(ctx, pdu.sqlSave, pdu.mutation, pdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pdu *ProjectDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := pdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pdu *ProjectDetailUpdate) Exec(ctx context.Context) error {
	_, err := pdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdu *ProjectDetailUpdate) ExecX(ctx context.Context) {
	if err := pdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pdu *ProjectDetailUpdate) defaults() {
	if _, ok := pdu.mutation.UpdatedAt(); !ok {
		v := projectdetail.UpdateDefaultUpdatedAt()
		pdu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdu *ProjectDetailUpdate) check() error {
	if v, ok := pdu.mutation.License(); ok {
		if err := projectdetail.LicenseValidator(v); err != nil {
			return &ValidationError{Name: "license", err: fmt.Errorf(`ent: validator failed for field "ProjectDetail.license": %w`, err)}
		}
	}
	if v, ok := pdu.mutation.Version(); ok {
		if err := projectdetail.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "ProjectDetail.version": %w`, err)}
		}
	}
	if pdu.mutation.ProjectCleared() && len(pdu.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectDetail.project"`)
	}
	return nil
}

func (pdu *ProjectDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectdetail.Table, projectdetail.Columns, sqlgraph.NewFieldSpec(projectdetail.FieldID, field.TypeUUID))
	if ps := pdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pdu.mutation.DetailedDescription(); ok {
		_spec.SetField(projectdetail.FieldDetailedDescription, field.TypeString, value)
	}
	if pdu.mutation.DetailedDescriptionCleared() {
		_spec.ClearField(projectdetail.FieldDetailedDescription, field.TypeString)
	}
	if value, ok := pdu.mutation.Goals(); ok {
		_spec.SetField(projectdetail.FieldGoals, field.TypeString, value)
	}
	if pdu.mutation.GoalsCleared() {
		_spec.ClearField(projectdetail.FieldGoals, field.TypeString)
	}
	if value, ok := pdu.mutation.Challenges(); ok {
		_spec.SetField(projectdetail.FieldChallenges, field.TypeString, value)
	}
	if pdu.mutation.ChallengesCleared() {
		_spec.ClearField(projectdetail.FieldChallenges, field.TypeString)
	}
	if value, ok := pdu.mutation.Solutions(); ok {
		_spec.SetField(projectdetail.FieldSolutions, field.TypeString, value)
	}
	if pdu.mutation.SolutionsCleared() {
		_spec.ClearField(projectdetail.FieldSolutions, field.TypeString)
	}
	if value, ok := pdu.mutation.LessonsLearned(); ok {
		_spec.SetField(projectdetail.FieldLessonsLearned, field.TypeString, value)
	}
	if pdu.mutation.LessonsLearnedCleared() {
		_spec.ClearField(projectdetail.FieldLessonsLearned, field.TypeString)
	}
	if value, ok := pdu.mutation.FutureEnhancements(); ok {
		_spec.SetField(projectdetail.FieldFutureEnhancements, field.TypeString, value)
	}
	if pdu.mutation.FutureEnhancementsCleared() {
		_spec.ClearField(projectdetail.FieldFutureEnhancements, field.TypeString)
	}
	if value, ok := pdu.mutation.License(); ok {
		_spec.SetField(projectdetail.FieldLicense, field.TypeString, value)
	}
	if pdu.mutation.LicenseCleared() {
		_spec.ClearField(projectdetail.FieldLicense, field.TypeString)
	}
	if value, ok := pdu.mutation.Version(); ok {
		_spec.SetField(projectdetail.FieldVersion, field.TypeString, value)
	}
	if pdu.mutation.VersionCleared() {
		_spec.ClearField(projectdetail.FieldVersion, field.TypeString)
	}
	if value, ok := pdu.mutation.UpdatedAt(); ok {
		_spec.SetField(projectdetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if pdu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   projectdetail.ProjectTable,
			Columns: []string{projectdetail.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pdu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   projectdetail.ProjectTable,
			Columns: []string{projectdetail.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pdu.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectdetail.TranslationsTable,
			Columns: []string{projectdetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pdu.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !pdu.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectdetail.TranslationsTable,
			Columns: []string{projectdetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pdu.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectdetail.TranslationsTable,
			Columns: []string{projectdetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pdu.mutation.done = true
	return n, nil
}

// ProjectDetailUpdateOne is the builder for updating a single ProjectDetail entity.
type ProjectDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectDetailMutation
}

// SetProjectID sets the "project_id" field.
func (pduo *ProjectDetailUpdateOne) SetProjectID(u uuid.UUID) *ProjectDetailUpdateOne {
	pduo.mutation.SetProjectID(u)
	return pduo
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (pduo *ProjectDetailUpdateOne) SetNillableProjectID(u *uuid.UUID) *ProjectDetailUpdateOne {
	if u != nil {
		pduo.SetProjectID(*u)
	}
	return pduo
}

// SetDetailedDescription sets the "detailed_description" field.
func (pduo *ProjectDetailUpdateOne) SetDetailedDescription(s string) *ProjectDetailUpdateOne {
	pduo.mutation.SetDetailedDescription(s)
	return pduo
}

// SetNillableDetailedDescription sets the "detailed_description" field if the given value is not nil.
func (pduo *ProjectDetailUpdateOne) SetNillableDetailedDescription(s *string) *ProjectDetailUpdateOne {
	if s != nil {
		pduo.SetDetailedDescription(*s)
	}
	return pduo
}

// ClearDetailedDescription clears the value of the "detailed_description" field.
func (pduo *ProjectDetailUpdateOne) ClearDetailedDescription() *ProjectDetailUpdateOne {
	pduo.mutation.ClearDetailedDescription()
	return pduo
}

// SetGoals sets the "goals" field.
func (pduo *ProjectDetailUpdateOne) SetGoals(s string) *ProjectDetailUpdateOne {
	pduo.mutation.SetGoals(s)
	return pduo
}

// SetNillableGoals sets the "goals" field if the given value is not nil.
func (pduo *ProjectDetailUpdateOne) SetNillableGoals(s *string) *ProjectDetailUpdateOne {
	if s != nil {
		pduo.SetGoals(*s)
	}
	return pduo
}

// ClearGoals clears the value of the "goals" field.
func (pduo *ProjectDetailUpdateOne) ClearGoals() *ProjectDetailUpdateOne {
	pduo.mutation.ClearGoals()
	return pduo
}

// SetChallenges sets the "challenges" field.
func (pduo *ProjectDetailUpdateOne) SetChallenges(s string) *ProjectDetailUpdateOne {
	pduo.mutation.SetChallenges(s)
	return pduo
}

// SetNillableChallenges sets the "challenges" field if the given value is not nil.
func (pduo *ProjectDetailUpdateOne) SetNillableChallenges(s *string) *ProjectDetailUpdateOne {
	if s != nil {
		pduo.SetChallenges(*s)
	}
	return pduo
}

// ClearChallenges clears the value of the "challenges" field.
func (pduo *ProjectDetailUpdateOne) ClearChallenges() *ProjectDetailUpdateOne {
	pduo.mutation.ClearChallenges()
	return pduo
}

// SetSolutions sets the "solutions" field.
func (pduo *ProjectDetailUpdateOne) SetSolutions(s string) *ProjectDetailUpdateOne {
	pduo.mutation.SetSolutions(s)
	return pduo
}

// SetNillableSolutions sets the "solutions" field if the given value is not nil.
func (pduo *ProjectDetailUpdateOne) SetNillableSolutions(s *string) *ProjectDetailUpdateOne {
	if s != nil {
		pduo.SetSolutions(*s)
	}
	return pduo
}

// ClearSolutions clears the value of the "solutions" field.
func (pduo *ProjectDetailUpdateOne) ClearSolutions() *ProjectDetailUpdateOne {
	pduo.mutation.ClearSolutions()
	return pduo
}

// SetLessonsLearned sets the "lessons_learned" field.
func (pduo *ProjectDetailUpdateOne) SetLessonsLearned(s string) *ProjectDetailUpdateOne {
	pduo.mutation.SetLessonsLearned(s)
	return pduo
}

// SetNillableLessonsLearned sets the "lessons_learned" field if the given value is not nil.
func (pduo *ProjectDetailUpdateOne) SetNillableLessonsLearned(s *string) *ProjectDetailUpdateOne {
	if s != nil {
		pduo.SetLessonsLearned(*s)
	}
	return pduo
}

// ClearLessonsLearned clears the value of the "lessons_learned" field.
func (pduo *ProjectDetailUpdateOne) ClearLessonsLearned() *ProjectDetailUpdateOne {
	pduo.mutation.ClearLessonsLearned()
	return pduo
}

// SetFutureEnhancements sets the "future_enhancements" field.
func (pduo *ProjectDetailUpdateOne) SetFutureEnhancements(s string) *ProjectDetailUpdateOne {
	pduo.mutation.SetFutureEnhancements(s)
	return pduo
}

// SetNillableFutureEnhancements sets the "future_enhancements" field if the given value is not nil.
func (pduo *ProjectDetailUpdateOne) SetNillableFutureEnhancements(s *string) *ProjectDetailUpdateOne {
	if s != nil {
		pduo.SetFutureEnhancements(*s)
	}
	return pduo
}

// ClearFutureEnhancements clears the value of the "future_enhancements" field.
func (pduo *ProjectDetailUpdateOne) ClearFutureEnhancements() *ProjectDetailUpdateOne {
	pduo.mutation.ClearFutureEnhancements()
	return pduo
}

// SetLicense sets the "license" field.
func (pduo *ProjectDetailUpdateOne) SetLicense(s string) *ProjectDetailUpdateOne {
	pduo.mutation.SetLicense(s)
	return pduo
}

// SetNillableLicense sets the "license" field if the given value is not nil.
func (pduo *ProjectDetailUpdateOne) SetNillableLicense(s *string) *ProjectDetailUpdateOne {
	if s != nil {
		pduo.SetLicense(*s)
	}
	return pduo
}

// ClearLicense clears the value of the "license" field.
func (pduo *ProjectDetailUpdateOne) ClearLicense() *ProjectDetailUpdateOne {
	pduo.mutation.ClearLicense()
	return pduo
}

// SetVersion sets the "version" field.
func (pduo *ProjectDetailUpdateOne) SetVersion(s string) *ProjectDetailUpdateOne {
	pduo.mutation.SetVersion(s)
	return pduo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pduo *ProjectDetailUpdateOne) SetNillableVersion(s *string) *ProjectDetailUpdateOne {
	if s != nil {
		pduo.SetVersion(*s)
	}
	return pduo
}

// ClearVersion clears the value of the "version" field.
func (pduo *ProjectDetailUpdateOne) ClearVersion() *ProjectDetailUpdateOne {
	pduo.mutation.ClearVersion()
	return pduo
}

// SetUpdatedAt sets the "updated_at" field.
func (pduo *ProjectDetailUpdateOne) SetUpdatedAt(t time.Time) *ProjectDetailUpdateOne {
	pduo.mutation.SetUpdatedAt(t)
	return pduo
}

// SetProject sets the "project" edge to the Project entity.
func (pduo *ProjectDetailUpdateOne) SetProject(p *Project) *ProjectDetailUpdateOne {
	return pduo.SetProjectID(p.ID)
}

// AddTranslationIDs adds the "translations" edge to the ProjectDetailTranslation entity by IDs.
func (pduo *ProjectDetailUpdateOne) AddTranslationIDs(ids ...uuid.UUID) *ProjectDetailUpdateOne {
	pduo.mutation.AddTranslationIDs(ids...)
	return pduo
}

// AddTranslations adds the "translations" edges to the ProjectDetailTranslation entity.
func (pduo *ProjectDetailUpdateOne) AddTranslations(p ...*ProjectDetailTranslation) *ProjectDetailUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pduo.AddTranslationIDs(ids...)
}

// Mutation returns the ProjectDetailMutation object of the builder.
func (pduo *ProjectDetailUpdateOne) Mutation() *ProjectDetailMutation {
	return pduo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (pduo *ProjectDetailUpdateOne) ClearProject() *ProjectDetailUpdateOne {
	pduo.mutation.ClearProject()
	return pduo
}

// ClearTranslations clears all "translations" edges to the ProjectDetailTranslation entity.
func (pduo *ProjectDetailUpdateOne) ClearTranslations() *ProjectDetailUpdateOne {
	pduo.mutation.ClearTranslations()
	return pduo
}

// RemoveTranslationIDs removes the "translations" edge to ProjectDetailTranslation entities by IDs.
func (pduo *ProjectDetailUpdateOne) RemoveTranslationIDs(ids ...uuid.UUID) *ProjectDetailUpdateOne {
	pduo.mutation.RemoveTranslationIDs(ids...)
	return pduo
}

// RemoveTranslations removes "translations" edges to ProjectDetailTranslation entities.
func (pduo *ProjectDetailUpdateOne) RemoveTranslations(p ...*ProjectDetailTranslation) *ProjectDetailUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pduo.RemoveTranslationIDs(ids...)
}

// Where appends a list predicates to the ProjectDetailUpdate builder.
func (pduo *ProjectDetailUpdateOne) Where(ps ...predicate.ProjectDetail) *ProjectDetailUpdateOne {
	pduo.mutation.Where(ps...)
	return pduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pduo *ProjectDetailUpdateOne) Select(field string, fields ...string) *ProjectDetailUpdateOne {
	pduo.fields = append([]string{field}, fields...)
	return pduo
}

// Save executes the query and returns the updated ProjectDetail entity.
func (pduo *ProjectDetailUpdateOne) Save(ctx context.Context) (*ProjectDetail, error) {
	pduo.defaults()
	return withHooks(ctx, pduo.sqlSave, pduo.mutation, pduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pduo *ProjectDetailUpdateOne) SaveX(ctx context.Context) *ProjectDetail {
	node, err := pduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pduo *ProjectDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := pduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pduo *ProjectDetailUpdateOne) ExecX(ctx context.Context) {
	if err := pduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pduo *ProjectDetailUpdateOne) defaults() {
	if _, ok := pduo.mutation.UpdatedAt(); !ok {
		v := projectdetail.UpdateDefaultUpdatedAt()
		pduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pduo *ProjectDetailUpdateOne) check() error {
	if v, ok := pduo.mutation.License(); ok {
		if err := projectdetail.LicenseValidator(v); err != nil {
			return &ValidationError{Name: "license", err: fmt.Errorf(`ent: validator failed for field "ProjectDetail.license": %w`, err)}
		}
	}
	if v, ok := pduo.mutation.Version(); ok {
		if err := projectdetail.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "ProjectDetail.version": %w`, err)}
		}
	}
	if pduo.mutation.ProjectCleared() && len(pduo.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectDetail.project"`)
	}
	return nil
}

func (pduo *ProjectDetailUpdateOne) sqlSave(ctx context.Context) (_node *ProjectDetail, err error) {
	if err := pduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectdetail.Table, projectdetail.Columns, sqlgraph.NewFieldSpec(projectdetail.FieldID, field.TypeUUID))
	id, ok := pduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProjectDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectdetail.FieldID)
		for _, f := range fields {
			if !projectdetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != projectdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pduo.mutation.DetailedDescription(); ok {
		_spec.SetField(projectdetail.FieldDetailedDescription, field.TypeString, value)
	}
	if pduo.mutation.DetailedDescriptionCleared() {
		_spec.ClearField(projectdetail.FieldDetailedDescription, field.TypeString)
	}
	if value, ok := pduo.mutation.Goals(); ok {
		_spec.SetField(projectdetail.FieldGoals, field.TypeString, value)
	}
	if pduo.mutation.GoalsCleared() {
		_spec.ClearField(projectdetail.FieldGoals, field.TypeString)
	}
	if value, ok := pduo.mutation.Challenges(); ok {
		_spec.SetField(projectdetail.FieldChallenges, field.TypeString, value)
	}
	if pduo.mutation.ChallengesCleared() {
		_spec.ClearField(projectdetail.FieldChallenges, field.TypeString)
	}
	if value, ok := pduo.mutation.Solutions(); ok {
		_spec.SetField(projectdetail.FieldSolutions, field.TypeString, value)
	}
	if pduo.mutation.SolutionsCleared() {
		_spec.ClearField(projectdetail.FieldSolutions, field.TypeString)
	}
	if value, ok := pduo.mutation.LessonsLearned(); ok {
		_spec.SetField(projectdetail.FieldLessonsLearned, field.TypeString, value)
	}
	if pduo.mutation.LessonsLearnedCleared() {
		_spec.ClearField(projectdetail.FieldLessonsLearned, field.TypeString)
	}
	if value, ok := pduo.mutation.FutureEnhancements(); ok {
		_spec.SetField(projectdetail.FieldFutureEnhancements, field.TypeString, value)
	}
	if pduo.mutation.FutureEnhancementsCleared() {
		_spec.ClearField(projectdetail.FieldFutureEnhancements, field.TypeString)
	}
	if value, ok := pduo.mutation.License(); ok {
		_spec.SetField(projectdetail.FieldLicense, field.TypeString, value)
	}
	if pduo.mutation.LicenseCleared() {
		_spec.ClearField(projectdetail.FieldLicense, field.TypeString)
	}
	if value, ok := pduo.mutation.Version(); ok {
		_spec.SetField(projectdetail.FieldVersion, field.TypeString, value)
	}
	if pduo.mutation.VersionCleared() {
		_spec.ClearField(projectdetail.FieldVersion, field.TypeString)
	}
	if value, ok := pduo.mutation.UpdatedAt(); ok {
		_spec.SetField(projectdetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if pduo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   projectdetail.ProjectTable,
			Columns: []string{projectdetail.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pduo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   projectdetail.ProjectTable,
			Columns: []string{projectdetail.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pduo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectdetail.TranslationsTable,
			Columns: []string{projectdetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pduo.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !pduo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectdetail.TranslationsTable,
			Columns: []string{projectdetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pduo.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectdetail.TranslationsTable,
			Columns: []string{projectdetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProjectDetail{config: pduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pduo.mutation.done = true
	return _node, nil
}
