// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/projecttechnology"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProjectTechnologyCreate is the builder for creating a ProjectTechnology entity.
type ProjectTechnologyCreate struct {
	config
	mutation *ProjectTechnologyMutation
	hooks    []Hook
}

// SetProjectID sets the "project_id" field.
func (ptc *ProjectTechnologyCreate) SetProjectID(u uuid.UUID) *ProjectTechnologyCreate {
	ptc.mutation.SetProjectID(u)
	return ptc
}

// SetTechnologyName sets the "technology_name" field.
func (ptc *ProjectTechnologyCreate) SetTechnologyName(s string) *ProjectTechnologyCreate {
	ptc.mutation.SetTechnologyName(s)
	return ptc
}

// SetTechnologyType sets the "technology_type" field.
func (ptc *ProjectTechnologyCreate) SetTechnologyType(s string) *ProjectTechnologyCreate {
	ptc.mutation.SetTechnologyType(s)
	return ptc
}

// SetNillableTechnologyType sets the "technology_type" field if the given value is not nil.
func (ptc *ProjectTechnologyCreate) SetNillableTechnologyType(s *string) *ProjectTechnologyCreate {
	if s != nil {
		ptc.SetTechnologyType(*s)
	}
	return ptc
}

// SetSortOrder sets the "sort_order" field.
func (ptc *ProjectTechnologyCreate) SetSortOrder(i int) *ProjectTechnologyCreate {
	ptc.mutation.SetSortOrder(i)
	return ptc
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (ptc *ProjectTechnologyCreate) SetNillableSortOrder(i *int) *ProjectTechnologyCreate {
	if i != nil {
		ptc.SetSortOrder(*i)
	}
	return ptc
}

// SetCreatedAt sets the "created_at" field.
func (ptc *ProjectTechnologyCreate) SetCreatedAt(t time.Time) *ProjectTechnologyCreate {
	ptc.mutation.SetCreatedAt(t)
	return ptc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptc *ProjectTechnologyCreate) SetNillableCreatedAt(t *time.Time) *ProjectTechnologyCreate {
	if t != nil {
		ptc.SetCreatedAt(*t)
	}
	return ptc
}

// SetID sets the "id" field.
func (ptc *ProjectTechnologyCreate) SetID(u uuid.UUID) *ProjectTechnologyCreate {
	ptc.mutation.SetID(u)
	return ptc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ptc *ProjectTechnologyCreate) SetNillableID(u *uuid.UUID) *ProjectTechnologyCreate {
	if u != nil {
		ptc.SetID(*u)
	}
	return ptc
}

// SetProject sets the "project" edge to the Project entity.
func (ptc *ProjectTechnologyCreate) SetProject(p *Project) *ProjectTechnologyCreate {
	return ptc.SetProjectID(p.ID)
}

// Mutation returns the ProjectTechnologyMutation object of the builder.
func (ptc *ProjectTechnologyCreate) Mutation() *ProjectTechnologyMutation {
	return ptc.mutation
}

// Save creates the ProjectTechnology in the database.
func (ptc *ProjectTechnologyCreate) Save(ctx context.Context) (*ProjectTechnology, error) {
	ptc.defaults()
	return withHooks(ctx, ptc.sqlSave, ptc.mutation, ptc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ptc *ProjectTechnologyCreate) SaveX(ctx context.Context) *ProjectTechnology {
	v, err := ptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptc *ProjectTechnologyCreate) Exec(ctx context.Context) error {
	_, err := ptc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptc *ProjectTechnologyCreate) ExecX(ctx context.Context) {
	if err := ptc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptc *ProjectTechnologyCreate) defaults() {
	if _, ok := ptc.mutation.SortOrder(); !ok {
		v := projecttechnology.DefaultSortOrder
		ptc.mutation.SetSortOrder(v)
	}
	if _, ok := ptc.mutation.CreatedAt(); !ok {
		v := projecttechnology.DefaultCreatedAt()
		ptc.mutation.SetCreatedAt(v)
	}
	if _, ok := ptc.mutation.ID(); !ok {
		v := projecttechnology.DefaultID()
		ptc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptc *ProjectTechnologyCreate) check() error {
	if _, ok := ptc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`ent: missing required field "ProjectTechnology.project_id"`)}
	}
	if _, ok := ptc.mutation.TechnologyName(); !ok {
		return &ValidationError{Name: "technology_name", err: errors.New(`ent: missing required field "ProjectTechnology.technology_name"`)}
	}
	if v, ok := ptc.mutation.TechnologyName(); ok {
		if err := projecttechnology.TechnologyNameValidator(v); err != nil {
			return &ValidationError{Name: "technology_name", err: fmt.Errorf(`ent: validator failed for field "ProjectTechnology.technology_name": %w`, err)}
		}
	}
	if v, ok := ptc.mutation.TechnologyType(); ok {
		if err := projecttechnology.TechnologyTypeValidator(v); err != nil {
			return &ValidationError{Name: "technology_type", err: fmt.Errorf(`ent: validator failed for field "ProjectTechnology.technology_type": %w`, err)}
		}
	}
	if _, ok := ptc.mutation.SortOrder(); !ok {
		return &ValidationError{Name: "sort_order", err: errors.New(`ent: missing required field "ProjectTechnology.sort_order"`)}
	}
	if _, ok := ptc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProjectTechnology.created_at"`)}
	}
	if len(ptc.mutation.ProjectIDs()) == 0 {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "ProjectTechnology.project"`)}
	}
	return nil
}

func (ptc *ProjectTechnologyCreate) sqlSave(ctx context.Context) (*ProjectTechnology, error) {
	if err := ptc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ptc.mutation.id = &_node.ID
	ptc.mutation.done = true
	return _node, nil
}

func (ptc *ProjectTechnologyCreate) createSpec() (*ProjectTechnology, *sqlgraph.CreateSpec) {
	var (
		_node = &ProjectTechnology{config: ptc.config}
		_spec = sqlgraph.NewCreateSpec(projecttechnology.Table, sqlgraph.NewFieldSpec(projecttechnology.FieldID, field.TypeUUID))
	)
	if id, ok := ptc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ptc.mutation.TechnologyName(); ok {
		_spec.SetField(projecttechnology.FieldTechnologyName, field.TypeString, value)
		_node.TechnologyName = value
	}
	if value, ok := ptc.mutation.TechnologyType(); ok {
		_spec.SetField(projecttechnology.FieldTechnologyType, field.TypeString, value)
		_node.TechnologyType = value
	}
	if value, ok := ptc.mutation.SortOrder(); ok {
		_spec.SetField(projecttechnology.FieldSortOrder, field.TypeInt, value)
		_node.SortOrder = value
	}
	if value, ok := ptc.mutation.CreatedAt(); ok {
		_spec.SetField(projecttechnology.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := ptc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projecttechnology.ProjectTable,
			Columns: []string{projecttechnology.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProjectTechnologyCreateBulk is the builder for creating many ProjectTechnology entities in bulk.
type ProjectTechnologyCreateBulk struct {
	config
	err      error
	builders []*ProjectTechnologyCreate
}

// Save creates the ProjectTechnology entities in the database.
func (ptcb *ProjectTechnologyCreateBulk) Save(ctx context.Context) ([]*ProjectTechnology, error) {
	if ptcb.err != nil {
		return nil, ptcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ptcb.builders))
	nodes := make([]*ProjectTechnology, len(ptcb.builders))
	mutators := make([]Mutator, len(ptcb.builders))
	for i := range ptcb.builders {
		func(i int, root context.Context) {
			builder := ptcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectTechnologyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptcb *ProjectTechnologyCreateBulk) SaveX(ctx context.Context) []*ProjectTechnology {
	v, err := ptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptcb *ProjectTechnologyCreateBulk) Exec(ctx context.Context) error {
	_, err := ptcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptcb *ProjectTechnologyCreateBulk) ExecX(ctx context.Context) {
	if err := ptcb.Exec(ctx); err != nil {
		panic(err)
	}
}
