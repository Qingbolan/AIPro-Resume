// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/projectimage"
	"silan-backend/internal/ent/projectimagetranslation"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProjectImageUpdate is the builder for updating ProjectImage entities.
type ProjectImageUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectImageMutation
}

// Where appends a list predicates to the ProjectImageUpdate builder.
func (piu *ProjectImageUpdate) Where(ps ...predicate.ProjectImage) *ProjectImageUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetProjectID sets the "project_id" field.
func (piu *ProjectImageUpdate) SetProjectID(u uuid.UUID) *ProjectImageUpdate {
	piu.mutation.SetProjectID(u)
	return piu
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (piu *ProjectImageUpdate) SetNillableProjectID(u *uuid.UUID) *ProjectImageUpdate {
	if u != nil {
		piu.SetProjectID(*u)
	}
	return piu
}

// SetImageURL sets the "image_url" field.
func (piu *ProjectImageUpdate) SetImageURL(s string) *ProjectImageUpdate {
	piu.mutation.SetImageURL(s)
	return piu
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (piu *ProjectImageUpdate) SetNillableImageURL(s *string) *ProjectImageUpdate {
	if s != nil {
		piu.SetImageURL(*s)
	}
	return piu
}

// SetAltText sets the "alt_text" field.
func (piu *ProjectImageUpdate) SetAltText(s string) *ProjectImageUpdate {
	piu.mutation.SetAltText(s)
	return piu
}

// SetNillableAltText sets the "alt_text" field if the given value is not nil.
func (piu *ProjectImageUpdate) SetNillableAltText(s *string) *ProjectImageUpdate {
	if s != nil {
		piu.SetAltText(*s)
	}
	return piu
}

// ClearAltText clears the value of the "alt_text" field.
func (piu *ProjectImageUpdate) ClearAltText() *ProjectImageUpdate {
	piu.mutation.ClearAltText()
	return piu
}

// SetCaption sets the "caption" field.
func (piu *ProjectImageUpdate) SetCaption(s string) *ProjectImageUpdate {
	piu.mutation.SetCaption(s)
	return piu
}

// SetNillableCaption sets the "caption" field if the given value is not nil.
func (piu *ProjectImageUpdate) SetNillableCaption(s *string) *ProjectImageUpdate {
	if s != nil {
		piu.SetCaption(*s)
	}
	return piu
}

// ClearCaption clears the value of the "caption" field.
func (piu *ProjectImageUpdate) ClearCaption() *ProjectImageUpdate {
	piu.mutation.ClearCaption()
	return piu
}

// SetImageType sets the "image_type" field.
func (piu *ProjectImageUpdate) SetImageType(s string) *ProjectImageUpdate {
	piu.mutation.SetImageType(s)
	return piu
}

// SetNillableImageType sets the "image_type" field if the given value is not nil.
func (piu *ProjectImageUpdate) SetNillableImageType(s *string) *ProjectImageUpdate {
	if s != nil {
		piu.SetImageType(*s)
	}
	return piu
}

// ClearImageType clears the value of the "image_type" field.
func (piu *ProjectImageUpdate) ClearImageType() *ProjectImageUpdate {
	piu.mutation.ClearImageType()
	return piu
}

// SetSortOrder sets the "sort_order" field.
func (piu *ProjectImageUpdate) SetSortOrder(i int) *ProjectImageUpdate {
	piu.mutation.ResetSortOrder()
	piu.mutation.SetSortOrder(i)
	return piu
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (piu *ProjectImageUpdate) SetNillableSortOrder(i *int) *ProjectImageUpdate {
	if i != nil {
		piu.SetSortOrder(*i)
	}
	return piu
}

// AddSortOrder adds i to the "sort_order" field.
func (piu *ProjectImageUpdate) AddSortOrder(i int) *ProjectImageUpdate {
	piu.mutation.AddSortOrder(i)
	return piu
}

// SetUpdatedAt sets the "updated_at" field.
func (piu *ProjectImageUpdate) SetUpdatedAt(t time.Time) *ProjectImageUpdate {
	piu.mutation.SetUpdatedAt(t)
	return piu
}

// SetProject sets the "project" edge to the Project entity.
func (piu *ProjectImageUpdate) SetProject(p *Project) *ProjectImageUpdate {
	return piu.SetProjectID(p.ID)
}

// AddTranslationIDs adds the "translations" edge to the ProjectImageTranslation entity by IDs.
func (piu *ProjectImageUpdate) AddTranslationIDs(ids ...uuid.UUID) *ProjectImageUpdate {
	piu.mutation.AddTranslationIDs(ids...)
	return piu
}

// AddTranslations adds the "translations" edges to the ProjectImageTranslation entity.
func (piu *ProjectImageUpdate) AddTranslations(p ...*ProjectImageTranslation) *ProjectImageUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piu.AddTranslationIDs(ids...)
}

// Mutation returns the ProjectImageMutation object of the builder.
func (piu *ProjectImageUpdate) Mutation() *ProjectImageMutation {
	return piu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (piu *ProjectImageUpdate) ClearProject() *ProjectImageUpdate {
	piu.mutation.ClearProject()
	return piu
}

// ClearTranslations clears all "translations" edges to the ProjectImageTranslation entity.
func (piu *ProjectImageUpdate) ClearTranslations() *ProjectImageUpdate {
	piu.mutation.ClearTranslations()
	return piu
}

// RemoveTranslationIDs removes the "translations" edge to ProjectImageTranslation entities by IDs.
func (piu *ProjectImageUpdate) RemoveTranslationIDs(ids ...uuid.UUID) *ProjectImageUpdate {
	piu.mutation.RemoveTranslationIDs(ids...)
	return piu
}

// RemoveTranslations removes "translations" edges to ProjectImageTranslation entities.
func (piu *ProjectImageUpdate) RemoveTranslations(p ...*ProjectImageTranslation) *ProjectImageUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piu.RemoveTranslationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *ProjectImageUpdate) Save(ctx context.Context) (int, error) {
	piu.defaults()
	return withHooks(ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *ProjectImageUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *ProjectImageUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *ProjectImageUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (piu *ProjectImageUpdate) defaults() {
	if _, ok := piu.mutation.UpdatedAt(); !ok {
		v := projectimage.UpdateDefaultUpdatedAt()
		piu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piu *ProjectImageUpdate) check() error {
	if v, ok := piu.mutation.ImageURL(); ok {
		if err := projectimage.ImageURLValidator(v); err != nil {
			return &ValidationError{Name: "image_url", err: fmt.Errorf(`ent: validator failed for field "ProjectImage.image_url": %w`, err)}
		}
	}
	if v, ok := piu.mutation.AltText(); ok {
		if err := projectimage.AltTextValidator(v); err != nil {
			return &ValidationError{Name: "alt_text", err: fmt.Errorf(`ent: validator failed for field "ProjectImage.alt_text": %w`, err)}
		}
	}
	if v, ok := piu.mutation.ImageType(); ok {
		if err := projectimage.ImageTypeValidator(v); err != nil {
			return &ValidationError{Name: "image_type", err: fmt.Errorf(`ent: validator failed for field "ProjectImage.image_type": %w`, err)}
		}
	}
	if piu.mutation.ProjectCleared() && len(piu.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectImage.project"`)
	}
	return nil
}

func (piu *ProjectImageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := piu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectimage.Table, projectimage.Columns, sqlgraph.NewFieldSpec(projectimage.FieldID, field.TypeUUID))
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.ImageURL(); ok {
		_spec.SetField(projectimage.FieldImageURL, field.TypeString, value)
	}
	if value, ok := piu.mutation.AltText(); ok {
		_spec.SetField(projectimage.FieldAltText, field.TypeString, value)
	}
	if piu.mutation.AltTextCleared() {
		_spec.ClearField(projectimage.FieldAltText, field.TypeString)
	}
	if value, ok := piu.mutation.Caption(); ok {
		_spec.SetField(projectimage.FieldCaption, field.TypeString, value)
	}
	if piu.mutation.CaptionCleared() {
		_spec.ClearField(projectimage.FieldCaption, field.TypeString)
	}
	if value, ok := piu.mutation.ImageType(); ok {
		_spec.SetField(projectimage.FieldImageType, field.TypeString, value)
	}
	if piu.mutation.ImageTypeCleared() {
		_spec.ClearField(projectimage.FieldImageType, field.TypeString)
	}
	if value, ok := piu.mutation.SortOrder(); ok {
		_spec.SetField(projectimage.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := piu.mutation.AddedSortOrder(); ok {
		_spec.AddField(projectimage.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := piu.mutation.UpdatedAt(); ok {
		_spec.SetField(projectimage.FieldUpdatedAt, field.TypeTime, value)
	}
	if piu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectimage.ProjectTable,
			Columns: []string{projectimage.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectimage.ProjectTable,
			Columns: []string{projectimage.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piu.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectimage.TranslationsTable,
			Columns: []string{projectimage.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectimagetranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !piu.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectimage.TranslationsTable,
			Columns: []string{projectimage.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectimagetranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectimage.TranslationsTable,
			Columns: []string{projectimage.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectimagetranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// ProjectImageUpdateOne is the builder for updating a single ProjectImage entity.
type ProjectImageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectImageMutation
}

// SetProjectID sets the "project_id" field.
func (piuo *ProjectImageUpdateOne) SetProjectID(u uuid.UUID) *ProjectImageUpdateOne {
	piuo.mutation.SetProjectID(u)
	return piuo
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (piuo *ProjectImageUpdateOne) SetNillableProjectID(u *uuid.UUID) *ProjectImageUpdateOne {
	if u != nil {
		piuo.SetProjectID(*u)
	}
	return piuo
}

// SetImageURL sets the "image_url" field.
func (piuo *ProjectImageUpdateOne) SetImageURL(s string) *ProjectImageUpdateOne {
	piuo.mutation.SetImageURL(s)
	return piuo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (piuo *ProjectImageUpdateOne) SetNillableImageURL(s *string) *ProjectImageUpdateOne {
	if s != nil {
		piuo.SetImageURL(*s)
	}
	return piuo
}

// SetAltText sets the "alt_text" field.
func (piuo *ProjectImageUpdateOne) SetAltText(s string) *ProjectImageUpdateOne {
	piuo.mutation.SetAltText(s)
	return piuo
}

// SetNillableAltText sets the "alt_text" field if the given value is not nil.
func (piuo *ProjectImageUpdateOne) SetNillableAltText(s *string) *ProjectImageUpdateOne {
	if s != nil {
		piuo.SetAltText(*s)
	}
	return piuo
}

// ClearAltText clears the value of the "alt_text" field.
func (piuo *ProjectImageUpdateOne) ClearAltText() *ProjectImageUpdateOne {
	piuo.mutation.ClearAltText()
	return piuo
}

// SetCaption sets the "caption" field.
func (piuo *ProjectImageUpdateOne) SetCaption(s string) *ProjectImageUpdateOne {
	piuo.mutation.SetCaption(s)
	return piuo
}

// SetNillableCaption sets the "caption" field if the given value is not nil.
func (piuo *ProjectImageUpdateOne) SetNillableCaption(s *string) *ProjectImageUpdateOne {
	if s != nil {
		piuo.SetCaption(*s)
	}
	return piuo
}

// ClearCaption clears the value of the "caption" field.
func (piuo *ProjectImageUpdateOne) ClearCaption() *ProjectImageUpdateOne {
	piuo.mutation.ClearCaption()
	return piuo
}

// SetImageType sets the "image_type" field.
func (piuo *ProjectImageUpdateOne) SetImageType(s string) *ProjectImageUpdateOne {
	piuo.mutation.SetImageType(s)
	return piuo
}

// SetNillableImageType sets the "image_type" field if the given value is not nil.
func (piuo *ProjectImageUpdateOne) SetNillableImageType(s *string) *ProjectImageUpdateOne {
	if s != nil {
		piuo.SetImageType(*s)
	}
	return piuo
}

// ClearImageType clears the value of the "image_type" field.
func (piuo *ProjectImageUpdateOne) ClearImageType() *ProjectImageUpdateOne {
	piuo.mutation.ClearImageType()
	return piuo
}

// SetSortOrder sets the "sort_order" field.
func (piuo *ProjectImageUpdateOne) SetSortOrder(i int) *ProjectImageUpdateOne {
	piuo.mutation.ResetSortOrder()
	piuo.mutation.SetSortOrder(i)
	return piuo
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (piuo *ProjectImageUpdateOne) SetNillableSortOrder(i *int) *ProjectImageUpdateOne {
	if i != nil {
		piuo.SetSortOrder(*i)
	}
	return piuo
}

// AddSortOrder adds i to the "sort_order" field.
func (piuo *ProjectImageUpdateOne) AddSortOrder(i int) *ProjectImageUpdateOne {
	piuo.mutation.AddSortOrder(i)
	return piuo
}

// SetUpdatedAt sets the "updated_at" field.
func (piuo *ProjectImageUpdateOne) SetUpdatedAt(t time.Time) *ProjectImageUpdateOne {
	piuo.mutation.SetUpdatedAt(t)
	return piuo
}

// SetProject sets the "project" edge to the Project entity.
func (piuo *ProjectImageUpdateOne) SetProject(p *Project) *ProjectImageUpdateOne {
	return piuo.SetProjectID(p.ID)
}

// AddTranslationIDs adds the "translations" edge to the ProjectImageTranslation entity by IDs.
func (piuo *ProjectImageUpdateOne) AddTranslationIDs(ids ...uuid.UUID) *ProjectImageUpdateOne {
	piuo.mutation.AddTranslationIDs(ids...)
	return piuo
}

// AddTranslations adds the "translations" edges to the ProjectImageTranslation entity.
func (piuo *ProjectImageUpdateOne) AddTranslations(p ...*ProjectImageTranslation) *ProjectImageUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piuo.AddTranslationIDs(ids...)
}

// Mutation returns the ProjectImageMutation object of the builder.
func (piuo *ProjectImageUpdateOne) Mutation() *ProjectImageMutation {
	return piuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (piuo *ProjectImageUpdateOne) ClearProject() *ProjectImageUpdateOne {
	piuo.mutation.ClearProject()
	return piuo
}

// ClearTranslations clears all "translations" edges to the ProjectImageTranslation entity.
func (piuo *ProjectImageUpdateOne) ClearTranslations() *ProjectImageUpdateOne {
	piuo.mutation.ClearTranslations()
	return piuo
}

// RemoveTranslationIDs removes the "translations" edge to ProjectImageTranslation entities by IDs.
func (piuo *ProjectImageUpdateOne) RemoveTranslationIDs(ids ...uuid.UUID) *ProjectImageUpdateOne {
	piuo.mutation.RemoveTranslationIDs(ids...)
	return piuo
}

// RemoveTranslations removes "translations" edges to ProjectImageTranslation entities.
func (piuo *ProjectImageUpdateOne) RemoveTranslations(p ...*ProjectImageTranslation) *ProjectImageUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piuo.RemoveTranslationIDs(ids...)
}

// Where appends a list predicates to the ProjectImageUpdate builder.
func (piuo *ProjectImageUpdateOne) Where(ps ...predicate.ProjectImage) *ProjectImageUpdateOne {
	piuo.mutation.Where(ps...)
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *ProjectImageUpdateOne) Select(field string, fields ...string) *ProjectImageUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated ProjectImage entity.
func (piuo *ProjectImageUpdateOne) Save(ctx context.Context) (*ProjectImage, error) {
	piuo.defaults()
	return withHooks(ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *ProjectImageUpdateOne) SaveX(ctx context.Context) *ProjectImage {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *ProjectImageUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *ProjectImageUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (piuo *ProjectImageUpdateOne) defaults() {
	if _, ok := piuo.mutation.UpdatedAt(); !ok {
		v := projectimage.UpdateDefaultUpdatedAt()
		piuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piuo *ProjectImageUpdateOne) check() error {
	if v, ok := piuo.mutation.ImageURL(); ok {
		if err := projectimage.ImageURLValidator(v); err != nil {
			return &ValidationError{Name: "image_url", err: fmt.Errorf(`ent: validator failed for field "ProjectImage.image_url": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.AltText(); ok {
		if err := projectimage.AltTextValidator(v); err != nil {
			return &ValidationError{Name: "alt_text", err: fmt.Errorf(`ent: validator failed for field "ProjectImage.alt_text": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.ImageType(); ok {
		if err := projectimage.ImageTypeValidator(v); err != nil {
			return &ValidationError{Name: "image_type", err: fmt.Errorf(`ent: validator failed for field "ProjectImage.image_type": %w`, err)}
		}
	}
	if piuo.mutation.ProjectCleared() && len(piuo.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectImage.project"`)
	}
	return nil
}

func (piuo *ProjectImageUpdateOne) sqlSave(ctx context.Context) (_node *ProjectImage, err error) {
	if err := piuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectimage.Table, projectimage.Columns, sqlgraph.NewFieldSpec(projectimage.FieldID, field.TypeUUID))
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProjectImage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectimage.FieldID)
		for _, f := range fields {
			if !projectimage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != projectimage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.ImageURL(); ok {
		_spec.SetField(projectimage.FieldImageURL, field.TypeString, value)
	}
	if value, ok := piuo.mutation.AltText(); ok {
		_spec.SetField(projectimage.FieldAltText, field.TypeString, value)
	}
	if piuo.mutation.AltTextCleared() {
		_spec.ClearField(projectimage.FieldAltText, field.TypeString)
	}
	if value, ok := piuo.mutation.Caption(); ok {
		_spec.SetField(projectimage.FieldCaption, field.TypeString, value)
	}
	if piuo.mutation.CaptionCleared() {
		_spec.ClearField(projectimage.FieldCaption, field.TypeString)
	}
	if value, ok := piuo.mutation.ImageType(); ok {
		_spec.SetField(projectimage.FieldImageType, field.TypeString, value)
	}
	if piuo.mutation.ImageTypeCleared() {
		_spec.ClearField(projectimage.FieldImageType, field.TypeString)
	}
	if value, ok := piuo.mutation.SortOrder(); ok {
		_spec.SetField(projectimage.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := piuo.mutation.AddedSortOrder(); ok {
		_spec.AddField(projectimage.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := piuo.mutation.UpdatedAt(); ok {
		_spec.SetField(projectimage.FieldUpdatedAt, field.TypeTime, value)
	}
	if piuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectimage.ProjectTable,
			Columns: []string{projectimage.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectimage.ProjectTable,
			Columns: []string{projectimage.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piuo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectimage.TranslationsTable,
			Columns: []string{projectimage.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectimagetranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !piuo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectimage.TranslationsTable,
			Columns: []string{projectimage.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectimagetranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectimage.TranslationsTable,
			Columns: []string{projectimage.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectimagetranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProjectImage{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}
