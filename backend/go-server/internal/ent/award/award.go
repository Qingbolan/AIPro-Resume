// Code generated by ent, DO NOT EDIT.

package award

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the award type in the database.
	Label = "award"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldAwardingOrganization holds the string denoting the awarding_organization field in the database.
	FieldAwardingOrganization = "awarding_organization"
	// FieldAwardDate holds the string denoting the award_date field in the database.
	FieldAwardDate = "award_date"
	// FieldAwardType holds the string denoting the award_type field in the database.
	FieldAwardType = "award_type"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCertificateURL holds the string denoting the certificate_url field in the database.
	FieldCertificateURL = "certificate_url"
	// FieldSortOrder holds the string denoting the sort_order field in the database.
	FieldSortOrder = "sort_order"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeTranslations holds the string denoting the translations edge name in mutations.
	EdgeTranslations = "translations"
	// Table holds the table name of the award in the database.
	Table = "awards"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "awards"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// TranslationsTable is the table that holds the translations relation/edge.
	TranslationsTable = "award_translations"
	// TranslationsInverseTable is the table name for the AwardTranslation entity.
	// It exists in this package in order to avoid circular dependency with the "awardtranslation" package.
	TranslationsInverseTable = "award_translations"
	// TranslationsColumn is the table column denoting the translations relation/edge.
	TranslationsColumn = "award_id"
)

// Columns holds all SQL columns for award fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldTitle,
	FieldAwardingOrganization,
	FieldAwardDate,
	FieldAwardType,
	FieldAmount,
	FieldDescription,
	FieldCertificateURL,
	FieldSortOrder,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// AwardingOrganizationValidator is a validator for the "awarding_organization" field. It is called by the builders before save.
	AwardingOrganizationValidator func(string) error
	// AwardTypeValidator is a validator for the "award_type" field. It is called by the builders before save.
	AwardTypeValidator func(string) error
	// CertificateURLValidator is a validator for the "certificate_url" field. It is called by the builders before save.
	CertificateURLValidator func(string) error
	// DefaultSortOrder holds the default value on creation for the "sort_order" field.
	DefaultSortOrder int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Award queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByAwardingOrganization orders the results by the awarding_organization field.
func ByAwardingOrganization(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAwardingOrganization, opts...).ToFunc()
}

// ByAwardDate orders the results by the award_date field.
func ByAwardDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAwardDate, opts...).ToFunc()
}

// ByAwardType orders the results by the award_type field.
func ByAwardType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAwardType, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCertificateURL orders the results by the certificate_url field.
func ByCertificateURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCertificateURL, opts...).ToFunc()
}

// BySortOrder orders the results by the sort_order field.
func BySortOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSortOrder, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByTranslationsCount orders the results by translations count.
func ByTranslationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTranslationsStep(), opts...)
	}
}

// ByTranslations orders the results by translations terms.
func ByTranslations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTranslationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newTranslationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TranslationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TranslationsTable, TranslationsColumn),
	)
}
