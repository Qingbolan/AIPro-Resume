// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/idea"
	"silan-backend/internal/ent/ideatranslation"
	"silan-backend/internal/ent/language"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// IdeaTranslationCreate is the builder for creating a IdeaTranslation entity.
type IdeaTranslationCreate struct {
	config
	mutation *IdeaTranslationMutation
	hooks    []Hook
}

// SetIdeaID sets the "idea_id" field.
func (itc *IdeaTranslationCreate) SetIdeaID(u uuid.UUID) *IdeaTranslationCreate {
	itc.mutation.SetIdeaID(u)
	return itc
}

// SetLanguageCode sets the "language_code" field.
func (itc *IdeaTranslationCreate) SetLanguageCode(s string) *IdeaTranslationCreate {
	itc.mutation.SetLanguageCode(s)
	return itc
}

// SetTitle sets the "title" field.
func (itc *IdeaTranslationCreate) SetTitle(s string) *IdeaTranslationCreate {
	itc.mutation.SetTitle(s)
	return itc
}

// SetAbstract sets the "abstract" field.
func (itc *IdeaTranslationCreate) SetAbstract(s string) *IdeaTranslationCreate {
	itc.mutation.SetAbstract(s)
	return itc
}

// SetNillableAbstract sets the "abstract" field if the given value is not nil.
func (itc *IdeaTranslationCreate) SetNillableAbstract(s *string) *IdeaTranslationCreate {
	if s != nil {
		itc.SetAbstract(*s)
	}
	return itc
}

// SetMotivation sets the "motivation" field.
func (itc *IdeaTranslationCreate) SetMotivation(s string) *IdeaTranslationCreate {
	itc.mutation.SetMotivation(s)
	return itc
}

// SetNillableMotivation sets the "motivation" field if the given value is not nil.
func (itc *IdeaTranslationCreate) SetNillableMotivation(s *string) *IdeaTranslationCreate {
	if s != nil {
		itc.SetMotivation(*s)
	}
	return itc
}

// SetMethodology sets the "methodology" field.
func (itc *IdeaTranslationCreate) SetMethodology(s string) *IdeaTranslationCreate {
	itc.mutation.SetMethodology(s)
	return itc
}

// SetNillableMethodology sets the "methodology" field if the given value is not nil.
func (itc *IdeaTranslationCreate) SetNillableMethodology(s *string) *IdeaTranslationCreate {
	if s != nil {
		itc.SetMethodology(*s)
	}
	return itc
}

// SetExpectedOutcome sets the "expected_outcome" field.
func (itc *IdeaTranslationCreate) SetExpectedOutcome(s string) *IdeaTranslationCreate {
	itc.mutation.SetExpectedOutcome(s)
	return itc
}

// SetNillableExpectedOutcome sets the "expected_outcome" field if the given value is not nil.
func (itc *IdeaTranslationCreate) SetNillableExpectedOutcome(s *string) *IdeaTranslationCreate {
	if s != nil {
		itc.SetExpectedOutcome(*s)
	}
	return itc
}

// SetRequiredResources sets the "required_resources" field.
func (itc *IdeaTranslationCreate) SetRequiredResources(s string) *IdeaTranslationCreate {
	itc.mutation.SetRequiredResources(s)
	return itc
}

// SetNillableRequiredResources sets the "required_resources" field if the given value is not nil.
func (itc *IdeaTranslationCreate) SetNillableRequiredResources(s *string) *IdeaTranslationCreate {
	if s != nil {
		itc.SetRequiredResources(*s)
	}
	return itc
}

// SetCreatedAt sets the "created_at" field.
func (itc *IdeaTranslationCreate) SetCreatedAt(t time.Time) *IdeaTranslationCreate {
	itc.mutation.SetCreatedAt(t)
	return itc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (itc *IdeaTranslationCreate) SetNillableCreatedAt(t *time.Time) *IdeaTranslationCreate {
	if t != nil {
		itc.SetCreatedAt(*t)
	}
	return itc
}

// SetID sets the "id" field.
func (itc *IdeaTranslationCreate) SetID(u uuid.UUID) *IdeaTranslationCreate {
	itc.mutation.SetID(u)
	return itc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (itc *IdeaTranslationCreate) SetNillableID(u *uuid.UUID) *IdeaTranslationCreate {
	if u != nil {
		itc.SetID(*u)
	}
	return itc
}

// SetIdea sets the "idea" edge to the Idea entity.
func (itc *IdeaTranslationCreate) SetIdea(i *Idea) *IdeaTranslationCreate {
	return itc.SetIdeaID(i.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (itc *IdeaTranslationCreate) SetLanguageID(id string) *IdeaTranslationCreate {
	itc.mutation.SetLanguageID(id)
	return itc
}

// SetLanguage sets the "language" edge to the Language entity.
func (itc *IdeaTranslationCreate) SetLanguage(l *Language) *IdeaTranslationCreate {
	return itc.SetLanguageID(l.ID)
}

// Mutation returns the IdeaTranslationMutation object of the builder.
func (itc *IdeaTranslationCreate) Mutation() *IdeaTranslationMutation {
	return itc.mutation
}

// Save creates the IdeaTranslation in the database.
func (itc *IdeaTranslationCreate) Save(ctx context.Context) (*IdeaTranslation, error) {
	itc.defaults()
	return withHooks(ctx, itc.sqlSave, itc.mutation, itc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (itc *IdeaTranslationCreate) SaveX(ctx context.Context) *IdeaTranslation {
	v, err := itc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (itc *IdeaTranslationCreate) Exec(ctx context.Context) error {
	_, err := itc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itc *IdeaTranslationCreate) ExecX(ctx context.Context) {
	if err := itc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (itc *IdeaTranslationCreate) defaults() {
	if _, ok := itc.mutation.CreatedAt(); !ok {
		v := ideatranslation.DefaultCreatedAt()
		itc.mutation.SetCreatedAt(v)
	}
	if _, ok := itc.mutation.ID(); !ok {
		v := ideatranslation.DefaultID()
		itc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (itc *IdeaTranslationCreate) check() error {
	if _, ok := itc.mutation.IdeaID(); !ok {
		return &ValidationError{Name: "idea_id", err: errors.New(`ent: missing required field "IdeaTranslation.idea_id"`)}
	}
	if _, ok := itc.mutation.LanguageCode(); !ok {
		return &ValidationError{Name: "language_code", err: errors.New(`ent: missing required field "IdeaTranslation.language_code"`)}
	}
	if v, ok := itc.mutation.LanguageCode(); ok {
		if err := ideatranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "IdeaTranslation.language_code": %w`, err)}
		}
	}
	if _, ok := itc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "IdeaTranslation.title"`)}
	}
	if v, ok := itc.mutation.Title(); ok {
		if err := ideatranslation.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "IdeaTranslation.title": %w`, err)}
		}
	}
	if _, ok := itc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "IdeaTranslation.created_at"`)}
	}
	if len(itc.mutation.IdeaIDs()) == 0 {
		return &ValidationError{Name: "idea", err: errors.New(`ent: missing required edge "IdeaTranslation.idea"`)}
	}
	if len(itc.mutation.LanguageIDs()) == 0 {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required edge "IdeaTranslation.language"`)}
	}
	return nil
}

func (itc *IdeaTranslationCreate) sqlSave(ctx context.Context) (*IdeaTranslation, error) {
	if err := itc.check(); err != nil {
		return nil, err
	}
	_node, _spec := itc.createSpec()
	if err := sqlgraph.CreateNode(ctx, itc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	itc.mutation.id = &_node.ID
	itc.mutation.done = true
	return _node, nil
}

func (itc *IdeaTranslationCreate) createSpec() (*IdeaTranslation, *sqlgraph.CreateSpec) {
	var (
		_node = &IdeaTranslation{config: itc.config}
		_spec = sqlgraph.NewCreateSpec(ideatranslation.Table, sqlgraph.NewFieldSpec(ideatranslation.FieldID, field.TypeUUID))
	)
	if id, ok := itc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := itc.mutation.Title(); ok {
		_spec.SetField(ideatranslation.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := itc.mutation.Abstract(); ok {
		_spec.SetField(ideatranslation.FieldAbstract, field.TypeString, value)
		_node.Abstract = value
	}
	if value, ok := itc.mutation.Motivation(); ok {
		_spec.SetField(ideatranslation.FieldMotivation, field.TypeString, value)
		_node.Motivation = value
	}
	if value, ok := itc.mutation.Methodology(); ok {
		_spec.SetField(ideatranslation.FieldMethodology, field.TypeString, value)
		_node.Methodology = value
	}
	if value, ok := itc.mutation.ExpectedOutcome(); ok {
		_spec.SetField(ideatranslation.FieldExpectedOutcome, field.TypeString, value)
		_node.ExpectedOutcome = value
	}
	if value, ok := itc.mutation.RequiredResources(); ok {
		_spec.SetField(ideatranslation.FieldRequiredResources, field.TypeString, value)
		_node.RequiredResources = value
	}
	if value, ok := itc.mutation.CreatedAt(); ok {
		_spec.SetField(ideatranslation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := itc.mutation.IdeaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ideatranslation.IdeaTable,
			Columns: []string{ideatranslation.IdeaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.IdeaID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := itc.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ideatranslation.LanguageTable,
			Columns: []string{ideatranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LanguageCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IdeaTranslationCreateBulk is the builder for creating many IdeaTranslation entities in bulk.
type IdeaTranslationCreateBulk struct {
	config
	err      error
	builders []*IdeaTranslationCreate
}

// Save creates the IdeaTranslation entities in the database.
func (itcb *IdeaTranslationCreateBulk) Save(ctx context.Context) ([]*IdeaTranslation, error) {
	if itcb.err != nil {
		return nil, itcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(itcb.builders))
	nodes := make([]*IdeaTranslation, len(itcb.builders))
	mutators := make([]Mutator, len(itcb.builders))
	for i := range itcb.builders {
		func(i int, root context.Context) {
			builder := itcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IdeaTranslationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, itcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, itcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, itcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (itcb *IdeaTranslationCreateBulk) SaveX(ctx context.Context) []*IdeaTranslation {
	v, err := itcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (itcb *IdeaTranslationCreateBulk) Exec(ctx context.Context) error {
	_, err := itcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itcb *IdeaTranslationCreateBulk) ExecX(ctx context.Context) {
	if err := itcb.Exec(ctx); err != nil {
		panic(err)
	}
}
