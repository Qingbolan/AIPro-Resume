// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"silan-backend/internal/ent/migrate"

	"silan-backend/internal/ent/award"
	"silan-backend/internal/ent/awardtranslation"
	"silan-backend/internal/ent/blogcategory"
	"silan-backend/internal/ent/blogcategorytranslation"
	"silan-backend/internal/ent/blogcomment"
	"silan-backend/internal/ent/blogpost"
	"silan-backend/internal/ent/blogposttag"
	"silan-backend/internal/ent/blogposttranslation"
	"silan-backend/internal/ent/blogseries"
	"silan-backend/internal/ent/blogseriestranslation"
	"silan-backend/internal/ent/blogtag"
	"silan-backend/internal/ent/education"
	"silan-backend/internal/ent/educationdetail"
	"silan-backend/internal/ent/educationdetailtranslation"
	"silan-backend/internal/ent/educationtranslation"
	"silan-backend/internal/ent/idea"
	"silan-backend/internal/ent/ideatranslation"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/personalinfo"
	"silan-backend/internal/ent/personalinfotranslation"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/projectdetail"
	"silan-backend/internal/ent/projectdetailtranslation"
	"silan-backend/internal/ent/projectimage"
	"silan-backend/internal/ent/projectimagetranslation"
	"silan-backend/internal/ent/projectrelationship"
	"silan-backend/internal/ent/projecttechnology"
	"silan-backend/internal/ent/projecttranslation"
	"silan-backend/internal/ent/publication"
	"silan-backend/internal/ent/publicationauthor"
	"silan-backend/internal/ent/publicationtranslation"
	"silan-backend/internal/ent/recentupdate"
	"silan-backend/internal/ent/recentupdatetranslation"
	"silan-backend/internal/ent/researchproject"
	"silan-backend/internal/ent/researchprojectdetail"
	"silan-backend/internal/ent/researchprojectdetailtranslation"
	"silan-backend/internal/ent/researchprojecttranslation"
	"silan-backend/internal/ent/sociallink"
	"silan-backend/internal/ent/user"
	"silan-backend/internal/ent/workexperience"
	"silan-backend/internal/ent/workexperiencedetail"
	"silan-backend/internal/ent/workexperiencedetailtranslation"
	"silan-backend/internal/ent/workexperiencetranslation"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Award is the client for interacting with the Award builders.
	Award *AwardClient
	// AwardTranslation is the client for interacting with the AwardTranslation builders.
	AwardTranslation *AwardTranslationClient
	// BlogCategory is the client for interacting with the BlogCategory builders.
	BlogCategory *BlogCategoryClient
	// BlogCategoryTranslation is the client for interacting with the BlogCategoryTranslation builders.
	BlogCategoryTranslation *BlogCategoryTranslationClient
	// BlogComment is the client for interacting with the BlogComment builders.
	BlogComment *BlogCommentClient
	// BlogPost is the client for interacting with the BlogPost builders.
	BlogPost *BlogPostClient
	// BlogPostTag is the client for interacting with the BlogPostTag builders.
	BlogPostTag *BlogPostTagClient
	// BlogPostTranslation is the client for interacting with the BlogPostTranslation builders.
	BlogPostTranslation *BlogPostTranslationClient
	// BlogSeries is the client for interacting with the BlogSeries builders.
	BlogSeries *BlogSeriesClient
	// BlogSeriesTranslation is the client for interacting with the BlogSeriesTranslation builders.
	BlogSeriesTranslation *BlogSeriesTranslationClient
	// BlogTag is the client for interacting with the BlogTag builders.
	BlogTag *BlogTagClient
	// Education is the client for interacting with the Education builders.
	Education *EducationClient
	// EducationDetail is the client for interacting with the EducationDetail builders.
	EducationDetail *EducationDetailClient
	// EducationDetailTranslation is the client for interacting with the EducationDetailTranslation builders.
	EducationDetailTranslation *EducationDetailTranslationClient
	// EducationTranslation is the client for interacting with the EducationTranslation builders.
	EducationTranslation *EducationTranslationClient
	// Idea is the client for interacting with the Idea builders.
	Idea *IdeaClient
	// IdeaTranslation is the client for interacting with the IdeaTranslation builders.
	IdeaTranslation *IdeaTranslationClient
	// Language is the client for interacting with the Language builders.
	Language *LanguageClient
	// PersonalInfo is the client for interacting with the PersonalInfo builders.
	PersonalInfo *PersonalInfoClient
	// PersonalInfoTranslation is the client for interacting with the PersonalInfoTranslation builders.
	PersonalInfoTranslation *PersonalInfoTranslationClient
	// Project is the client for interacting with the Project builders.
	Project *ProjectClient
	// ProjectDetail is the client for interacting with the ProjectDetail builders.
	ProjectDetail *ProjectDetailClient
	// ProjectDetailTranslation is the client for interacting with the ProjectDetailTranslation builders.
	ProjectDetailTranslation *ProjectDetailTranslationClient
	// ProjectImage is the client for interacting with the ProjectImage builders.
	ProjectImage *ProjectImageClient
	// ProjectImageTranslation is the client for interacting with the ProjectImageTranslation builders.
	ProjectImageTranslation *ProjectImageTranslationClient
	// ProjectRelationship is the client for interacting with the ProjectRelationship builders.
	ProjectRelationship *ProjectRelationshipClient
	// ProjectTechnology is the client for interacting with the ProjectTechnology builders.
	ProjectTechnology *ProjectTechnologyClient
	// ProjectTranslation is the client for interacting with the ProjectTranslation builders.
	ProjectTranslation *ProjectTranslationClient
	// Publication is the client for interacting with the Publication builders.
	Publication *PublicationClient
	// PublicationAuthor is the client for interacting with the PublicationAuthor builders.
	PublicationAuthor *PublicationAuthorClient
	// PublicationTranslation is the client for interacting with the PublicationTranslation builders.
	PublicationTranslation *PublicationTranslationClient
	// RecentUpdate is the client for interacting with the RecentUpdate builders.
	RecentUpdate *RecentUpdateClient
	// RecentUpdateTranslation is the client for interacting with the RecentUpdateTranslation builders.
	RecentUpdateTranslation *RecentUpdateTranslationClient
	// ResearchProject is the client for interacting with the ResearchProject builders.
	ResearchProject *ResearchProjectClient
	// ResearchProjectDetail is the client for interacting with the ResearchProjectDetail builders.
	ResearchProjectDetail *ResearchProjectDetailClient
	// ResearchProjectDetailTranslation is the client for interacting with the ResearchProjectDetailTranslation builders.
	ResearchProjectDetailTranslation *ResearchProjectDetailTranslationClient
	// ResearchProjectTranslation is the client for interacting with the ResearchProjectTranslation builders.
	ResearchProjectTranslation *ResearchProjectTranslationClient
	// SocialLink is the client for interacting with the SocialLink builders.
	SocialLink *SocialLinkClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// WorkExperience is the client for interacting with the WorkExperience builders.
	WorkExperience *WorkExperienceClient
	// WorkExperienceDetail is the client for interacting with the WorkExperienceDetail builders.
	WorkExperienceDetail *WorkExperienceDetailClient
	// WorkExperienceDetailTranslation is the client for interacting with the WorkExperienceDetailTranslation builders.
	WorkExperienceDetailTranslation *WorkExperienceDetailTranslationClient
	// WorkExperienceTranslation is the client for interacting with the WorkExperienceTranslation builders.
	WorkExperienceTranslation *WorkExperienceTranslationClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Award = NewAwardClient(c.config)
	c.AwardTranslation = NewAwardTranslationClient(c.config)
	c.BlogCategory = NewBlogCategoryClient(c.config)
	c.BlogCategoryTranslation = NewBlogCategoryTranslationClient(c.config)
	c.BlogComment = NewBlogCommentClient(c.config)
	c.BlogPost = NewBlogPostClient(c.config)
	c.BlogPostTag = NewBlogPostTagClient(c.config)
	c.BlogPostTranslation = NewBlogPostTranslationClient(c.config)
	c.BlogSeries = NewBlogSeriesClient(c.config)
	c.BlogSeriesTranslation = NewBlogSeriesTranslationClient(c.config)
	c.BlogTag = NewBlogTagClient(c.config)
	c.Education = NewEducationClient(c.config)
	c.EducationDetail = NewEducationDetailClient(c.config)
	c.EducationDetailTranslation = NewEducationDetailTranslationClient(c.config)
	c.EducationTranslation = NewEducationTranslationClient(c.config)
	c.Idea = NewIdeaClient(c.config)
	c.IdeaTranslation = NewIdeaTranslationClient(c.config)
	c.Language = NewLanguageClient(c.config)
	c.PersonalInfo = NewPersonalInfoClient(c.config)
	c.PersonalInfoTranslation = NewPersonalInfoTranslationClient(c.config)
	c.Project = NewProjectClient(c.config)
	c.ProjectDetail = NewProjectDetailClient(c.config)
	c.ProjectDetailTranslation = NewProjectDetailTranslationClient(c.config)
	c.ProjectImage = NewProjectImageClient(c.config)
	c.ProjectImageTranslation = NewProjectImageTranslationClient(c.config)
	c.ProjectRelationship = NewProjectRelationshipClient(c.config)
	c.ProjectTechnology = NewProjectTechnologyClient(c.config)
	c.ProjectTranslation = NewProjectTranslationClient(c.config)
	c.Publication = NewPublicationClient(c.config)
	c.PublicationAuthor = NewPublicationAuthorClient(c.config)
	c.PublicationTranslation = NewPublicationTranslationClient(c.config)
	c.RecentUpdate = NewRecentUpdateClient(c.config)
	c.RecentUpdateTranslation = NewRecentUpdateTranslationClient(c.config)
	c.ResearchProject = NewResearchProjectClient(c.config)
	c.ResearchProjectDetail = NewResearchProjectDetailClient(c.config)
	c.ResearchProjectDetailTranslation = NewResearchProjectDetailTranslationClient(c.config)
	c.ResearchProjectTranslation = NewResearchProjectTranslationClient(c.config)
	c.SocialLink = NewSocialLinkClient(c.config)
	c.User = NewUserClient(c.config)
	c.WorkExperience = NewWorkExperienceClient(c.config)
	c.WorkExperienceDetail = NewWorkExperienceDetailClient(c.config)
	c.WorkExperienceDetailTranslation = NewWorkExperienceDetailTranslationClient(c.config)
	c.WorkExperienceTranslation = NewWorkExperienceTranslationClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                              ctx,
		config:                           cfg,
		Award:                            NewAwardClient(cfg),
		AwardTranslation:                 NewAwardTranslationClient(cfg),
		BlogCategory:                     NewBlogCategoryClient(cfg),
		BlogCategoryTranslation:          NewBlogCategoryTranslationClient(cfg),
		BlogComment:                      NewBlogCommentClient(cfg),
		BlogPost:                         NewBlogPostClient(cfg),
		BlogPostTag:                      NewBlogPostTagClient(cfg),
		BlogPostTranslation:              NewBlogPostTranslationClient(cfg),
		BlogSeries:                       NewBlogSeriesClient(cfg),
		BlogSeriesTranslation:            NewBlogSeriesTranslationClient(cfg),
		BlogTag:                          NewBlogTagClient(cfg),
		Education:                        NewEducationClient(cfg),
		EducationDetail:                  NewEducationDetailClient(cfg),
		EducationDetailTranslation:       NewEducationDetailTranslationClient(cfg),
		EducationTranslation:             NewEducationTranslationClient(cfg),
		Idea:                             NewIdeaClient(cfg),
		IdeaTranslation:                  NewIdeaTranslationClient(cfg),
		Language:                         NewLanguageClient(cfg),
		PersonalInfo:                     NewPersonalInfoClient(cfg),
		PersonalInfoTranslation:          NewPersonalInfoTranslationClient(cfg),
		Project:                          NewProjectClient(cfg),
		ProjectDetail:                    NewProjectDetailClient(cfg),
		ProjectDetailTranslation:         NewProjectDetailTranslationClient(cfg),
		ProjectImage:                     NewProjectImageClient(cfg),
		ProjectImageTranslation:          NewProjectImageTranslationClient(cfg),
		ProjectRelationship:              NewProjectRelationshipClient(cfg),
		ProjectTechnology:                NewProjectTechnologyClient(cfg),
		ProjectTranslation:               NewProjectTranslationClient(cfg),
		Publication:                      NewPublicationClient(cfg),
		PublicationAuthor:                NewPublicationAuthorClient(cfg),
		PublicationTranslation:           NewPublicationTranslationClient(cfg),
		RecentUpdate:                     NewRecentUpdateClient(cfg),
		RecentUpdateTranslation:          NewRecentUpdateTranslationClient(cfg),
		ResearchProject:                  NewResearchProjectClient(cfg),
		ResearchProjectDetail:            NewResearchProjectDetailClient(cfg),
		ResearchProjectDetailTranslation: NewResearchProjectDetailTranslationClient(cfg),
		ResearchProjectTranslation:       NewResearchProjectTranslationClient(cfg),
		SocialLink:                       NewSocialLinkClient(cfg),
		User:                             NewUserClient(cfg),
		WorkExperience:                   NewWorkExperienceClient(cfg),
		WorkExperienceDetail:             NewWorkExperienceDetailClient(cfg),
		WorkExperienceDetailTranslation:  NewWorkExperienceDetailTranslationClient(cfg),
		WorkExperienceTranslation:        NewWorkExperienceTranslationClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                              ctx,
		config:                           cfg,
		Award:                            NewAwardClient(cfg),
		AwardTranslation:                 NewAwardTranslationClient(cfg),
		BlogCategory:                     NewBlogCategoryClient(cfg),
		BlogCategoryTranslation:          NewBlogCategoryTranslationClient(cfg),
		BlogComment:                      NewBlogCommentClient(cfg),
		BlogPost:                         NewBlogPostClient(cfg),
		BlogPostTag:                      NewBlogPostTagClient(cfg),
		BlogPostTranslation:              NewBlogPostTranslationClient(cfg),
		BlogSeries:                       NewBlogSeriesClient(cfg),
		BlogSeriesTranslation:            NewBlogSeriesTranslationClient(cfg),
		BlogTag:                          NewBlogTagClient(cfg),
		Education:                        NewEducationClient(cfg),
		EducationDetail:                  NewEducationDetailClient(cfg),
		EducationDetailTranslation:       NewEducationDetailTranslationClient(cfg),
		EducationTranslation:             NewEducationTranslationClient(cfg),
		Idea:                             NewIdeaClient(cfg),
		IdeaTranslation:                  NewIdeaTranslationClient(cfg),
		Language:                         NewLanguageClient(cfg),
		PersonalInfo:                     NewPersonalInfoClient(cfg),
		PersonalInfoTranslation:          NewPersonalInfoTranslationClient(cfg),
		Project:                          NewProjectClient(cfg),
		ProjectDetail:                    NewProjectDetailClient(cfg),
		ProjectDetailTranslation:         NewProjectDetailTranslationClient(cfg),
		ProjectImage:                     NewProjectImageClient(cfg),
		ProjectImageTranslation:          NewProjectImageTranslationClient(cfg),
		ProjectRelationship:              NewProjectRelationshipClient(cfg),
		ProjectTechnology:                NewProjectTechnologyClient(cfg),
		ProjectTranslation:               NewProjectTranslationClient(cfg),
		Publication:                      NewPublicationClient(cfg),
		PublicationAuthor:                NewPublicationAuthorClient(cfg),
		PublicationTranslation:           NewPublicationTranslationClient(cfg),
		RecentUpdate:                     NewRecentUpdateClient(cfg),
		RecentUpdateTranslation:          NewRecentUpdateTranslationClient(cfg),
		ResearchProject:                  NewResearchProjectClient(cfg),
		ResearchProjectDetail:            NewResearchProjectDetailClient(cfg),
		ResearchProjectDetailTranslation: NewResearchProjectDetailTranslationClient(cfg),
		ResearchProjectTranslation:       NewResearchProjectTranslationClient(cfg),
		SocialLink:                       NewSocialLinkClient(cfg),
		User:                             NewUserClient(cfg),
		WorkExperience:                   NewWorkExperienceClient(cfg),
		WorkExperienceDetail:             NewWorkExperienceDetailClient(cfg),
		WorkExperienceDetailTranslation:  NewWorkExperienceDetailTranslationClient(cfg),
		WorkExperienceTranslation:        NewWorkExperienceTranslationClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Award.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Award, c.AwardTranslation, c.BlogCategory, c.BlogCategoryTranslation,
		c.BlogComment, c.BlogPost, c.BlogPostTag, c.BlogPostTranslation, c.BlogSeries,
		c.BlogSeriesTranslation, c.BlogTag, c.Education, c.EducationDetail,
		c.EducationDetailTranslation, c.EducationTranslation, c.Idea,
		c.IdeaTranslation, c.Language, c.PersonalInfo, c.PersonalInfoTranslation,
		c.Project, c.ProjectDetail, c.ProjectDetailTranslation, c.ProjectImage,
		c.ProjectImageTranslation, c.ProjectRelationship, c.ProjectTechnology,
		c.ProjectTranslation, c.Publication, c.PublicationAuthor,
		c.PublicationTranslation, c.RecentUpdate, c.RecentUpdateTranslation,
		c.ResearchProject, c.ResearchProjectDetail, c.ResearchProjectDetailTranslation,
		c.ResearchProjectTranslation, c.SocialLink, c.User, c.WorkExperience,
		c.WorkExperienceDetail, c.WorkExperienceDetailTranslation,
		c.WorkExperienceTranslation,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Award, c.AwardTranslation, c.BlogCategory, c.BlogCategoryTranslation,
		c.BlogComment, c.BlogPost, c.BlogPostTag, c.BlogPostTranslation, c.BlogSeries,
		c.BlogSeriesTranslation, c.BlogTag, c.Education, c.EducationDetail,
		c.EducationDetailTranslation, c.EducationTranslation, c.Idea,
		c.IdeaTranslation, c.Language, c.PersonalInfo, c.PersonalInfoTranslation,
		c.Project, c.ProjectDetail, c.ProjectDetailTranslation, c.ProjectImage,
		c.ProjectImageTranslation, c.ProjectRelationship, c.ProjectTechnology,
		c.ProjectTranslation, c.Publication, c.PublicationAuthor,
		c.PublicationTranslation, c.RecentUpdate, c.RecentUpdateTranslation,
		c.ResearchProject, c.ResearchProjectDetail, c.ResearchProjectDetailTranslation,
		c.ResearchProjectTranslation, c.SocialLink, c.User, c.WorkExperience,
		c.WorkExperienceDetail, c.WorkExperienceDetailTranslation,
		c.WorkExperienceTranslation,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AwardMutation:
		return c.Award.mutate(ctx, m)
	case *AwardTranslationMutation:
		return c.AwardTranslation.mutate(ctx, m)
	case *BlogCategoryMutation:
		return c.BlogCategory.mutate(ctx, m)
	case *BlogCategoryTranslationMutation:
		return c.BlogCategoryTranslation.mutate(ctx, m)
	case *BlogCommentMutation:
		return c.BlogComment.mutate(ctx, m)
	case *BlogPostMutation:
		return c.BlogPost.mutate(ctx, m)
	case *BlogPostTagMutation:
		return c.BlogPostTag.mutate(ctx, m)
	case *BlogPostTranslationMutation:
		return c.BlogPostTranslation.mutate(ctx, m)
	case *BlogSeriesMutation:
		return c.BlogSeries.mutate(ctx, m)
	case *BlogSeriesTranslationMutation:
		return c.BlogSeriesTranslation.mutate(ctx, m)
	case *BlogTagMutation:
		return c.BlogTag.mutate(ctx, m)
	case *EducationMutation:
		return c.Education.mutate(ctx, m)
	case *EducationDetailMutation:
		return c.EducationDetail.mutate(ctx, m)
	case *EducationDetailTranslationMutation:
		return c.EducationDetailTranslation.mutate(ctx, m)
	case *EducationTranslationMutation:
		return c.EducationTranslation.mutate(ctx, m)
	case *IdeaMutation:
		return c.Idea.mutate(ctx, m)
	case *IdeaTranslationMutation:
		return c.IdeaTranslation.mutate(ctx, m)
	case *LanguageMutation:
		return c.Language.mutate(ctx, m)
	case *PersonalInfoMutation:
		return c.PersonalInfo.mutate(ctx, m)
	case *PersonalInfoTranslationMutation:
		return c.PersonalInfoTranslation.mutate(ctx, m)
	case *ProjectMutation:
		return c.Project.mutate(ctx, m)
	case *ProjectDetailMutation:
		return c.ProjectDetail.mutate(ctx, m)
	case *ProjectDetailTranslationMutation:
		return c.ProjectDetailTranslation.mutate(ctx, m)
	case *ProjectImageMutation:
		return c.ProjectImage.mutate(ctx, m)
	case *ProjectImageTranslationMutation:
		return c.ProjectImageTranslation.mutate(ctx, m)
	case *ProjectRelationshipMutation:
		return c.ProjectRelationship.mutate(ctx, m)
	case *ProjectTechnologyMutation:
		return c.ProjectTechnology.mutate(ctx, m)
	case *ProjectTranslationMutation:
		return c.ProjectTranslation.mutate(ctx, m)
	case *PublicationMutation:
		return c.Publication.mutate(ctx, m)
	case *PublicationAuthorMutation:
		return c.PublicationAuthor.mutate(ctx, m)
	case *PublicationTranslationMutation:
		return c.PublicationTranslation.mutate(ctx, m)
	case *RecentUpdateMutation:
		return c.RecentUpdate.mutate(ctx, m)
	case *RecentUpdateTranslationMutation:
		return c.RecentUpdateTranslation.mutate(ctx, m)
	case *ResearchProjectMutation:
		return c.ResearchProject.mutate(ctx, m)
	case *ResearchProjectDetailMutation:
		return c.ResearchProjectDetail.mutate(ctx, m)
	case *ResearchProjectDetailTranslationMutation:
		return c.ResearchProjectDetailTranslation.mutate(ctx, m)
	case *ResearchProjectTranslationMutation:
		return c.ResearchProjectTranslation.mutate(ctx, m)
	case *SocialLinkMutation:
		return c.SocialLink.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *WorkExperienceMutation:
		return c.WorkExperience.mutate(ctx, m)
	case *WorkExperienceDetailMutation:
		return c.WorkExperienceDetail.mutate(ctx, m)
	case *WorkExperienceDetailTranslationMutation:
		return c.WorkExperienceDetailTranslation.mutate(ctx, m)
	case *WorkExperienceTranslationMutation:
		return c.WorkExperienceTranslation.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AwardClient is a client for the Award schema.
type AwardClient struct {
	config
}

// NewAwardClient returns a client for the Award from the given config.
func NewAwardClient(c config) *AwardClient {
	return &AwardClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `award.Hooks(f(g(h())))`.
func (c *AwardClient) Use(hooks ...Hook) {
	c.hooks.Award = append(c.hooks.Award, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `award.Intercept(f(g(h())))`.
func (c *AwardClient) Intercept(interceptors ...Interceptor) {
	c.inters.Award = append(c.inters.Award, interceptors...)
}

// Create returns a builder for creating a Award entity.
func (c *AwardClient) Create() *AwardCreate {
	mutation := newAwardMutation(c.config, OpCreate)
	return &AwardCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Award entities.
func (c *AwardClient) CreateBulk(builders ...*AwardCreate) *AwardCreateBulk {
	return &AwardCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AwardClient) MapCreateBulk(slice any, setFunc func(*AwardCreate, int)) *AwardCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AwardCreateBulk{err: fmt.Errorf("calling to AwardClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AwardCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AwardCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Award.
func (c *AwardClient) Update() *AwardUpdate {
	mutation := newAwardMutation(c.config, OpUpdate)
	return &AwardUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AwardClient) UpdateOne(a *Award) *AwardUpdateOne {
	mutation := newAwardMutation(c.config, OpUpdateOne, withAward(a))
	return &AwardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AwardClient) UpdateOneID(id uuid.UUID) *AwardUpdateOne {
	mutation := newAwardMutation(c.config, OpUpdateOne, withAwardID(id))
	return &AwardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Award.
func (c *AwardClient) Delete() *AwardDelete {
	mutation := newAwardMutation(c.config, OpDelete)
	return &AwardDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AwardClient) DeleteOne(a *Award) *AwardDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AwardClient) DeleteOneID(id uuid.UUID) *AwardDeleteOne {
	builder := c.Delete().Where(award.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AwardDeleteOne{builder}
}

// Query returns a query builder for Award.
func (c *AwardClient) Query() *AwardQuery {
	return &AwardQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAward},
		inters: c.Interceptors(),
	}
}

// Get returns a Award entity by its id.
func (c *AwardClient) Get(ctx context.Context, id uuid.UUID) (*Award, error) {
	return c.Query().Where(award.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AwardClient) GetX(ctx context.Context, id uuid.UUID) *Award {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Award.
func (c *AwardClient) QueryUser(a *Award) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(award.Table, award.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, award.UserTable, award.UserColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTranslations queries the translations edge of a Award.
func (c *AwardClient) QueryTranslations(a *Award) *AwardTranslationQuery {
	query := (&AwardTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(award.Table, award.FieldID, id),
			sqlgraph.To(awardtranslation.Table, awardtranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, award.TranslationsTable, award.TranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AwardClient) Hooks() []Hook {
	return c.hooks.Award
}

// Interceptors returns the client interceptors.
func (c *AwardClient) Interceptors() []Interceptor {
	return c.inters.Award
}

func (c *AwardClient) mutate(ctx context.Context, m *AwardMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AwardCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AwardUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AwardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AwardDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Award mutation op: %q", m.Op())
	}
}

// AwardTranslationClient is a client for the AwardTranslation schema.
type AwardTranslationClient struct {
	config
}

// NewAwardTranslationClient returns a client for the AwardTranslation from the given config.
func NewAwardTranslationClient(c config) *AwardTranslationClient {
	return &AwardTranslationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `awardtranslation.Hooks(f(g(h())))`.
func (c *AwardTranslationClient) Use(hooks ...Hook) {
	c.hooks.AwardTranslation = append(c.hooks.AwardTranslation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `awardtranslation.Intercept(f(g(h())))`.
func (c *AwardTranslationClient) Intercept(interceptors ...Interceptor) {
	c.inters.AwardTranslation = append(c.inters.AwardTranslation, interceptors...)
}

// Create returns a builder for creating a AwardTranslation entity.
func (c *AwardTranslationClient) Create() *AwardTranslationCreate {
	mutation := newAwardTranslationMutation(c.config, OpCreate)
	return &AwardTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AwardTranslation entities.
func (c *AwardTranslationClient) CreateBulk(builders ...*AwardTranslationCreate) *AwardTranslationCreateBulk {
	return &AwardTranslationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AwardTranslationClient) MapCreateBulk(slice any, setFunc func(*AwardTranslationCreate, int)) *AwardTranslationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AwardTranslationCreateBulk{err: fmt.Errorf("calling to AwardTranslationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AwardTranslationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AwardTranslationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AwardTranslation.
func (c *AwardTranslationClient) Update() *AwardTranslationUpdate {
	mutation := newAwardTranslationMutation(c.config, OpUpdate)
	return &AwardTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AwardTranslationClient) UpdateOne(at *AwardTranslation) *AwardTranslationUpdateOne {
	mutation := newAwardTranslationMutation(c.config, OpUpdateOne, withAwardTranslation(at))
	return &AwardTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AwardTranslationClient) UpdateOneID(id uuid.UUID) *AwardTranslationUpdateOne {
	mutation := newAwardTranslationMutation(c.config, OpUpdateOne, withAwardTranslationID(id))
	return &AwardTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AwardTranslation.
func (c *AwardTranslationClient) Delete() *AwardTranslationDelete {
	mutation := newAwardTranslationMutation(c.config, OpDelete)
	return &AwardTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AwardTranslationClient) DeleteOne(at *AwardTranslation) *AwardTranslationDeleteOne {
	return c.DeleteOneID(at.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AwardTranslationClient) DeleteOneID(id uuid.UUID) *AwardTranslationDeleteOne {
	builder := c.Delete().Where(awardtranslation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AwardTranslationDeleteOne{builder}
}

// Query returns a query builder for AwardTranslation.
func (c *AwardTranslationClient) Query() *AwardTranslationQuery {
	return &AwardTranslationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAwardTranslation},
		inters: c.Interceptors(),
	}
}

// Get returns a AwardTranslation entity by its id.
func (c *AwardTranslationClient) Get(ctx context.Context, id uuid.UUID) (*AwardTranslation, error) {
	return c.Query().Where(awardtranslation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AwardTranslationClient) GetX(ctx context.Context, id uuid.UUID) *AwardTranslation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAward queries the award edge of a AwardTranslation.
func (c *AwardTranslationClient) QueryAward(at *AwardTranslation) *AwardQuery {
	query := (&AwardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(awardtranslation.Table, awardtranslation.FieldID, id),
			sqlgraph.To(award.Table, award.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, awardtranslation.AwardTable, awardtranslation.AwardColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLanguage queries the language edge of a AwardTranslation.
func (c *AwardTranslationClient) QueryLanguage(at *AwardTranslation) *LanguageQuery {
	query := (&LanguageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(awardtranslation.Table, awardtranslation.FieldID, id),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, awardtranslation.LanguageTable, awardtranslation.LanguageColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AwardTranslationClient) Hooks() []Hook {
	return c.hooks.AwardTranslation
}

// Interceptors returns the client interceptors.
func (c *AwardTranslationClient) Interceptors() []Interceptor {
	return c.inters.AwardTranslation
}

func (c *AwardTranslationClient) mutate(ctx context.Context, m *AwardTranslationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AwardTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AwardTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AwardTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AwardTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AwardTranslation mutation op: %q", m.Op())
	}
}

// BlogCategoryClient is a client for the BlogCategory schema.
type BlogCategoryClient struct {
	config
}

// NewBlogCategoryClient returns a client for the BlogCategory from the given config.
func NewBlogCategoryClient(c config) *BlogCategoryClient {
	return &BlogCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `blogcategory.Hooks(f(g(h())))`.
func (c *BlogCategoryClient) Use(hooks ...Hook) {
	c.hooks.BlogCategory = append(c.hooks.BlogCategory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `blogcategory.Intercept(f(g(h())))`.
func (c *BlogCategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.BlogCategory = append(c.inters.BlogCategory, interceptors...)
}

// Create returns a builder for creating a BlogCategory entity.
func (c *BlogCategoryClient) Create() *BlogCategoryCreate {
	mutation := newBlogCategoryMutation(c.config, OpCreate)
	return &BlogCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BlogCategory entities.
func (c *BlogCategoryClient) CreateBulk(builders ...*BlogCategoryCreate) *BlogCategoryCreateBulk {
	return &BlogCategoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BlogCategoryClient) MapCreateBulk(slice any, setFunc func(*BlogCategoryCreate, int)) *BlogCategoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BlogCategoryCreateBulk{err: fmt.Errorf("calling to BlogCategoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BlogCategoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BlogCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BlogCategory.
func (c *BlogCategoryClient) Update() *BlogCategoryUpdate {
	mutation := newBlogCategoryMutation(c.config, OpUpdate)
	return &BlogCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlogCategoryClient) UpdateOne(bc *BlogCategory) *BlogCategoryUpdateOne {
	mutation := newBlogCategoryMutation(c.config, OpUpdateOne, withBlogCategory(bc))
	return &BlogCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlogCategoryClient) UpdateOneID(id uuid.UUID) *BlogCategoryUpdateOne {
	mutation := newBlogCategoryMutation(c.config, OpUpdateOne, withBlogCategoryID(id))
	return &BlogCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BlogCategory.
func (c *BlogCategoryClient) Delete() *BlogCategoryDelete {
	mutation := newBlogCategoryMutation(c.config, OpDelete)
	return &BlogCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BlogCategoryClient) DeleteOne(bc *BlogCategory) *BlogCategoryDeleteOne {
	return c.DeleteOneID(bc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BlogCategoryClient) DeleteOneID(id uuid.UUID) *BlogCategoryDeleteOne {
	builder := c.Delete().Where(blogcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlogCategoryDeleteOne{builder}
}

// Query returns a query builder for BlogCategory.
func (c *BlogCategoryClient) Query() *BlogCategoryQuery {
	return &BlogCategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBlogCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a BlogCategory entity by its id.
func (c *BlogCategoryClient) Get(ctx context.Context, id uuid.UUID) (*BlogCategory, error) {
	return c.Query().Where(blogcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlogCategoryClient) GetX(ctx context.Context, id uuid.UUID) *BlogCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTranslations queries the translations edge of a BlogCategory.
func (c *BlogCategoryClient) QueryTranslations(bc *BlogCategory) *BlogCategoryTranslationQuery {
	query := (&BlogCategoryTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogcategory.Table, blogcategory.FieldID, id),
			sqlgraph.To(blogcategorytranslation.Table, blogcategorytranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, blogcategory.TranslationsTable, blogcategory.TranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(bc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBlogPosts queries the blog_posts edge of a BlogCategory.
func (c *BlogCategoryClient) QueryBlogPosts(bc *BlogCategory) *BlogPostQuery {
	query := (&BlogPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogcategory.Table, blogcategory.FieldID, id),
			sqlgraph.To(blogpost.Table, blogpost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, blogcategory.BlogPostsTable, blogcategory.BlogPostsColumn),
		)
		fromV = sqlgraph.Neighbors(bc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BlogCategoryClient) Hooks() []Hook {
	return c.hooks.BlogCategory
}

// Interceptors returns the client interceptors.
func (c *BlogCategoryClient) Interceptors() []Interceptor {
	return c.inters.BlogCategory
}

func (c *BlogCategoryClient) mutate(ctx context.Context, m *BlogCategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BlogCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BlogCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BlogCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BlogCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BlogCategory mutation op: %q", m.Op())
	}
}

// BlogCategoryTranslationClient is a client for the BlogCategoryTranslation schema.
type BlogCategoryTranslationClient struct {
	config
}

// NewBlogCategoryTranslationClient returns a client for the BlogCategoryTranslation from the given config.
func NewBlogCategoryTranslationClient(c config) *BlogCategoryTranslationClient {
	return &BlogCategoryTranslationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `blogcategorytranslation.Hooks(f(g(h())))`.
func (c *BlogCategoryTranslationClient) Use(hooks ...Hook) {
	c.hooks.BlogCategoryTranslation = append(c.hooks.BlogCategoryTranslation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `blogcategorytranslation.Intercept(f(g(h())))`.
func (c *BlogCategoryTranslationClient) Intercept(interceptors ...Interceptor) {
	c.inters.BlogCategoryTranslation = append(c.inters.BlogCategoryTranslation, interceptors...)
}

// Create returns a builder for creating a BlogCategoryTranslation entity.
func (c *BlogCategoryTranslationClient) Create() *BlogCategoryTranslationCreate {
	mutation := newBlogCategoryTranslationMutation(c.config, OpCreate)
	return &BlogCategoryTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BlogCategoryTranslation entities.
func (c *BlogCategoryTranslationClient) CreateBulk(builders ...*BlogCategoryTranslationCreate) *BlogCategoryTranslationCreateBulk {
	return &BlogCategoryTranslationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BlogCategoryTranslationClient) MapCreateBulk(slice any, setFunc func(*BlogCategoryTranslationCreate, int)) *BlogCategoryTranslationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BlogCategoryTranslationCreateBulk{err: fmt.Errorf("calling to BlogCategoryTranslationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BlogCategoryTranslationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BlogCategoryTranslationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BlogCategoryTranslation.
func (c *BlogCategoryTranslationClient) Update() *BlogCategoryTranslationUpdate {
	mutation := newBlogCategoryTranslationMutation(c.config, OpUpdate)
	return &BlogCategoryTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlogCategoryTranslationClient) UpdateOne(bct *BlogCategoryTranslation) *BlogCategoryTranslationUpdateOne {
	mutation := newBlogCategoryTranslationMutation(c.config, OpUpdateOne, withBlogCategoryTranslation(bct))
	return &BlogCategoryTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlogCategoryTranslationClient) UpdateOneID(id uuid.UUID) *BlogCategoryTranslationUpdateOne {
	mutation := newBlogCategoryTranslationMutation(c.config, OpUpdateOne, withBlogCategoryTranslationID(id))
	return &BlogCategoryTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BlogCategoryTranslation.
func (c *BlogCategoryTranslationClient) Delete() *BlogCategoryTranslationDelete {
	mutation := newBlogCategoryTranslationMutation(c.config, OpDelete)
	return &BlogCategoryTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BlogCategoryTranslationClient) DeleteOne(bct *BlogCategoryTranslation) *BlogCategoryTranslationDeleteOne {
	return c.DeleteOneID(bct.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BlogCategoryTranslationClient) DeleteOneID(id uuid.UUID) *BlogCategoryTranslationDeleteOne {
	builder := c.Delete().Where(blogcategorytranslation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlogCategoryTranslationDeleteOne{builder}
}

// Query returns a query builder for BlogCategoryTranslation.
func (c *BlogCategoryTranslationClient) Query() *BlogCategoryTranslationQuery {
	return &BlogCategoryTranslationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBlogCategoryTranslation},
		inters: c.Interceptors(),
	}
}

// Get returns a BlogCategoryTranslation entity by its id.
func (c *BlogCategoryTranslationClient) Get(ctx context.Context, id uuid.UUID) (*BlogCategoryTranslation, error) {
	return c.Query().Where(blogcategorytranslation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlogCategoryTranslationClient) GetX(ctx context.Context, id uuid.UUID) *BlogCategoryTranslation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBlogCategory queries the blog_category edge of a BlogCategoryTranslation.
func (c *BlogCategoryTranslationClient) QueryBlogCategory(bct *BlogCategoryTranslation) *BlogCategoryQuery {
	query := (&BlogCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogcategorytranslation.Table, blogcategorytranslation.FieldID, id),
			sqlgraph.To(blogcategory.Table, blogcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, blogcategorytranslation.BlogCategoryTable, blogcategorytranslation.BlogCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(bct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLanguage queries the language edge of a BlogCategoryTranslation.
func (c *BlogCategoryTranslationClient) QueryLanguage(bct *BlogCategoryTranslation) *LanguageQuery {
	query := (&LanguageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogcategorytranslation.Table, blogcategorytranslation.FieldID, id),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, blogcategorytranslation.LanguageTable, blogcategorytranslation.LanguageColumn),
		)
		fromV = sqlgraph.Neighbors(bct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BlogCategoryTranslationClient) Hooks() []Hook {
	return c.hooks.BlogCategoryTranslation
}

// Interceptors returns the client interceptors.
func (c *BlogCategoryTranslationClient) Interceptors() []Interceptor {
	return c.inters.BlogCategoryTranslation
}

func (c *BlogCategoryTranslationClient) mutate(ctx context.Context, m *BlogCategoryTranslationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BlogCategoryTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BlogCategoryTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BlogCategoryTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BlogCategoryTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BlogCategoryTranslation mutation op: %q", m.Op())
	}
}

// BlogCommentClient is a client for the BlogComment schema.
type BlogCommentClient struct {
	config
}

// NewBlogCommentClient returns a client for the BlogComment from the given config.
func NewBlogCommentClient(c config) *BlogCommentClient {
	return &BlogCommentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `blogcomment.Hooks(f(g(h())))`.
func (c *BlogCommentClient) Use(hooks ...Hook) {
	c.hooks.BlogComment = append(c.hooks.BlogComment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `blogcomment.Intercept(f(g(h())))`.
func (c *BlogCommentClient) Intercept(interceptors ...Interceptor) {
	c.inters.BlogComment = append(c.inters.BlogComment, interceptors...)
}

// Create returns a builder for creating a BlogComment entity.
func (c *BlogCommentClient) Create() *BlogCommentCreate {
	mutation := newBlogCommentMutation(c.config, OpCreate)
	return &BlogCommentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BlogComment entities.
func (c *BlogCommentClient) CreateBulk(builders ...*BlogCommentCreate) *BlogCommentCreateBulk {
	return &BlogCommentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BlogCommentClient) MapCreateBulk(slice any, setFunc func(*BlogCommentCreate, int)) *BlogCommentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BlogCommentCreateBulk{err: fmt.Errorf("calling to BlogCommentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BlogCommentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BlogCommentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BlogComment.
func (c *BlogCommentClient) Update() *BlogCommentUpdate {
	mutation := newBlogCommentMutation(c.config, OpUpdate)
	return &BlogCommentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlogCommentClient) UpdateOne(bc *BlogComment) *BlogCommentUpdateOne {
	mutation := newBlogCommentMutation(c.config, OpUpdateOne, withBlogComment(bc))
	return &BlogCommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlogCommentClient) UpdateOneID(id uuid.UUID) *BlogCommentUpdateOne {
	mutation := newBlogCommentMutation(c.config, OpUpdateOne, withBlogCommentID(id))
	return &BlogCommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BlogComment.
func (c *BlogCommentClient) Delete() *BlogCommentDelete {
	mutation := newBlogCommentMutation(c.config, OpDelete)
	return &BlogCommentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BlogCommentClient) DeleteOne(bc *BlogComment) *BlogCommentDeleteOne {
	return c.DeleteOneID(bc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BlogCommentClient) DeleteOneID(id uuid.UUID) *BlogCommentDeleteOne {
	builder := c.Delete().Where(blogcomment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlogCommentDeleteOne{builder}
}

// Query returns a query builder for BlogComment.
func (c *BlogCommentClient) Query() *BlogCommentQuery {
	return &BlogCommentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBlogComment},
		inters: c.Interceptors(),
	}
}

// Get returns a BlogComment entity by its id.
func (c *BlogCommentClient) Get(ctx context.Context, id uuid.UUID) (*BlogComment, error) {
	return c.Query().Where(blogcomment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlogCommentClient) GetX(ctx context.Context, id uuid.UUID) *BlogComment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBlogPost queries the blog_post edge of a BlogComment.
func (c *BlogCommentClient) QueryBlogPost(bc *BlogComment) *BlogPostQuery {
	query := (&BlogPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogcomment.Table, blogcomment.FieldID, id),
			sqlgraph.To(blogpost.Table, blogpost.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, blogcomment.BlogPostTable, blogcomment.BlogPostColumn),
		)
		fromV = sqlgraph.Neighbors(bc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a BlogComment.
func (c *BlogCommentClient) QueryParent(bc *BlogComment) *BlogCommentQuery {
	query := (&BlogCommentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogcomment.Table, blogcomment.FieldID, id),
			sqlgraph.To(blogcomment.Table, blogcomment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, blogcomment.ParentTable, blogcomment.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(bc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReplies queries the replies edge of a BlogComment.
func (c *BlogCommentClient) QueryReplies(bc *BlogComment) *BlogCommentQuery {
	query := (&BlogCommentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogcomment.Table, blogcomment.FieldID, id),
			sqlgraph.To(blogcomment.Table, blogcomment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, blogcomment.RepliesTable, blogcomment.RepliesColumn),
		)
		fromV = sqlgraph.Neighbors(bc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BlogCommentClient) Hooks() []Hook {
	return c.hooks.BlogComment
}

// Interceptors returns the client interceptors.
func (c *BlogCommentClient) Interceptors() []Interceptor {
	return c.inters.BlogComment
}

func (c *BlogCommentClient) mutate(ctx context.Context, m *BlogCommentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BlogCommentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BlogCommentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BlogCommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BlogCommentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BlogComment mutation op: %q", m.Op())
	}
}

// BlogPostClient is a client for the BlogPost schema.
type BlogPostClient struct {
	config
}

// NewBlogPostClient returns a client for the BlogPost from the given config.
func NewBlogPostClient(c config) *BlogPostClient {
	return &BlogPostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `blogpost.Hooks(f(g(h())))`.
func (c *BlogPostClient) Use(hooks ...Hook) {
	c.hooks.BlogPost = append(c.hooks.BlogPost, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `blogpost.Intercept(f(g(h())))`.
func (c *BlogPostClient) Intercept(interceptors ...Interceptor) {
	c.inters.BlogPost = append(c.inters.BlogPost, interceptors...)
}

// Create returns a builder for creating a BlogPost entity.
func (c *BlogPostClient) Create() *BlogPostCreate {
	mutation := newBlogPostMutation(c.config, OpCreate)
	return &BlogPostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BlogPost entities.
func (c *BlogPostClient) CreateBulk(builders ...*BlogPostCreate) *BlogPostCreateBulk {
	return &BlogPostCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BlogPostClient) MapCreateBulk(slice any, setFunc func(*BlogPostCreate, int)) *BlogPostCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BlogPostCreateBulk{err: fmt.Errorf("calling to BlogPostClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BlogPostCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BlogPostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BlogPost.
func (c *BlogPostClient) Update() *BlogPostUpdate {
	mutation := newBlogPostMutation(c.config, OpUpdate)
	return &BlogPostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlogPostClient) UpdateOne(bp *BlogPost) *BlogPostUpdateOne {
	mutation := newBlogPostMutation(c.config, OpUpdateOne, withBlogPost(bp))
	return &BlogPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlogPostClient) UpdateOneID(id uuid.UUID) *BlogPostUpdateOne {
	mutation := newBlogPostMutation(c.config, OpUpdateOne, withBlogPostID(id))
	return &BlogPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BlogPost.
func (c *BlogPostClient) Delete() *BlogPostDelete {
	mutation := newBlogPostMutation(c.config, OpDelete)
	return &BlogPostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BlogPostClient) DeleteOne(bp *BlogPost) *BlogPostDeleteOne {
	return c.DeleteOneID(bp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BlogPostClient) DeleteOneID(id uuid.UUID) *BlogPostDeleteOne {
	builder := c.Delete().Where(blogpost.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlogPostDeleteOne{builder}
}

// Query returns a query builder for BlogPost.
func (c *BlogPostClient) Query() *BlogPostQuery {
	return &BlogPostQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBlogPost},
		inters: c.Interceptors(),
	}
}

// Get returns a BlogPost entity by its id.
func (c *BlogPostClient) Get(ctx context.Context, id uuid.UUID) (*BlogPost, error) {
	return c.Query().Where(blogpost.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlogPostClient) GetX(ctx context.Context, id uuid.UUID) *BlogPost {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a BlogPost.
func (c *BlogPostClient) QueryUser(bp *BlogPost) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogpost.Table, blogpost.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, blogpost.UserTable, blogpost.UserColumn),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCategory queries the category edge of a BlogPost.
func (c *BlogPostClient) QueryCategory(bp *BlogPost) *BlogCategoryQuery {
	query := (&BlogCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogpost.Table, blogpost.FieldID, id),
			sqlgraph.To(blogcategory.Table, blogcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, blogpost.CategoryTable, blogpost.CategoryColumn),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySeries queries the series edge of a BlogPost.
func (c *BlogPostClient) QuerySeries(bp *BlogPost) *BlogSeriesQuery {
	query := (&BlogSeriesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogpost.Table, blogpost.FieldID, id),
			sqlgraph.To(blogseries.Table, blogseries.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, blogpost.SeriesTable, blogpost.SeriesColumn),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIdeas queries the ideas edge of a BlogPost.
func (c *BlogPostClient) QueryIdeas(bp *BlogPost) *IdeaQuery {
	query := (&IdeaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogpost.Table, blogpost.FieldID, id),
			sqlgraph.To(idea.Table, idea.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, blogpost.IdeasTable, blogpost.IdeasColumn),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTags queries the tags edge of a BlogPost.
func (c *BlogPostClient) QueryTags(bp *BlogPost) *BlogTagQuery {
	query := (&BlogTagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogpost.Table, blogpost.FieldID, id),
			sqlgraph.To(blogtag.Table, blogtag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, blogpost.TagsTable, blogpost.TagsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTranslations queries the translations edge of a BlogPost.
func (c *BlogPostClient) QueryTranslations(bp *BlogPost) *BlogPostTranslationQuery {
	query := (&BlogPostTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogpost.Table, blogpost.FieldID, id),
			sqlgraph.To(blogposttranslation.Table, blogposttranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, blogpost.TranslationsTable, blogpost.TranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryComments queries the comments edge of a BlogPost.
func (c *BlogPostClient) QueryComments(bp *BlogPost) *BlogCommentQuery {
	query := (&BlogCommentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogpost.Table, blogpost.FieldID, id),
			sqlgraph.To(blogcomment.Table, blogcomment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, blogpost.CommentsTable, blogpost.CommentsColumn),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBlogPostTags queries the blog_post_tags edge of a BlogPost.
func (c *BlogPostClient) QueryBlogPostTags(bp *BlogPost) *BlogPostTagQuery {
	query := (&BlogPostTagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogpost.Table, blogpost.FieldID, id),
			sqlgraph.To(blogposttag.Table, blogposttag.BlogPostColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, blogpost.BlogPostTagsTable, blogpost.BlogPostTagsColumn),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BlogPostClient) Hooks() []Hook {
	return c.hooks.BlogPost
}

// Interceptors returns the client interceptors.
func (c *BlogPostClient) Interceptors() []Interceptor {
	return c.inters.BlogPost
}

func (c *BlogPostClient) mutate(ctx context.Context, m *BlogPostMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BlogPostCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BlogPostUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BlogPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BlogPostDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BlogPost mutation op: %q", m.Op())
	}
}

// BlogPostTagClient is a client for the BlogPostTag schema.
type BlogPostTagClient struct {
	config
}

// NewBlogPostTagClient returns a client for the BlogPostTag from the given config.
func NewBlogPostTagClient(c config) *BlogPostTagClient {
	return &BlogPostTagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `blogposttag.Hooks(f(g(h())))`.
func (c *BlogPostTagClient) Use(hooks ...Hook) {
	c.hooks.BlogPostTag = append(c.hooks.BlogPostTag, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `blogposttag.Intercept(f(g(h())))`.
func (c *BlogPostTagClient) Intercept(interceptors ...Interceptor) {
	c.inters.BlogPostTag = append(c.inters.BlogPostTag, interceptors...)
}

// Create returns a builder for creating a BlogPostTag entity.
func (c *BlogPostTagClient) Create() *BlogPostTagCreate {
	mutation := newBlogPostTagMutation(c.config, OpCreate)
	return &BlogPostTagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BlogPostTag entities.
func (c *BlogPostTagClient) CreateBulk(builders ...*BlogPostTagCreate) *BlogPostTagCreateBulk {
	return &BlogPostTagCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BlogPostTagClient) MapCreateBulk(slice any, setFunc func(*BlogPostTagCreate, int)) *BlogPostTagCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BlogPostTagCreateBulk{err: fmt.Errorf("calling to BlogPostTagClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BlogPostTagCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BlogPostTagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BlogPostTag.
func (c *BlogPostTagClient) Update() *BlogPostTagUpdate {
	mutation := newBlogPostTagMutation(c.config, OpUpdate)
	return &BlogPostTagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlogPostTagClient) UpdateOne(bpt *BlogPostTag) *BlogPostTagUpdateOne {
	mutation := newBlogPostTagMutation(c.config, OpUpdateOne)
	mutation.blog_post = &bpt.BlogPostID
	mutation.blog_tag = &bpt.BlogTagID
	return &BlogPostTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BlogPostTag.
func (c *BlogPostTagClient) Delete() *BlogPostTagDelete {
	mutation := newBlogPostTagMutation(c.config, OpDelete)
	return &BlogPostTagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for BlogPostTag.
func (c *BlogPostTagClient) Query() *BlogPostTagQuery {
	return &BlogPostTagQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBlogPostTag},
		inters: c.Interceptors(),
	}
}

// QueryBlogPost queries the blog_post edge of a BlogPostTag.
func (c *BlogPostTagClient) QueryBlogPost(bpt *BlogPostTag) *BlogPostQuery {
	return c.Query().
		Where(blogposttag.BlogPostID(bpt.BlogPostID), blogposttag.BlogTagID(bpt.BlogTagID)).
		QueryBlogPost()
}

// QueryBlogTag queries the blog_tag edge of a BlogPostTag.
func (c *BlogPostTagClient) QueryBlogTag(bpt *BlogPostTag) *BlogTagQuery {
	return c.Query().
		Where(blogposttag.BlogPostID(bpt.BlogPostID), blogposttag.BlogTagID(bpt.BlogTagID)).
		QueryBlogTag()
}

// Hooks returns the client hooks.
func (c *BlogPostTagClient) Hooks() []Hook {
	return c.hooks.BlogPostTag
}

// Interceptors returns the client interceptors.
func (c *BlogPostTagClient) Interceptors() []Interceptor {
	return c.inters.BlogPostTag
}

func (c *BlogPostTagClient) mutate(ctx context.Context, m *BlogPostTagMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BlogPostTagCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BlogPostTagUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BlogPostTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BlogPostTagDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BlogPostTag mutation op: %q", m.Op())
	}
}

// BlogPostTranslationClient is a client for the BlogPostTranslation schema.
type BlogPostTranslationClient struct {
	config
}

// NewBlogPostTranslationClient returns a client for the BlogPostTranslation from the given config.
func NewBlogPostTranslationClient(c config) *BlogPostTranslationClient {
	return &BlogPostTranslationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `blogposttranslation.Hooks(f(g(h())))`.
func (c *BlogPostTranslationClient) Use(hooks ...Hook) {
	c.hooks.BlogPostTranslation = append(c.hooks.BlogPostTranslation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `blogposttranslation.Intercept(f(g(h())))`.
func (c *BlogPostTranslationClient) Intercept(interceptors ...Interceptor) {
	c.inters.BlogPostTranslation = append(c.inters.BlogPostTranslation, interceptors...)
}

// Create returns a builder for creating a BlogPostTranslation entity.
func (c *BlogPostTranslationClient) Create() *BlogPostTranslationCreate {
	mutation := newBlogPostTranslationMutation(c.config, OpCreate)
	return &BlogPostTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BlogPostTranslation entities.
func (c *BlogPostTranslationClient) CreateBulk(builders ...*BlogPostTranslationCreate) *BlogPostTranslationCreateBulk {
	return &BlogPostTranslationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BlogPostTranslationClient) MapCreateBulk(slice any, setFunc func(*BlogPostTranslationCreate, int)) *BlogPostTranslationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BlogPostTranslationCreateBulk{err: fmt.Errorf("calling to BlogPostTranslationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BlogPostTranslationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BlogPostTranslationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BlogPostTranslation.
func (c *BlogPostTranslationClient) Update() *BlogPostTranslationUpdate {
	mutation := newBlogPostTranslationMutation(c.config, OpUpdate)
	return &BlogPostTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlogPostTranslationClient) UpdateOne(bpt *BlogPostTranslation) *BlogPostTranslationUpdateOne {
	mutation := newBlogPostTranslationMutation(c.config, OpUpdateOne, withBlogPostTranslation(bpt))
	return &BlogPostTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlogPostTranslationClient) UpdateOneID(id uuid.UUID) *BlogPostTranslationUpdateOne {
	mutation := newBlogPostTranslationMutation(c.config, OpUpdateOne, withBlogPostTranslationID(id))
	return &BlogPostTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BlogPostTranslation.
func (c *BlogPostTranslationClient) Delete() *BlogPostTranslationDelete {
	mutation := newBlogPostTranslationMutation(c.config, OpDelete)
	return &BlogPostTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BlogPostTranslationClient) DeleteOne(bpt *BlogPostTranslation) *BlogPostTranslationDeleteOne {
	return c.DeleteOneID(bpt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BlogPostTranslationClient) DeleteOneID(id uuid.UUID) *BlogPostTranslationDeleteOne {
	builder := c.Delete().Where(blogposttranslation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlogPostTranslationDeleteOne{builder}
}

// Query returns a query builder for BlogPostTranslation.
func (c *BlogPostTranslationClient) Query() *BlogPostTranslationQuery {
	return &BlogPostTranslationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBlogPostTranslation},
		inters: c.Interceptors(),
	}
}

// Get returns a BlogPostTranslation entity by its id.
func (c *BlogPostTranslationClient) Get(ctx context.Context, id uuid.UUID) (*BlogPostTranslation, error) {
	return c.Query().Where(blogposttranslation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlogPostTranslationClient) GetX(ctx context.Context, id uuid.UUID) *BlogPostTranslation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBlogPost queries the blog_post edge of a BlogPostTranslation.
func (c *BlogPostTranslationClient) QueryBlogPost(bpt *BlogPostTranslation) *BlogPostQuery {
	query := (&BlogPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bpt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogposttranslation.Table, blogposttranslation.FieldID, id),
			sqlgraph.To(blogpost.Table, blogpost.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, blogposttranslation.BlogPostTable, blogposttranslation.BlogPostColumn),
		)
		fromV = sqlgraph.Neighbors(bpt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLanguage queries the language edge of a BlogPostTranslation.
func (c *BlogPostTranslationClient) QueryLanguage(bpt *BlogPostTranslation) *LanguageQuery {
	query := (&LanguageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bpt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogposttranslation.Table, blogposttranslation.FieldID, id),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, blogposttranslation.LanguageTable, blogposttranslation.LanguageColumn),
		)
		fromV = sqlgraph.Neighbors(bpt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BlogPostTranslationClient) Hooks() []Hook {
	return c.hooks.BlogPostTranslation
}

// Interceptors returns the client interceptors.
func (c *BlogPostTranslationClient) Interceptors() []Interceptor {
	return c.inters.BlogPostTranslation
}

func (c *BlogPostTranslationClient) mutate(ctx context.Context, m *BlogPostTranslationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BlogPostTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BlogPostTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BlogPostTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BlogPostTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BlogPostTranslation mutation op: %q", m.Op())
	}
}

// BlogSeriesClient is a client for the BlogSeries schema.
type BlogSeriesClient struct {
	config
}

// NewBlogSeriesClient returns a client for the BlogSeries from the given config.
func NewBlogSeriesClient(c config) *BlogSeriesClient {
	return &BlogSeriesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `blogseries.Hooks(f(g(h())))`.
func (c *BlogSeriesClient) Use(hooks ...Hook) {
	c.hooks.BlogSeries = append(c.hooks.BlogSeries, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `blogseries.Intercept(f(g(h())))`.
func (c *BlogSeriesClient) Intercept(interceptors ...Interceptor) {
	c.inters.BlogSeries = append(c.inters.BlogSeries, interceptors...)
}

// Create returns a builder for creating a BlogSeries entity.
func (c *BlogSeriesClient) Create() *BlogSeriesCreate {
	mutation := newBlogSeriesMutation(c.config, OpCreate)
	return &BlogSeriesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BlogSeries entities.
func (c *BlogSeriesClient) CreateBulk(builders ...*BlogSeriesCreate) *BlogSeriesCreateBulk {
	return &BlogSeriesCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BlogSeriesClient) MapCreateBulk(slice any, setFunc func(*BlogSeriesCreate, int)) *BlogSeriesCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BlogSeriesCreateBulk{err: fmt.Errorf("calling to BlogSeriesClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BlogSeriesCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BlogSeriesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BlogSeries.
func (c *BlogSeriesClient) Update() *BlogSeriesUpdate {
	mutation := newBlogSeriesMutation(c.config, OpUpdate)
	return &BlogSeriesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlogSeriesClient) UpdateOne(bs *BlogSeries) *BlogSeriesUpdateOne {
	mutation := newBlogSeriesMutation(c.config, OpUpdateOne, withBlogSeries(bs))
	return &BlogSeriesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlogSeriesClient) UpdateOneID(id uuid.UUID) *BlogSeriesUpdateOne {
	mutation := newBlogSeriesMutation(c.config, OpUpdateOne, withBlogSeriesID(id))
	return &BlogSeriesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BlogSeries.
func (c *BlogSeriesClient) Delete() *BlogSeriesDelete {
	mutation := newBlogSeriesMutation(c.config, OpDelete)
	return &BlogSeriesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BlogSeriesClient) DeleteOne(bs *BlogSeries) *BlogSeriesDeleteOne {
	return c.DeleteOneID(bs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BlogSeriesClient) DeleteOneID(id uuid.UUID) *BlogSeriesDeleteOne {
	builder := c.Delete().Where(blogseries.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlogSeriesDeleteOne{builder}
}

// Query returns a query builder for BlogSeries.
func (c *BlogSeriesClient) Query() *BlogSeriesQuery {
	return &BlogSeriesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBlogSeries},
		inters: c.Interceptors(),
	}
}

// Get returns a BlogSeries entity by its id.
func (c *BlogSeriesClient) Get(ctx context.Context, id uuid.UUID) (*BlogSeries, error) {
	return c.Query().Where(blogseries.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlogSeriesClient) GetX(ctx context.Context, id uuid.UUID) *BlogSeries {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBlogPosts queries the blog_posts edge of a BlogSeries.
func (c *BlogSeriesClient) QueryBlogPosts(bs *BlogSeries) *BlogPostQuery {
	query := (&BlogPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogseries.Table, blogseries.FieldID, id),
			sqlgraph.To(blogpost.Table, blogpost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, blogseries.BlogPostsTable, blogseries.BlogPostsColumn),
		)
		fromV = sqlgraph.Neighbors(bs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTranslations queries the translations edge of a BlogSeries.
func (c *BlogSeriesClient) QueryTranslations(bs *BlogSeries) *BlogSeriesTranslationQuery {
	query := (&BlogSeriesTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogseries.Table, blogseries.FieldID, id),
			sqlgraph.To(blogseriestranslation.Table, blogseriestranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, blogseries.TranslationsTable, blogseries.TranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(bs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BlogSeriesClient) Hooks() []Hook {
	return c.hooks.BlogSeries
}

// Interceptors returns the client interceptors.
func (c *BlogSeriesClient) Interceptors() []Interceptor {
	return c.inters.BlogSeries
}

func (c *BlogSeriesClient) mutate(ctx context.Context, m *BlogSeriesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BlogSeriesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BlogSeriesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BlogSeriesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BlogSeriesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BlogSeries mutation op: %q", m.Op())
	}
}

// BlogSeriesTranslationClient is a client for the BlogSeriesTranslation schema.
type BlogSeriesTranslationClient struct {
	config
}

// NewBlogSeriesTranslationClient returns a client for the BlogSeriesTranslation from the given config.
func NewBlogSeriesTranslationClient(c config) *BlogSeriesTranslationClient {
	return &BlogSeriesTranslationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `blogseriestranslation.Hooks(f(g(h())))`.
func (c *BlogSeriesTranslationClient) Use(hooks ...Hook) {
	c.hooks.BlogSeriesTranslation = append(c.hooks.BlogSeriesTranslation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `blogseriestranslation.Intercept(f(g(h())))`.
func (c *BlogSeriesTranslationClient) Intercept(interceptors ...Interceptor) {
	c.inters.BlogSeriesTranslation = append(c.inters.BlogSeriesTranslation, interceptors...)
}

// Create returns a builder for creating a BlogSeriesTranslation entity.
func (c *BlogSeriesTranslationClient) Create() *BlogSeriesTranslationCreate {
	mutation := newBlogSeriesTranslationMutation(c.config, OpCreate)
	return &BlogSeriesTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BlogSeriesTranslation entities.
func (c *BlogSeriesTranslationClient) CreateBulk(builders ...*BlogSeriesTranslationCreate) *BlogSeriesTranslationCreateBulk {
	return &BlogSeriesTranslationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BlogSeriesTranslationClient) MapCreateBulk(slice any, setFunc func(*BlogSeriesTranslationCreate, int)) *BlogSeriesTranslationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BlogSeriesTranslationCreateBulk{err: fmt.Errorf("calling to BlogSeriesTranslationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BlogSeriesTranslationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BlogSeriesTranslationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BlogSeriesTranslation.
func (c *BlogSeriesTranslationClient) Update() *BlogSeriesTranslationUpdate {
	mutation := newBlogSeriesTranslationMutation(c.config, OpUpdate)
	return &BlogSeriesTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlogSeriesTranslationClient) UpdateOne(bst *BlogSeriesTranslation) *BlogSeriesTranslationUpdateOne {
	mutation := newBlogSeriesTranslationMutation(c.config, OpUpdateOne, withBlogSeriesTranslation(bst))
	return &BlogSeriesTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlogSeriesTranslationClient) UpdateOneID(id uuid.UUID) *BlogSeriesTranslationUpdateOne {
	mutation := newBlogSeriesTranslationMutation(c.config, OpUpdateOne, withBlogSeriesTranslationID(id))
	return &BlogSeriesTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BlogSeriesTranslation.
func (c *BlogSeriesTranslationClient) Delete() *BlogSeriesTranslationDelete {
	mutation := newBlogSeriesTranslationMutation(c.config, OpDelete)
	return &BlogSeriesTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BlogSeriesTranslationClient) DeleteOne(bst *BlogSeriesTranslation) *BlogSeriesTranslationDeleteOne {
	return c.DeleteOneID(bst.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BlogSeriesTranslationClient) DeleteOneID(id uuid.UUID) *BlogSeriesTranslationDeleteOne {
	builder := c.Delete().Where(blogseriestranslation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlogSeriesTranslationDeleteOne{builder}
}

// Query returns a query builder for BlogSeriesTranslation.
func (c *BlogSeriesTranslationClient) Query() *BlogSeriesTranslationQuery {
	return &BlogSeriesTranslationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBlogSeriesTranslation},
		inters: c.Interceptors(),
	}
}

// Get returns a BlogSeriesTranslation entity by its id.
func (c *BlogSeriesTranslationClient) Get(ctx context.Context, id uuid.UUID) (*BlogSeriesTranslation, error) {
	return c.Query().Where(blogseriestranslation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlogSeriesTranslationClient) GetX(ctx context.Context, id uuid.UUID) *BlogSeriesTranslation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBlogSeries queries the blog_series edge of a BlogSeriesTranslation.
func (c *BlogSeriesTranslationClient) QueryBlogSeries(bst *BlogSeriesTranslation) *BlogSeriesQuery {
	query := (&BlogSeriesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bst.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogseriestranslation.Table, blogseriestranslation.FieldID, id),
			sqlgraph.To(blogseries.Table, blogseries.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, blogseriestranslation.BlogSeriesTable, blogseriestranslation.BlogSeriesColumn),
		)
		fromV = sqlgraph.Neighbors(bst.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLanguage queries the language edge of a BlogSeriesTranslation.
func (c *BlogSeriesTranslationClient) QueryLanguage(bst *BlogSeriesTranslation) *LanguageQuery {
	query := (&LanguageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bst.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogseriestranslation.Table, blogseriestranslation.FieldID, id),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, blogseriestranslation.LanguageTable, blogseriestranslation.LanguageColumn),
		)
		fromV = sqlgraph.Neighbors(bst.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BlogSeriesTranslationClient) Hooks() []Hook {
	return c.hooks.BlogSeriesTranslation
}

// Interceptors returns the client interceptors.
func (c *BlogSeriesTranslationClient) Interceptors() []Interceptor {
	return c.inters.BlogSeriesTranslation
}

func (c *BlogSeriesTranslationClient) mutate(ctx context.Context, m *BlogSeriesTranslationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BlogSeriesTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BlogSeriesTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BlogSeriesTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BlogSeriesTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BlogSeriesTranslation mutation op: %q", m.Op())
	}
}

// BlogTagClient is a client for the BlogTag schema.
type BlogTagClient struct {
	config
}

// NewBlogTagClient returns a client for the BlogTag from the given config.
func NewBlogTagClient(c config) *BlogTagClient {
	return &BlogTagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `blogtag.Hooks(f(g(h())))`.
func (c *BlogTagClient) Use(hooks ...Hook) {
	c.hooks.BlogTag = append(c.hooks.BlogTag, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `blogtag.Intercept(f(g(h())))`.
func (c *BlogTagClient) Intercept(interceptors ...Interceptor) {
	c.inters.BlogTag = append(c.inters.BlogTag, interceptors...)
}

// Create returns a builder for creating a BlogTag entity.
func (c *BlogTagClient) Create() *BlogTagCreate {
	mutation := newBlogTagMutation(c.config, OpCreate)
	return &BlogTagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BlogTag entities.
func (c *BlogTagClient) CreateBulk(builders ...*BlogTagCreate) *BlogTagCreateBulk {
	return &BlogTagCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BlogTagClient) MapCreateBulk(slice any, setFunc func(*BlogTagCreate, int)) *BlogTagCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BlogTagCreateBulk{err: fmt.Errorf("calling to BlogTagClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BlogTagCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BlogTagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BlogTag.
func (c *BlogTagClient) Update() *BlogTagUpdate {
	mutation := newBlogTagMutation(c.config, OpUpdate)
	return &BlogTagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlogTagClient) UpdateOne(bt *BlogTag) *BlogTagUpdateOne {
	mutation := newBlogTagMutation(c.config, OpUpdateOne, withBlogTag(bt))
	return &BlogTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlogTagClient) UpdateOneID(id uuid.UUID) *BlogTagUpdateOne {
	mutation := newBlogTagMutation(c.config, OpUpdateOne, withBlogTagID(id))
	return &BlogTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BlogTag.
func (c *BlogTagClient) Delete() *BlogTagDelete {
	mutation := newBlogTagMutation(c.config, OpDelete)
	return &BlogTagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BlogTagClient) DeleteOne(bt *BlogTag) *BlogTagDeleteOne {
	return c.DeleteOneID(bt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BlogTagClient) DeleteOneID(id uuid.UUID) *BlogTagDeleteOne {
	builder := c.Delete().Where(blogtag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlogTagDeleteOne{builder}
}

// Query returns a query builder for BlogTag.
func (c *BlogTagClient) Query() *BlogTagQuery {
	return &BlogTagQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBlogTag},
		inters: c.Interceptors(),
	}
}

// Get returns a BlogTag entity by its id.
func (c *BlogTagClient) Get(ctx context.Context, id uuid.UUID) (*BlogTag, error) {
	return c.Query().Where(blogtag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlogTagClient) GetX(ctx context.Context, id uuid.UUID) *BlogTag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBlogPosts queries the blog_posts edge of a BlogTag.
func (c *BlogTagClient) QueryBlogPosts(bt *BlogTag) *BlogPostQuery {
	query := (&BlogPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogtag.Table, blogtag.FieldID, id),
			sqlgraph.To(blogpost.Table, blogpost.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, blogtag.BlogPostsTable, blogtag.BlogPostsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(bt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBlogPostTags queries the blog_post_tags edge of a BlogTag.
func (c *BlogTagClient) QueryBlogPostTags(bt *BlogTag) *BlogPostTagQuery {
	query := (&BlogPostTagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogtag.Table, blogtag.FieldID, id),
			sqlgraph.To(blogposttag.Table, blogposttag.BlogTagColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, blogtag.BlogPostTagsTable, blogtag.BlogPostTagsColumn),
		)
		fromV = sqlgraph.Neighbors(bt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BlogTagClient) Hooks() []Hook {
	return c.hooks.BlogTag
}

// Interceptors returns the client interceptors.
func (c *BlogTagClient) Interceptors() []Interceptor {
	return c.inters.BlogTag
}

func (c *BlogTagClient) mutate(ctx context.Context, m *BlogTagMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BlogTagCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BlogTagUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BlogTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BlogTagDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BlogTag mutation op: %q", m.Op())
	}
}

// EducationClient is a client for the Education schema.
type EducationClient struct {
	config
}

// NewEducationClient returns a client for the Education from the given config.
func NewEducationClient(c config) *EducationClient {
	return &EducationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `education.Hooks(f(g(h())))`.
func (c *EducationClient) Use(hooks ...Hook) {
	c.hooks.Education = append(c.hooks.Education, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `education.Intercept(f(g(h())))`.
func (c *EducationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Education = append(c.inters.Education, interceptors...)
}

// Create returns a builder for creating a Education entity.
func (c *EducationClient) Create() *EducationCreate {
	mutation := newEducationMutation(c.config, OpCreate)
	return &EducationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Education entities.
func (c *EducationClient) CreateBulk(builders ...*EducationCreate) *EducationCreateBulk {
	return &EducationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EducationClient) MapCreateBulk(slice any, setFunc func(*EducationCreate, int)) *EducationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EducationCreateBulk{err: fmt.Errorf("calling to EducationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EducationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EducationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Education.
func (c *EducationClient) Update() *EducationUpdate {
	mutation := newEducationMutation(c.config, OpUpdate)
	return &EducationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EducationClient) UpdateOne(e *Education) *EducationUpdateOne {
	mutation := newEducationMutation(c.config, OpUpdateOne, withEducation(e))
	return &EducationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EducationClient) UpdateOneID(id uuid.UUID) *EducationUpdateOne {
	mutation := newEducationMutation(c.config, OpUpdateOne, withEducationID(id))
	return &EducationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Education.
func (c *EducationClient) Delete() *EducationDelete {
	mutation := newEducationMutation(c.config, OpDelete)
	return &EducationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EducationClient) DeleteOne(e *Education) *EducationDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EducationClient) DeleteOneID(id uuid.UUID) *EducationDeleteOne {
	builder := c.Delete().Where(education.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EducationDeleteOne{builder}
}

// Query returns a query builder for Education.
func (c *EducationClient) Query() *EducationQuery {
	return &EducationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEducation},
		inters: c.Interceptors(),
	}
}

// Get returns a Education entity by its id.
func (c *EducationClient) Get(ctx context.Context, id uuid.UUID) (*Education, error) {
	return c.Query().Where(education.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EducationClient) GetX(ctx context.Context, id uuid.UUID) *Education {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Education.
func (c *EducationClient) QueryUser(e *Education) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(education.Table, education.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, education.UserTable, education.UserColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTranslations queries the translations edge of a Education.
func (c *EducationClient) QueryTranslations(e *Education) *EducationTranslationQuery {
	query := (&EducationTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(education.Table, education.FieldID, id),
			sqlgraph.To(educationtranslation.Table, educationtranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, education.TranslationsTable, education.TranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDetails queries the details edge of a Education.
func (c *EducationClient) QueryDetails(e *Education) *EducationDetailQuery {
	query := (&EducationDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(education.Table, education.FieldID, id),
			sqlgraph.To(educationdetail.Table, educationdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, education.DetailsTable, education.DetailsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EducationClient) Hooks() []Hook {
	return c.hooks.Education
}

// Interceptors returns the client interceptors.
func (c *EducationClient) Interceptors() []Interceptor {
	return c.inters.Education
}

func (c *EducationClient) mutate(ctx context.Context, m *EducationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EducationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EducationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EducationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EducationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Education mutation op: %q", m.Op())
	}
}

// EducationDetailClient is a client for the EducationDetail schema.
type EducationDetailClient struct {
	config
}

// NewEducationDetailClient returns a client for the EducationDetail from the given config.
func NewEducationDetailClient(c config) *EducationDetailClient {
	return &EducationDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `educationdetail.Hooks(f(g(h())))`.
func (c *EducationDetailClient) Use(hooks ...Hook) {
	c.hooks.EducationDetail = append(c.hooks.EducationDetail, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `educationdetail.Intercept(f(g(h())))`.
func (c *EducationDetailClient) Intercept(interceptors ...Interceptor) {
	c.inters.EducationDetail = append(c.inters.EducationDetail, interceptors...)
}

// Create returns a builder for creating a EducationDetail entity.
func (c *EducationDetailClient) Create() *EducationDetailCreate {
	mutation := newEducationDetailMutation(c.config, OpCreate)
	return &EducationDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EducationDetail entities.
func (c *EducationDetailClient) CreateBulk(builders ...*EducationDetailCreate) *EducationDetailCreateBulk {
	return &EducationDetailCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EducationDetailClient) MapCreateBulk(slice any, setFunc func(*EducationDetailCreate, int)) *EducationDetailCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EducationDetailCreateBulk{err: fmt.Errorf("calling to EducationDetailClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EducationDetailCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EducationDetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EducationDetail.
func (c *EducationDetailClient) Update() *EducationDetailUpdate {
	mutation := newEducationDetailMutation(c.config, OpUpdate)
	return &EducationDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EducationDetailClient) UpdateOne(ed *EducationDetail) *EducationDetailUpdateOne {
	mutation := newEducationDetailMutation(c.config, OpUpdateOne, withEducationDetail(ed))
	return &EducationDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EducationDetailClient) UpdateOneID(id uuid.UUID) *EducationDetailUpdateOne {
	mutation := newEducationDetailMutation(c.config, OpUpdateOne, withEducationDetailID(id))
	return &EducationDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EducationDetail.
func (c *EducationDetailClient) Delete() *EducationDetailDelete {
	mutation := newEducationDetailMutation(c.config, OpDelete)
	return &EducationDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EducationDetailClient) DeleteOne(ed *EducationDetail) *EducationDetailDeleteOne {
	return c.DeleteOneID(ed.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EducationDetailClient) DeleteOneID(id uuid.UUID) *EducationDetailDeleteOne {
	builder := c.Delete().Where(educationdetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EducationDetailDeleteOne{builder}
}

// Query returns a query builder for EducationDetail.
func (c *EducationDetailClient) Query() *EducationDetailQuery {
	return &EducationDetailQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEducationDetail},
		inters: c.Interceptors(),
	}
}

// Get returns a EducationDetail entity by its id.
func (c *EducationDetailClient) Get(ctx context.Context, id uuid.UUID) (*EducationDetail, error) {
	return c.Query().Where(educationdetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EducationDetailClient) GetX(ctx context.Context, id uuid.UUID) *EducationDetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEducation queries the education edge of a EducationDetail.
func (c *EducationDetailClient) QueryEducation(ed *EducationDetail) *EducationQuery {
	query := (&EducationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ed.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(educationdetail.Table, educationdetail.FieldID, id),
			sqlgraph.To(education.Table, education.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, educationdetail.EducationTable, educationdetail.EducationColumn),
		)
		fromV = sqlgraph.Neighbors(ed.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTranslations queries the translations edge of a EducationDetail.
func (c *EducationDetailClient) QueryTranslations(ed *EducationDetail) *EducationDetailTranslationQuery {
	query := (&EducationDetailTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ed.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(educationdetail.Table, educationdetail.FieldID, id),
			sqlgraph.To(educationdetailtranslation.Table, educationdetailtranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, educationdetail.TranslationsTable, educationdetail.TranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(ed.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EducationDetailClient) Hooks() []Hook {
	return c.hooks.EducationDetail
}

// Interceptors returns the client interceptors.
func (c *EducationDetailClient) Interceptors() []Interceptor {
	return c.inters.EducationDetail
}

func (c *EducationDetailClient) mutate(ctx context.Context, m *EducationDetailMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EducationDetailCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EducationDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EducationDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EducationDetailDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EducationDetail mutation op: %q", m.Op())
	}
}

// EducationDetailTranslationClient is a client for the EducationDetailTranslation schema.
type EducationDetailTranslationClient struct {
	config
}

// NewEducationDetailTranslationClient returns a client for the EducationDetailTranslation from the given config.
func NewEducationDetailTranslationClient(c config) *EducationDetailTranslationClient {
	return &EducationDetailTranslationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `educationdetailtranslation.Hooks(f(g(h())))`.
func (c *EducationDetailTranslationClient) Use(hooks ...Hook) {
	c.hooks.EducationDetailTranslation = append(c.hooks.EducationDetailTranslation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `educationdetailtranslation.Intercept(f(g(h())))`.
func (c *EducationDetailTranslationClient) Intercept(interceptors ...Interceptor) {
	c.inters.EducationDetailTranslation = append(c.inters.EducationDetailTranslation, interceptors...)
}

// Create returns a builder for creating a EducationDetailTranslation entity.
func (c *EducationDetailTranslationClient) Create() *EducationDetailTranslationCreate {
	mutation := newEducationDetailTranslationMutation(c.config, OpCreate)
	return &EducationDetailTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EducationDetailTranslation entities.
func (c *EducationDetailTranslationClient) CreateBulk(builders ...*EducationDetailTranslationCreate) *EducationDetailTranslationCreateBulk {
	return &EducationDetailTranslationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EducationDetailTranslationClient) MapCreateBulk(slice any, setFunc func(*EducationDetailTranslationCreate, int)) *EducationDetailTranslationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EducationDetailTranslationCreateBulk{err: fmt.Errorf("calling to EducationDetailTranslationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EducationDetailTranslationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EducationDetailTranslationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EducationDetailTranslation.
func (c *EducationDetailTranslationClient) Update() *EducationDetailTranslationUpdate {
	mutation := newEducationDetailTranslationMutation(c.config, OpUpdate)
	return &EducationDetailTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EducationDetailTranslationClient) UpdateOne(edt *EducationDetailTranslation) *EducationDetailTranslationUpdateOne {
	mutation := newEducationDetailTranslationMutation(c.config, OpUpdateOne, withEducationDetailTranslation(edt))
	return &EducationDetailTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EducationDetailTranslationClient) UpdateOneID(id uuid.UUID) *EducationDetailTranslationUpdateOne {
	mutation := newEducationDetailTranslationMutation(c.config, OpUpdateOne, withEducationDetailTranslationID(id))
	return &EducationDetailTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EducationDetailTranslation.
func (c *EducationDetailTranslationClient) Delete() *EducationDetailTranslationDelete {
	mutation := newEducationDetailTranslationMutation(c.config, OpDelete)
	return &EducationDetailTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EducationDetailTranslationClient) DeleteOne(edt *EducationDetailTranslation) *EducationDetailTranslationDeleteOne {
	return c.DeleteOneID(edt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EducationDetailTranslationClient) DeleteOneID(id uuid.UUID) *EducationDetailTranslationDeleteOne {
	builder := c.Delete().Where(educationdetailtranslation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EducationDetailTranslationDeleteOne{builder}
}

// Query returns a query builder for EducationDetailTranslation.
func (c *EducationDetailTranslationClient) Query() *EducationDetailTranslationQuery {
	return &EducationDetailTranslationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEducationDetailTranslation},
		inters: c.Interceptors(),
	}
}

// Get returns a EducationDetailTranslation entity by its id.
func (c *EducationDetailTranslationClient) Get(ctx context.Context, id uuid.UUID) (*EducationDetailTranslation, error) {
	return c.Query().Where(educationdetailtranslation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EducationDetailTranslationClient) GetX(ctx context.Context, id uuid.UUID) *EducationDetailTranslation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEducationDetail queries the education_detail edge of a EducationDetailTranslation.
func (c *EducationDetailTranslationClient) QueryEducationDetail(edt *EducationDetailTranslation) *EducationDetailQuery {
	query := (&EducationDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := edt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(educationdetailtranslation.Table, educationdetailtranslation.FieldID, id),
			sqlgraph.To(educationdetail.Table, educationdetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, educationdetailtranslation.EducationDetailTable, educationdetailtranslation.EducationDetailColumn),
		)
		fromV = sqlgraph.Neighbors(edt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLanguage queries the language edge of a EducationDetailTranslation.
func (c *EducationDetailTranslationClient) QueryLanguage(edt *EducationDetailTranslation) *LanguageQuery {
	query := (&LanguageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := edt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(educationdetailtranslation.Table, educationdetailtranslation.FieldID, id),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, educationdetailtranslation.LanguageTable, educationdetailtranslation.LanguageColumn),
		)
		fromV = sqlgraph.Neighbors(edt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EducationDetailTranslationClient) Hooks() []Hook {
	return c.hooks.EducationDetailTranslation
}

// Interceptors returns the client interceptors.
func (c *EducationDetailTranslationClient) Interceptors() []Interceptor {
	return c.inters.EducationDetailTranslation
}

func (c *EducationDetailTranslationClient) mutate(ctx context.Context, m *EducationDetailTranslationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EducationDetailTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EducationDetailTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EducationDetailTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EducationDetailTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EducationDetailTranslation mutation op: %q", m.Op())
	}
}

// EducationTranslationClient is a client for the EducationTranslation schema.
type EducationTranslationClient struct {
	config
}

// NewEducationTranslationClient returns a client for the EducationTranslation from the given config.
func NewEducationTranslationClient(c config) *EducationTranslationClient {
	return &EducationTranslationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `educationtranslation.Hooks(f(g(h())))`.
func (c *EducationTranslationClient) Use(hooks ...Hook) {
	c.hooks.EducationTranslation = append(c.hooks.EducationTranslation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `educationtranslation.Intercept(f(g(h())))`.
func (c *EducationTranslationClient) Intercept(interceptors ...Interceptor) {
	c.inters.EducationTranslation = append(c.inters.EducationTranslation, interceptors...)
}

// Create returns a builder for creating a EducationTranslation entity.
func (c *EducationTranslationClient) Create() *EducationTranslationCreate {
	mutation := newEducationTranslationMutation(c.config, OpCreate)
	return &EducationTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EducationTranslation entities.
func (c *EducationTranslationClient) CreateBulk(builders ...*EducationTranslationCreate) *EducationTranslationCreateBulk {
	return &EducationTranslationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EducationTranslationClient) MapCreateBulk(slice any, setFunc func(*EducationTranslationCreate, int)) *EducationTranslationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EducationTranslationCreateBulk{err: fmt.Errorf("calling to EducationTranslationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EducationTranslationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EducationTranslationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EducationTranslation.
func (c *EducationTranslationClient) Update() *EducationTranslationUpdate {
	mutation := newEducationTranslationMutation(c.config, OpUpdate)
	return &EducationTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EducationTranslationClient) UpdateOne(et *EducationTranslation) *EducationTranslationUpdateOne {
	mutation := newEducationTranslationMutation(c.config, OpUpdateOne, withEducationTranslation(et))
	return &EducationTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EducationTranslationClient) UpdateOneID(id uuid.UUID) *EducationTranslationUpdateOne {
	mutation := newEducationTranslationMutation(c.config, OpUpdateOne, withEducationTranslationID(id))
	return &EducationTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EducationTranslation.
func (c *EducationTranslationClient) Delete() *EducationTranslationDelete {
	mutation := newEducationTranslationMutation(c.config, OpDelete)
	return &EducationTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EducationTranslationClient) DeleteOne(et *EducationTranslation) *EducationTranslationDeleteOne {
	return c.DeleteOneID(et.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EducationTranslationClient) DeleteOneID(id uuid.UUID) *EducationTranslationDeleteOne {
	builder := c.Delete().Where(educationtranslation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EducationTranslationDeleteOne{builder}
}

// Query returns a query builder for EducationTranslation.
func (c *EducationTranslationClient) Query() *EducationTranslationQuery {
	return &EducationTranslationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEducationTranslation},
		inters: c.Interceptors(),
	}
}

// Get returns a EducationTranslation entity by its id.
func (c *EducationTranslationClient) Get(ctx context.Context, id uuid.UUID) (*EducationTranslation, error) {
	return c.Query().Where(educationtranslation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EducationTranslationClient) GetX(ctx context.Context, id uuid.UUID) *EducationTranslation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEducation queries the education edge of a EducationTranslation.
func (c *EducationTranslationClient) QueryEducation(et *EducationTranslation) *EducationQuery {
	query := (&EducationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(educationtranslation.Table, educationtranslation.FieldID, id),
			sqlgraph.To(education.Table, education.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, educationtranslation.EducationTable, educationtranslation.EducationColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLanguage queries the language edge of a EducationTranslation.
func (c *EducationTranslationClient) QueryLanguage(et *EducationTranslation) *LanguageQuery {
	query := (&LanguageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(educationtranslation.Table, educationtranslation.FieldID, id),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, educationtranslation.LanguageTable, educationtranslation.LanguageColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EducationTranslationClient) Hooks() []Hook {
	return c.hooks.EducationTranslation
}

// Interceptors returns the client interceptors.
func (c *EducationTranslationClient) Interceptors() []Interceptor {
	return c.inters.EducationTranslation
}

func (c *EducationTranslationClient) mutate(ctx context.Context, m *EducationTranslationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EducationTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EducationTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EducationTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EducationTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EducationTranslation mutation op: %q", m.Op())
	}
}

// IdeaClient is a client for the Idea schema.
type IdeaClient struct {
	config
}

// NewIdeaClient returns a client for the Idea from the given config.
func NewIdeaClient(c config) *IdeaClient {
	return &IdeaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `idea.Hooks(f(g(h())))`.
func (c *IdeaClient) Use(hooks ...Hook) {
	c.hooks.Idea = append(c.hooks.Idea, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `idea.Intercept(f(g(h())))`.
func (c *IdeaClient) Intercept(interceptors ...Interceptor) {
	c.inters.Idea = append(c.inters.Idea, interceptors...)
}

// Create returns a builder for creating a Idea entity.
func (c *IdeaClient) Create() *IdeaCreate {
	mutation := newIdeaMutation(c.config, OpCreate)
	return &IdeaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Idea entities.
func (c *IdeaClient) CreateBulk(builders ...*IdeaCreate) *IdeaCreateBulk {
	return &IdeaCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *IdeaClient) MapCreateBulk(slice any, setFunc func(*IdeaCreate, int)) *IdeaCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &IdeaCreateBulk{err: fmt.Errorf("calling to IdeaClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*IdeaCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &IdeaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Idea.
func (c *IdeaClient) Update() *IdeaUpdate {
	mutation := newIdeaMutation(c.config, OpUpdate)
	return &IdeaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IdeaClient) UpdateOne(i *Idea) *IdeaUpdateOne {
	mutation := newIdeaMutation(c.config, OpUpdateOne, withIdea(i))
	return &IdeaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IdeaClient) UpdateOneID(id uuid.UUID) *IdeaUpdateOne {
	mutation := newIdeaMutation(c.config, OpUpdateOne, withIdeaID(id))
	return &IdeaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Idea.
func (c *IdeaClient) Delete() *IdeaDelete {
	mutation := newIdeaMutation(c.config, OpDelete)
	return &IdeaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IdeaClient) DeleteOne(i *Idea) *IdeaDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IdeaClient) DeleteOneID(id uuid.UUID) *IdeaDeleteOne {
	builder := c.Delete().Where(idea.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IdeaDeleteOne{builder}
}

// Query returns a query builder for Idea.
func (c *IdeaClient) Query() *IdeaQuery {
	return &IdeaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIdea},
		inters: c.Interceptors(),
	}
}

// Get returns a Idea entity by its id.
func (c *IdeaClient) Get(ctx context.Context, id uuid.UUID) (*Idea, error) {
	return c.Query().Where(idea.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IdeaClient) GetX(ctx context.Context, id uuid.UUID) *Idea {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Idea.
func (c *IdeaClient) QueryUser(i *Idea) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(idea.Table, idea.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, idea.UserTable, idea.UserColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTranslations queries the translations edge of a Idea.
func (c *IdeaClient) QueryTranslations(i *Idea) *IdeaTranslationQuery {
	query := (&IdeaTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(idea.Table, idea.FieldID, id),
			sqlgraph.To(ideatranslation.Table, ideatranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, idea.TranslationsTable, idea.TranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBlogPosts queries the blog_posts edge of a Idea.
func (c *IdeaClient) QueryBlogPosts(i *Idea) *BlogPostQuery {
	query := (&BlogPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(idea.Table, idea.FieldID, id),
			sqlgraph.To(blogpost.Table, blogpost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, idea.BlogPostsTable, idea.BlogPostsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IdeaClient) Hooks() []Hook {
	return c.hooks.Idea
}

// Interceptors returns the client interceptors.
func (c *IdeaClient) Interceptors() []Interceptor {
	return c.inters.Idea
}

func (c *IdeaClient) mutate(ctx context.Context, m *IdeaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IdeaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IdeaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IdeaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IdeaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Idea mutation op: %q", m.Op())
	}
}

// IdeaTranslationClient is a client for the IdeaTranslation schema.
type IdeaTranslationClient struct {
	config
}

// NewIdeaTranslationClient returns a client for the IdeaTranslation from the given config.
func NewIdeaTranslationClient(c config) *IdeaTranslationClient {
	return &IdeaTranslationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ideatranslation.Hooks(f(g(h())))`.
func (c *IdeaTranslationClient) Use(hooks ...Hook) {
	c.hooks.IdeaTranslation = append(c.hooks.IdeaTranslation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ideatranslation.Intercept(f(g(h())))`.
func (c *IdeaTranslationClient) Intercept(interceptors ...Interceptor) {
	c.inters.IdeaTranslation = append(c.inters.IdeaTranslation, interceptors...)
}

// Create returns a builder for creating a IdeaTranslation entity.
func (c *IdeaTranslationClient) Create() *IdeaTranslationCreate {
	mutation := newIdeaTranslationMutation(c.config, OpCreate)
	return &IdeaTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of IdeaTranslation entities.
func (c *IdeaTranslationClient) CreateBulk(builders ...*IdeaTranslationCreate) *IdeaTranslationCreateBulk {
	return &IdeaTranslationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *IdeaTranslationClient) MapCreateBulk(slice any, setFunc func(*IdeaTranslationCreate, int)) *IdeaTranslationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &IdeaTranslationCreateBulk{err: fmt.Errorf("calling to IdeaTranslationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*IdeaTranslationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &IdeaTranslationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for IdeaTranslation.
func (c *IdeaTranslationClient) Update() *IdeaTranslationUpdate {
	mutation := newIdeaTranslationMutation(c.config, OpUpdate)
	return &IdeaTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IdeaTranslationClient) UpdateOne(it *IdeaTranslation) *IdeaTranslationUpdateOne {
	mutation := newIdeaTranslationMutation(c.config, OpUpdateOne, withIdeaTranslation(it))
	return &IdeaTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IdeaTranslationClient) UpdateOneID(id uuid.UUID) *IdeaTranslationUpdateOne {
	mutation := newIdeaTranslationMutation(c.config, OpUpdateOne, withIdeaTranslationID(id))
	return &IdeaTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for IdeaTranslation.
func (c *IdeaTranslationClient) Delete() *IdeaTranslationDelete {
	mutation := newIdeaTranslationMutation(c.config, OpDelete)
	return &IdeaTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IdeaTranslationClient) DeleteOne(it *IdeaTranslation) *IdeaTranslationDeleteOne {
	return c.DeleteOneID(it.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IdeaTranslationClient) DeleteOneID(id uuid.UUID) *IdeaTranslationDeleteOne {
	builder := c.Delete().Where(ideatranslation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IdeaTranslationDeleteOne{builder}
}

// Query returns a query builder for IdeaTranslation.
func (c *IdeaTranslationClient) Query() *IdeaTranslationQuery {
	return &IdeaTranslationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIdeaTranslation},
		inters: c.Interceptors(),
	}
}

// Get returns a IdeaTranslation entity by its id.
func (c *IdeaTranslationClient) Get(ctx context.Context, id uuid.UUID) (*IdeaTranslation, error) {
	return c.Query().Where(ideatranslation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IdeaTranslationClient) GetX(ctx context.Context, id uuid.UUID) *IdeaTranslation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryIdea queries the idea edge of a IdeaTranslation.
func (c *IdeaTranslationClient) QueryIdea(it *IdeaTranslation) *IdeaQuery {
	query := (&IdeaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := it.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ideatranslation.Table, ideatranslation.FieldID, id),
			sqlgraph.To(idea.Table, idea.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ideatranslation.IdeaTable, ideatranslation.IdeaColumn),
		)
		fromV = sqlgraph.Neighbors(it.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLanguage queries the language edge of a IdeaTranslation.
func (c *IdeaTranslationClient) QueryLanguage(it *IdeaTranslation) *LanguageQuery {
	query := (&LanguageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := it.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ideatranslation.Table, ideatranslation.FieldID, id),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ideatranslation.LanguageTable, ideatranslation.LanguageColumn),
		)
		fromV = sqlgraph.Neighbors(it.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IdeaTranslationClient) Hooks() []Hook {
	return c.hooks.IdeaTranslation
}

// Interceptors returns the client interceptors.
func (c *IdeaTranslationClient) Interceptors() []Interceptor {
	return c.inters.IdeaTranslation
}

func (c *IdeaTranslationClient) mutate(ctx context.Context, m *IdeaTranslationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IdeaTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IdeaTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IdeaTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IdeaTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown IdeaTranslation mutation op: %q", m.Op())
	}
}

// LanguageClient is a client for the Language schema.
type LanguageClient struct {
	config
}

// NewLanguageClient returns a client for the Language from the given config.
func NewLanguageClient(c config) *LanguageClient {
	return &LanguageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `language.Hooks(f(g(h())))`.
func (c *LanguageClient) Use(hooks ...Hook) {
	c.hooks.Language = append(c.hooks.Language, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `language.Intercept(f(g(h())))`.
func (c *LanguageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Language = append(c.inters.Language, interceptors...)
}

// Create returns a builder for creating a Language entity.
func (c *LanguageClient) Create() *LanguageCreate {
	mutation := newLanguageMutation(c.config, OpCreate)
	return &LanguageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Language entities.
func (c *LanguageClient) CreateBulk(builders ...*LanguageCreate) *LanguageCreateBulk {
	return &LanguageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LanguageClient) MapCreateBulk(slice any, setFunc func(*LanguageCreate, int)) *LanguageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LanguageCreateBulk{err: fmt.Errorf("calling to LanguageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LanguageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LanguageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Language.
func (c *LanguageClient) Update() *LanguageUpdate {
	mutation := newLanguageMutation(c.config, OpUpdate)
	return &LanguageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LanguageClient) UpdateOne(l *Language) *LanguageUpdateOne {
	mutation := newLanguageMutation(c.config, OpUpdateOne, withLanguage(l))
	return &LanguageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LanguageClient) UpdateOneID(id string) *LanguageUpdateOne {
	mutation := newLanguageMutation(c.config, OpUpdateOne, withLanguageID(id))
	return &LanguageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Language.
func (c *LanguageClient) Delete() *LanguageDelete {
	mutation := newLanguageMutation(c.config, OpDelete)
	return &LanguageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LanguageClient) DeleteOne(l *Language) *LanguageDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LanguageClient) DeleteOneID(id string) *LanguageDeleteOne {
	builder := c.Delete().Where(language.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LanguageDeleteOne{builder}
}

// Query returns a query builder for Language.
func (c *LanguageClient) Query() *LanguageQuery {
	return &LanguageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLanguage},
		inters: c.Interceptors(),
	}
}

// Get returns a Language entity by its id.
func (c *LanguageClient) Get(ctx context.Context, id string) (*Language, error) {
	return c.Query().Where(language.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LanguageClient) GetX(ctx context.Context, id string) *Language {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPersonalInfoTranslations queries the personal_info_translations edge of a Language.
func (c *LanguageClient) QueryPersonalInfoTranslations(l *Language) *PersonalInfoTranslationQuery {
	query := (&PersonalInfoTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(language.Table, language.FieldID, id),
			sqlgraph.To(personalinfotranslation.Table, personalinfotranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, language.PersonalInfoTranslationsTable, language.PersonalInfoTranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEducationTranslations queries the education_translations edge of a Language.
func (c *LanguageClient) QueryEducationTranslations(l *Language) *EducationTranslationQuery {
	query := (&EducationTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(language.Table, language.FieldID, id),
			sqlgraph.To(educationtranslation.Table, educationtranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, language.EducationTranslationsTable, language.EducationTranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEducationDetailTranslations queries the education_detail_translations edge of a Language.
func (c *LanguageClient) QueryEducationDetailTranslations(l *Language) *EducationDetailTranslationQuery {
	query := (&EducationDetailTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(language.Table, language.FieldID, id),
			sqlgraph.To(educationdetailtranslation.Table, educationdetailtranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, language.EducationDetailTranslationsTable, language.EducationDetailTranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkExperienceTranslations queries the work_experience_translations edge of a Language.
func (c *LanguageClient) QueryWorkExperienceTranslations(l *Language) *WorkExperienceTranslationQuery {
	query := (&WorkExperienceTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(language.Table, language.FieldID, id),
			sqlgraph.To(workexperiencetranslation.Table, workexperiencetranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, language.WorkExperienceTranslationsTable, language.WorkExperienceTranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkExperienceDetailTranslations queries the work_experience_detail_translations edge of a Language.
func (c *LanguageClient) QueryWorkExperienceDetailTranslations(l *Language) *WorkExperienceDetailTranslationQuery {
	query := (&WorkExperienceDetailTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(language.Table, language.FieldID, id),
			sqlgraph.To(workexperiencedetailtranslation.Table, workexperiencedetailtranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, language.WorkExperienceDetailTranslationsTable, language.WorkExperienceDetailTranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectTranslations queries the project_translations edge of a Language.
func (c *LanguageClient) QueryProjectTranslations(l *Language) *ProjectTranslationQuery {
	query := (&ProjectTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(language.Table, language.FieldID, id),
			sqlgraph.To(projecttranslation.Table, projecttranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, language.ProjectTranslationsTable, language.ProjectTranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectDetailTranslations queries the project_detail_translations edge of a Language.
func (c *LanguageClient) QueryProjectDetailTranslations(l *Language) *ProjectDetailTranslationQuery {
	query := (&ProjectDetailTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(language.Table, language.FieldID, id),
			sqlgraph.To(projectdetailtranslation.Table, projectdetailtranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, language.ProjectDetailTranslationsTable, language.ProjectDetailTranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectImageTranslations queries the project_image_translations edge of a Language.
func (c *LanguageClient) QueryProjectImageTranslations(l *Language) *ProjectImageTranslationQuery {
	query := (&ProjectImageTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(language.Table, language.FieldID, id),
			sqlgraph.To(projectimagetranslation.Table, projectimagetranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, language.ProjectImageTranslationsTable, language.ProjectImageTranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBlogCategoryTranslations queries the blog_category_translations edge of a Language.
func (c *LanguageClient) QueryBlogCategoryTranslations(l *Language) *BlogCategoryTranslationQuery {
	query := (&BlogCategoryTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(language.Table, language.FieldID, id),
			sqlgraph.To(blogcategorytranslation.Table, blogcategorytranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, language.BlogCategoryTranslationsTable, language.BlogCategoryTranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBlogPostTranslations queries the blog_post_translations edge of a Language.
func (c *LanguageClient) QueryBlogPostTranslations(l *Language) *BlogPostTranslationQuery {
	query := (&BlogPostTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(language.Table, language.FieldID, id),
			sqlgraph.To(blogposttranslation.Table, blogposttranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, language.BlogPostTranslationsTable, language.BlogPostTranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBlogSeriesTranslations queries the blog_series_translations edge of a Language.
func (c *LanguageClient) QueryBlogSeriesTranslations(l *Language) *BlogSeriesTranslationQuery {
	query := (&BlogSeriesTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(language.Table, language.FieldID, id),
			sqlgraph.To(blogseriestranslation.Table, blogseriestranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, language.BlogSeriesTranslationsTable, language.BlogSeriesTranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIdeaTranslations queries the idea_translations edge of a Language.
func (c *LanguageClient) QueryIdeaTranslations(l *Language) *IdeaTranslationQuery {
	query := (&IdeaTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(language.Table, language.FieldID, id),
			sqlgraph.To(ideatranslation.Table, ideatranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, language.IdeaTranslationsTable, language.IdeaTranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryResearchProjectTranslations queries the research_project_translations edge of a Language.
func (c *LanguageClient) QueryResearchProjectTranslations(l *Language) *ResearchProjectTranslationQuery {
	query := (&ResearchProjectTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(language.Table, language.FieldID, id),
			sqlgraph.To(researchprojecttranslation.Table, researchprojecttranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, language.ResearchProjectTranslationsTable, language.ResearchProjectTranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryResearchProjectDetailTranslations queries the research_project_detail_translations edge of a Language.
func (c *LanguageClient) QueryResearchProjectDetailTranslations(l *Language) *ResearchProjectDetailTranslationQuery {
	query := (&ResearchProjectDetailTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(language.Table, language.FieldID, id),
			sqlgraph.To(researchprojectdetailtranslation.Table, researchprojectdetailtranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, language.ResearchProjectDetailTranslationsTable, language.ResearchProjectDetailTranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPublicationTranslations queries the publication_translations edge of a Language.
func (c *LanguageClient) QueryPublicationTranslations(l *Language) *PublicationTranslationQuery {
	query := (&PublicationTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(language.Table, language.FieldID, id),
			sqlgraph.To(publicationtranslation.Table, publicationtranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, language.PublicationTranslationsTable, language.PublicationTranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAwardTranslations queries the award_translations edge of a Language.
func (c *LanguageClient) QueryAwardTranslations(l *Language) *AwardTranslationQuery {
	query := (&AwardTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(language.Table, language.FieldID, id),
			sqlgraph.To(awardtranslation.Table, awardtranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, language.AwardTranslationsTable, language.AwardTranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRecentUpdateTranslations queries the recent_update_translations edge of a Language.
func (c *LanguageClient) QueryRecentUpdateTranslations(l *Language) *RecentUpdateTranslationQuery {
	query := (&RecentUpdateTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(language.Table, language.FieldID, id),
			sqlgraph.To(recentupdatetranslation.Table, recentupdatetranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, language.RecentUpdateTranslationsTable, language.RecentUpdateTranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LanguageClient) Hooks() []Hook {
	return c.hooks.Language
}

// Interceptors returns the client interceptors.
func (c *LanguageClient) Interceptors() []Interceptor {
	return c.inters.Language
}

func (c *LanguageClient) mutate(ctx context.Context, m *LanguageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LanguageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LanguageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LanguageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LanguageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Language mutation op: %q", m.Op())
	}
}

// PersonalInfoClient is a client for the PersonalInfo schema.
type PersonalInfoClient struct {
	config
}

// NewPersonalInfoClient returns a client for the PersonalInfo from the given config.
func NewPersonalInfoClient(c config) *PersonalInfoClient {
	return &PersonalInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `personalinfo.Hooks(f(g(h())))`.
func (c *PersonalInfoClient) Use(hooks ...Hook) {
	c.hooks.PersonalInfo = append(c.hooks.PersonalInfo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `personalinfo.Intercept(f(g(h())))`.
func (c *PersonalInfoClient) Intercept(interceptors ...Interceptor) {
	c.inters.PersonalInfo = append(c.inters.PersonalInfo, interceptors...)
}

// Create returns a builder for creating a PersonalInfo entity.
func (c *PersonalInfoClient) Create() *PersonalInfoCreate {
	mutation := newPersonalInfoMutation(c.config, OpCreate)
	return &PersonalInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PersonalInfo entities.
func (c *PersonalInfoClient) CreateBulk(builders ...*PersonalInfoCreate) *PersonalInfoCreateBulk {
	return &PersonalInfoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PersonalInfoClient) MapCreateBulk(slice any, setFunc func(*PersonalInfoCreate, int)) *PersonalInfoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PersonalInfoCreateBulk{err: fmt.Errorf("calling to PersonalInfoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PersonalInfoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PersonalInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PersonalInfo.
func (c *PersonalInfoClient) Update() *PersonalInfoUpdate {
	mutation := newPersonalInfoMutation(c.config, OpUpdate)
	return &PersonalInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PersonalInfoClient) UpdateOne(pi *PersonalInfo) *PersonalInfoUpdateOne {
	mutation := newPersonalInfoMutation(c.config, OpUpdateOne, withPersonalInfo(pi))
	return &PersonalInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PersonalInfoClient) UpdateOneID(id uuid.UUID) *PersonalInfoUpdateOne {
	mutation := newPersonalInfoMutation(c.config, OpUpdateOne, withPersonalInfoID(id))
	return &PersonalInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PersonalInfo.
func (c *PersonalInfoClient) Delete() *PersonalInfoDelete {
	mutation := newPersonalInfoMutation(c.config, OpDelete)
	return &PersonalInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PersonalInfoClient) DeleteOne(pi *PersonalInfo) *PersonalInfoDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PersonalInfoClient) DeleteOneID(id uuid.UUID) *PersonalInfoDeleteOne {
	builder := c.Delete().Where(personalinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PersonalInfoDeleteOne{builder}
}

// Query returns a query builder for PersonalInfo.
func (c *PersonalInfoClient) Query() *PersonalInfoQuery {
	return &PersonalInfoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePersonalInfo},
		inters: c.Interceptors(),
	}
}

// Get returns a PersonalInfo entity by its id.
func (c *PersonalInfoClient) Get(ctx context.Context, id uuid.UUID) (*PersonalInfo, error) {
	return c.Query().Where(personalinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PersonalInfoClient) GetX(ctx context.Context, id uuid.UUID) *PersonalInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a PersonalInfo.
func (c *PersonalInfoClient) QueryUser(pi *PersonalInfo) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(personalinfo.Table, personalinfo.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, personalinfo.UserTable, personalinfo.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTranslations queries the translations edge of a PersonalInfo.
func (c *PersonalInfoClient) QueryTranslations(pi *PersonalInfo) *PersonalInfoTranslationQuery {
	query := (&PersonalInfoTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(personalinfo.Table, personalinfo.FieldID, id),
			sqlgraph.To(personalinfotranslation.Table, personalinfotranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, personalinfo.TranslationsTable, personalinfo.TranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySocialLinks queries the social_links edge of a PersonalInfo.
func (c *PersonalInfoClient) QuerySocialLinks(pi *PersonalInfo) *SocialLinkQuery {
	query := (&SocialLinkClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(personalinfo.Table, personalinfo.FieldID, id),
			sqlgraph.To(sociallink.Table, sociallink.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, personalinfo.SocialLinksTable, personalinfo.SocialLinksColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PersonalInfoClient) Hooks() []Hook {
	return c.hooks.PersonalInfo
}

// Interceptors returns the client interceptors.
func (c *PersonalInfoClient) Interceptors() []Interceptor {
	return c.inters.PersonalInfo
}

func (c *PersonalInfoClient) mutate(ctx context.Context, m *PersonalInfoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PersonalInfoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PersonalInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PersonalInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PersonalInfoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PersonalInfo mutation op: %q", m.Op())
	}
}

// PersonalInfoTranslationClient is a client for the PersonalInfoTranslation schema.
type PersonalInfoTranslationClient struct {
	config
}

// NewPersonalInfoTranslationClient returns a client for the PersonalInfoTranslation from the given config.
func NewPersonalInfoTranslationClient(c config) *PersonalInfoTranslationClient {
	return &PersonalInfoTranslationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `personalinfotranslation.Hooks(f(g(h())))`.
func (c *PersonalInfoTranslationClient) Use(hooks ...Hook) {
	c.hooks.PersonalInfoTranslation = append(c.hooks.PersonalInfoTranslation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `personalinfotranslation.Intercept(f(g(h())))`.
func (c *PersonalInfoTranslationClient) Intercept(interceptors ...Interceptor) {
	c.inters.PersonalInfoTranslation = append(c.inters.PersonalInfoTranslation, interceptors...)
}

// Create returns a builder for creating a PersonalInfoTranslation entity.
func (c *PersonalInfoTranslationClient) Create() *PersonalInfoTranslationCreate {
	mutation := newPersonalInfoTranslationMutation(c.config, OpCreate)
	return &PersonalInfoTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PersonalInfoTranslation entities.
func (c *PersonalInfoTranslationClient) CreateBulk(builders ...*PersonalInfoTranslationCreate) *PersonalInfoTranslationCreateBulk {
	return &PersonalInfoTranslationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PersonalInfoTranslationClient) MapCreateBulk(slice any, setFunc func(*PersonalInfoTranslationCreate, int)) *PersonalInfoTranslationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PersonalInfoTranslationCreateBulk{err: fmt.Errorf("calling to PersonalInfoTranslationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PersonalInfoTranslationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PersonalInfoTranslationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PersonalInfoTranslation.
func (c *PersonalInfoTranslationClient) Update() *PersonalInfoTranslationUpdate {
	mutation := newPersonalInfoTranslationMutation(c.config, OpUpdate)
	return &PersonalInfoTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PersonalInfoTranslationClient) UpdateOne(pit *PersonalInfoTranslation) *PersonalInfoTranslationUpdateOne {
	mutation := newPersonalInfoTranslationMutation(c.config, OpUpdateOne, withPersonalInfoTranslation(pit))
	return &PersonalInfoTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PersonalInfoTranslationClient) UpdateOneID(id uuid.UUID) *PersonalInfoTranslationUpdateOne {
	mutation := newPersonalInfoTranslationMutation(c.config, OpUpdateOne, withPersonalInfoTranslationID(id))
	return &PersonalInfoTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PersonalInfoTranslation.
func (c *PersonalInfoTranslationClient) Delete() *PersonalInfoTranslationDelete {
	mutation := newPersonalInfoTranslationMutation(c.config, OpDelete)
	return &PersonalInfoTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PersonalInfoTranslationClient) DeleteOne(pit *PersonalInfoTranslation) *PersonalInfoTranslationDeleteOne {
	return c.DeleteOneID(pit.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PersonalInfoTranslationClient) DeleteOneID(id uuid.UUID) *PersonalInfoTranslationDeleteOne {
	builder := c.Delete().Where(personalinfotranslation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PersonalInfoTranslationDeleteOne{builder}
}

// Query returns a query builder for PersonalInfoTranslation.
func (c *PersonalInfoTranslationClient) Query() *PersonalInfoTranslationQuery {
	return &PersonalInfoTranslationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePersonalInfoTranslation},
		inters: c.Interceptors(),
	}
}

// Get returns a PersonalInfoTranslation entity by its id.
func (c *PersonalInfoTranslationClient) Get(ctx context.Context, id uuid.UUID) (*PersonalInfoTranslation, error) {
	return c.Query().Where(personalinfotranslation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PersonalInfoTranslationClient) GetX(ctx context.Context, id uuid.UUID) *PersonalInfoTranslation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPersonalInfo queries the personal_info edge of a PersonalInfoTranslation.
func (c *PersonalInfoTranslationClient) QueryPersonalInfo(pit *PersonalInfoTranslation) *PersonalInfoQuery {
	query := (&PersonalInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pit.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(personalinfotranslation.Table, personalinfotranslation.FieldID, id),
			sqlgraph.To(personalinfo.Table, personalinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, personalinfotranslation.PersonalInfoTable, personalinfotranslation.PersonalInfoColumn),
		)
		fromV = sqlgraph.Neighbors(pit.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLanguage queries the language edge of a PersonalInfoTranslation.
func (c *PersonalInfoTranslationClient) QueryLanguage(pit *PersonalInfoTranslation) *LanguageQuery {
	query := (&LanguageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pit.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(personalinfotranslation.Table, personalinfotranslation.FieldID, id),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, personalinfotranslation.LanguageTable, personalinfotranslation.LanguageColumn),
		)
		fromV = sqlgraph.Neighbors(pit.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PersonalInfoTranslationClient) Hooks() []Hook {
	return c.hooks.PersonalInfoTranslation
}

// Interceptors returns the client interceptors.
func (c *PersonalInfoTranslationClient) Interceptors() []Interceptor {
	return c.inters.PersonalInfoTranslation
}

func (c *PersonalInfoTranslationClient) mutate(ctx context.Context, m *PersonalInfoTranslationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PersonalInfoTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PersonalInfoTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PersonalInfoTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PersonalInfoTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PersonalInfoTranslation mutation op: %q", m.Op())
	}
}

// ProjectClient is a client for the Project schema.
type ProjectClient struct {
	config
}

// NewProjectClient returns a client for the Project from the given config.
func NewProjectClient(c config) *ProjectClient {
	return &ProjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `project.Hooks(f(g(h())))`.
func (c *ProjectClient) Use(hooks ...Hook) {
	c.hooks.Project = append(c.hooks.Project, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `project.Intercept(f(g(h())))`.
func (c *ProjectClient) Intercept(interceptors ...Interceptor) {
	c.inters.Project = append(c.inters.Project, interceptors...)
}

// Create returns a builder for creating a Project entity.
func (c *ProjectClient) Create() *ProjectCreate {
	mutation := newProjectMutation(c.config, OpCreate)
	return &ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Project entities.
func (c *ProjectClient) CreateBulk(builders ...*ProjectCreate) *ProjectCreateBulk {
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProjectClient) MapCreateBulk(slice any, setFunc func(*ProjectCreate, int)) *ProjectCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProjectCreateBulk{err: fmt.Errorf("calling to ProjectClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProjectCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Project.
func (c *ProjectClient) Update() *ProjectUpdate {
	mutation := newProjectMutation(c.config, OpUpdate)
	return &ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectClient) UpdateOne(pr *Project) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProject(pr))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectClient) UpdateOneID(id uuid.UUID) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProjectID(id))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Project.
func (c *ProjectClient) Delete() *ProjectDelete {
	mutation := newProjectMutation(c.config, OpDelete)
	return &ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProjectClient) DeleteOne(pr *Project) *ProjectDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProjectClient) DeleteOneID(id uuid.UUID) *ProjectDeleteOne {
	builder := c.Delete().Where(project.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectDeleteOne{builder}
}

// Query returns a query builder for Project.
func (c *ProjectClient) Query() *ProjectQuery {
	return &ProjectQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProject},
		inters: c.Interceptors(),
	}
}

// Get returns a Project entity by its id.
func (c *ProjectClient) Get(ctx context.Context, id uuid.UUID) (*Project, error) {
	return c.Query().Where(project.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectClient) GetX(ctx context.Context, id uuid.UUID) *Project {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Project.
func (c *ProjectClient) QueryUser(pr *Project) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, project.UserTable, project.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTranslations queries the translations edge of a Project.
func (c *ProjectClient) QueryTranslations(pr *Project) *ProjectTranslationQuery {
	query := (&ProjectTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(projecttranslation.Table, projecttranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.TranslationsTable, project.TranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTechnologies queries the technologies edge of a Project.
func (c *ProjectClient) QueryTechnologies(pr *Project) *ProjectTechnologyQuery {
	query := (&ProjectTechnologyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(projecttechnology.Table, projecttechnology.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.TechnologiesTable, project.TechnologiesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDetails queries the details edge of a Project.
func (c *ProjectClient) QueryDetails(pr *Project) *ProjectDetailQuery {
	query := (&ProjectDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(projectdetail.Table, projectdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, project.DetailsTable, project.DetailsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImages queries the images edge of a Project.
func (c *ProjectClient) QueryImages(pr *Project) *ProjectImageQuery {
	query := (&ProjectImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(projectimage.Table, projectimage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.ImagesTable, project.ImagesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySourceRelationships queries the source_relationships edge of a Project.
func (c *ProjectClient) QuerySourceRelationships(pr *Project) *ProjectRelationshipQuery {
	query := (&ProjectRelationshipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(projectrelationship.Table, projectrelationship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.SourceRelationshipsTable, project.SourceRelationshipsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTargetRelationships queries the target_relationships edge of a Project.
func (c *ProjectClient) QueryTargetRelationships(pr *Project) *ProjectRelationshipQuery {
	query := (&ProjectRelationshipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(projectrelationship.Table, projectrelationship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.TargetRelationshipsTable, project.TargetRelationshipsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectClient) Hooks() []Hook {
	return c.hooks.Project
}

// Interceptors returns the client interceptors.
func (c *ProjectClient) Interceptors() []Interceptor {
	return c.inters.Project
}

func (c *ProjectClient) mutate(ctx context.Context, m *ProjectMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Project mutation op: %q", m.Op())
	}
}

// ProjectDetailClient is a client for the ProjectDetail schema.
type ProjectDetailClient struct {
	config
}

// NewProjectDetailClient returns a client for the ProjectDetail from the given config.
func NewProjectDetailClient(c config) *ProjectDetailClient {
	return &ProjectDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projectdetail.Hooks(f(g(h())))`.
func (c *ProjectDetailClient) Use(hooks ...Hook) {
	c.hooks.ProjectDetail = append(c.hooks.ProjectDetail, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `projectdetail.Intercept(f(g(h())))`.
func (c *ProjectDetailClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProjectDetail = append(c.inters.ProjectDetail, interceptors...)
}

// Create returns a builder for creating a ProjectDetail entity.
func (c *ProjectDetailClient) Create() *ProjectDetailCreate {
	mutation := newProjectDetailMutation(c.config, OpCreate)
	return &ProjectDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectDetail entities.
func (c *ProjectDetailClient) CreateBulk(builders ...*ProjectDetailCreate) *ProjectDetailCreateBulk {
	return &ProjectDetailCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProjectDetailClient) MapCreateBulk(slice any, setFunc func(*ProjectDetailCreate, int)) *ProjectDetailCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProjectDetailCreateBulk{err: fmt.Errorf("calling to ProjectDetailClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProjectDetailCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProjectDetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectDetail.
func (c *ProjectDetailClient) Update() *ProjectDetailUpdate {
	mutation := newProjectDetailMutation(c.config, OpUpdate)
	return &ProjectDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectDetailClient) UpdateOne(pd *ProjectDetail) *ProjectDetailUpdateOne {
	mutation := newProjectDetailMutation(c.config, OpUpdateOne, withProjectDetail(pd))
	return &ProjectDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectDetailClient) UpdateOneID(id uuid.UUID) *ProjectDetailUpdateOne {
	mutation := newProjectDetailMutation(c.config, OpUpdateOne, withProjectDetailID(id))
	return &ProjectDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectDetail.
func (c *ProjectDetailClient) Delete() *ProjectDetailDelete {
	mutation := newProjectDetailMutation(c.config, OpDelete)
	return &ProjectDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProjectDetailClient) DeleteOne(pd *ProjectDetail) *ProjectDetailDeleteOne {
	return c.DeleteOneID(pd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProjectDetailClient) DeleteOneID(id uuid.UUID) *ProjectDetailDeleteOne {
	builder := c.Delete().Where(projectdetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectDetailDeleteOne{builder}
}

// Query returns a query builder for ProjectDetail.
func (c *ProjectDetailClient) Query() *ProjectDetailQuery {
	return &ProjectDetailQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProjectDetail},
		inters: c.Interceptors(),
	}
}

// Get returns a ProjectDetail entity by its id.
func (c *ProjectDetailClient) Get(ctx context.Context, id uuid.UUID) (*ProjectDetail, error) {
	return c.Query().Where(projectdetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectDetailClient) GetX(ctx context.Context, id uuid.UUID) *ProjectDetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a ProjectDetail.
func (c *ProjectDetailClient) QueryProject(pd *ProjectDetail) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectdetail.Table, projectdetail.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, projectdetail.ProjectTable, projectdetail.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(pd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTranslations queries the translations edge of a ProjectDetail.
func (c *ProjectDetailClient) QueryTranslations(pd *ProjectDetail) *ProjectDetailTranslationQuery {
	query := (&ProjectDetailTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectdetail.Table, projectdetail.FieldID, id),
			sqlgraph.To(projectdetailtranslation.Table, projectdetailtranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, projectdetail.TranslationsTable, projectdetail.TranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(pd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectDetailClient) Hooks() []Hook {
	return c.hooks.ProjectDetail
}

// Interceptors returns the client interceptors.
func (c *ProjectDetailClient) Interceptors() []Interceptor {
	return c.inters.ProjectDetail
}

func (c *ProjectDetailClient) mutate(ctx context.Context, m *ProjectDetailMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProjectDetailCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProjectDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProjectDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProjectDetailDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProjectDetail mutation op: %q", m.Op())
	}
}

// ProjectDetailTranslationClient is a client for the ProjectDetailTranslation schema.
type ProjectDetailTranslationClient struct {
	config
}

// NewProjectDetailTranslationClient returns a client for the ProjectDetailTranslation from the given config.
func NewProjectDetailTranslationClient(c config) *ProjectDetailTranslationClient {
	return &ProjectDetailTranslationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projectdetailtranslation.Hooks(f(g(h())))`.
func (c *ProjectDetailTranslationClient) Use(hooks ...Hook) {
	c.hooks.ProjectDetailTranslation = append(c.hooks.ProjectDetailTranslation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `projectdetailtranslation.Intercept(f(g(h())))`.
func (c *ProjectDetailTranslationClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProjectDetailTranslation = append(c.inters.ProjectDetailTranslation, interceptors...)
}

// Create returns a builder for creating a ProjectDetailTranslation entity.
func (c *ProjectDetailTranslationClient) Create() *ProjectDetailTranslationCreate {
	mutation := newProjectDetailTranslationMutation(c.config, OpCreate)
	return &ProjectDetailTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectDetailTranslation entities.
func (c *ProjectDetailTranslationClient) CreateBulk(builders ...*ProjectDetailTranslationCreate) *ProjectDetailTranslationCreateBulk {
	return &ProjectDetailTranslationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProjectDetailTranslationClient) MapCreateBulk(slice any, setFunc func(*ProjectDetailTranslationCreate, int)) *ProjectDetailTranslationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProjectDetailTranslationCreateBulk{err: fmt.Errorf("calling to ProjectDetailTranslationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProjectDetailTranslationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProjectDetailTranslationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectDetailTranslation.
func (c *ProjectDetailTranslationClient) Update() *ProjectDetailTranslationUpdate {
	mutation := newProjectDetailTranslationMutation(c.config, OpUpdate)
	return &ProjectDetailTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectDetailTranslationClient) UpdateOne(pdt *ProjectDetailTranslation) *ProjectDetailTranslationUpdateOne {
	mutation := newProjectDetailTranslationMutation(c.config, OpUpdateOne, withProjectDetailTranslation(pdt))
	return &ProjectDetailTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectDetailTranslationClient) UpdateOneID(id uuid.UUID) *ProjectDetailTranslationUpdateOne {
	mutation := newProjectDetailTranslationMutation(c.config, OpUpdateOne, withProjectDetailTranslationID(id))
	return &ProjectDetailTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectDetailTranslation.
func (c *ProjectDetailTranslationClient) Delete() *ProjectDetailTranslationDelete {
	mutation := newProjectDetailTranslationMutation(c.config, OpDelete)
	return &ProjectDetailTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProjectDetailTranslationClient) DeleteOne(pdt *ProjectDetailTranslation) *ProjectDetailTranslationDeleteOne {
	return c.DeleteOneID(pdt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProjectDetailTranslationClient) DeleteOneID(id uuid.UUID) *ProjectDetailTranslationDeleteOne {
	builder := c.Delete().Where(projectdetailtranslation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectDetailTranslationDeleteOne{builder}
}

// Query returns a query builder for ProjectDetailTranslation.
func (c *ProjectDetailTranslationClient) Query() *ProjectDetailTranslationQuery {
	return &ProjectDetailTranslationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProjectDetailTranslation},
		inters: c.Interceptors(),
	}
}

// Get returns a ProjectDetailTranslation entity by its id.
func (c *ProjectDetailTranslationClient) Get(ctx context.Context, id uuid.UUID) (*ProjectDetailTranslation, error) {
	return c.Query().Where(projectdetailtranslation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectDetailTranslationClient) GetX(ctx context.Context, id uuid.UUID) *ProjectDetailTranslation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProjectDetail queries the project_detail edge of a ProjectDetailTranslation.
func (c *ProjectDetailTranslationClient) QueryProjectDetail(pdt *ProjectDetailTranslation) *ProjectDetailQuery {
	query := (&ProjectDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pdt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectdetailtranslation.Table, projectdetailtranslation.FieldID, id),
			sqlgraph.To(projectdetail.Table, projectdetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectdetailtranslation.ProjectDetailTable, projectdetailtranslation.ProjectDetailColumn),
		)
		fromV = sqlgraph.Neighbors(pdt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLanguage queries the language edge of a ProjectDetailTranslation.
func (c *ProjectDetailTranslationClient) QueryLanguage(pdt *ProjectDetailTranslation) *LanguageQuery {
	query := (&LanguageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pdt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectdetailtranslation.Table, projectdetailtranslation.FieldID, id),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectdetailtranslation.LanguageTable, projectdetailtranslation.LanguageColumn),
		)
		fromV = sqlgraph.Neighbors(pdt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectDetailTranslationClient) Hooks() []Hook {
	return c.hooks.ProjectDetailTranslation
}

// Interceptors returns the client interceptors.
func (c *ProjectDetailTranslationClient) Interceptors() []Interceptor {
	return c.inters.ProjectDetailTranslation
}

func (c *ProjectDetailTranslationClient) mutate(ctx context.Context, m *ProjectDetailTranslationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProjectDetailTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProjectDetailTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProjectDetailTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProjectDetailTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProjectDetailTranslation mutation op: %q", m.Op())
	}
}

// ProjectImageClient is a client for the ProjectImage schema.
type ProjectImageClient struct {
	config
}

// NewProjectImageClient returns a client for the ProjectImage from the given config.
func NewProjectImageClient(c config) *ProjectImageClient {
	return &ProjectImageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projectimage.Hooks(f(g(h())))`.
func (c *ProjectImageClient) Use(hooks ...Hook) {
	c.hooks.ProjectImage = append(c.hooks.ProjectImage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `projectimage.Intercept(f(g(h())))`.
func (c *ProjectImageClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProjectImage = append(c.inters.ProjectImage, interceptors...)
}

// Create returns a builder for creating a ProjectImage entity.
func (c *ProjectImageClient) Create() *ProjectImageCreate {
	mutation := newProjectImageMutation(c.config, OpCreate)
	return &ProjectImageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectImage entities.
func (c *ProjectImageClient) CreateBulk(builders ...*ProjectImageCreate) *ProjectImageCreateBulk {
	return &ProjectImageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProjectImageClient) MapCreateBulk(slice any, setFunc func(*ProjectImageCreate, int)) *ProjectImageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProjectImageCreateBulk{err: fmt.Errorf("calling to ProjectImageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProjectImageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProjectImageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectImage.
func (c *ProjectImageClient) Update() *ProjectImageUpdate {
	mutation := newProjectImageMutation(c.config, OpUpdate)
	return &ProjectImageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectImageClient) UpdateOne(pi *ProjectImage) *ProjectImageUpdateOne {
	mutation := newProjectImageMutation(c.config, OpUpdateOne, withProjectImage(pi))
	return &ProjectImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectImageClient) UpdateOneID(id uuid.UUID) *ProjectImageUpdateOne {
	mutation := newProjectImageMutation(c.config, OpUpdateOne, withProjectImageID(id))
	return &ProjectImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectImage.
func (c *ProjectImageClient) Delete() *ProjectImageDelete {
	mutation := newProjectImageMutation(c.config, OpDelete)
	return &ProjectImageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProjectImageClient) DeleteOne(pi *ProjectImage) *ProjectImageDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProjectImageClient) DeleteOneID(id uuid.UUID) *ProjectImageDeleteOne {
	builder := c.Delete().Where(projectimage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectImageDeleteOne{builder}
}

// Query returns a query builder for ProjectImage.
func (c *ProjectImageClient) Query() *ProjectImageQuery {
	return &ProjectImageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProjectImage},
		inters: c.Interceptors(),
	}
}

// Get returns a ProjectImage entity by its id.
func (c *ProjectImageClient) Get(ctx context.Context, id uuid.UUID) (*ProjectImage, error) {
	return c.Query().Where(projectimage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectImageClient) GetX(ctx context.Context, id uuid.UUID) *ProjectImage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a ProjectImage.
func (c *ProjectImageClient) QueryProject(pi *ProjectImage) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectimage.Table, projectimage.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectimage.ProjectTable, projectimage.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTranslations queries the translations edge of a ProjectImage.
func (c *ProjectImageClient) QueryTranslations(pi *ProjectImage) *ProjectImageTranslationQuery {
	query := (&ProjectImageTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectimage.Table, projectimage.FieldID, id),
			sqlgraph.To(projectimagetranslation.Table, projectimagetranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, projectimage.TranslationsTable, projectimage.TranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectImageClient) Hooks() []Hook {
	return c.hooks.ProjectImage
}

// Interceptors returns the client interceptors.
func (c *ProjectImageClient) Interceptors() []Interceptor {
	return c.inters.ProjectImage
}

func (c *ProjectImageClient) mutate(ctx context.Context, m *ProjectImageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProjectImageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProjectImageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProjectImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProjectImageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProjectImage mutation op: %q", m.Op())
	}
}

// ProjectImageTranslationClient is a client for the ProjectImageTranslation schema.
type ProjectImageTranslationClient struct {
	config
}

// NewProjectImageTranslationClient returns a client for the ProjectImageTranslation from the given config.
func NewProjectImageTranslationClient(c config) *ProjectImageTranslationClient {
	return &ProjectImageTranslationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projectimagetranslation.Hooks(f(g(h())))`.
func (c *ProjectImageTranslationClient) Use(hooks ...Hook) {
	c.hooks.ProjectImageTranslation = append(c.hooks.ProjectImageTranslation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `projectimagetranslation.Intercept(f(g(h())))`.
func (c *ProjectImageTranslationClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProjectImageTranslation = append(c.inters.ProjectImageTranslation, interceptors...)
}

// Create returns a builder for creating a ProjectImageTranslation entity.
func (c *ProjectImageTranslationClient) Create() *ProjectImageTranslationCreate {
	mutation := newProjectImageTranslationMutation(c.config, OpCreate)
	return &ProjectImageTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectImageTranslation entities.
func (c *ProjectImageTranslationClient) CreateBulk(builders ...*ProjectImageTranslationCreate) *ProjectImageTranslationCreateBulk {
	return &ProjectImageTranslationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProjectImageTranslationClient) MapCreateBulk(slice any, setFunc func(*ProjectImageTranslationCreate, int)) *ProjectImageTranslationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProjectImageTranslationCreateBulk{err: fmt.Errorf("calling to ProjectImageTranslationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProjectImageTranslationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProjectImageTranslationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectImageTranslation.
func (c *ProjectImageTranslationClient) Update() *ProjectImageTranslationUpdate {
	mutation := newProjectImageTranslationMutation(c.config, OpUpdate)
	return &ProjectImageTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectImageTranslationClient) UpdateOne(pit *ProjectImageTranslation) *ProjectImageTranslationUpdateOne {
	mutation := newProjectImageTranslationMutation(c.config, OpUpdateOne, withProjectImageTranslation(pit))
	return &ProjectImageTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectImageTranslationClient) UpdateOneID(id uuid.UUID) *ProjectImageTranslationUpdateOne {
	mutation := newProjectImageTranslationMutation(c.config, OpUpdateOne, withProjectImageTranslationID(id))
	return &ProjectImageTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectImageTranslation.
func (c *ProjectImageTranslationClient) Delete() *ProjectImageTranslationDelete {
	mutation := newProjectImageTranslationMutation(c.config, OpDelete)
	return &ProjectImageTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProjectImageTranslationClient) DeleteOne(pit *ProjectImageTranslation) *ProjectImageTranslationDeleteOne {
	return c.DeleteOneID(pit.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProjectImageTranslationClient) DeleteOneID(id uuid.UUID) *ProjectImageTranslationDeleteOne {
	builder := c.Delete().Where(projectimagetranslation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectImageTranslationDeleteOne{builder}
}

// Query returns a query builder for ProjectImageTranslation.
func (c *ProjectImageTranslationClient) Query() *ProjectImageTranslationQuery {
	return &ProjectImageTranslationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProjectImageTranslation},
		inters: c.Interceptors(),
	}
}

// Get returns a ProjectImageTranslation entity by its id.
func (c *ProjectImageTranslationClient) Get(ctx context.Context, id uuid.UUID) (*ProjectImageTranslation, error) {
	return c.Query().Where(projectimagetranslation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectImageTranslationClient) GetX(ctx context.Context, id uuid.UUID) *ProjectImageTranslation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProjectImage queries the project_image edge of a ProjectImageTranslation.
func (c *ProjectImageTranslationClient) QueryProjectImage(pit *ProjectImageTranslation) *ProjectImageQuery {
	query := (&ProjectImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pit.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectimagetranslation.Table, projectimagetranslation.FieldID, id),
			sqlgraph.To(projectimage.Table, projectimage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectimagetranslation.ProjectImageTable, projectimagetranslation.ProjectImageColumn),
		)
		fromV = sqlgraph.Neighbors(pit.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLanguage queries the language edge of a ProjectImageTranslation.
func (c *ProjectImageTranslationClient) QueryLanguage(pit *ProjectImageTranslation) *LanguageQuery {
	query := (&LanguageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pit.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectimagetranslation.Table, projectimagetranslation.FieldID, id),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectimagetranslation.LanguageTable, projectimagetranslation.LanguageColumn),
		)
		fromV = sqlgraph.Neighbors(pit.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectImageTranslationClient) Hooks() []Hook {
	return c.hooks.ProjectImageTranslation
}

// Interceptors returns the client interceptors.
func (c *ProjectImageTranslationClient) Interceptors() []Interceptor {
	return c.inters.ProjectImageTranslation
}

func (c *ProjectImageTranslationClient) mutate(ctx context.Context, m *ProjectImageTranslationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProjectImageTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProjectImageTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProjectImageTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProjectImageTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProjectImageTranslation mutation op: %q", m.Op())
	}
}

// ProjectRelationshipClient is a client for the ProjectRelationship schema.
type ProjectRelationshipClient struct {
	config
}

// NewProjectRelationshipClient returns a client for the ProjectRelationship from the given config.
func NewProjectRelationshipClient(c config) *ProjectRelationshipClient {
	return &ProjectRelationshipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projectrelationship.Hooks(f(g(h())))`.
func (c *ProjectRelationshipClient) Use(hooks ...Hook) {
	c.hooks.ProjectRelationship = append(c.hooks.ProjectRelationship, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `projectrelationship.Intercept(f(g(h())))`.
func (c *ProjectRelationshipClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProjectRelationship = append(c.inters.ProjectRelationship, interceptors...)
}

// Create returns a builder for creating a ProjectRelationship entity.
func (c *ProjectRelationshipClient) Create() *ProjectRelationshipCreate {
	mutation := newProjectRelationshipMutation(c.config, OpCreate)
	return &ProjectRelationshipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectRelationship entities.
func (c *ProjectRelationshipClient) CreateBulk(builders ...*ProjectRelationshipCreate) *ProjectRelationshipCreateBulk {
	return &ProjectRelationshipCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProjectRelationshipClient) MapCreateBulk(slice any, setFunc func(*ProjectRelationshipCreate, int)) *ProjectRelationshipCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProjectRelationshipCreateBulk{err: fmt.Errorf("calling to ProjectRelationshipClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProjectRelationshipCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProjectRelationshipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectRelationship.
func (c *ProjectRelationshipClient) Update() *ProjectRelationshipUpdate {
	mutation := newProjectRelationshipMutation(c.config, OpUpdate)
	return &ProjectRelationshipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectRelationshipClient) UpdateOne(pr *ProjectRelationship) *ProjectRelationshipUpdateOne {
	mutation := newProjectRelationshipMutation(c.config, OpUpdateOne, withProjectRelationship(pr))
	return &ProjectRelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectRelationshipClient) UpdateOneID(id uuid.UUID) *ProjectRelationshipUpdateOne {
	mutation := newProjectRelationshipMutation(c.config, OpUpdateOne, withProjectRelationshipID(id))
	return &ProjectRelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectRelationship.
func (c *ProjectRelationshipClient) Delete() *ProjectRelationshipDelete {
	mutation := newProjectRelationshipMutation(c.config, OpDelete)
	return &ProjectRelationshipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProjectRelationshipClient) DeleteOne(pr *ProjectRelationship) *ProjectRelationshipDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProjectRelationshipClient) DeleteOneID(id uuid.UUID) *ProjectRelationshipDeleteOne {
	builder := c.Delete().Where(projectrelationship.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectRelationshipDeleteOne{builder}
}

// Query returns a query builder for ProjectRelationship.
func (c *ProjectRelationshipClient) Query() *ProjectRelationshipQuery {
	return &ProjectRelationshipQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProjectRelationship},
		inters: c.Interceptors(),
	}
}

// Get returns a ProjectRelationship entity by its id.
func (c *ProjectRelationshipClient) Get(ctx context.Context, id uuid.UUID) (*ProjectRelationship, error) {
	return c.Query().Where(projectrelationship.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectRelationshipClient) GetX(ctx context.Context, id uuid.UUID) *ProjectRelationship {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySourceProject queries the source_project edge of a ProjectRelationship.
func (c *ProjectRelationshipClient) QuerySourceProject(pr *ProjectRelationship) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectrelationship.Table, projectrelationship.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectrelationship.SourceProjectTable, projectrelationship.SourceProjectColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTargetProject queries the target_project edge of a ProjectRelationship.
func (c *ProjectRelationshipClient) QueryTargetProject(pr *ProjectRelationship) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectrelationship.Table, projectrelationship.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectrelationship.TargetProjectTable, projectrelationship.TargetProjectColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectRelationshipClient) Hooks() []Hook {
	return c.hooks.ProjectRelationship
}

// Interceptors returns the client interceptors.
func (c *ProjectRelationshipClient) Interceptors() []Interceptor {
	return c.inters.ProjectRelationship
}

func (c *ProjectRelationshipClient) mutate(ctx context.Context, m *ProjectRelationshipMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProjectRelationshipCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProjectRelationshipUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProjectRelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProjectRelationshipDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProjectRelationship mutation op: %q", m.Op())
	}
}

// ProjectTechnologyClient is a client for the ProjectTechnology schema.
type ProjectTechnologyClient struct {
	config
}

// NewProjectTechnologyClient returns a client for the ProjectTechnology from the given config.
func NewProjectTechnologyClient(c config) *ProjectTechnologyClient {
	return &ProjectTechnologyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projecttechnology.Hooks(f(g(h())))`.
func (c *ProjectTechnologyClient) Use(hooks ...Hook) {
	c.hooks.ProjectTechnology = append(c.hooks.ProjectTechnology, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `projecttechnology.Intercept(f(g(h())))`.
func (c *ProjectTechnologyClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProjectTechnology = append(c.inters.ProjectTechnology, interceptors...)
}

// Create returns a builder for creating a ProjectTechnology entity.
func (c *ProjectTechnologyClient) Create() *ProjectTechnologyCreate {
	mutation := newProjectTechnologyMutation(c.config, OpCreate)
	return &ProjectTechnologyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectTechnology entities.
func (c *ProjectTechnologyClient) CreateBulk(builders ...*ProjectTechnologyCreate) *ProjectTechnologyCreateBulk {
	return &ProjectTechnologyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProjectTechnologyClient) MapCreateBulk(slice any, setFunc func(*ProjectTechnologyCreate, int)) *ProjectTechnologyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProjectTechnologyCreateBulk{err: fmt.Errorf("calling to ProjectTechnologyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProjectTechnologyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProjectTechnologyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectTechnology.
func (c *ProjectTechnologyClient) Update() *ProjectTechnologyUpdate {
	mutation := newProjectTechnologyMutation(c.config, OpUpdate)
	return &ProjectTechnologyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectTechnologyClient) UpdateOne(pt *ProjectTechnology) *ProjectTechnologyUpdateOne {
	mutation := newProjectTechnologyMutation(c.config, OpUpdateOne, withProjectTechnology(pt))
	return &ProjectTechnologyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectTechnologyClient) UpdateOneID(id uuid.UUID) *ProjectTechnologyUpdateOne {
	mutation := newProjectTechnologyMutation(c.config, OpUpdateOne, withProjectTechnologyID(id))
	return &ProjectTechnologyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectTechnology.
func (c *ProjectTechnologyClient) Delete() *ProjectTechnologyDelete {
	mutation := newProjectTechnologyMutation(c.config, OpDelete)
	return &ProjectTechnologyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProjectTechnologyClient) DeleteOne(pt *ProjectTechnology) *ProjectTechnologyDeleteOne {
	return c.DeleteOneID(pt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProjectTechnologyClient) DeleteOneID(id uuid.UUID) *ProjectTechnologyDeleteOne {
	builder := c.Delete().Where(projecttechnology.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectTechnologyDeleteOne{builder}
}

// Query returns a query builder for ProjectTechnology.
func (c *ProjectTechnologyClient) Query() *ProjectTechnologyQuery {
	return &ProjectTechnologyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProjectTechnology},
		inters: c.Interceptors(),
	}
}

// Get returns a ProjectTechnology entity by its id.
func (c *ProjectTechnologyClient) Get(ctx context.Context, id uuid.UUID) (*ProjectTechnology, error) {
	return c.Query().Where(projecttechnology.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectTechnologyClient) GetX(ctx context.Context, id uuid.UUID) *ProjectTechnology {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a ProjectTechnology.
func (c *ProjectTechnologyClient) QueryProject(pt *ProjectTechnology) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projecttechnology.Table, projecttechnology.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projecttechnology.ProjectTable, projecttechnology.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectTechnologyClient) Hooks() []Hook {
	return c.hooks.ProjectTechnology
}

// Interceptors returns the client interceptors.
func (c *ProjectTechnologyClient) Interceptors() []Interceptor {
	return c.inters.ProjectTechnology
}

func (c *ProjectTechnologyClient) mutate(ctx context.Context, m *ProjectTechnologyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProjectTechnologyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProjectTechnologyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProjectTechnologyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProjectTechnologyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProjectTechnology mutation op: %q", m.Op())
	}
}

// ProjectTranslationClient is a client for the ProjectTranslation schema.
type ProjectTranslationClient struct {
	config
}

// NewProjectTranslationClient returns a client for the ProjectTranslation from the given config.
func NewProjectTranslationClient(c config) *ProjectTranslationClient {
	return &ProjectTranslationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projecttranslation.Hooks(f(g(h())))`.
func (c *ProjectTranslationClient) Use(hooks ...Hook) {
	c.hooks.ProjectTranslation = append(c.hooks.ProjectTranslation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `projecttranslation.Intercept(f(g(h())))`.
func (c *ProjectTranslationClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProjectTranslation = append(c.inters.ProjectTranslation, interceptors...)
}

// Create returns a builder for creating a ProjectTranslation entity.
func (c *ProjectTranslationClient) Create() *ProjectTranslationCreate {
	mutation := newProjectTranslationMutation(c.config, OpCreate)
	return &ProjectTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectTranslation entities.
func (c *ProjectTranslationClient) CreateBulk(builders ...*ProjectTranslationCreate) *ProjectTranslationCreateBulk {
	return &ProjectTranslationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProjectTranslationClient) MapCreateBulk(slice any, setFunc func(*ProjectTranslationCreate, int)) *ProjectTranslationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProjectTranslationCreateBulk{err: fmt.Errorf("calling to ProjectTranslationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProjectTranslationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProjectTranslationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectTranslation.
func (c *ProjectTranslationClient) Update() *ProjectTranslationUpdate {
	mutation := newProjectTranslationMutation(c.config, OpUpdate)
	return &ProjectTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectTranslationClient) UpdateOne(pt *ProjectTranslation) *ProjectTranslationUpdateOne {
	mutation := newProjectTranslationMutation(c.config, OpUpdateOne, withProjectTranslation(pt))
	return &ProjectTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectTranslationClient) UpdateOneID(id uuid.UUID) *ProjectTranslationUpdateOne {
	mutation := newProjectTranslationMutation(c.config, OpUpdateOne, withProjectTranslationID(id))
	return &ProjectTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectTranslation.
func (c *ProjectTranslationClient) Delete() *ProjectTranslationDelete {
	mutation := newProjectTranslationMutation(c.config, OpDelete)
	return &ProjectTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProjectTranslationClient) DeleteOne(pt *ProjectTranslation) *ProjectTranslationDeleteOne {
	return c.DeleteOneID(pt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProjectTranslationClient) DeleteOneID(id uuid.UUID) *ProjectTranslationDeleteOne {
	builder := c.Delete().Where(projecttranslation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectTranslationDeleteOne{builder}
}

// Query returns a query builder for ProjectTranslation.
func (c *ProjectTranslationClient) Query() *ProjectTranslationQuery {
	return &ProjectTranslationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProjectTranslation},
		inters: c.Interceptors(),
	}
}

// Get returns a ProjectTranslation entity by its id.
func (c *ProjectTranslationClient) Get(ctx context.Context, id uuid.UUID) (*ProjectTranslation, error) {
	return c.Query().Where(projecttranslation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectTranslationClient) GetX(ctx context.Context, id uuid.UUID) *ProjectTranslation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a ProjectTranslation.
func (c *ProjectTranslationClient) QueryProject(pt *ProjectTranslation) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projecttranslation.Table, projecttranslation.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projecttranslation.ProjectTable, projecttranslation.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLanguage queries the language edge of a ProjectTranslation.
func (c *ProjectTranslationClient) QueryLanguage(pt *ProjectTranslation) *LanguageQuery {
	query := (&LanguageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projecttranslation.Table, projecttranslation.FieldID, id),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projecttranslation.LanguageTable, projecttranslation.LanguageColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectTranslationClient) Hooks() []Hook {
	return c.hooks.ProjectTranslation
}

// Interceptors returns the client interceptors.
func (c *ProjectTranslationClient) Interceptors() []Interceptor {
	return c.inters.ProjectTranslation
}

func (c *ProjectTranslationClient) mutate(ctx context.Context, m *ProjectTranslationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProjectTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProjectTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProjectTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProjectTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProjectTranslation mutation op: %q", m.Op())
	}
}

// PublicationClient is a client for the Publication schema.
type PublicationClient struct {
	config
}

// NewPublicationClient returns a client for the Publication from the given config.
func NewPublicationClient(c config) *PublicationClient {
	return &PublicationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `publication.Hooks(f(g(h())))`.
func (c *PublicationClient) Use(hooks ...Hook) {
	c.hooks.Publication = append(c.hooks.Publication, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `publication.Intercept(f(g(h())))`.
func (c *PublicationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Publication = append(c.inters.Publication, interceptors...)
}

// Create returns a builder for creating a Publication entity.
func (c *PublicationClient) Create() *PublicationCreate {
	mutation := newPublicationMutation(c.config, OpCreate)
	return &PublicationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Publication entities.
func (c *PublicationClient) CreateBulk(builders ...*PublicationCreate) *PublicationCreateBulk {
	return &PublicationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PublicationClient) MapCreateBulk(slice any, setFunc func(*PublicationCreate, int)) *PublicationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PublicationCreateBulk{err: fmt.Errorf("calling to PublicationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PublicationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PublicationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Publication.
func (c *PublicationClient) Update() *PublicationUpdate {
	mutation := newPublicationMutation(c.config, OpUpdate)
	return &PublicationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PublicationClient) UpdateOne(pu *Publication) *PublicationUpdateOne {
	mutation := newPublicationMutation(c.config, OpUpdateOne, withPublication(pu))
	return &PublicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PublicationClient) UpdateOneID(id uuid.UUID) *PublicationUpdateOne {
	mutation := newPublicationMutation(c.config, OpUpdateOne, withPublicationID(id))
	return &PublicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Publication.
func (c *PublicationClient) Delete() *PublicationDelete {
	mutation := newPublicationMutation(c.config, OpDelete)
	return &PublicationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PublicationClient) DeleteOne(pu *Publication) *PublicationDeleteOne {
	return c.DeleteOneID(pu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PublicationClient) DeleteOneID(id uuid.UUID) *PublicationDeleteOne {
	builder := c.Delete().Where(publication.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PublicationDeleteOne{builder}
}

// Query returns a query builder for Publication.
func (c *PublicationClient) Query() *PublicationQuery {
	return &PublicationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePublication},
		inters: c.Interceptors(),
	}
}

// Get returns a Publication entity by its id.
func (c *PublicationClient) Get(ctx context.Context, id uuid.UUID) (*Publication, error) {
	return c.Query().Where(publication.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PublicationClient) GetX(ctx context.Context, id uuid.UUID) *Publication {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Publication.
func (c *PublicationClient) QueryUser(pu *Publication) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(publication.Table, publication.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, publication.UserTable, publication.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTranslations queries the translations edge of a Publication.
func (c *PublicationClient) QueryTranslations(pu *Publication) *PublicationTranslationQuery {
	query := (&PublicationTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(publication.Table, publication.FieldID, id),
			sqlgraph.To(publicationtranslation.Table, publicationtranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, publication.TranslationsTable, publication.TranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(pu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAuthors queries the authors edge of a Publication.
func (c *PublicationClient) QueryAuthors(pu *Publication) *PublicationAuthorQuery {
	query := (&PublicationAuthorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(publication.Table, publication.FieldID, id),
			sqlgraph.To(publicationauthor.Table, publicationauthor.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, publication.AuthorsTable, publication.AuthorsColumn),
		)
		fromV = sqlgraph.Neighbors(pu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PublicationClient) Hooks() []Hook {
	return c.hooks.Publication
}

// Interceptors returns the client interceptors.
func (c *PublicationClient) Interceptors() []Interceptor {
	return c.inters.Publication
}

func (c *PublicationClient) mutate(ctx context.Context, m *PublicationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PublicationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PublicationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PublicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PublicationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Publication mutation op: %q", m.Op())
	}
}

// PublicationAuthorClient is a client for the PublicationAuthor schema.
type PublicationAuthorClient struct {
	config
}

// NewPublicationAuthorClient returns a client for the PublicationAuthor from the given config.
func NewPublicationAuthorClient(c config) *PublicationAuthorClient {
	return &PublicationAuthorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `publicationauthor.Hooks(f(g(h())))`.
func (c *PublicationAuthorClient) Use(hooks ...Hook) {
	c.hooks.PublicationAuthor = append(c.hooks.PublicationAuthor, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `publicationauthor.Intercept(f(g(h())))`.
func (c *PublicationAuthorClient) Intercept(interceptors ...Interceptor) {
	c.inters.PublicationAuthor = append(c.inters.PublicationAuthor, interceptors...)
}

// Create returns a builder for creating a PublicationAuthor entity.
func (c *PublicationAuthorClient) Create() *PublicationAuthorCreate {
	mutation := newPublicationAuthorMutation(c.config, OpCreate)
	return &PublicationAuthorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PublicationAuthor entities.
func (c *PublicationAuthorClient) CreateBulk(builders ...*PublicationAuthorCreate) *PublicationAuthorCreateBulk {
	return &PublicationAuthorCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PublicationAuthorClient) MapCreateBulk(slice any, setFunc func(*PublicationAuthorCreate, int)) *PublicationAuthorCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PublicationAuthorCreateBulk{err: fmt.Errorf("calling to PublicationAuthorClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PublicationAuthorCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PublicationAuthorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PublicationAuthor.
func (c *PublicationAuthorClient) Update() *PublicationAuthorUpdate {
	mutation := newPublicationAuthorMutation(c.config, OpUpdate)
	return &PublicationAuthorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PublicationAuthorClient) UpdateOne(pa *PublicationAuthor) *PublicationAuthorUpdateOne {
	mutation := newPublicationAuthorMutation(c.config, OpUpdateOne, withPublicationAuthor(pa))
	return &PublicationAuthorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PublicationAuthorClient) UpdateOneID(id uuid.UUID) *PublicationAuthorUpdateOne {
	mutation := newPublicationAuthorMutation(c.config, OpUpdateOne, withPublicationAuthorID(id))
	return &PublicationAuthorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PublicationAuthor.
func (c *PublicationAuthorClient) Delete() *PublicationAuthorDelete {
	mutation := newPublicationAuthorMutation(c.config, OpDelete)
	return &PublicationAuthorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PublicationAuthorClient) DeleteOne(pa *PublicationAuthor) *PublicationAuthorDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PublicationAuthorClient) DeleteOneID(id uuid.UUID) *PublicationAuthorDeleteOne {
	builder := c.Delete().Where(publicationauthor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PublicationAuthorDeleteOne{builder}
}

// Query returns a query builder for PublicationAuthor.
func (c *PublicationAuthorClient) Query() *PublicationAuthorQuery {
	return &PublicationAuthorQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePublicationAuthor},
		inters: c.Interceptors(),
	}
}

// Get returns a PublicationAuthor entity by its id.
func (c *PublicationAuthorClient) Get(ctx context.Context, id uuid.UUID) (*PublicationAuthor, error) {
	return c.Query().Where(publicationauthor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PublicationAuthorClient) GetX(ctx context.Context, id uuid.UUID) *PublicationAuthor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPublication queries the publication edge of a PublicationAuthor.
func (c *PublicationAuthorClient) QueryPublication(pa *PublicationAuthor) *PublicationQuery {
	query := (&PublicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(publicationauthor.Table, publicationauthor.FieldID, id),
			sqlgraph.To(publication.Table, publication.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, publicationauthor.PublicationTable, publicationauthor.PublicationColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PublicationAuthorClient) Hooks() []Hook {
	return c.hooks.PublicationAuthor
}

// Interceptors returns the client interceptors.
func (c *PublicationAuthorClient) Interceptors() []Interceptor {
	return c.inters.PublicationAuthor
}

func (c *PublicationAuthorClient) mutate(ctx context.Context, m *PublicationAuthorMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PublicationAuthorCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PublicationAuthorUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PublicationAuthorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PublicationAuthorDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PublicationAuthor mutation op: %q", m.Op())
	}
}

// PublicationTranslationClient is a client for the PublicationTranslation schema.
type PublicationTranslationClient struct {
	config
}

// NewPublicationTranslationClient returns a client for the PublicationTranslation from the given config.
func NewPublicationTranslationClient(c config) *PublicationTranslationClient {
	return &PublicationTranslationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `publicationtranslation.Hooks(f(g(h())))`.
func (c *PublicationTranslationClient) Use(hooks ...Hook) {
	c.hooks.PublicationTranslation = append(c.hooks.PublicationTranslation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `publicationtranslation.Intercept(f(g(h())))`.
func (c *PublicationTranslationClient) Intercept(interceptors ...Interceptor) {
	c.inters.PublicationTranslation = append(c.inters.PublicationTranslation, interceptors...)
}

// Create returns a builder for creating a PublicationTranslation entity.
func (c *PublicationTranslationClient) Create() *PublicationTranslationCreate {
	mutation := newPublicationTranslationMutation(c.config, OpCreate)
	return &PublicationTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PublicationTranslation entities.
func (c *PublicationTranslationClient) CreateBulk(builders ...*PublicationTranslationCreate) *PublicationTranslationCreateBulk {
	return &PublicationTranslationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PublicationTranslationClient) MapCreateBulk(slice any, setFunc func(*PublicationTranslationCreate, int)) *PublicationTranslationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PublicationTranslationCreateBulk{err: fmt.Errorf("calling to PublicationTranslationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PublicationTranslationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PublicationTranslationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PublicationTranslation.
func (c *PublicationTranslationClient) Update() *PublicationTranslationUpdate {
	mutation := newPublicationTranslationMutation(c.config, OpUpdate)
	return &PublicationTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PublicationTranslationClient) UpdateOne(pt *PublicationTranslation) *PublicationTranslationUpdateOne {
	mutation := newPublicationTranslationMutation(c.config, OpUpdateOne, withPublicationTranslation(pt))
	return &PublicationTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PublicationTranslationClient) UpdateOneID(id uuid.UUID) *PublicationTranslationUpdateOne {
	mutation := newPublicationTranslationMutation(c.config, OpUpdateOne, withPublicationTranslationID(id))
	return &PublicationTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PublicationTranslation.
func (c *PublicationTranslationClient) Delete() *PublicationTranslationDelete {
	mutation := newPublicationTranslationMutation(c.config, OpDelete)
	return &PublicationTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PublicationTranslationClient) DeleteOne(pt *PublicationTranslation) *PublicationTranslationDeleteOne {
	return c.DeleteOneID(pt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PublicationTranslationClient) DeleteOneID(id uuid.UUID) *PublicationTranslationDeleteOne {
	builder := c.Delete().Where(publicationtranslation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PublicationTranslationDeleteOne{builder}
}

// Query returns a query builder for PublicationTranslation.
func (c *PublicationTranslationClient) Query() *PublicationTranslationQuery {
	return &PublicationTranslationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePublicationTranslation},
		inters: c.Interceptors(),
	}
}

// Get returns a PublicationTranslation entity by its id.
func (c *PublicationTranslationClient) Get(ctx context.Context, id uuid.UUID) (*PublicationTranslation, error) {
	return c.Query().Where(publicationtranslation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PublicationTranslationClient) GetX(ctx context.Context, id uuid.UUID) *PublicationTranslation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPublication queries the publication edge of a PublicationTranslation.
func (c *PublicationTranslationClient) QueryPublication(pt *PublicationTranslation) *PublicationQuery {
	query := (&PublicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(publicationtranslation.Table, publicationtranslation.FieldID, id),
			sqlgraph.To(publication.Table, publication.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, publicationtranslation.PublicationTable, publicationtranslation.PublicationColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLanguage queries the language edge of a PublicationTranslation.
func (c *PublicationTranslationClient) QueryLanguage(pt *PublicationTranslation) *LanguageQuery {
	query := (&LanguageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(publicationtranslation.Table, publicationtranslation.FieldID, id),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, publicationtranslation.LanguageTable, publicationtranslation.LanguageColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PublicationTranslationClient) Hooks() []Hook {
	return c.hooks.PublicationTranslation
}

// Interceptors returns the client interceptors.
func (c *PublicationTranslationClient) Interceptors() []Interceptor {
	return c.inters.PublicationTranslation
}

func (c *PublicationTranslationClient) mutate(ctx context.Context, m *PublicationTranslationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PublicationTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PublicationTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PublicationTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PublicationTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PublicationTranslation mutation op: %q", m.Op())
	}
}

// RecentUpdateClient is a client for the RecentUpdate schema.
type RecentUpdateClient struct {
	config
}

// NewRecentUpdateClient returns a client for the RecentUpdate from the given config.
func NewRecentUpdateClient(c config) *RecentUpdateClient {
	return &RecentUpdateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `recentupdate.Hooks(f(g(h())))`.
func (c *RecentUpdateClient) Use(hooks ...Hook) {
	c.hooks.RecentUpdate = append(c.hooks.RecentUpdate, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `recentupdate.Intercept(f(g(h())))`.
func (c *RecentUpdateClient) Intercept(interceptors ...Interceptor) {
	c.inters.RecentUpdate = append(c.inters.RecentUpdate, interceptors...)
}

// Create returns a builder for creating a RecentUpdate entity.
func (c *RecentUpdateClient) Create() *RecentUpdateCreate {
	mutation := newRecentUpdateMutation(c.config, OpCreate)
	return &RecentUpdateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RecentUpdate entities.
func (c *RecentUpdateClient) CreateBulk(builders ...*RecentUpdateCreate) *RecentUpdateCreateBulk {
	return &RecentUpdateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RecentUpdateClient) MapCreateBulk(slice any, setFunc func(*RecentUpdateCreate, int)) *RecentUpdateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RecentUpdateCreateBulk{err: fmt.Errorf("calling to RecentUpdateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RecentUpdateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RecentUpdateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RecentUpdate.
func (c *RecentUpdateClient) Update() *RecentUpdateUpdate {
	mutation := newRecentUpdateMutation(c.config, OpUpdate)
	return &RecentUpdateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RecentUpdateClient) UpdateOne(ru *RecentUpdate) *RecentUpdateUpdateOne {
	mutation := newRecentUpdateMutation(c.config, OpUpdateOne, withRecentUpdate(ru))
	return &RecentUpdateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RecentUpdateClient) UpdateOneID(id uuid.UUID) *RecentUpdateUpdateOne {
	mutation := newRecentUpdateMutation(c.config, OpUpdateOne, withRecentUpdateID(id))
	return &RecentUpdateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RecentUpdate.
func (c *RecentUpdateClient) Delete() *RecentUpdateDelete {
	mutation := newRecentUpdateMutation(c.config, OpDelete)
	return &RecentUpdateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RecentUpdateClient) DeleteOne(ru *RecentUpdate) *RecentUpdateDeleteOne {
	return c.DeleteOneID(ru.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RecentUpdateClient) DeleteOneID(id uuid.UUID) *RecentUpdateDeleteOne {
	builder := c.Delete().Where(recentupdate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RecentUpdateDeleteOne{builder}
}

// Query returns a query builder for RecentUpdate.
func (c *RecentUpdateClient) Query() *RecentUpdateQuery {
	return &RecentUpdateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRecentUpdate},
		inters: c.Interceptors(),
	}
}

// Get returns a RecentUpdate entity by its id.
func (c *RecentUpdateClient) Get(ctx context.Context, id uuid.UUID) (*RecentUpdate, error) {
	return c.Query().Where(recentupdate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RecentUpdateClient) GetX(ctx context.Context, id uuid.UUID) *RecentUpdate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a RecentUpdate.
func (c *RecentUpdateClient) QueryUser(ru *RecentUpdate) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ru.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recentupdate.Table, recentupdate.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recentupdate.UserTable, recentupdate.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ru.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTranslations queries the translations edge of a RecentUpdate.
func (c *RecentUpdateClient) QueryTranslations(ru *RecentUpdate) *RecentUpdateTranslationQuery {
	query := (&RecentUpdateTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ru.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recentupdate.Table, recentupdate.FieldID, id),
			sqlgraph.To(recentupdatetranslation.Table, recentupdatetranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, recentupdate.TranslationsTable, recentupdate.TranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(ru.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RecentUpdateClient) Hooks() []Hook {
	return c.hooks.RecentUpdate
}

// Interceptors returns the client interceptors.
func (c *RecentUpdateClient) Interceptors() []Interceptor {
	return c.inters.RecentUpdate
}

func (c *RecentUpdateClient) mutate(ctx context.Context, m *RecentUpdateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RecentUpdateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RecentUpdateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RecentUpdateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RecentUpdateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RecentUpdate mutation op: %q", m.Op())
	}
}

// RecentUpdateTranslationClient is a client for the RecentUpdateTranslation schema.
type RecentUpdateTranslationClient struct {
	config
}

// NewRecentUpdateTranslationClient returns a client for the RecentUpdateTranslation from the given config.
func NewRecentUpdateTranslationClient(c config) *RecentUpdateTranslationClient {
	return &RecentUpdateTranslationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `recentupdatetranslation.Hooks(f(g(h())))`.
func (c *RecentUpdateTranslationClient) Use(hooks ...Hook) {
	c.hooks.RecentUpdateTranslation = append(c.hooks.RecentUpdateTranslation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `recentupdatetranslation.Intercept(f(g(h())))`.
func (c *RecentUpdateTranslationClient) Intercept(interceptors ...Interceptor) {
	c.inters.RecentUpdateTranslation = append(c.inters.RecentUpdateTranslation, interceptors...)
}

// Create returns a builder for creating a RecentUpdateTranslation entity.
func (c *RecentUpdateTranslationClient) Create() *RecentUpdateTranslationCreate {
	mutation := newRecentUpdateTranslationMutation(c.config, OpCreate)
	return &RecentUpdateTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RecentUpdateTranslation entities.
func (c *RecentUpdateTranslationClient) CreateBulk(builders ...*RecentUpdateTranslationCreate) *RecentUpdateTranslationCreateBulk {
	return &RecentUpdateTranslationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RecentUpdateTranslationClient) MapCreateBulk(slice any, setFunc func(*RecentUpdateTranslationCreate, int)) *RecentUpdateTranslationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RecentUpdateTranslationCreateBulk{err: fmt.Errorf("calling to RecentUpdateTranslationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RecentUpdateTranslationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RecentUpdateTranslationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RecentUpdateTranslation.
func (c *RecentUpdateTranslationClient) Update() *RecentUpdateTranslationUpdate {
	mutation := newRecentUpdateTranslationMutation(c.config, OpUpdate)
	return &RecentUpdateTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RecentUpdateTranslationClient) UpdateOne(rut *RecentUpdateTranslation) *RecentUpdateTranslationUpdateOne {
	mutation := newRecentUpdateTranslationMutation(c.config, OpUpdateOne, withRecentUpdateTranslation(rut))
	return &RecentUpdateTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RecentUpdateTranslationClient) UpdateOneID(id uuid.UUID) *RecentUpdateTranslationUpdateOne {
	mutation := newRecentUpdateTranslationMutation(c.config, OpUpdateOne, withRecentUpdateTranslationID(id))
	return &RecentUpdateTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RecentUpdateTranslation.
func (c *RecentUpdateTranslationClient) Delete() *RecentUpdateTranslationDelete {
	mutation := newRecentUpdateTranslationMutation(c.config, OpDelete)
	return &RecentUpdateTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RecentUpdateTranslationClient) DeleteOne(rut *RecentUpdateTranslation) *RecentUpdateTranslationDeleteOne {
	return c.DeleteOneID(rut.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RecentUpdateTranslationClient) DeleteOneID(id uuid.UUID) *RecentUpdateTranslationDeleteOne {
	builder := c.Delete().Where(recentupdatetranslation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RecentUpdateTranslationDeleteOne{builder}
}

// Query returns a query builder for RecentUpdateTranslation.
func (c *RecentUpdateTranslationClient) Query() *RecentUpdateTranslationQuery {
	return &RecentUpdateTranslationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRecentUpdateTranslation},
		inters: c.Interceptors(),
	}
}

// Get returns a RecentUpdateTranslation entity by its id.
func (c *RecentUpdateTranslationClient) Get(ctx context.Context, id uuid.UUID) (*RecentUpdateTranslation, error) {
	return c.Query().Where(recentupdatetranslation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RecentUpdateTranslationClient) GetX(ctx context.Context, id uuid.UUID) *RecentUpdateTranslation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRecentUpdate queries the recent_update edge of a RecentUpdateTranslation.
func (c *RecentUpdateTranslationClient) QueryRecentUpdate(rut *RecentUpdateTranslation) *RecentUpdateQuery {
	query := (&RecentUpdateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rut.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recentupdatetranslation.Table, recentupdatetranslation.FieldID, id),
			sqlgraph.To(recentupdate.Table, recentupdate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recentupdatetranslation.RecentUpdateTable, recentupdatetranslation.RecentUpdateColumn),
		)
		fromV = sqlgraph.Neighbors(rut.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLanguage queries the language edge of a RecentUpdateTranslation.
func (c *RecentUpdateTranslationClient) QueryLanguage(rut *RecentUpdateTranslation) *LanguageQuery {
	query := (&LanguageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rut.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recentupdatetranslation.Table, recentupdatetranslation.FieldID, id),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recentupdatetranslation.LanguageTable, recentupdatetranslation.LanguageColumn),
		)
		fromV = sqlgraph.Neighbors(rut.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RecentUpdateTranslationClient) Hooks() []Hook {
	return c.hooks.RecentUpdateTranslation
}

// Interceptors returns the client interceptors.
func (c *RecentUpdateTranslationClient) Interceptors() []Interceptor {
	return c.inters.RecentUpdateTranslation
}

func (c *RecentUpdateTranslationClient) mutate(ctx context.Context, m *RecentUpdateTranslationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RecentUpdateTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RecentUpdateTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RecentUpdateTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RecentUpdateTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RecentUpdateTranslation mutation op: %q", m.Op())
	}
}

// ResearchProjectClient is a client for the ResearchProject schema.
type ResearchProjectClient struct {
	config
}

// NewResearchProjectClient returns a client for the ResearchProject from the given config.
func NewResearchProjectClient(c config) *ResearchProjectClient {
	return &ResearchProjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `researchproject.Hooks(f(g(h())))`.
func (c *ResearchProjectClient) Use(hooks ...Hook) {
	c.hooks.ResearchProject = append(c.hooks.ResearchProject, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `researchproject.Intercept(f(g(h())))`.
func (c *ResearchProjectClient) Intercept(interceptors ...Interceptor) {
	c.inters.ResearchProject = append(c.inters.ResearchProject, interceptors...)
}

// Create returns a builder for creating a ResearchProject entity.
func (c *ResearchProjectClient) Create() *ResearchProjectCreate {
	mutation := newResearchProjectMutation(c.config, OpCreate)
	return &ResearchProjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ResearchProject entities.
func (c *ResearchProjectClient) CreateBulk(builders ...*ResearchProjectCreate) *ResearchProjectCreateBulk {
	return &ResearchProjectCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ResearchProjectClient) MapCreateBulk(slice any, setFunc func(*ResearchProjectCreate, int)) *ResearchProjectCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ResearchProjectCreateBulk{err: fmt.Errorf("calling to ResearchProjectClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ResearchProjectCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ResearchProjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ResearchProject.
func (c *ResearchProjectClient) Update() *ResearchProjectUpdate {
	mutation := newResearchProjectMutation(c.config, OpUpdate)
	return &ResearchProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResearchProjectClient) UpdateOne(rp *ResearchProject) *ResearchProjectUpdateOne {
	mutation := newResearchProjectMutation(c.config, OpUpdateOne, withResearchProject(rp))
	return &ResearchProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResearchProjectClient) UpdateOneID(id uuid.UUID) *ResearchProjectUpdateOne {
	mutation := newResearchProjectMutation(c.config, OpUpdateOne, withResearchProjectID(id))
	return &ResearchProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ResearchProject.
func (c *ResearchProjectClient) Delete() *ResearchProjectDelete {
	mutation := newResearchProjectMutation(c.config, OpDelete)
	return &ResearchProjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ResearchProjectClient) DeleteOne(rp *ResearchProject) *ResearchProjectDeleteOne {
	return c.DeleteOneID(rp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ResearchProjectClient) DeleteOneID(id uuid.UUID) *ResearchProjectDeleteOne {
	builder := c.Delete().Where(researchproject.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResearchProjectDeleteOne{builder}
}

// Query returns a query builder for ResearchProject.
func (c *ResearchProjectClient) Query() *ResearchProjectQuery {
	return &ResearchProjectQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeResearchProject},
		inters: c.Interceptors(),
	}
}

// Get returns a ResearchProject entity by its id.
func (c *ResearchProjectClient) Get(ctx context.Context, id uuid.UUID) (*ResearchProject, error) {
	return c.Query().Where(researchproject.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResearchProjectClient) GetX(ctx context.Context, id uuid.UUID) *ResearchProject {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a ResearchProject.
func (c *ResearchProjectClient) QueryUser(rp *ResearchProject) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(researchproject.Table, researchproject.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, researchproject.UserTable, researchproject.UserColumn),
		)
		fromV = sqlgraph.Neighbors(rp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTranslations queries the translations edge of a ResearchProject.
func (c *ResearchProjectClient) QueryTranslations(rp *ResearchProject) *ResearchProjectTranslationQuery {
	query := (&ResearchProjectTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(researchproject.Table, researchproject.FieldID, id),
			sqlgraph.To(researchprojecttranslation.Table, researchprojecttranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, researchproject.TranslationsTable, researchproject.TranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(rp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDetails queries the details edge of a ResearchProject.
func (c *ResearchProjectClient) QueryDetails(rp *ResearchProject) *ResearchProjectDetailQuery {
	query := (&ResearchProjectDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(researchproject.Table, researchproject.FieldID, id),
			sqlgraph.To(researchprojectdetail.Table, researchprojectdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, researchproject.DetailsTable, researchproject.DetailsColumn),
		)
		fromV = sqlgraph.Neighbors(rp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ResearchProjectClient) Hooks() []Hook {
	return c.hooks.ResearchProject
}

// Interceptors returns the client interceptors.
func (c *ResearchProjectClient) Interceptors() []Interceptor {
	return c.inters.ResearchProject
}

func (c *ResearchProjectClient) mutate(ctx context.Context, m *ResearchProjectMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ResearchProjectCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ResearchProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ResearchProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ResearchProjectDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ResearchProject mutation op: %q", m.Op())
	}
}

// ResearchProjectDetailClient is a client for the ResearchProjectDetail schema.
type ResearchProjectDetailClient struct {
	config
}

// NewResearchProjectDetailClient returns a client for the ResearchProjectDetail from the given config.
func NewResearchProjectDetailClient(c config) *ResearchProjectDetailClient {
	return &ResearchProjectDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `researchprojectdetail.Hooks(f(g(h())))`.
func (c *ResearchProjectDetailClient) Use(hooks ...Hook) {
	c.hooks.ResearchProjectDetail = append(c.hooks.ResearchProjectDetail, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `researchprojectdetail.Intercept(f(g(h())))`.
func (c *ResearchProjectDetailClient) Intercept(interceptors ...Interceptor) {
	c.inters.ResearchProjectDetail = append(c.inters.ResearchProjectDetail, interceptors...)
}

// Create returns a builder for creating a ResearchProjectDetail entity.
func (c *ResearchProjectDetailClient) Create() *ResearchProjectDetailCreate {
	mutation := newResearchProjectDetailMutation(c.config, OpCreate)
	return &ResearchProjectDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ResearchProjectDetail entities.
func (c *ResearchProjectDetailClient) CreateBulk(builders ...*ResearchProjectDetailCreate) *ResearchProjectDetailCreateBulk {
	return &ResearchProjectDetailCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ResearchProjectDetailClient) MapCreateBulk(slice any, setFunc func(*ResearchProjectDetailCreate, int)) *ResearchProjectDetailCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ResearchProjectDetailCreateBulk{err: fmt.Errorf("calling to ResearchProjectDetailClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ResearchProjectDetailCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ResearchProjectDetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ResearchProjectDetail.
func (c *ResearchProjectDetailClient) Update() *ResearchProjectDetailUpdate {
	mutation := newResearchProjectDetailMutation(c.config, OpUpdate)
	return &ResearchProjectDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResearchProjectDetailClient) UpdateOne(rpd *ResearchProjectDetail) *ResearchProjectDetailUpdateOne {
	mutation := newResearchProjectDetailMutation(c.config, OpUpdateOne, withResearchProjectDetail(rpd))
	return &ResearchProjectDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResearchProjectDetailClient) UpdateOneID(id uuid.UUID) *ResearchProjectDetailUpdateOne {
	mutation := newResearchProjectDetailMutation(c.config, OpUpdateOne, withResearchProjectDetailID(id))
	return &ResearchProjectDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ResearchProjectDetail.
func (c *ResearchProjectDetailClient) Delete() *ResearchProjectDetailDelete {
	mutation := newResearchProjectDetailMutation(c.config, OpDelete)
	return &ResearchProjectDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ResearchProjectDetailClient) DeleteOne(rpd *ResearchProjectDetail) *ResearchProjectDetailDeleteOne {
	return c.DeleteOneID(rpd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ResearchProjectDetailClient) DeleteOneID(id uuid.UUID) *ResearchProjectDetailDeleteOne {
	builder := c.Delete().Where(researchprojectdetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResearchProjectDetailDeleteOne{builder}
}

// Query returns a query builder for ResearchProjectDetail.
func (c *ResearchProjectDetailClient) Query() *ResearchProjectDetailQuery {
	return &ResearchProjectDetailQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeResearchProjectDetail},
		inters: c.Interceptors(),
	}
}

// Get returns a ResearchProjectDetail entity by its id.
func (c *ResearchProjectDetailClient) Get(ctx context.Context, id uuid.UUID) (*ResearchProjectDetail, error) {
	return c.Query().Where(researchprojectdetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResearchProjectDetailClient) GetX(ctx context.Context, id uuid.UUID) *ResearchProjectDetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryResearchProject queries the research_project edge of a ResearchProjectDetail.
func (c *ResearchProjectDetailClient) QueryResearchProject(rpd *ResearchProjectDetail) *ResearchProjectQuery {
	query := (&ResearchProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rpd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(researchprojectdetail.Table, researchprojectdetail.FieldID, id),
			sqlgraph.To(researchproject.Table, researchproject.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, researchprojectdetail.ResearchProjectTable, researchprojectdetail.ResearchProjectColumn),
		)
		fromV = sqlgraph.Neighbors(rpd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTranslations queries the translations edge of a ResearchProjectDetail.
func (c *ResearchProjectDetailClient) QueryTranslations(rpd *ResearchProjectDetail) *ResearchProjectDetailTranslationQuery {
	query := (&ResearchProjectDetailTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rpd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(researchprojectdetail.Table, researchprojectdetail.FieldID, id),
			sqlgraph.To(researchprojectdetailtranslation.Table, researchprojectdetailtranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, researchprojectdetail.TranslationsTable, researchprojectdetail.TranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(rpd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ResearchProjectDetailClient) Hooks() []Hook {
	return c.hooks.ResearchProjectDetail
}

// Interceptors returns the client interceptors.
func (c *ResearchProjectDetailClient) Interceptors() []Interceptor {
	return c.inters.ResearchProjectDetail
}

func (c *ResearchProjectDetailClient) mutate(ctx context.Context, m *ResearchProjectDetailMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ResearchProjectDetailCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ResearchProjectDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ResearchProjectDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ResearchProjectDetailDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ResearchProjectDetail mutation op: %q", m.Op())
	}
}

// ResearchProjectDetailTranslationClient is a client for the ResearchProjectDetailTranslation schema.
type ResearchProjectDetailTranslationClient struct {
	config
}

// NewResearchProjectDetailTranslationClient returns a client for the ResearchProjectDetailTranslation from the given config.
func NewResearchProjectDetailTranslationClient(c config) *ResearchProjectDetailTranslationClient {
	return &ResearchProjectDetailTranslationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `researchprojectdetailtranslation.Hooks(f(g(h())))`.
func (c *ResearchProjectDetailTranslationClient) Use(hooks ...Hook) {
	c.hooks.ResearchProjectDetailTranslation = append(c.hooks.ResearchProjectDetailTranslation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `researchprojectdetailtranslation.Intercept(f(g(h())))`.
func (c *ResearchProjectDetailTranslationClient) Intercept(interceptors ...Interceptor) {
	c.inters.ResearchProjectDetailTranslation = append(c.inters.ResearchProjectDetailTranslation, interceptors...)
}

// Create returns a builder for creating a ResearchProjectDetailTranslation entity.
func (c *ResearchProjectDetailTranslationClient) Create() *ResearchProjectDetailTranslationCreate {
	mutation := newResearchProjectDetailTranslationMutation(c.config, OpCreate)
	return &ResearchProjectDetailTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ResearchProjectDetailTranslation entities.
func (c *ResearchProjectDetailTranslationClient) CreateBulk(builders ...*ResearchProjectDetailTranslationCreate) *ResearchProjectDetailTranslationCreateBulk {
	return &ResearchProjectDetailTranslationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ResearchProjectDetailTranslationClient) MapCreateBulk(slice any, setFunc func(*ResearchProjectDetailTranslationCreate, int)) *ResearchProjectDetailTranslationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ResearchProjectDetailTranslationCreateBulk{err: fmt.Errorf("calling to ResearchProjectDetailTranslationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ResearchProjectDetailTranslationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ResearchProjectDetailTranslationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ResearchProjectDetailTranslation.
func (c *ResearchProjectDetailTranslationClient) Update() *ResearchProjectDetailTranslationUpdate {
	mutation := newResearchProjectDetailTranslationMutation(c.config, OpUpdate)
	return &ResearchProjectDetailTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResearchProjectDetailTranslationClient) UpdateOne(rpdt *ResearchProjectDetailTranslation) *ResearchProjectDetailTranslationUpdateOne {
	mutation := newResearchProjectDetailTranslationMutation(c.config, OpUpdateOne, withResearchProjectDetailTranslation(rpdt))
	return &ResearchProjectDetailTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResearchProjectDetailTranslationClient) UpdateOneID(id uuid.UUID) *ResearchProjectDetailTranslationUpdateOne {
	mutation := newResearchProjectDetailTranslationMutation(c.config, OpUpdateOne, withResearchProjectDetailTranslationID(id))
	return &ResearchProjectDetailTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ResearchProjectDetailTranslation.
func (c *ResearchProjectDetailTranslationClient) Delete() *ResearchProjectDetailTranslationDelete {
	mutation := newResearchProjectDetailTranslationMutation(c.config, OpDelete)
	return &ResearchProjectDetailTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ResearchProjectDetailTranslationClient) DeleteOne(rpdt *ResearchProjectDetailTranslation) *ResearchProjectDetailTranslationDeleteOne {
	return c.DeleteOneID(rpdt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ResearchProjectDetailTranslationClient) DeleteOneID(id uuid.UUID) *ResearchProjectDetailTranslationDeleteOne {
	builder := c.Delete().Where(researchprojectdetailtranslation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResearchProjectDetailTranslationDeleteOne{builder}
}

// Query returns a query builder for ResearchProjectDetailTranslation.
func (c *ResearchProjectDetailTranslationClient) Query() *ResearchProjectDetailTranslationQuery {
	return &ResearchProjectDetailTranslationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeResearchProjectDetailTranslation},
		inters: c.Interceptors(),
	}
}

// Get returns a ResearchProjectDetailTranslation entity by its id.
func (c *ResearchProjectDetailTranslationClient) Get(ctx context.Context, id uuid.UUID) (*ResearchProjectDetailTranslation, error) {
	return c.Query().Where(researchprojectdetailtranslation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResearchProjectDetailTranslationClient) GetX(ctx context.Context, id uuid.UUID) *ResearchProjectDetailTranslation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryResearchProjectDetail queries the research_project_detail edge of a ResearchProjectDetailTranslation.
func (c *ResearchProjectDetailTranslationClient) QueryResearchProjectDetail(rpdt *ResearchProjectDetailTranslation) *ResearchProjectDetailQuery {
	query := (&ResearchProjectDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rpdt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(researchprojectdetailtranslation.Table, researchprojectdetailtranslation.FieldID, id),
			sqlgraph.To(researchprojectdetail.Table, researchprojectdetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, researchprojectdetailtranslation.ResearchProjectDetailTable, researchprojectdetailtranslation.ResearchProjectDetailColumn),
		)
		fromV = sqlgraph.Neighbors(rpdt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLanguage queries the language edge of a ResearchProjectDetailTranslation.
func (c *ResearchProjectDetailTranslationClient) QueryLanguage(rpdt *ResearchProjectDetailTranslation) *LanguageQuery {
	query := (&LanguageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rpdt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(researchprojectdetailtranslation.Table, researchprojectdetailtranslation.FieldID, id),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, researchprojectdetailtranslation.LanguageTable, researchprojectdetailtranslation.LanguageColumn),
		)
		fromV = sqlgraph.Neighbors(rpdt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ResearchProjectDetailTranslationClient) Hooks() []Hook {
	return c.hooks.ResearchProjectDetailTranslation
}

// Interceptors returns the client interceptors.
func (c *ResearchProjectDetailTranslationClient) Interceptors() []Interceptor {
	return c.inters.ResearchProjectDetailTranslation
}

func (c *ResearchProjectDetailTranslationClient) mutate(ctx context.Context, m *ResearchProjectDetailTranslationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ResearchProjectDetailTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ResearchProjectDetailTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ResearchProjectDetailTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ResearchProjectDetailTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ResearchProjectDetailTranslation mutation op: %q", m.Op())
	}
}

// ResearchProjectTranslationClient is a client for the ResearchProjectTranslation schema.
type ResearchProjectTranslationClient struct {
	config
}

// NewResearchProjectTranslationClient returns a client for the ResearchProjectTranslation from the given config.
func NewResearchProjectTranslationClient(c config) *ResearchProjectTranslationClient {
	return &ResearchProjectTranslationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `researchprojecttranslation.Hooks(f(g(h())))`.
func (c *ResearchProjectTranslationClient) Use(hooks ...Hook) {
	c.hooks.ResearchProjectTranslation = append(c.hooks.ResearchProjectTranslation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `researchprojecttranslation.Intercept(f(g(h())))`.
func (c *ResearchProjectTranslationClient) Intercept(interceptors ...Interceptor) {
	c.inters.ResearchProjectTranslation = append(c.inters.ResearchProjectTranslation, interceptors...)
}

// Create returns a builder for creating a ResearchProjectTranslation entity.
func (c *ResearchProjectTranslationClient) Create() *ResearchProjectTranslationCreate {
	mutation := newResearchProjectTranslationMutation(c.config, OpCreate)
	return &ResearchProjectTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ResearchProjectTranslation entities.
func (c *ResearchProjectTranslationClient) CreateBulk(builders ...*ResearchProjectTranslationCreate) *ResearchProjectTranslationCreateBulk {
	return &ResearchProjectTranslationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ResearchProjectTranslationClient) MapCreateBulk(slice any, setFunc func(*ResearchProjectTranslationCreate, int)) *ResearchProjectTranslationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ResearchProjectTranslationCreateBulk{err: fmt.Errorf("calling to ResearchProjectTranslationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ResearchProjectTranslationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ResearchProjectTranslationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ResearchProjectTranslation.
func (c *ResearchProjectTranslationClient) Update() *ResearchProjectTranslationUpdate {
	mutation := newResearchProjectTranslationMutation(c.config, OpUpdate)
	return &ResearchProjectTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResearchProjectTranslationClient) UpdateOne(rpt *ResearchProjectTranslation) *ResearchProjectTranslationUpdateOne {
	mutation := newResearchProjectTranslationMutation(c.config, OpUpdateOne, withResearchProjectTranslation(rpt))
	return &ResearchProjectTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResearchProjectTranslationClient) UpdateOneID(id uuid.UUID) *ResearchProjectTranslationUpdateOne {
	mutation := newResearchProjectTranslationMutation(c.config, OpUpdateOne, withResearchProjectTranslationID(id))
	return &ResearchProjectTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ResearchProjectTranslation.
func (c *ResearchProjectTranslationClient) Delete() *ResearchProjectTranslationDelete {
	mutation := newResearchProjectTranslationMutation(c.config, OpDelete)
	return &ResearchProjectTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ResearchProjectTranslationClient) DeleteOne(rpt *ResearchProjectTranslation) *ResearchProjectTranslationDeleteOne {
	return c.DeleteOneID(rpt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ResearchProjectTranslationClient) DeleteOneID(id uuid.UUID) *ResearchProjectTranslationDeleteOne {
	builder := c.Delete().Where(researchprojecttranslation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResearchProjectTranslationDeleteOne{builder}
}

// Query returns a query builder for ResearchProjectTranslation.
func (c *ResearchProjectTranslationClient) Query() *ResearchProjectTranslationQuery {
	return &ResearchProjectTranslationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeResearchProjectTranslation},
		inters: c.Interceptors(),
	}
}

// Get returns a ResearchProjectTranslation entity by its id.
func (c *ResearchProjectTranslationClient) Get(ctx context.Context, id uuid.UUID) (*ResearchProjectTranslation, error) {
	return c.Query().Where(researchprojecttranslation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResearchProjectTranslationClient) GetX(ctx context.Context, id uuid.UUID) *ResearchProjectTranslation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryResearchProject queries the research_project edge of a ResearchProjectTranslation.
func (c *ResearchProjectTranslationClient) QueryResearchProject(rpt *ResearchProjectTranslation) *ResearchProjectQuery {
	query := (&ResearchProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rpt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(researchprojecttranslation.Table, researchprojecttranslation.FieldID, id),
			sqlgraph.To(researchproject.Table, researchproject.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, researchprojecttranslation.ResearchProjectTable, researchprojecttranslation.ResearchProjectColumn),
		)
		fromV = sqlgraph.Neighbors(rpt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLanguage queries the language edge of a ResearchProjectTranslation.
func (c *ResearchProjectTranslationClient) QueryLanguage(rpt *ResearchProjectTranslation) *LanguageQuery {
	query := (&LanguageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rpt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(researchprojecttranslation.Table, researchprojecttranslation.FieldID, id),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, researchprojecttranslation.LanguageTable, researchprojecttranslation.LanguageColumn),
		)
		fromV = sqlgraph.Neighbors(rpt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ResearchProjectTranslationClient) Hooks() []Hook {
	return c.hooks.ResearchProjectTranslation
}

// Interceptors returns the client interceptors.
func (c *ResearchProjectTranslationClient) Interceptors() []Interceptor {
	return c.inters.ResearchProjectTranslation
}

func (c *ResearchProjectTranslationClient) mutate(ctx context.Context, m *ResearchProjectTranslationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ResearchProjectTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ResearchProjectTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ResearchProjectTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ResearchProjectTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ResearchProjectTranslation mutation op: %q", m.Op())
	}
}

// SocialLinkClient is a client for the SocialLink schema.
type SocialLinkClient struct {
	config
}

// NewSocialLinkClient returns a client for the SocialLink from the given config.
func NewSocialLinkClient(c config) *SocialLinkClient {
	return &SocialLinkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sociallink.Hooks(f(g(h())))`.
func (c *SocialLinkClient) Use(hooks ...Hook) {
	c.hooks.SocialLink = append(c.hooks.SocialLink, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sociallink.Intercept(f(g(h())))`.
func (c *SocialLinkClient) Intercept(interceptors ...Interceptor) {
	c.inters.SocialLink = append(c.inters.SocialLink, interceptors...)
}

// Create returns a builder for creating a SocialLink entity.
func (c *SocialLinkClient) Create() *SocialLinkCreate {
	mutation := newSocialLinkMutation(c.config, OpCreate)
	return &SocialLinkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SocialLink entities.
func (c *SocialLinkClient) CreateBulk(builders ...*SocialLinkCreate) *SocialLinkCreateBulk {
	return &SocialLinkCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SocialLinkClient) MapCreateBulk(slice any, setFunc func(*SocialLinkCreate, int)) *SocialLinkCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SocialLinkCreateBulk{err: fmt.Errorf("calling to SocialLinkClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SocialLinkCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SocialLinkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SocialLink.
func (c *SocialLinkClient) Update() *SocialLinkUpdate {
	mutation := newSocialLinkMutation(c.config, OpUpdate)
	return &SocialLinkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SocialLinkClient) UpdateOne(sl *SocialLink) *SocialLinkUpdateOne {
	mutation := newSocialLinkMutation(c.config, OpUpdateOne, withSocialLink(sl))
	return &SocialLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SocialLinkClient) UpdateOneID(id uuid.UUID) *SocialLinkUpdateOne {
	mutation := newSocialLinkMutation(c.config, OpUpdateOne, withSocialLinkID(id))
	return &SocialLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SocialLink.
func (c *SocialLinkClient) Delete() *SocialLinkDelete {
	mutation := newSocialLinkMutation(c.config, OpDelete)
	return &SocialLinkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SocialLinkClient) DeleteOne(sl *SocialLink) *SocialLinkDeleteOne {
	return c.DeleteOneID(sl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SocialLinkClient) DeleteOneID(id uuid.UUID) *SocialLinkDeleteOne {
	builder := c.Delete().Where(sociallink.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SocialLinkDeleteOne{builder}
}

// Query returns a query builder for SocialLink.
func (c *SocialLinkClient) Query() *SocialLinkQuery {
	return &SocialLinkQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSocialLink},
		inters: c.Interceptors(),
	}
}

// Get returns a SocialLink entity by its id.
func (c *SocialLinkClient) Get(ctx context.Context, id uuid.UUID) (*SocialLink, error) {
	return c.Query().Where(sociallink.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SocialLinkClient) GetX(ctx context.Context, id uuid.UUID) *SocialLink {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPersonalInfo queries the personal_info edge of a SocialLink.
func (c *SocialLinkClient) QueryPersonalInfo(sl *SocialLink) *PersonalInfoQuery {
	query := (&PersonalInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sociallink.Table, sociallink.FieldID, id),
			sqlgraph.To(personalinfo.Table, personalinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sociallink.PersonalInfoTable, sociallink.PersonalInfoColumn),
		)
		fromV = sqlgraph.Neighbors(sl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SocialLinkClient) Hooks() []Hook {
	return c.hooks.SocialLink
}

// Interceptors returns the client interceptors.
func (c *SocialLinkClient) Interceptors() []Interceptor {
	return c.inters.SocialLink
}

func (c *SocialLinkClient) mutate(ctx context.Context, m *SocialLinkMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SocialLinkCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SocialLinkUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SocialLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SocialLinkDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SocialLink mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPersonalInfos queries the personal_infos edge of a User.
func (c *UserClient) QueryPersonalInfos(u *User) *PersonalInfoQuery {
	query := (&PersonalInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(personalinfo.Table, personalinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PersonalInfosTable, user.PersonalInfosColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEducations queries the educations edge of a User.
func (c *UserClient) QueryEducations(u *User) *EducationQuery {
	query := (&EducationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(education.Table, education.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.EducationsTable, user.EducationsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkExperiences queries the work_experiences edge of a User.
func (c *UserClient) QueryWorkExperiences(u *User) *WorkExperienceQuery {
	query := (&WorkExperienceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(workexperience.Table, workexperience.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.WorkExperiencesTable, user.WorkExperiencesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjects queries the projects edge of a User.
func (c *UserClient) QueryProjects(u *User) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ProjectsTable, user.ProjectsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBlogPosts queries the blog_posts edge of a User.
func (c *UserClient) QueryBlogPosts(u *User) *BlogPostQuery {
	query := (&BlogPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(blogpost.Table, blogpost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.BlogPostsTable, user.BlogPostsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIdeas queries the ideas edge of a User.
func (c *UserClient) QueryIdeas(u *User) *IdeaQuery {
	query := (&IdeaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(idea.Table, idea.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.IdeasTable, user.IdeasColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryResearchProjects queries the research_projects edge of a User.
func (c *UserClient) QueryResearchProjects(u *User) *ResearchProjectQuery {
	query := (&ResearchProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(researchproject.Table, researchproject.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ResearchProjectsTable, user.ResearchProjectsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPublications queries the publications edge of a User.
func (c *UserClient) QueryPublications(u *User) *PublicationQuery {
	query := (&PublicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(publication.Table, publication.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PublicationsTable, user.PublicationsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAwards queries the awards edge of a User.
func (c *UserClient) QueryAwards(u *User) *AwardQuery {
	query := (&AwardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(award.Table, award.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AwardsTable, user.AwardsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRecentUpdates queries the recent_updates edge of a User.
func (c *UserClient) QueryRecentUpdates(u *User) *RecentUpdateQuery {
	query := (&RecentUpdateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(recentupdate.Table, recentupdate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.RecentUpdatesTable, user.RecentUpdatesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// WorkExperienceClient is a client for the WorkExperience schema.
type WorkExperienceClient struct {
	config
}

// NewWorkExperienceClient returns a client for the WorkExperience from the given config.
func NewWorkExperienceClient(c config) *WorkExperienceClient {
	return &WorkExperienceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workexperience.Hooks(f(g(h())))`.
func (c *WorkExperienceClient) Use(hooks ...Hook) {
	c.hooks.WorkExperience = append(c.hooks.WorkExperience, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `workexperience.Intercept(f(g(h())))`.
func (c *WorkExperienceClient) Intercept(interceptors ...Interceptor) {
	c.inters.WorkExperience = append(c.inters.WorkExperience, interceptors...)
}

// Create returns a builder for creating a WorkExperience entity.
func (c *WorkExperienceClient) Create() *WorkExperienceCreate {
	mutation := newWorkExperienceMutation(c.config, OpCreate)
	return &WorkExperienceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkExperience entities.
func (c *WorkExperienceClient) CreateBulk(builders ...*WorkExperienceCreate) *WorkExperienceCreateBulk {
	return &WorkExperienceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WorkExperienceClient) MapCreateBulk(slice any, setFunc func(*WorkExperienceCreate, int)) *WorkExperienceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WorkExperienceCreateBulk{err: fmt.Errorf("calling to WorkExperienceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WorkExperienceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WorkExperienceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkExperience.
func (c *WorkExperienceClient) Update() *WorkExperienceUpdate {
	mutation := newWorkExperienceMutation(c.config, OpUpdate)
	return &WorkExperienceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkExperienceClient) UpdateOne(we *WorkExperience) *WorkExperienceUpdateOne {
	mutation := newWorkExperienceMutation(c.config, OpUpdateOne, withWorkExperience(we))
	return &WorkExperienceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkExperienceClient) UpdateOneID(id uuid.UUID) *WorkExperienceUpdateOne {
	mutation := newWorkExperienceMutation(c.config, OpUpdateOne, withWorkExperienceID(id))
	return &WorkExperienceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkExperience.
func (c *WorkExperienceClient) Delete() *WorkExperienceDelete {
	mutation := newWorkExperienceMutation(c.config, OpDelete)
	return &WorkExperienceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WorkExperienceClient) DeleteOne(we *WorkExperience) *WorkExperienceDeleteOne {
	return c.DeleteOneID(we.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WorkExperienceClient) DeleteOneID(id uuid.UUID) *WorkExperienceDeleteOne {
	builder := c.Delete().Where(workexperience.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkExperienceDeleteOne{builder}
}

// Query returns a query builder for WorkExperience.
func (c *WorkExperienceClient) Query() *WorkExperienceQuery {
	return &WorkExperienceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWorkExperience},
		inters: c.Interceptors(),
	}
}

// Get returns a WorkExperience entity by its id.
func (c *WorkExperienceClient) Get(ctx context.Context, id uuid.UUID) (*WorkExperience, error) {
	return c.Query().Where(workexperience.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkExperienceClient) GetX(ctx context.Context, id uuid.UUID) *WorkExperience {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a WorkExperience.
func (c *WorkExperienceClient) QueryUser(we *WorkExperience) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workexperience.Table, workexperience.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workexperience.UserTable, workexperience.UserColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTranslations queries the translations edge of a WorkExperience.
func (c *WorkExperienceClient) QueryTranslations(we *WorkExperience) *WorkExperienceTranslationQuery {
	query := (&WorkExperienceTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workexperience.Table, workexperience.FieldID, id),
			sqlgraph.To(workexperiencetranslation.Table, workexperiencetranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workexperience.TranslationsTable, workexperience.TranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDetails queries the details edge of a WorkExperience.
func (c *WorkExperienceClient) QueryDetails(we *WorkExperience) *WorkExperienceDetailQuery {
	query := (&WorkExperienceDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workexperience.Table, workexperience.FieldID, id),
			sqlgraph.To(workexperiencedetail.Table, workexperiencedetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workexperience.DetailsTable, workexperience.DetailsColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkExperienceClient) Hooks() []Hook {
	return c.hooks.WorkExperience
}

// Interceptors returns the client interceptors.
func (c *WorkExperienceClient) Interceptors() []Interceptor {
	return c.inters.WorkExperience
}

func (c *WorkExperienceClient) mutate(ctx context.Context, m *WorkExperienceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WorkExperienceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WorkExperienceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WorkExperienceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WorkExperienceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WorkExperience mutation op: %q", m.Op())
	}
}

// WorkExperienceDetailClient is a client for the WorkExperienceDetail schema.
type WorkExperienceDetailClient struct {
	config
}

// NewWorkExperienceDetailClient returns a client for the WorkExperienceDetail from the given config.
func NewWorkExperienceDetailClient(c config) *WorkExperienceDetailClient {
	return &WorkExperienceDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workexperiencedetail.Hooks(f(g(h())))`.
func (c *WorkExperienceDetailClient) Use(hooks ...Hook) {
	c.hooks.WorkExperienceDetail = append(c.hooks.WorkExperienceDetail, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `workexperiencedetail.Intercept(f(g(h())))`.
func (c *WorkExperienceDetailClient) Intercept(interceptors ...Interceptor) {
	c.inters.WorkExperienceDetail = append(c.inters.WorkExperienceDetail, interceptors...)
}

// Create returns a builder for creating a WorkExperienceDetail entity.
func (c *WorkExperienceDetailClient) Create() *WorkExperienceDetailCreate {
	mutation := newWorkExperienceDetailMutation(c.config, OpCreate)
	return &WorkExperienceDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkExperienceDetail entities.
func (c *WorkExperienceDetailClient) CreateBulk(builders ...*WorkExperienceDetailCreate) *WorkExperienceDetailCreateBulk {
	return &WorkExperienceDetailCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WorkExperienceDetailClient) MapCreateBulk(slice any, setFunc func(*WorkExperienceDetailCreate, int)) *WorkExperienceDetailCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WorkExperienceDetailCreateBulk{err: fmt.Errorf("calling to WorkExperienceDetailClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WorkExperienceDetailCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WorkExperienceDetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkExperienceDetail.
func (c *WorkExperienceDetailClient) Update() *WorkExperienceDetailUpdate {
	mutation := newWorkExperienceDetailMutation(c.config, OpUpdate)
	return &WorkExperienceDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkExperienceDetailClient) UpdateOne(wed *WorkExperienceDetail) *WorkExperienceDetailUpdateOne {
	mutation := newWorkExperienceDetailMutation(c.config, OpUpdateOne, withWorkExperienceDetail(wed))
	return &WorkExperienceDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkExperienceDetailClient) UpdateOneID(id uuid.UUID) *WorkExperienceDetailUpdateOne {
	mutation := newWorkExperienceDetailMutation(c.config, OpUpdateOne, withWorkExperienceDetailID(id))
	return &WorkExperienceDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkExperienceDetail.
func (c *WorkExperienceDetailClient) Delete() *WorkExperienceDetailDelete {
	mutation := newWorkExperienceDetailMutation(c.config, OpDelete)
	return &WorkExperienceDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WorkExperienceDetailClient) DeleteOne(wed *WorkExperienceDetail) *WorkExperienceDetailDeleteOne {
	return c.DeleteOneID(wed.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WorkExperienceDetailClient) DeleteOneID(id uuid.UUID) *WorkExperienceDetailDeleteOne {
	builder := c.Delete().Where(workexperiencedetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkExperienceDetailDeleteOne{builder}
}

// Query returns a query builder for WorkExperienceDetail.
func (c *WorkExperienceDetailClient) Query() *WorkExperienceDetailQuery {
	return &WorkExperienceDetailQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWorkExperienceDetail},
		inters: c.Interceptors(),
	}
}

// Get returns a WorkExperienceDetail entity by its id.
func (c *WorkExperienceDetailClient) Get(ctx context.Context, id uuid.UUID) (*WorkExperienceDetail, error) {
	return c.Query().Where(workexperiencedetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkExperienceDetailClient) GetX(ctx context.Context, id uuid.UUID) *WorkExperienceDetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkExperience queries the work_experience edge of a WorkExperienceDetail.
func (c *WorkExperienceDetailClient) QueryWorkExperience(wed *WorkExperienceDetail) *WorkExperienceQuery {
	query := (&WorkExperienceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wed.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workexperiencedetail.Table, workexperiencedetail.FieldID, id),
			sqlgraph.To(workexperience.Table, workexperience.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workexperiencedetail.WorkExperienceTable, workexperiencedetail.WorkExperienceColumn),
		)
		fromV = sqlgraph.Neighbors(wed.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTranslations queries the translations edge of a WorkExperienceDetail.
func (c *WorkExperienceDetailClient) QueryTranslations(wed *WorkExperienceDetail) *WorkExperienceDetailTranslationQuery {
	query := (&WorkExperienceDetailTranslationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wed.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workexperiencedetail.Table, workexperiencedetail.FieldID, id),
			sqlgraph.To(workexperiencedetailtranslation.Table, workexperiencedetailtranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workexperiencedetail.TranslationsTable, workexperiencedetail.TranslationsColumn),
		)
		fromV = sqlgraph.Neighbors(wed.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkExperienceDetailClient) Hooks() []Hook {
	return c.hooks.WorkExperienceDetail
}

// Interceptors returns the client interceptors.
func (c *WorkExperienceDetailClient) Interceptors() []Interceptor {
	return c.inters.WorkExperienceDetail
}

func (c *WorkExperienceDetailClient) mutate(ctx context.Context, m *WorkExperienceDetailMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WorkExperienceDetailCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WorkExperienceDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WorkExperienceDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WorkExperienceDetailDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WorkExperienceDetail mutation op: %q", m.Op())
	}
}

// WorkExperienceDetailTranslationClient is a client for the WorkExperienceDetailTranslation schema.
type WorkExperienceDetailTranslationClient struct {
	config
}

// NewWorkExperienceDetailTranslationClient returns a client for the WorkExperienceDetailTranslation from the given config.
func NewWorkExperienceDetailTranslationClient(c config) *WorkExperienceDetailTranslationClient {
	return &WorkExperienceDetailTranslationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workexperiencedetailtranslation.Hooks(f(g(h())))`.
func (c *WorkExperienceDetailTranslationClient) Use(hooks ...Hook) {
	c.hooks.WorkExperienceDetailTranslation = append(c.hooks.WorkExperienceDetailTranslation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `workexperiencedetailtranslation.Intercept(f(g(h())))`.
func (c *WorkExperienceDetailTranslationClient) Intercept(interceptors ...Interceptor) {
	c.inters.WorkExperienceDetailTranslation = append(c.inters.WorkExperienceDetailTranslation, interceptors...)
}

// Create returns a builder for creating a WorkExperienceDetailTranslation entity.
func (c *WorkExperienceDetailTranslationClient) Create() *WorkExperienceDetailTranslationCreate {
	mutation := newWorkExperienceDetailTranslationMutation(c.config, OpCreate)
	return &WorkExperienceDetailTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkExperienceDetailTranslation entities.
func (c *WorkExperienceDetailTranslationClient) CreateBulk(builders ...*WorkExperienceDetailTranslationCreate) *WorkExperienceDetailTranslationCreateBulk {
	return &WorkExperienceDetailTranslationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WorkExperienceDetailTranslationClient) MapCreateBulk(slice any, setFunc func(*WorkExperienceDetailTranslationCreate, int)) *WorkExperienceDetailTranslationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WorkExperienceDetailTranslationCreateBulk{err: fmt.Errorf("calling to WorkExperienceDetailTranslationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WorkExperienceDetailTranslationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WorkExperienceDetailTranslationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkExperienceDetailTranslation.
func (c *WorkExperienceDetailTranslationClient) Update() *WorkExperienceDetailTranslationUpdate {
	mutation := newWorkExperienceDetailTranslationMutation(c.config, OpUpdate)
	return &WorkExperienceDetailTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkExperienceDetailTranslationClient) UpdateOne(wedt *WorkExperienceDetailTranslation) *WorkExperienceDetailTranslationUpdateOne {
	mutation := newWorkExperienceDetailTranslationMutation(c.config, OpUpdateOne, withWorkExperienceDetailTranslation(wedt))
	return &WorkExperienceDetailTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkExperienceDetailTranslationClient) UpdateOneID(id uuid.UUID) *WorkExperienceDetailTranslationUpdateOne {
	mutation := newWorkExperienceDetailTranslationMutation(c.config, OpUpdateOne, withWorkExperienceDetailTranslationID(id))
	return &WorkExperienceDetailTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkExperienceDetailTranslation.
func (c *WorkExperienceDetailTranslationClient) Delete() *WorkExperienceDetailTranslationDelete {
	mutation := newWorkExperienceDetailTranslationMutation(c.config, OpDelete)
	return &WorkExperienceDetailTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WorkExperienceDetailTranslationClient) DeleteOne(wedt *WorkExperienceDetailTranslation) *WorkExperienceDetailTranslationDeleteOne {
	return c.DeleteOneID(wedt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WorkExperienceDetailTranslationClient) DeleteOneID(id uuid.UUID) *WorkExperienceDetailTranslationDeleteOne {
	builder := c.Delete().Where(workexperiencedetailtranslation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkExperienceDetailTranslationDeleteOne{builder}
}

// Query returns a query builder for WorkExperienceDetailTranslation.
func (c *WorkExperienceDetailTranslationClient) Query() *WorkExperienceDetailTranslationQuery {
	return &WorkExperienceDetailTranslationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWorkExperienceDetailTranslation},
		inters: c.Interceptors(),
	}
}

// Get returns a WorkExperienceDetailTranslation entity by its id.
func (c *WorkExperienceDetailTranslationClient) Get(ctx context.Context, id uuid.UUID) (*WorkExperienceDetailTranslation, error) {
	return c.Query().Where(workexperiencedetailtranslation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkExperienceDetailTranslationClient) GetX(ctx context.Context, id uuid.UUID) *WorkExperienceDetailTranslation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkExperienceDetail queries the work_experience_detail edge of a WorkExperienceDetailTranslation.
func (c *WorkExperienceDetailTranslationClient) QueryWorkExperienceDetail(wedt *WorkExperienceDetailTranslation) *WorkExperienceDetailQuery {
	query := (&WorkExperienceDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wedt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workexperiencedetailtranslation.Table, workexperiencedetailtranslation.FieldID, id),
			sqlgraph.To(workexperiencedetail.Table, workexperiencedetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workexperiencedetailtranslation.WorkExperienceDetailTable, workexperiencedetailtranslation.WorkExperienceDetailColumn),
		)
		fromV = sqlgraph.Neighbors(wedt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLanguage queries the language edge of a WorkExperienceDetailTranslation.
func (c *WorkExperienceDetailTranslationClient) QueryLanguage(wedt *WorkExperienceDetailTranslation) *LanguageQuery {
	query := (&LanguageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wedt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workexperiencedetailtranslation.Table, workexperiencedetailtranslation.FieldID, id),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workexperiencedetailtranslation.LanguageTable, workexperiencedetailtranslation.LanguageColumn),
		)
		fromV = sqlgraph.Neighbors(wedt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkExperienceDetailTranslationClient) Hooks() []Hook {
	return c.hooks.WorkExperienceDetailTranslation
}

// Interceptors returns the client interceptors.
func (c *WorkExperienceDetailTranslationClient) Interceptors() []Interceptor {
	return c.inters.WorkExperienceDetailTranslation
}

func (c *WorkExperienceDetailTranslationClient) mutate(ctx context.Context, m *WorkExperienceDetailTranslationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WorkExperienceDetailTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WorkExperienceDetailTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WorkExperienceDetailTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WorkExperienceDetailTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WorkExperienceDetailTranslation mutation op: %q", m.Op())
	}
}

// WorkExperienceTranslationClient is a client for the WorkExperienceTranslation schema.
type WorkExperienceTranslationClient struct {
	config
}

// NewWorkExperienceTranslationClient returns a client for the WorkExperienceTranslation from the given config.
func NewWorkExperienceTranslationClient(c config) *WorkExperienceTranslationClient {
	return &WorkExperienceTranslationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workexperiencetranslation.Hooks(f(g(h())))`.
func (c *WorkExperienceTranslationClient) Use(hooks ...Hook) {
	c.hooks.WorkExperienceTranslation = append(c.hooks.WorkExperienceTranslation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `workexperiencetranslation.Intercept(f(g(h())))`.
func (c *WorkExperienceTranslationClient) Intercept(interceptors ...Interceptor) {
	c.inters.WorkExperienceTranslation = append(c.inters.WorkExperienceTranslation, interceptors...)
}

// Create returns a builder for creating a WorkExperienceTranslation entity.
func (c *WorkExperienceTranslationClient) Create() *WorkExperienceTranslationCreate {
	mutation := newWorkExperienceTranslationMutation(c.config, OpCreate)
	return &WorkExperienceTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkExperienceTranslation entities.
func (c *WorkExperienceTranslationClient) CreateBulk(builders ...*WorkExperienceTranslationCreate) *WorkExperienceTranslationCreateBulk {
	return &WorkExperienceTranslationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WorkExperienceTranslationClient) MapCreateBulk(slice any, setFunc func(*WorkExperienceTranslationCreate, int)) *WorkExperienceTranslationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WorkExperienceTranslationCreateBulk{err: fmt.Errorf("calling to WorkExperienceTranslationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WorkExperienceTranslationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WorkExperienceTranslationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkExperienceTranslation.
func (c *WorkExperienceTranslationClient) Update() *WorkExperienceTranslationUpdate {
	mutation := newWorkExperienceTranslationMutation(c.config, OpUpdate)
	return &WorkExperienceTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkExperienceTranslationClient) UpdateOne(wet *WorkExperienceTranslation) *WorkExperienceTranslationUpdateOne {
	mutation := newWorkExperienceTranslationMutation(c.config, OpUpdateOne, withWorkExperienceTranslation(wet))
	return &WorkExperienceTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkExperienceTranslationClient) UpdateOneID(id uuid.UUID) *WorkExperienceTranslationUpdateOne {
	mutation := newWorkExperienceTranslationMutation(c.config, OpUpdateOne, withWorkExperienceTranslationID(id))
	return &WorkExperienceTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkExperienceTranslation.
func (c *WorkExperienceTranslationClient) Delete() *WorkExperienceTranslationDelete {
	mutation := newWorkExperienceTranslationMutation(c.config, OpDelete)
	return &WorkExperienceTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WorkExperienceTranslationClient) DeleteOne(wet *WorkExperienceTranslation) *WorkExperienceTranslationDeleteOne {
	return c.DeleteOneID(wet.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WorkExperienceTranslationClient) DeleteOneID(id uuid.UUID) *WorkExperienceTranslationDeleteOne {
	builder := c.Delete().Where(workexperiencetranslation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkExperienceTranslationDeleteOne{builder}
}

// Query returns a query builder for WorkExperienceTranslation.
func (c *WorkExperienceTranslationClient) Query() *WorkExperienceTranslationQuery {
	return &WorkExperienceTranslationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWorkExperienceTranslation},
		inters: c.Interceptors(),
	}
}

// Get returns a WorkExperienceTranslation entity by its id.
func (c *WorkExperienceTranslationClient) Get(ctx context.Context, id uuid.UUID) (*WorkExperienceTranslation, error) {
	return c.Query().Where(workexperiencetranslation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkExperienceTranslationClient) GetX(ctx context.Context, id uuid.UUID) *WorkExperienceTranslation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkExperience queries the work_experience edge of a WorkExperienceTranslation.
func (c *WorkExperienceTranslationClient) QueryWorkExperience(wet *WorkExperienceTranslation) *WorkExperienceQuery {
	query := (&WorkExperienceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wet.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workexperiencetranslation.Table, workexperiencetranslation.FieldID, id),
			sqlgraph.To(workexperience.Table, workexperience.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workexperiencetranslation.WorkExperienceTable, workexperiencetranslation.WorkExperienceColumn),
		)
		fromV = sqlgraph.Neighbors(wet.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLanguage queries the language edge of a WorkExperienceTranslation.
func (c *WorkExperienceTranslationClient) QueryLanguage(wet *WorkExperienceTranslation) *LanguageQuery {
	query := (&LanguageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wet.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workexperiencetranslation.Table, workexperiencetranslation.FieldID, id),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workexperiencetranslation.LanguageTable, workexperiencetranslation.LanguageColumn),
		)
		fromV = sqlgraph.Neighbors(wet.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkExperienceTranslationClient) Hooks() []Hook {
	return c.hooks.WorkExperienceTranslation
}

// Interceptors returns the client interceptors.
func (c *WorkExperienceTranslationClient) Interceptors() []Interceptor {
	return c.inters.WorkExperienceTranslation
}

func (c *WorkExperienceTranslationClient) mutate(ctx context.Context, m *WorkExperienceTranslationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WorkExperienceTranslationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WorkExperienceTranslationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WorkExperienceTranslationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WorkExperienceTranslationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WorkExperienceTranslation mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Award, AwardTranslation, BlogCategory, BlogCategoryTranslation, BlogComment,
		BlogPost, BlogPostTag, BlogPostTranslation, BlogSeries, BlogSeriesTranslation,
		BlogTag, Education, EducationDetail, EducationDetailTranslation,
		EducationTranslation, Idea, IdeaTranslation, Language, PersonalInfo,
		PersonalInfoTranslation, Project, ProjectDetail, ProjectDetailTranslation,
		ProjectImage, ProjectImageTranslation, ProjectRelationship, ProjectTechnology,
		ProjectTranslation, Publication, PublicationAuthor, PublicationTranslation,
		RecentUpdate, RecentUpdateTranslation, ResearchProject, ResearchProjectDetail,
		ResearchProjectDetailTranslation, ResearchProjectTranslation, SocialLink, User,
		WorkExperience, WorkExperienceDetail, WorkExperienceDetailTranslation,
		WorkExperienceTranslation []ent.Hook
	}
	inters struct {
		Award, AwardTranslation, BlogCategory, BlogCategoryTranslation, BlogComment,
		BlogPost, BlogPostTag, BlogPostTranslation, BlogSeries, BlogSeriesTranslation,
		BlogTag, Education, EducationDetail, EducationDetailTranslation,
		EducationTranslation, Idea, IdeaTranslation, Language, PersonalInfo,
		PersonalInfoTranslation, Project, ProjectDetail, ProjectDetailTranslation,
		ProjectImage, ProjectImageTranslation, ProjectRelationship, ProjectTechnology,
		ProjectTranslation, Publication, PublicationAuthor, PublicationTranslation,
		RecentUpdate, RecentUpdateTranslation, ResearchProject, ResearchProjectDetail,
		ResearchProjectDetailTranslation, ResearchProjectTranslation, SocialLink, User,
		WorkExperience, WorkExperienceDetail, WorkExperienceDetailTranslation,
		WorkExperienceTranslation []ent.Interceptor
	}
)
