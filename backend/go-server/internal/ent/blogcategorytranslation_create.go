// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/blogcategory"
	"silan-backend/internal/ent/blogcategorytranslation"
	"silan-backend/internal/ent/language"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BlogCategoryTranslationCreate is the builder for creating a BlogCategoryTranslation entity.
type BlogCategoryTranslationCreate struct {
	config
	mutation *BlogCategoryTranslationMutation
	hooks    []Hook
}

// SetBlogCategoryID sets the "blog_category_id" field.
func (bctc *BlogCategoryTranslationCreate) SetBlogCategoryID(u uuid.UUID) *BlogCategoryTranslationCreate {
	bctc.mutation.SetBlogCategoryID(u)
	return bctc
}

// SetLanguageCode sets the "language_code" field.
func (bctc *BlogCategoryTranslationCreate) SetLanguageCode(s string) *BlogCategoryTranslationCreate {
	bctc.mutation.SetLanguageCode(s)
	return bctc
}

// SetName sets the "name" field.
func (bctc *BlogCategoryTranslationCreate) SetName(s string) *BlogCategoryTranslationCreate {
	bctc.mutation.SetName(s)
	return bctc
}

// SetDescription sets the "description" field.
func (bctc *BlogCategoryTranslationCreate) SetDescription(s string) *BlogCategoryTranslationCreate {
	bctc.mutation.SetDescription(s)
	return bctc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bctc *BlogCategoryTranslationCreate) SetNillableDescription(s *string) *BlogCategoryTranslationCreate {
	if s != nil {
		bctc.SetDescription(*s)
	}
	return bctc
}

// SetCreatedAt sets the "created_at" field.
func (bctc *BlogCategoryTranslationCreate) SetCreatedAt(t time.Time) *BlogCategoryTranslationCreate {
	bctc.mutation.SetCreatedAt(t)
	return bctc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bctc *BlogCategoryTranslationCreate) SetNillableCreatedAt(t *time.Time) *BlogCategoryTranslationCreate {
	if t != nil {
		bctc.SetCreatedAt(*t)
	}
	return bctc
}

// SetUpdatedAt sets the "updated_at" field.
func (bctc *BlogCategoryTranslationCreate) SetUpdatedAt(t time.Time) *BlogCategoryTranslationCreate {
	bctc.mutation.SetUpdatedAt(t)
	return bctc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bctc *BlogCategoryTranslationCreate) SetNillableUpdatedAt(t *time.Time) *BlogCategoryTranslationCreate {
	if t != nil {
		bctc.SetUpdatedAt(*t)
	}
	return bctc
}

// SetID sets the "id" field.
func (bctc *BlogCategoryTranslationCreate) SetID(u uuid.UUID) *BlogCategoryTranslationCreate {
	bctc.mutation.SetID(u)
	return bctc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bctc *BlogCategoryTranslationCreate) SetNillableID(u *uuid.UUID) *BlogCategoryTranslationCreate {
	if u != nil {
		bctc.SetID(*u)
	}
	return bctc
}

// SetBlogCategory sets the "blog_category" edge to the BlogCategory entity.
func (bctc *BlogCategoryTranslationCreate) SetBlogCategory(b *BlogCategory) *BlogCategoryTranslationCreate {
	return bctc.SetBlogCategoryID(b.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (bctc *BlogCategoryTranslationCreate) SetLanguageID(id string) *BlogCategoryTranslationCreate {
	bctc.mutation.SetLanguageID(id)
	return bctc
}

// SetLanguage sets the "language" edge to the Language entity.
func (bctc *BlogCategoryTranslationCreate) SetLanguage(l *Language) *BlogCategoryTranslationCreate {
	return bctc.SetLanguageID(l.ID)
}

// Mutation returns the BlogCategoryTranslationMutation object of the builder.
func (bctc *BlogCategoryTranslationCreate) Mutation() *BlogCategoryTranslationMutation {
	return bctc.mutation
}

// Save creates the BlogCategoryTranslation in the database.
func (bctc *BlogCategoryTranslationCreate) Save(ctx context.Context) (*BlogCategoryTranslation, error) {
	bctc.defaults()
	return withHooks(ctx, bctc.sqlSave, bctc.mutation, bctc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bctc *BlogCategoryTranslationCreate) SaveX(ctx context.Context) *BlogCategoryTranslation {
	v, err := bctc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bctc *BlogCategoryTranslationCreate) Exec(ctx context.Context) error {
	_, err := bctc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bctc *BlogCategoryTranslationCreate) ExecX(ctx context.Context) {
	if err := bctc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bctc *BlogCategoryTranslationCreate) defaults() {
	if _, ok := bctc.mutation.CreatedAt(); !ok {
		v := blogcategorytranslation.DefaultCreatedAt()
		bctc.mutation.SetCreatedAt(v)
	}
	if _, ok := bctc.mutation.UpdatedAt(); !ok {
		v := blogcategorytranslation.DefaultUpdatedAt()
		bctc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bctc.mutation.ID(); !ok {
		v := blogcategorytranslation.DefaultID()
		bctc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bctc *BlogCategoryTranslationCreate) check() error {
	if _, ok := bctc.mutation.BlogCategoryID(); !ok {
		return &ValidationError{Name: "blog_category_id", err: errors.New(`ent: missing required field "BlogCategoryTranslation.blog_category_id"`)}
	}
	if _, ok := bctc.mutation.LanguageCode(); !ok {
		return &ValidationError{Name: "language_code", err: errors.New(`ent: missing required field "BlogCategoryTranslation.language_code"`)}
	}
	if v, ok := bctc.mutation.LanguageCode(); ok {
		if err := blogcategorytranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "BlogCategoryTranslation.language_code": %w`, err)}
		}
	}
	if _, ok := bctc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "BlogCategoryTranslation.name"`)}
	}
	if v, ok := bctc.mutation.Name(); ok {
		if err := blogcategorytranslation.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "BlogCategoryTranslation.name": %w`, err)}
		}
	}
	if _, ok := bctc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlogCategoryTranslation.created_at"`)}
	}
	if _, ok := bctc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BlogCategoryTranslation.updated_at"`)}
	}
	if len(bctc.mutation.BlogCategoryIDs()) == 0 {
		return &ValidationError{Name: "blog_category", err: errors.New(`ent: missing required edge "BlogCategoryTranslation.blog_category"`)}
	}
	if len(bctc.mutation.LanguageIDs()) == 0 {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required edge "BlogCategoryTranslation.language"`)}
	}
	return nil
}

func (bctc *BlogCategoryTranslationCreate) sqlSave(ctx context.Context) (*BlogCategoryTranslation, error) {
	if err := bctc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bctc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bctc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bctc.mutation.id = &_node.ID
	bctc.mutation.done = true
	return _node, nil
}

func (bctc *BlogCategoryTranslationCreate) createSpec() (*BlogCategoryTranslation, *sqlgraph.CreateSpec) {
	var (
		_node = &BlogCategoryTranslation{config: bctc.config}
		_spec = sqlgraph.NewCreateSpec(blogcategorytranslation.Table, sqlgraph.NewFieldSpec(blogcategorytranslation.FieldID, field.TypeUUID))
	)
	if id, ok := bctc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bctc.mutation.Name(); ok {
		_spec.SetField(blogcategorytranslation.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bctc.mutation.Description(); ok {
		_spec.SetField(blogcategorytranslation.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := bctc.mutation.CreatedAt(); ok {
		_spec.SetField(blogcategorytranslation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bctc.mutation.UpdatedAt(); ok {
		_spec.SetField(blogcategorytranslation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := bctc.mutation.BlogCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogcategorytranslation.BlogCategoryTable,
			Columns: []string{blogcategorytranslation.BlogCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BlogCategoryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bctc.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogcategorytranslation.LanguageTable,
			Columns: []string{blogcategorytranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LanguageCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BlogCategoryTranslationCreateBulk is the builder for creating many BlogCategoryTranslation entities in bulk.
type BlogCategoryTranslationCreateBulk struct {
	config
	err      error
	builders []*BlogCategoryTranslationCreate
}

// Save creates the BlogCategoryTranslation entities in the database.
func (bctcb *BlogCategoryTranslationCreateBulk) Save(ctx context.Context) ([]*BlogCategoryTranslation, error) {
	if bctcb.err != nil {
		return nil, bctcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bctcb.builders))
	nodes := make([]*BlogCategoryTranslation, len(bctcb.builders))
	mutators := make([]Mutator, len(bctcb.builders))
	for i := range bctcb.builders {
		func(i int, root context.Context) {
			builder := bctcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlogCategoryTranslationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bctcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bctcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bctcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bctcb *BlogCategoryTranslationCreateBulk) SaveX(ctx context.Context) []*BlogCategoryTranslation {
	v, err := bctcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bctcb *BlogCategoryTranslationCreateBulk) Exec(ctx context.Context) error {
	_, err := bctcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bctcb *BlogCategoryTranslationCreateBulk) ExecX(ctx context.Context) {
	if err := bctcb.Exec(ctx); err != nil {
		panic(err)
	}
}
