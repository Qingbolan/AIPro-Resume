// Code generated by ent, DO NOT EDIT.

package blogtag

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the blogtag type in the database.
	Label = "blog_tag"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldUsageCount holds the string denoting the usage_count field in the database.
	FieldUsageCount = "usage_count"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeBlogPosts holds the string denoting the blog_posts edge name in mutations.
	EdgeBlogPosts = "blog_posts"
	// EdgeBlogPostTags holds the string denoting the blog_post_tags edge name in mutations.
	EdgeBlogPostTags = "blog_post_tags"
	// Table holds the table name of the blogtag in the database.
	Table = "blog_tags"
	// BlogPostsTable is the table that holds the blog_posts relation/edge. The primary key declared below.
	BlogPostsTable = "blog_post_tags"
	// BlogPostsInverseTable is the table name for the BlogPost entity.
	// It exists in this package in order to avoid circular dependency with the "blogpost" package.
	BlogPostsInverseTable = "blog_posts"
	// BlogPostTagsTable is the table that holds the blog_post_tags relation/edge.
	BlogPostTagsTable = "blog_post_tags"
	// BlogPostTagsInverseTable is the table name for the BlogPostTag entity.
	// It exists in this package in order to avoid circular dependency with the "blogposttag" package.
	BlogPostTagsInverseTable = "blog_post_tags"
	// BlogPostTagsColumn is the table column denoting the blog_post_tags relation/edge.
	BlogPostTagsColumn = "blog_tag_id"
)

// Columns holds all SQL columns for blogtag fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldSlug,
	FieldUsageCount,
	FieldCreatedAt,
}

var (
	// BlogPostsPrimaryKey and BlogPostsColumn2 are the table columns denoting the
	// primary key for the blog_posts relation (M2M).
	BlogPostsPrimaryKey = []string{"blog_post_id", "blog_tag_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	SlugValidator func(string) error
	// DefaultUsageCount holds the default value on creation for the "usage_count" field.
	DefaultUsageCount int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the BlogTag queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByUsageCount orders the results by the usage_count field.
func ByUsageCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsageCount, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByBlogPostsCount orders the results by blog_posts count.
func ByBlogPostsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBlogPostsStep(), opts...)
	}
}

// ByBlogPosts orders the results by blog_posts terms.
func ByBlogPosts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlogPostsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBlogPostTagsCount orders the results by blog_post_tags count.
func ByBlogPostTagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBlogPostTagsStep(), opts...)
	}
}

// ByBlogPostTags orders the results by blog_post_tags terms.
func ByBlogPostTags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlogPostTagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBlogPostsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlogPostsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, BlogPostsTable, BlogPostsPrimaryKey...),
	)
}
func newBlogPostTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlogPostTagsInverseTable, BlogPostTagsColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, BlogPostTagsTable, BlogPostTagsColumn),
	)
}
