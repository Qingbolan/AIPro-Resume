// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/researchproject"
	"silan-backend/internal/ent/researchprojectdetail"
	"silan-backend/internal/ent/researchprojectdetailtranslation"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ResearchProjectDetailUpdate is the builder for updating ResearchProjectDetail entities.
type ResearchProjectDetailUpdate struct {
	config
	hooks    []Hook
	mutation *ResearchProjectDetailMutation
}

// Where appends a list predicates to the ResearchProjectDetailUpdate builder.
func (rpdu *ResearchProjectDetailUpdate) Where(ps ...predicate.ResearchProjectDetail) *ResearchProjectDetailUpdate {
	rpdu.mutation.Where(ps...)
	return rpdu
}

// SetResearchProjectID sets the "research_project_id" field.
func (rpdu *ResearchProjectDetailUpdate) SetResearchProjectID(u uuid.UUID) *ResearchProjectDetailUpdate {
	rpdu.mutation.SetResearchProjectID(u)
	return rpdu
}

// SetNillableResearchProjectID sets the "research_project_id" field if the given value is not nil.
func (rpdu *ResearchProjectDetailUpdate) SetNillableResearchProjectID(u *uuid.UUID) *ResearchProjectDetailUpdate {
	if u != nil {
		rpdu.SetResearchProjectID(*u)
	}
	return rpdu
}

// SetDetailText sets the "detail_text" field.
func (rpdu *ResearchProjectDetailUpdate) SetDetailText(s string) *ResearchProjectDetailUpdate {
	rpdu.mutation.SetDetailText(s)
	return rpdu
}

// SetNillableDetailText sets the "detail_text" field if the given value is not nil.
func (rpdu *ResearchProjectDetailUpdate) SetNillableDetailText(s *string) *ResearchProjectDetailUpdate {
	if s != nil {
		rpdu.SetDetailText(*s)
	}
	return rpdu
}

// SetSortOrder sets the "sort_order" field.
func (rpdu *ResearchProjectDetailUpdate) SetSortOrder(i int) *ResearchProjectDetailUpdate {
	rpdu.mutation.ResetSortOrder()
	rpdu.mutation.SetSortOrder(i)
	return rpdu
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (rpdu *ResearchProjectDetailUpdate) SetNillableSortOrder(i *int) *ResearchProjectDetailUpdate {
	if i != nil {
		rpdu.SetSortOrder(*i)
	}
	return rpdu
}

// AddSortOrder adds i to the "sort_order" field.
func (rpdu *ResearchProjectDetailUpdate) AddSortOrder(i int) *ResearchProjectDetailUpdate {
	rpdu.mutation.AddSortOrder(i)
	return rpdu
}

// SetUpdatedAt sets the "updated_at" field.
func (rpdu *ResearchProjectDetailUpdate) SetUpdatedAt(t time.Time) *ResearchProjectDetailUpdate {
	rpdu.mutation.SetUpdatedAt(t)
	return rpdu
}

// SetResearchProject sets the "research_project" edge to the ResearchProject entity.
func (rpdu *ResearchProjectDetailUpdate) SetResearchProject(r *ResearchProject) *ResearchProjectDetailUpdate {
	return rpdu.SetResearchProjectID(r.ID)
}

// AddTranslationIDs adds the "translations" edge to the ResearchProjectDetailTranslation entity by IDs.
func (rpdu *ResearchProjectDetailUpdate) AddTranslationIDs(ids ...uuid.UUID) *ResearchProjectDetailUpdate {
	rpdu.mutation.AddTranslationIDs(ids...)
	return rpdu
}

// AddTranslations adds the "translations" edges to the ResearchProjectDetailTranslation entity.
func (rpdu *ResearchProjectDetailUpdate) AddTranslations(r ...*ResearchProjectDetailTranslation) *ResearchProjectDetailUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpdu.AddTranslationIDs(ids...)
}

// Mutation returns the ResearchProjectDetailMutation object of the builder.
func (rpdu *ResearchProjectDetailUpdate) Mutation() *ResearchProjectDetailMutation {
	return rpdu.mutation
}

// ClearResearchProject clears the "research_project" edge to the ResearchProject entity.
func (rpdu *ResearchProjectDetailUpdate) ClearResearchProject() *ResearchProjectDetailUpdate {
	rpdu.mutation.ClearResearchProject()
	return rpdu
}

// ClearTranslations clears all "translations" edges to the ResearchProjectDetailTranslation entity.
func (rpdu *ResearchProjectDetailUpdate) ClearTranslations() *ResearchProjectDetailUpdate {
	rpdu.mutation.ClearTranslations()
	return rpdu
}

// RemoveTranslationIDs removes the "translations" edge to ResearchProjectDetailTranslation entities by IDs.
func (rpdu *ResearchProjectDetailUpdate) RemoveTranslationIDs(ids ...uuid.UUID) *ResearchProjectDetailUpdate {
	rpdu.mutation.RemoveTranslationIDs(ids...)
	return rpdu
}

// RemoveTranslations removes "translations" edges to ResearchProjectDetailTranslation entities.
func (rpdu *ResearchProjectDetailUpdate) RemoveTranslations(r ...*ResearchProjectDetailTranslation) *ResearchProjectDetailUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpdu.RemoveTranslationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rpdu *ResearchProjectDetailUpdate) Save(ctx context.Context) (int, error) {
	rpdu.defaults()
	return withHooks(ctx, rpdu.sqlSave, rpdu.mutation, rpdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpdu *ResearchProjectDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := rpdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpdu *ResearchProjectDetailUpdate) Exec(ctx context.Context) error {
	_, err := rpdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpdu *ResearchProjectDetailUpdate) ExecX(ctx context.Context) {
	if err := rpdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpdu *ResearchProjectDetailUpdate) defaults() {
	if _, ok := rpdu.mutation.UpdatedAt(); !ok {
		v := researchprojectdetail.UpdateDefaultUpdatedAt()
		rpdu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpdu *ResearchProjectDetailUpdate) check() error {
	if v, ok := rpdu.mutation.DetailText(); ok {
		if err := researchprojectdetail.DetailTextValidator(v); err != nil {
			return &ValidationError{Name: "detail_text", err: fmt.Errorf(`ent: validator failed for field "ResearchProjectDetail.detail_text": %w`, err)}
		}
	}
	if rpdu.mutation.ResearchProjectCleared() && len(rpdu.mutation.ResearchProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ResearchProjectDetail.research_project"`)
	}
	return nil
}

func (rpdu *ResearchProjectDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rpdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(researchprojectdetail.Table, researchprojectdetail.Columns, sqlgraph.NewFieldSpec(researchprojectdetail.FieldID, field.TypeUUID))
	if ps := rpdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpdu.mutation.DetailText(); ok {
		_spec.SetField(researchprojectdetail.FieldDetailText, field.TypeString, value)
	}
	if value, ok := rpdu.mutation.SortOrder(); ok {
		_spec.SetField(researchprojectdetail.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := rpdu.mutation.AddedSortOrder(); ok {
		_spec.AddField(researchprojectdetail.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := rpdu.mutation.UpdatedAt(); ok {
		_spec.SetField(researchprojectdetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if rpdu.mutation.ResearchProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   researchprojectdetail.ResearchProjectTable,
			Columns: []string{researchprojectdetail.ResearchProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchproject.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpdu.mutation.ResearchProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   researchprojectdetail.ResearchProjectTable,
			Columns: []string{researchprojectdetail.ResearchProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchproject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpdu.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   researchprojectdetail.TranslationsTable,
			Columns: []string{researchprojectdetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojectdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpdu.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !rpdu.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   researchprojectdetail.TranslationsTable,
			Columns: []string{researchprojectdetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojectdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpdu.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   researchprojectdetail.TranslationsTable,
			Columns: []string{researchprojectdetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojectdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rpdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{researchprojectdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rpdu.mutation.done = true
	return n, nil
}

// ResearchProjectDetailUpdateOne is the builder for updating a single ResearchProjectDetail entity.
type ResearchProjectDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ResearchProjectDetailMutation
}

// SetResearchProjectID sets the "research_project_id" field.
func (rpduo *ResearchProjectDetailUpdateOne) SetResearchProjectID(u uuid.UUID) *ResearchProjectDetailUpdateOne {
	rpduo.mutation.SetResearchProjectID(u)
	return rpduo
}

// SetNillableResearchProjectID sets the "research_project_id" field if the given value is not nil.
func (rpduo *ResearchProjectDetailUpdateOne) SetNillableResearchProjectID(u *uuid.UUID) *ResearchProjectDetailUpdateOne {
	if u != nil {
		rpduo.SetResearchProjectID(*u)
	}
	return rpduo
}

// SetDetailText sets the "detail_text" field.
func (rpduo *ResearchProjectDetailUpdateOne) SetDetailText(s string) *ResearchProjectDetailUpdateOne {
	rpduo.mutation.SetDetailText(s)
	return rpduo
}

// SetNillableDetailText sets the "detail_text" field if the given value is not nil.
func (rpduo *ResearchProjectDetailUpdateOne) SetNillableDetailText(s *string) *ResearchProjectDetailUpdateOne {
	if s != nil {
		rpduo.SetDetailText(*s)
	}
	return rpduo
}

// SetSortOrder sets the "sort_order" field.
func (rpduo *ResearchProjectDetailUpdateOne) SetSortOrder(i int) *ResearchProjectDetailUpdateOne {
	rpduo.mutation.ResetSortOrder()
	rpduo.mutation.SetSortOrder(i)
	return rpduo
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (rpduo *ResearchProjectDetailUpdateOne) SetNillableSortOrder(i *int) *ResearchProjectDetailUpdateOne {
	if i != nil {
		rpduo.SetSortOrder(*i)
	}
	return rpduo
}

// AddSortOrder adds i to the "sort_order" field.
func (rpduo *ResearchProjectDetailUpdateOne) AddSortOrder(i int) *ResearchProjectDetailUpdateOne {
	rpduo.mutation.AddSortOrder(i)
	return rpduo
}

// SetUpdatedAt sets the "updated_at" field.
func (rpduo *ResearchProjectDetailUpdateOne) SetUpdatedAt(t time.Time) *ResearchProjectDetailUpdateOne {
	rpduo.mutation.SetUpdatedAt(t)
	return rpduo
}

// SetResearchProject sets the "research_project" edge to the ResearchProject entity.
func (rpduo *ResearchProjectDetailUpdateOne) SetResearchProject(r *ResearchProject) *ResearchProjectDetailUpdateOne {
	return rpduo.SetResearchProjectID(r.ID)
}

// AddTranslationIDs adds the "translations" edge to the ResearchProjectDetailTranslation entity by IDs.
func (rpduo *ResearchProjectDetailUpdateOne) AddTranslationIDs(ids ...uuid.UUID) *ResearchProjectDetailUpdateOne {
	rpduo.mutation.AddTranslationIDs(ids...)
	return rpduo
}

// AddTranslations adds the "translations" edges to the ResearchProjectDetailTranslation entity.
func (rpduo *ResearchProjectDetailUpdateOne) AddTranslations(r ...*ResearchProjectDetailTranslation) *ResearchProjectDetailUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpduo.AddTranslationIDs(ids...)
}

// Mutation returns the ResearchProjectDetailMutation object of the builder.
func (rpduo *ResearchProjectDetailUpdateOne) Mutation() *ResearchProjectDetailMutation {
	return rpduo.mutation
}

// ClearResearchProject clears the "research_project" edge to the ResearchProject entity.
func (rpduo *ResearchProjectDetailUpdateOne) ClearResearchProject() *ResearchProjectDetailUpdateOne {
	rpduo.mutation.ClearResearchProject()
	return rpduo
}

// ClearTranslations clears all "translations" edges to the ResearchProjectDetailTranslation entity.
func (rpduo *ResearchProjectDetailUpdateOne) ClearTranslations() *ResearchProjectDetailUpdateOne {
	rpduo.mutation.ClearTranslations()
	return rpduo
}

// RemoveTranslationIDs removes the "translations" edge to ResearchProjectDetailTranslation entities by IDs.
func (rpduo *ResearchProjectDetailUpdateOne) RemoveTranslationIDs(ids ...uuid.UUID) *ResearchProjectDetailUpdateOne {
	rpduo.mutation.RemoveTranslationIDs(ids...)
	return rpduo
}

// RemoveTranslations removes "translations" edges to ResearchProjectDetailTranslation entities.
func (rpduo *ResearchProjectDetailUpdateOne) RemoveTranslations(r ...*ResearchProjectDetailTranslation) *ResearchProjectDetailUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpduo.RemoveTranslationIDs(ids...)
}

// Where appends a list predicates to the ResearchProjectDetailUpdate builder.
func (rpduo *ResearchProjectDetailUpdateOne) Where(ps ...predicate.ResearchProjectDetail) *ResearchProjectDetailUpdateOne {
	rpduo.mutation.Where(ps...)
	return rpduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rpduo *ResearchProjectDetailUpdateOne) Select(field string, fields ...string) *ResearchProjectDetailUpdateOne {
	rpduo.fields = append([]string{field}, fields...)
	return rpduo
}

// Save executes the query and returns the updated ResearchProjectDetail entity.
func (rpduo *ResearchProjectDetailUpdateOne) Save(ctx context.Context) (*ResearchProjectDetail, error) {
	rpduo.defaults()
	return withHooks(ctx, rpduo.sqlSave, rpduo.mutation, rpduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpduo *ResearchProjectDetailUpdateOne) SaveX(ctx context.Context) *ResearchProjectDetail {
	node, err := rpduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rpduo *ResearchProjectDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := rpduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpduo *ResearchProjectDetailUpdateOne) ExecX(ctx context.Context) {
	if err := rpduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpduo *ResearchProjectDetailUpdateOne) defaults() {
	if _, ok := rpduo.mutation.UpdatedAt(); !ok {
		v := researchprojectdetail.UpdateDefaultUpdatedAt()
		rpduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpduo *ResearchProjectDetailUpdateOne) check() error {
	if v, ok := rpduo.mutation.DetailText(); ok {
		if err := researchprojectdetail.DetailTextValidator(v); err != nil {
			return &ValidationError{Name: "detail_text", err: fmt.Errorf(`ent: validator failed for field "ResearchProjectDetail.detail_text": %w`, err)}
		}
	}
	if rpduo.mutation.ResearchProjectCleared() && len(rpduo.mutation.ResearchProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ResearchProjectDetail.research_project"`)
	}
	return nil
}

func (rpduo *ResearchProjectDetailUpdateOne) sqlSave(ctx context.Context) (_node *ResearchProjectDetail, err error) {
	if err := rpduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(researchprojectdetail.Table, researchprojectdetail.Columns, sqlgraph.NewFieldSpec(researchprojectdetail.FieldID, field.TypeUUID))
	id, ok := rpduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ResearchProjectDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rpduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, researchprojectdetail.FieldID)
		for _, f := range fields {
			if !researchprojectdetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != researchprojectdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rpduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpduo.mutation.DetailText(); ok {
		_spec.SetField(researchprojectdetail.FieldDetailText, field.TypeString, value)
	}
	if value, ok := rpduo.mutation.SortOrder(); ok {
		_spec.SetField(researchprojectdetail.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := rpduo.mutation.AddedSortOrder(); ok {
		_spec.AddField(researchprojectdetail.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := rpduo.mutation.UpdatedAt(); ok {
		_spec.SetField(researchprojectdetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if rpduo.mutation.ResearchProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   researchprojectdetail.ResearchProjectTable,
			Columns: []string{researchprojectdetail.ResearchProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchproject.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpduo.mutation.ResearchProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   researchprojectdetail.ResearchProjectTable,
			Columns: []string{researchprojectdetail.ResearchProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchproject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpduo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   researchprojectdetail.TranslationsTable,
			Columns: []string{researchprojectdetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojectdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpduo.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !rpduo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   researchprojectdetail.TranslationsTable,
			Columns: []string{researchprojectdetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojectdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpduo.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   researchprojectdetail.TranslationsTable,
			Columns: []string{researchprojectdetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojectdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ResearchProjectDetail{config: rpduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rpduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{researchprojectdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rpduo.mutation.done = true
	return _node, nil
}
