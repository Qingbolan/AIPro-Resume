// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/publication"
	"silan-backend/internal/ent/publicationtranslation"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PublicationTranslationUpdate is the builder for updating PublicationTranslation entities.
type PublicationTranslationUpdate struct {
	config
	hooks    []Hook
	mutation *PublicationTranslationMutation
}

// Where appends a list predicates to the PublicationTranslationUpdate builder.
func (ptu *PublicationTranslationUpdate) Where(ps ...predicate.PublicationTranslation) *PublicationTranslationUpdate {
	ptu.mutation.Where(ps...)
	return ptu
}

// SetPublicationID sets the "publication_id" field.
func (ptu *PublicationTranslationUpdate) SetPublicationID(u uuid.UUID) *PublicationTranslationUpdate {
	ptu.mutation.SetPublicationID(u)
	return ptu
}

// SetNillablePublicationID sets the "publication_id" field if the given value is not nil.
func (ptu *PublicationTranslationUpdate) SetNillablePublicationID(u *uuid.UUID) *PublicationTranslationUpdate {
	if u != nil {
		ptu.SetPublicationID(*u)
	}
	return ptu
}

// SetLanguageCode sets the "language_code" field.
func (ptu *PublicationTranslationUpdate) SetLanguageCode(s string) *PublicationTranslationUpdate {
	ptu.mutation.SetLanguageCode(s)
	return ptu
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (ptu *PublicationTranslationUpdate) SetNillableLanguageCode(s *string) *PublicationTranslationUpdate {
	if s != nil {
		ptu.SetLanguageCode(*s)
	}
	return ptu
}

// SetTitle sets the "title" field.
func (ptu *PublicationTranslationUpdate) SetTitle(s string) *PublicationTranslationUpdate {
	ptu.mutation.SetTitle(s)
	return ptu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ptu *PublicationTranslationUpdate) SetNillableTitle(s *string) *PublicationTranslationUpdate {
	if s != nil {
		ptu.SetTitle(*s)
	}
	return ptu
}

// SetJournalName sets the "journal_name" field.
func (ptu *PublicationTranslationUpdate) SetJournalName(s string) *PublicationTranslationUpdate {
	ptu.mutation.SetJournalName(s)
	return ptu
}

// SetNillableJournalName sets the "journal_name" field if the given value is not nil.
func (ptu *PublicationTranslationUpdate) SetNillableJournalName(s *string) *PublicationTranslationUpdate {
	if s != nil {
		ptu.SetJournalName(*s)
	}
	return ptu
}

// ClearJournalName clears the value of the "journal_name" field.
func (ptu *PublicationTranslationUpdate) ClearJournalName() *PublicationTranslationUpdate {
	ptu.mutation.ClearJournalName()
	return ptu
}

// SetConferenceName sets the "conference_name" field.
func (ptu *PublicationTranslationUpdate) SetConferenceName(s string) *PublicationTranslationUpdate {
	ptu.mutation.SetConferenceName(s)
	return ptu
}

// SetNillableConferenceName sets the "conference_name" field if the given value is not nil.
func (ptu *PublicationTranslationUpdate) SetNillableConferenceName(s *string) *PublicationTranslationUpdate {
	if s != nil {
		ptu.SetConferenceName(*s)
	}
	return ptu
}

// ClearConferenceName clears the value of the "conference_name" field.
func (ptu *PublicationTranslationUpdate) ClearConferenceName() *PublicationTranslationUpdate {
	ptu.mutation.ClearConferenceName()
	return ptu
}

// SetUpdatedAt sets the "updated_at" field.
func (ptu *PublicationTranslationUpdate) SetUpdatedAt(t time.Time) *PublicationTranslationUpdate {
	ptu.mutation.SetUpdatedAt(t)
	return ptu
}

// SetPublication sets the "publication" edge to the Publication entity.
func (ptu *PublicationTranslationUpdate) SetPublication(p *Publication) *PublicationTranslationUpdate {
	return ptu.SetPublicationID(p.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (ptu *PublicationTranslationUpdate) SetLanguageID(id string) *PublicationTranslationUpdate {
	ptu.mutation.SetLanguageID(id)
	return ptu
}

// SetLanguage sets the "language" edge to the Language entity.
func (ptu *PublicationTranslationUpdate) SetLanguage(l *Language) *PublicationTranslationUpdate {
	return ptu.SetLanguageID(l.ID)
}

// Mutation returns the PublicationTranslationMutation object of the builder.
func (ptu *PublicationTranslationUpdate) Mutation() *PublicationTranslationMutation {
	return ptu.mutation
}

// ClearPublication clears the "publication" edge to the Publication entity.
func (ptu *PublicationTranslationUpdate) ClearPublication() *PublicationTranslationUpdate {
	ptu.mutation.ClearPublication()
	return ptu
}

// ClearLanguage clears the "language" edge to the Language entity.
func (ptu *PublicationTranslationUpdate) ClearLanguage() *PublicationTranslationUpdate {
	ptu.mutation.ClearLanguage()
	return ptu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptu *PublicationTranslationUpdate) Save(ctx context.Context) (int, error) {
	ptu.defaults()
	return withHooks(ctx, ptu.sqlSave, ptu.mutation, ptu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *PublicationTranslationUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *PublicationTranslationUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *PublicationTranslationUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptu *PublicationTranslationUpdate) defaults() {
	if _, ok := ptu.mutation.UpdatedAt(); !ok {
		v := publicationtranslation.UpdateDefaultUpdatedAt()
		ptu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptu *PublicationTranslationUpdate) check() error {
	if v, ok := ptu.mutation.LanguageCode(); ok {
		if err := publicationtranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "PublicationTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := ptu.mutation.Title(); ok {
		if err := publicationtranslation.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "PublicationTranslation.title": %w`, err)}
		}
	}
	if v, ok := ptu.mutation.JournalName(); ok {
		if err := publicationtranslation.JournalNameValidator(v); err != nil {
			return &ValidationError{Name: "journal_name", err: fmt.Errorf(`ent: validator failed for field "PublicationTranslation.journal_name": %w`, err)}
		}
	}
	if v, ok := ptu.mutation.ConferenceName(); ok {
		if err := publicationtranslation.ConferenceNameValidator(v); err != nil {
			return &ValidationError{Name: "conference_name", err: fmt.Errorf(`ent: validator failed for field "PublicationTranslation.conference_name": %w`, err)}
		}
	}
	if ptu.mutation.PublicationCleared() && len(ptu.mutation.PublicationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PublicationTranslation.publication"`)
	}
	if ptu.mutation.LanguageCleared() && len(ptu.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PublicationTranslation.language"`)
	}
	return nil
}

func (ptu *PublicationTranslationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ptu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(publicationtranslation.Table, publicationtranslation.Columns, sqlgraph.NewFieldSpec(publicationtranslation.FieldID, field.TypeUUID))
	if ps := ptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptu.mutation.Title(); ok {
		_spec.SetField(publicationtranslation.FieldTitle, field.TypeString, value)
	}
	if value, ok := ptu.mutation.JournalName(); ok {
		_spec.SetField(publicationtranslation.FieldJournalName, field.TypeString, value)
	}
	if ptu.mutation.JournalNameCleared() {
		_spec.ClearField(publicationtranslation.FieldJournalName, field.TypeString)
	}
	if value, ok := ptu.mutation.ConferenceName(); ok {
		_spec.SetField(publicationtranslation.FieldConferenceName, field.TypeString, value)
	}
	if ptu.mutation.ConferenceNameCleared() {
		_spec.ClearField(publicationtranslation.FieldConferenceName, field.TypeString)
	}
	if value, ok := ptu.mutation.UpdatedAt(); ok {
		_spec.SetField(publicationtranslation.FieldUpdatedAt, field.TypeTime, value)
	}
	if ptu.mutation.PublicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   publicationtranslation.PublicationTable,
			Columns: []string{publicationtranslation.PublicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.PublicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   publicationtranslation.PublicationTable,
			Columns: []string{publicationtranslation.PublicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptu.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   publicationtranslation.LanguageTable,
			Columns: []string{publicationtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   publicationtranslation.LanguageTable,
			Columns: []string{publicationtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publicationtranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ptu.mutation.done = true
	return n, nil
}

// PublicationTranslationUpdateOne is the builder for updating a single PublicationTranslation entity.
type PublicationTranslationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PublicationTranslationMutation
}

// SetPublicationID sets the "publication_id" field.
func (ptuo *PublicationTranslationUpdateOne) SetPublicationID(u uuid.UUID) *PublicationTranslationUpdateOne {
	ptuo.mutation.SetPublicationID(u)
	return ptuo
}

// SetNillablePublicationID sets the "publication_id" field if the given value is not nil.
func (ptuo *PublicationTranslationUpdateOne) SetNillablePublicationID(u *uuid.UUID) *PublicationTranslationUpdateOne {
	if u != nil {
		ptuo.SetPublicationID(*u)
	}
	return ptuo
}

// SetLanguageCode sets the "language_code" field.
func (ptuo *PublicationTranslationUpdateOne) SetLanguageCode(s string) *PublicationTranslationUpdateOne {
	ptuo.mutation.SetLanguageCode(s)
	return ptuo
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (ptuo *PublicationTranslationUpdateOne) SetNillableLanguageCode(s *string) *PublicationTranslationUpdateOne {
	if s != nil {
		ptuo.SetLanguageCode(*s)
	}
	return ptuo
}

// SetTitle sets the "title" field.
func (ptuo *PublicationTranslationUpdateOne) SetTitle(s string) *PublicationTranslationUpdateOne {
	ptuo.mutation.SetTitle(s)
	return ptuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ptuo *PublicationTranslationUpdateOne) SetNillableTitle(s *string) *PublicationTranslationUpdateOne {
	if s != nil {
		ptuo.SetTitle(*s)
	}
	return ptuo
}

// SetJournalName sets the "journal_name" field.
func (ptuo *PublicationTranslationUpdateOne) SetJournalName(s string) *PublicationTranslationUpdateOne {
	ptuo.mutation.SetJournalName(s)
	return ptuo
}

// SetNillableJournalName sets the "journal_name" field if the given value is not nil.
func (ptuo *PublicationTranslationUpdateOne) SetNillableJournalName(s *string) *PublicationTranslationUpdateOne {
	if s != nil {
		ptuo.SetJournalName(*s)
	}
	return ptuo
}

// ClearJournalName clears the value of the "journal_name" field.
func (ptuo *PublicationTranslationUpdateOne) ClearJournalName() *PublicationTranslationUpdateOne {
	ptuo.mutation.ClearJournalName()
	return ptuo
}

// SetConferenceName sets the "conference_name" field.
func (ptuo *PublicationTranslationUpdateOne) SetConferenceName(s string) *PublicationTranslationUpdateOne {
	ptuo.mutation.SetConferenceName(s)
	return ptuo
}

// SetNillableConferenceName sets the "conference_name" field if the given value is not nil.
func (ptuo *PublicationTranslationUpdateOne) SetNillableConferenceName(s *string) *PublicationTranslationUpdateOne {
	if s != nil {
		ptuo.SetConferenceName(*s)
	}
	return ptuo
}

// ClearConferenceName clears the value of the "conference_name" field.
func (ptuo *PublicationTranslationUpdateOne) ClearConferenceName() *PublicationTranslationUpdateOne {
	ptuo.mutation.ClearConferenceName()
	return ptuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ptuo *PublicationTranslationUpdateOne) SetUpdatedAt(t time.Time) *PublicationTranslationUpdateOne {
	ptuo.mutation.SetUpdatedAt(t)
	return ptuo
}

// SetPublication sets the "publication" edge to the Publication entity.
func (ptuo *PublicationTranslationUpdateOne) SetPublication(p *Publication) *PublicationTranslationUpdateOne {
	return ptuo.SetPublicationID(p.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (ptuo *PublicationTranslationUpdateOne) SetLanguageID(id string) *PublicationTranslationUpdateOne {
	ptuo.mutation.SetLanguageID(id)
	return ptuo
}

// SetLanguage sets the "language" edge to the Language entity.
func (ptuo *PublicationTranslationUpdateOne) SetLanguage(l *Language) *PublicationTranslationUpdateOne {
	return ptuo.SetLanguageID(l.ID)
}

// Mutation returns the PublicationTranslationMutation object of the builder.
func (ptuo *PublicationTranslationUpdateOne) Mutation() *PublicationTranslationMutation {
	return ptuo.mutation
}

// ClearPublication clears the "publication" edge to the Publication entity.
func (ptuo *PublicationTranslationUpdateOne) ClearPublication() *PublicationTranslationUpdateOne {
	ptuo.mutation.ClearPublication()
	return ptuo
}

// ClearLanguage clears the "language" edge to the Language entity.
func (ptuo *PublicationTranslationUpdateOne) ClearLanguage() *PublicationTranslationUpdateOne {
	ptuo.mutation.ClearLanguage()
	return ptuo
}

// Where appends a list predicates to the PublicationTranslationUpdate builder.
func (ptuo *PublicationTranslationUpdateOne) Where(ps ...predicate.PublicationTranslation) *PublicationTranslationUpdateOne {
	ptuo.mutation.Where(ps...)
	return ptuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptuo *PublicationTranslationUpdateOne) Select(field string, fields ...string) *PublicationTranslationUpdateOne {
	ptuo.fields = append([]string{field}, fields...)
	return ptuo
}

// Save executes the query and returns the updated PublicationTranslation entity.
func (ptuo *PublicationTranslationUpdateOne) Save(ctx context.Context) (*PublicationTranslation, error) {
	ptuo.defaults()
	return withHooks(ctx, ptuo.sqlSave, ptuo.mutation, ptuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *PublicationTranslationUpdateOne) SaveX(ctx context.Context) *PublicationTranslation {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *PublicationTranslationUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *PublicationTranslationUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptuo *PublicationTranslationUpdateOne) defaults() {
	if _, ok := ptuo.mutation.UpdatedAt(); !ok {
		v := publicationtranslation.UpdateDefaultUpdatedAt()
		ptuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptuo *PublicationTranslationUpdateOne) check() error {
	if v, ok := ptuo.mutation.LanguageCode(); ok {
		if err := publicationtranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "PublicationTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := ptuo.mutation.Title(); ok {
		if err := publicationtranslation.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "PublicationTranslation.title": %w`, err)}
		}
	}
	if v, ok := ptuo.mutation.JournalName(); ok {
		if err := publicationtranslation.JournalNameValidator(v); err != nil {
			return &ValidationError{Name: "journal_name", err: fmt.Errorf(`ent: validator failed for field "PublicationTranslation.journal_name": %w`, err)}
		}
	}
	if v, ok := ptuo.mutation.ConferenceName(); ok {
		if err := publicationtranslation.ConferenceNameValidator(v); err != nil {
			return &ValidationError{Name: "conference_name", err: fmt.Errorf(`ent: validator failed for field "PublicationTranslation.conference_name": %w`, err)}
		}
	}
	if ptuo.mutation.PublicationCleared() && len(ptuo.mutation.PublicationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PublicationTranslation.publication"`)
	}
	if ptuo.mutation.LanguageCleared() && len(ptuo.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PublicationTranslation.language"`)
	}
	return nil
}

func (ptuo *PublicationTranslationUpdateOne) sqlSave(ctx context.Context) (_node *PublicationTranslation, err error) {
	if err := ptuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(publicationtranslation.Table, publicationtranslation.Columns, sqlgraph.NewFieldSpec(publicationtranslation.FieldID, field.TypeUUID))
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PublicationTranslation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, publicationtranslation.FieldID)
		for _, f := range fields {
			if !publicationtranslation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != publicationtranslation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptuo.mutation.Title(); ok {
		_spec.SetField(publicationtranslation.FieldTitle, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.JournalName(); ok {
		_spec.SetField(publicationtranslation.FieldJournalName, field.TypeString, value)
	}
	if ptuo.mutation.JournalNameCleared() {
		_spec.ClearField(publicationtranslation.FieldJournalName, field.TypeString)
	}
	if value, ok := ptuo.mutation.ConferenceName(); ok {
		_spec.SetField(publicationtranslation.FieldConferenceName, field.TypeString, value)
	}
	if ptuo.mutation.ConferenceNameCleared() {
		_spec.ClearField(publicationtranslation.FieldConferenceName, field.TypeString)
	}
	if value, ok := ptuo.mutation.UpdatedAt(); ok {
		_spec.SetField(publicationtranslation.FieldUpdatedAt, field.TypeTime, value)
	}
	if ptuo.mutation.PublicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   publicationtranslation.PublicationTable,
			Columns: []string{publicationtranslation.PublicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.PublicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   publicationtranslation.PublicationTable,
			Columns: []string{publicationtranslation.PublicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptuo.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   publicationtranslation.LanguageTable,
			Columns: []string{publicationtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   publicationtranslation.LanguageTable,
			Columns: []string{publicationtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PublicationTranslation{config: ptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publicationtranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ptuo.mutation.done = true
	return _node, nil
}
