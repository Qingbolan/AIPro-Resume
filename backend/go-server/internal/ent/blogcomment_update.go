// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/blogcomment"
	"silan-backend/internal/ent/blogpost"
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BlogCommentUpdate is the builder for updating BlogComment entities.
type BlogCommentUpdate struct {
	config
	hooks    []Hook
	mutation *BlogCommentMutation
}

// Where appends a list predicates to the BlogCommentUpdate builder.
func (bcu *BlogCommentUpdate) Where(ps ...predicate.BlogComment) *BlogCommentUpdate {
	bcu.mutation.Where(ps...)
	return bcu
}

// SetBlogPostID sets the "blog_post_id" field.
func (bcu *BlogCommentUpdate) SetBlogPostID(u uuid.UUID) *BlogCommentUpdate {
	bcu.mutation.SetBlogPostID(u)
	return bcu
}

// SetNillableBlogPostID sets the "blog_post_id" field if the given value is not nil.
func (bcu *BlogCommentUpdate) SetNillableBlogPostID(u *uuid.UUID) *BlogCommentUpdate {
	if u != nil {
		bcu.SetBlogPostID(*u)
	}
	return bcu
}

// SetParentID sets the "parent_id" field.
func (bcu *BlogCommentUpdate) SetParentID(u uuid.UUID) *BlogCommentUpdate {
	bcu.mutation.SetParentID(u)
	return bcu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (bcu *BlogCommentUpdate) SetNillableParentID(u *uuid.UUID) *BlogCommentUpdate {
	if u != nil {
		bcu.SetParentID(*u)
	}
	return bcu
}

// ClearParentID clears the value of the "parent_id" field.
func (bcu *BlogCommentUpdate) ClearParentID() *BlogCommentUpdate {
	bcu.mutation.ClearParentID()
	return bcu
}

// SetAuthorName sets the "author_name" field.
func (bcu *BlogCommentUpdate) SetAuthorName(s string) *BlogCommentUpdate {
	bcu.mutation.SetAuthorName(s)
	return bcu
}

// SetNillableAuthorName sets the "author_name" field if the given value is not nil.
func (bcu *BlogCommentUpdate) SetNillableAuthorName(s *string) *BlogCommentUpdate {
	if s != nil {
		bcu.SetAuthorName(*s)
	}
	return bcu
}

// SetAuthorEmail sets the "author_email" field.
func (bcu *BlogCommentUpdate) SetAuthorEmail(s string) *BlogCommentUpdate {
	bcu.mutation.SetAuthorEmail(s)
	return bcu
}

// SetNillableAuthorEmail sets the "author_email" field if the given value is not nil.
func (bcu *BlogCommentUpdate) SetNillableAuthorEmail(s *string) *BlogCommentUpdate {
	if s != nil {
		bcu.SetAuthorEmail(*s)
	}
	return bcu
}

// SetAuthorWebsite sets the "author_website" field.
func (bcu *BlogCommentUpdate) SetAuthorWebsite(s string) *BlogCommentUpdate {
	bcu.mutation.SetAuthorWebsite(s)
	return bcu
}

// SetNillableAuthorWebsite sets the "author_website" field if the given value is not nil.
func (bcu *BlogCommentUpdate) SetNillableAuthorWebsite(s *string) *BlogCommentUpdate {
	if s != nil {
		bcu.SetAuthorWebsite(*s)
	}
	return bcu
}

// ClearAuthorWebsite clears the value of the "author_website" field.
func (bcu *BlogCommentUpdate) ClearAuthorWebsite() *BlogCommentUpdate {
	bcu.mutation.ClearAuthorWebsite()
	return bcu
}

// SetContent sets the "content" field.
func (bcu *BlogCommentUpdate) SetContent(s string) *BlogCommentUpdate {
	bcu.mutation.SetContent(s)
	return bcu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (bcu *BlogCommentUpdate) SetNillableContent(s *string) *BlogCommentUpdate {
	if s != nil {
		bcu.SetContent(*s)
	}
	return bcu
}

// SetIsApproved sets the "is_approved" field.
func (bcu *BlogCommentUpdate) SetIsApproved(b bool) *BlogCommentUpdate {
	bcu.mutation.SetIsApproved(b)
	return bcu
}

// SetNillableIsApproved sets the "is_approved" field if the given value is not nil.
func (bcu *BlogCommentUpdate) SetNillableIsApproved(b *bool) *BlogCommentUpdate {
	if b != nil {
		bcu.SetIsApproved(*b)
	}
	return bcu
}

// SetIPAddress sets the "ip_address" field.
func (bcu *BlogCommentUpdate) SetIPAddress(s string) *BlogCommentUpdate {
	bcu.mutation.SetIPAddress(s)
	return bcu
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (bcu *BlogCommentUpdate) SetNillableIPAddress(s *string) *BlogCommentUpdate {
	if s != nil {
		bcu.SetIPAddress(*s)
	}
	return bcu
}

// ClearIPAddress clears the value of the "ip_address" field.
func (bcu *BlogCommentUpdate) ClearIPAddress() *BlogCommentUpdate {
	bcu.mutation.ClearIPAddress()
	return bcu
}

// SetUserAgent sets the "user_agent" field.
func (bcu *BlogCommentUpdate) SetUserAgent(s string) *BlogCommentUpdate {
	bcu.mutation.SetUserAgent(s)
	return bcu
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (bcu *BlogCommentUpdate) SetNillableUserAgent(s *string) *BlogCommentUpdate {
	if s != nil {
		bcu.SetUserAgent(*s)
	}
	return bcu
}

// ClearUserAgent clears the value of the "user_agent" field.
func (bcu *BlogCommentUpdate) ClearUserAgent() *BlogCommentUpdate {
	bcu.mutation.ClearUserAgent()
	return bcu
}

// SetUpdatedAt sets the "updated_at" field.
func (bcu *BlogCommentUpdate) SetUpdatedAt(t time.Time) *BlogCommentUpdate {
	bcu.mutation.SetUpdatedAt(t)
	return bcu
}

// SetBlogPost sets the "blog_post" edge to the BlogPost entity.
func (bcu *BlogCommentUpdate) SetBlogPost(b *BlogPost) *BlogCommentUpdate {
	return bcu.SetBlogPostID(b.ID)
}

// SetParent sets the "parent" edge to the BlogComment entity.
func (bcu *BlogCommentUpdate) SetParent(b *BlogComment) *BlogCommentUpdate {
	return bcu.SetParentID(b.ID)
}

// AddReplyIDs adds the "replies" edge to the BlogComment entity by IDs.
func (bcu *BlogCommentUpdate) AddReplyIDs(ids ...uuid.UUID) *BlogCommentUpdate {
	bcu.mutation.AddReplyIDs(ids...)
	return bcu
}

// AddReplies adds the "replies" edges to the BlogComment entity.
func (bcu *BlogCommentUpdate) AddReplies(b ...*BlogComment) *BlogCommentUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bcu.AddReplyIDs(ids...)
}

// Mutation returns the BlogCommentMutation object of the builder.
func (bcu *BlogCommentUpdate) Mutation() *BlogCommentMutation {
	return bcu.mutation
}

// ClearBlogPost clears the "blog_post" edge to the BlogPost entity.
func (bcu *BlogCommentUpdate) ClearBlogPost() *BlogCommentUpdate {
	bcu.mutation.ClearBlogPost()
	return bcu
}

// ClearParent clears the "parent" edge to the BlogComment entity.
func (bcu *BlogCommentUpdate) ClearParent() *BlogCommentUpdate {
	bcu.mutation.ClearParent()
	return bcu
}

// ClearReplies clears all "replies" edges to the BlogComment entity.
func (bcu *BlogCommentUpdate) ClearReplies() *BlogCommentUpdate {
	bcu.mutation.ClearReplies()
	return bcu
}

// RemoveReplyIDs removes the "replies" edge to BlogComment entities by IDs.
func (bcu *BlogCommentUpdate) RemoveReplyIDs(ids ...uuid.UUID) *BlogCommentUpdate {
	bcu.mutation.RemoveReplyIDs(ids...)
	return bcu
}

// RemoveReplies removes "replies" edges to BlogComment entities.
func (bcu *BlogCommentUpdate) RemoveReplies(b ...*BlogComment) *BlogCommentUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bcu.RemoveReplyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bcu *BlogCommentUpdate) Save(ctx context.Context) (int, error) {
	bcu.defaults()
	return withHooks(ctx, bcu.sqlSave, bcu.mutation, bcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bcu *BlogCommentUpdate) SaveX(ctx context.Context) int {
	affected, err := bcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bcu *BlogCommentUpdate) Exec(ctx context.Context) error {
	_, err := bcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcu *BlogCommentUpdate) ExecX(ctx context.Context) {
	if err := bcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcu *BlogCommentUpdate) defaults() {
	if _, ok := bcu.mutation.UpdatedAt(); !ok {
		v := blogcomment.UpdateDefaultUpdatedAt()
		bcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcu *BlogCommentUpdate) check() error {
	if v, ok := bcu.mutation.AuthorName(); ok {
		if err := blogcomment.AuthorNameValidator(v); err != nil {
			return &ValidationError{Name: "author_name", err: fmt.Errorf(`ent: validator failed for field "BlogComment.author_name": %w`, err)}
		}
	}
	if v, ok := bcu.mutation.AuthorEmail(); ok {
		if err := blogcomment.AuthorEmailValidator(v); err != nil {
			return &ValidationError{Name: "author_email", err: fmt.Errorf(`ent: validator failed for field "BlogComment.author_email": %w`, err)}
		}
	}
	if v, ok := bcu.mutation.AuthorWebsite(); ok {
		if err := blogcomment.AuthorWebsiteValidator(v); err != nil {
			return &ValidationError{Name: "author_website", err: fmt.Errorf(`ent: validator failed for field "BlogComment.author_website": %w`, err)}
		}
	}
	if v, ok := bcu.mutation.Content(); ok {
		if err := blogcomment.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "BlogComment.content": %w`, err)}
		}
	}
	if v, ok := bcu.mutation.IPAddress(); ok {
		if err := blogcomment.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "BlogComment.ip_address": %w`, err)}
		}
	}
	if v, ok := bcu.mutation.UserAgent(); ok {
		if err := blogcomment.UserAgentValidator(v); err != nil {
			return &ValidationError{Name: "user_agent", err: fmt.Errorf(`ent: validator failed for field "BlogComment.user_agent": %w`, err)}
		}
	}
	if bcu.mutation.BlogPostCleared() && len(bcu.mutation.BlogPostIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlogComment.blog_post"`)
	}
	return nil
}

func (bcu *BlogCommentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(blogcomment.Table, blogcomment.Columns, sqlgraph.NewFieldSpec(blogcomment.FieldID, field.TypeUUID))
	if ps := bcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bcu.mutation.AuthorName(); ok {
		_spec.SetField(blogcomment.FieldAuthorName, field.TypeString, value)
	}
	if value, ok := bcu.mutation.AuthorEmail(); ok {
		_spec.SetField(blogcomment.FieldAuthorEmail, field.TypeString, value)
	}
	if value, ok := bcu.mutation.AuthorWebsite(); ok {
		_spec.SetField(blogcomment.FieldAuthorWebsite, field.TypeString, value)
	}
	if bcu.mutation.AuthorWebsiteCleared() {
		_spec.ClearField(blogcomment.FieldAuthorWebsite, field.TypeString)
	}
	if value, ok := bcu.mutation.Content(); ok {
		_spec.SetField(blogcomment.FieldContent, field.TypeString, value)
	}
	if value, ok := bcu.mutation.IsApproved(); ok {
		_spec.SetField(blogcomment.FieldIsApproved, field.TypeBool, value)
	}
	if value, ok := bcu.mutation.IPAddress(); ok {
		_spec.SetField(blogcomment.FieldIPAddress, field.TypeString, value)
	}
	if bcu.mutation.IPAddressCleared() {
		_spec.ClearField(blogcomment.FieldIPAddress, field.TypeString)
	}
	if value, ok := bcu.mutation.UserAgent(); ok {
		_spec.SetField(blogcomment.FieldUserAgent, field.TypeString, value)
	}
	if bcu.mutation.UserAgentCleared() {
		_spec.ClearField(blogcomment.FieldUserAgent, field.TypeString)
	}
	if value, ok := bcu.mutation.UpdatedAt(); ok {
		_spec.SetField(blogcomment.FieldUpdatedAt, field.TypeTime, value)
	}
	if bcu.mutation.BlogPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogcomment.BlogPostTable,
			Columns: []string{blogcomment.BlogPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcu.mutation.BlogPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogcomment.BlogPostTable,
			Columns: []string{blogcomment.BlogPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bcu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   blogcomment.ParentTable,
			Columns: []string{blogcomment.ParentColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcomment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   blogcomment.ParentTable,
			Columns: []string{blogcomment.ParentColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bcu.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   blogcomment.RepliesTable,
			Columns: []string{blogcomment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcomment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcu.mutation.RemovedRepliesIDs(); len(nodes) > 0 && !bcu.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   blogcomment.RepliesTable,
			Columns: []string{blogcomment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcu.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   blogcomment.RepliesTable,
			Columns: []string{blogcomment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blogcomment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bcu.mutation.done = true
	return n, nil
}

// BlogCommentUpdateOne is the builder for updating a single BlogComment entity.
type BlogCommentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlogCommentMutation
}

// SetBlogPostID sets the "blog_post_id" field.
func (bcuo *BlogCommentUpdateOne) SetBlogPostID(u uuid.UUID) *BlogCommentUpdateOne {
	bcuo.mutation.SetBlogPostID(u)
	return bcuo
}

// SetNillableBlogPostID sets the "blog_post_id" field if the given value is not nil.
func (bcuo *BlogCommentUpdateOne) SetNillableBlogPostID(u *uuid.UUID) *BlogCommentUpdateOne {
	if u != nil {
		bcuo.SetBlogPostID(*u)
	}
	return bcuo
}

// SetParentID sets the "parent_id" field.
func (bcuo *BlogCommentUpdateOne) SetParentID(u uuid.UUID) *BlogCommentUpdateOne {
	bcuo.mutation.SetParentID(u)
	return bcuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (bcuo *BlogCommentUpdateOne) SetNillableParentID(u *uuid.UUID) *BlogCommentUpdateOne {
	if u != nil {
		bcuo.SetParentID(*u)
	}
	return bcuo
}

// ClearParentID clears the value of the "parent_id" field.
func (bcuo *BlogCommentUpdateOne) ClearParentID() *BlogCommentUpdateOne {
	bcuo.mutation.ClearParentID()
	return bcuo
}

// SetAuthorName sets the "author_name" field.
func (bcuo *BlogCommentUpdateOne) SetAuthorName(s string) *BlogCommentUpdateOne {
	bcuo.mutation.SetAuthorName(s)
	return bcuo
}

// SetNillableAuthorName sets the "author_name" field if the given value is not nil.
func (bcuo *BlogCommentUpdateOne) SetNillableAuthorName(s *string) *BlogCommentUpdateOne {
	if s != nil {
		bcuo.SetAuthorName(*s)
	}
	return bcuo
}

// SetAuthorEmail sets the "author_email" field.
func (bcuo *BlogCommentUpdateOne) SetAuthorEmail(s string) *BlogCommentUpdateOne {
	bcuo.mutation.SetAuthorEmail(s)
	return bcuo
}

// SetNillableAuthorEmail sets the "author_email" field if the given value is not nil.
func (bcuo *BlogCommentUpdateOne) SetNillableAuthorEmail(s *string) *BlogCommentUpdateOne {
	if s != nil {
		bcuo.SetAuthorEmail(*s)
	}
	return bcuo
}

// SetAuthorWebsite sets the "author_website" field.
func (bcuo *BlogCommentUpdateOne) SetAuthorWebsite(s string) *BlogCommentUpdateOne {
	bcuo.mutation.SetAuthorWebsite(s)
	return bcuo
}

// SetNillableAuthorWebsite sets the "author_website" field if the given value is not nil.
func (bcuo *BlogCommentUpdateOne) SetNillableAuthorWebsite(s *string) *BlogCommentUpdateOne {
	if s != nil {
		bcuo.SetAuthorWebsite(*s)
	}
	return bcuo
}

// ClearAuthorWebsite clears the value of the "author_website" field.
func (bcuo *BlogCommentUpdateOne) ClearAuthorWebsite() *BlogCommentUpdateOne {
	bcuo.mutation.ClearAuthorWebsite()
	return bcuo
}

// SetContent sets the "content" field.
func (bcuo *BlogCommentUpdateOne) SetContent(s string) *BlogCommentUpdateOne {
	bcuo.mutation.SetContent(s)
	return bcuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (bcuo *BlogCommentUpdateOne) SetNillableContent(s *string) *BlogCommentUpdateOne {
	if s != nil {
		bcuo.SetContent(*s)
	}
	return bcuo
}

// SetIsApproved sets the "is_approved" field.
func (bcuo *BlogCommentUpdateOne) SetIsApproved(b bool) *BlogCommentUpdateOne {
	bcuo.mutation.SetIsApproved(b)
	return bcuo
}

// SetNillableIsApproved sets the "is_approved" field if the given value is not nil.
func (bcuo *BlogCommentUpdateOne) SetNillableIsApproved(b *bool) *BlogCommentUpdateOne {
	if b != nil {
		bcuo.SetIsApproved(*b)
	}
	return bcuo
}

// SetIPAddress sets the "ip_address" field.
func (bcuo *BlogCommentUpdateOne) SetIPAddress(s string) *BlogCommentUpdateOne {
	bcuo.mutation.SetIPAddress(s)
	return bcuo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (bcuo *BlogCommentUpdateOne) SetNillableIPAddress(s *string) *BlogCommentUpdateOne {
	if s != nil {
		bcuo.SetIPAddress(*s)
	}
	return bcuo
}

// ClearIPAddress clears the value of the "ip_address" field.
func (bcuo *BlogCommentUpdateOne) ClearIPAddress() *BlogCommentUpdateOne {
	bcuo.mutation.ClearIPAddress()
	return bcuo
}

// SetUserAgent sets the "user_agent" field.
func (bcuo *BlogCommentUpdateOne) SetUserAgent(s string) *BlogCommentUpdateOne {
	bcuo.mutation.SetUserAgent(s)
	return bcuo
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (bcuo *BlogCommentUpdateOne) SetNillableUserAgent(s *string) *BlogCommentUpdateOne {
	if s != nil {
		bcuo.SetUserAgent(*s)
	}
	return bcuo
}

// ClearUserAgent clears the value of the "user_agent" field.
func (bcuo *BlogCommentUpdateOne) ClearUserAgent() *BlogCommentUpdateOne {
	bcuo.mutation.ClearUserAgent()
	return bcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (bcuo *BlogCommentUpdateOne) SetUpdatedAt(t time.Time) *BlogCommentUpdateOne {
	bcuo.mutation.SetUpdatedAt(t)
	return bcuo
}

// SetBlogPost sets the "blog_post" edge to the BlogPost entity.
func (bcuo *BlogCommentUpdateOne) SetBlogPost(b *BlogPost) *BlogCommentUpdateOne {
	return bcuo.SetBlogPostID(b.ID)
}

// SetParent sets the "parent" edge to the BlogComment entity.
func (bcuo *BlogCommentUpdateOne) SetParent(b *BlogComment) *BlogCommentUpdateOne {
	return bcuo.SetParentID(b.ID)
}

// AddReplyIDs adds the "replies" edge to the BlogComment entity by IDs.
func (bcuo *BlogCommentUpdateOne) AddReplyIDs(ids ...uuid.UUID) *BlogCommentUpdateOne {
	bcuo.mutation.AddReplyIDs(ids...)
	return bcuo
}

// AddReplies adds the "replies" edges to the BlogComment entity.
func (bcuo *BlogCommentUpdateOne) AddReplies(b ...*BlogComment) *BlogCommentUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bcuo.AddReplyIDs(ids...)
}

// Mutation returns the BlogCommentMutation object of the builder.
func (bcuo *BlogCommentUpdateOne) Mutation() *BlogCommentMutation {
	return bcuo.mutation
}

// ClearBlogPost clears the "blog_post" edge to the BlogPost entity.
func (bcuo *BlogCommentUpdateOne) ClearBlogPost() *BlogCommentUpdateOne {
	bcuo.mutation.ClearBlogPost()
	return bcuo
}

// ClearParent clears the "parent" edge to the BlogComment entity.
func (bcuo *BlogCommentUpdateOne) ClearParent() *BlogCommentUpdateOne {
	bcuo.mutation.ClearParent()
	return bcuo
}

// ClearReplies clears all "replies" edges to the BlogComment entity.
func (bcuo *BlogCommentUpdateOne) ClearReplies() *BlogCommentUpdateOne {
	bcuo.mutation.ClearReplies()
	return bcuo
}

// RemoveReplyIDs removes the "replies" edge to BlogComment entities by IDs.
func (bcuo *BlogCommentUpdateOne) RemoveReplyIDs(ids ...uuid.UUID) *BlogCommentUpdateOne {
	bcuo.mutation.RemoveReplyIDs(ids...)
	return bcuo
}

// RemoveReplies removes "replies" edges to BlogComment entities.
func (bcuo *BlogCommentUpdateOne) RemoveReplies(b ...*BlogComment) *BlogCommentUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bcuo.RemoveReplyIDs(ids...)
}

// Where appends a list predicates to the BlogCommentUpdate builder.
func (bcuo *BlogCommentUpdateOne) Where(ps ...predicate.BlogComment) *BlogCommentUpdateOne {
	bcuo.mutation.Where(ps...)
	return bcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bcuo *BlogCommentUpdateOne) Select(field string, fields ...string) *BlogCommentUpdateOne {
	bcuo.fields = append([]string{field}, fields...)
	return bcuo
}

// Save executes the query and returns the updated BlogComment entity.
func (bcuo *BlogCommentUpdateOne) Save(ctx context.Context) (*BlogComment, error) {
	bcuo.defaults()
	return withHooks(ctx, bcuo.sqlSave, bcuo.mutation, bcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bcuo *BlogCommentUpdateOne) SaveX(ctx context.Context) *BlogComment {
	node, err := bcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bcuo *BlogCommentUpdateOne) Exec(ctx context.Context) error {
	_, err := bcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcuo *BlogCommentUpdateOne) ExecX(ctx context.Context) {
	if err := bcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcuo *BlogCommentUpdateOne) defaults() {
	if _, ok := bcuo.mutation.UpdatedAt(); !ok {
		v := blogcomment.UpdateDefaultUpdatedAt()
		bcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcuo *BlogCommentUpdateOne) check() error {
	if v, ok := bcuo.mutation.AuthorName(); ok {
		if err := blogcomment.AuthorNameValidator(v); err != nil {
			return &ValidationError{Name: "author_name", err: fmt.Errorf(`ent: validator failed for field "BlogComment.author_name": %w`, err)}
		}
	}
	if v, ok := bcuo.mutation.AuthorEmail(); ok {
		if err := blogcomment.AuthorEmailValidator(v); err != nil {
			return &ValidationError{Name: "author_email", err: fmt.Errorf(`ent: validator failed for field "BlogComment.author_email": %w`, err)}
		}
	}
	if v, ok := bcuo.mutation.AuthorWebsite(); ok {
		if err := blogcomment.AuthorWebsiteValidator(v); err != nil {
			return &ValidationError{Name: "author_website", err: fmt.Errorf(`ent: validator failed for field "BlogComment.author_website": %w`, err)}
		}
	}
	if v, ok := bcuo.mutation.Content(); ok {
		if err := blogcomment.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "BlogComment.content": %w`, err)}
		}
	}
	if v, ok := bcuo.mutation.IPAddress(); ok {
		if err := blogcomment.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "BlogComment.ip_address": %w`, err)}
		}
	}
	if v, ok := bcuo.mutation.UserAgent(); ok {
		if err := blogcomment.UserAgentValidator(v); err != nil {
			return &ValidationError{Name: "user_agent", err: fmt.Errorf(`ent: validator failed for field "BlogComment.user_agent": %w`, err)}
		}
	}
	if bcuo.mutation.BlogPostCleared() && len(bcuo.mutation.BlogPostIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlogComment.blog_post"`)
	}
	return nil
}

func (bcuo *BlogCommentUpdateOne) sqlSave(ctx context.Context) (_node *BlogComment, err error) {
	if err := bcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blogcomment.Table, blogcomment.Columns, sqlgraph.NewFieldSpec(blogcomment.FieldID, field.TypeUUID))
	id, ok := bcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlogComment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blogcomment.FieldID)
		for _, f := range fields {
			if !blogcomment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blogcomment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bcuo.mutation.AuthorName(); ok {
		_spec.SetField(blogcomment.FieldAuthorName, field.TypeString, value)
	}
	if value, ok := bcuo.mutation.AuthorEmail(); ok {
		_spec.SetField(blogcomment.FieldAuthorEmail, field.TypeString, value)
	}
	if value, ok := bcuo.mutation.AuthorWebsite(); ok {
		_spec.SetField(blogcomment.FieldAuthorWebsite, field.TypeString, value)
	}
	if bcuo.mutation.AuthorWebsiteCleared() {
		_spec.ClearField(blogcomment.FieldAuthorWebsite, field.TypeString)
	}
	if value, ok := bcuo.mutation.Content(); ok {
		_spec.SetField(blogcomment.FieldContent, field.TypeString, value)
	}
	if value, ok := bcuo.mutation.IsApproved(); ok {
		_spec.SetField(blogcomment.FieldIsApproved, field.TypeBool, value)
	}
	if value, ok := bcuo.mutation.IPAddress(); ok {
		_spec.SetField(blogcomment.FieldIPAddress, field.TypeString, value)
	}
	if bcuo.mutation.IPAddressCleared() {
		_spec.ClearField(blogcomment.FieldIPAddress, field.TypeString)
	}
	if value, ok := bcuo.mutation.UserAgent(); ok {
		_spec.SetField(blogcomment.FieldUserAgent, field.TypeString, value)
	}
	if bcuo.mutation.UserAgentCleared() {
		_spec.ClearField(blogcomment.FieldUserAgent, field.TypeString)
	}
	if value, ok := bcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(blogcomment.FieldUpdatedAt, field.TypeTime, value)
	}
	if bcuo.mutation.BlogPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogcomment.BlogPostTable,
			Columns: []string{blogcomment.BlogPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcuo.mutation.BlogPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogcomment.BlogPostTable,
			Columns: []string{blogcomment.BlogPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bcuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   blogcomment.ParentTable,
			Columns: []string{blogcomment.ParentColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcomment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   blogcomment.ParentTable,
			Columns: []string{blogcomment.ParentColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bcuo.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   blogcomment.RepliesTable,
			Columns: []string{blogcomment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcomment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcuo.mutation.RemovedRepliesIDs(); len(nodes) > 0 && !bcuo.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   blogcomment.RepliesTable,
			Columns: []string{blogcomment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcuo.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   blogcomment.RepliesTable,
			Columns: []string{blogcomment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BlogComment{config: bcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blogcomment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bcuo.mutation.done = true
	return _node, nil
}
