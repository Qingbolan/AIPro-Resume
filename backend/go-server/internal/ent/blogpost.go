// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/blogcategory"
	"silan-backend/internal/ent/blogpost"
	"silan-backend/internal/ent/blogseries"
	"silan-backend/internal/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// BlogPost is the model entity for the BlogPost schema.
type BlogPost struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// CategoryID holds the value of the "category_id" field.
	CategoryID uuid.UUID `json:"category_id,omitempty"`
	// SeriesID holds the value of the "series_id" field.
	SeriesID uuid.UUID `json:"series_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Excerpt holds the value of the "excerpt" field.
	Excerpt string `json:"excerpt,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// ContentType holds the value of the "content_type" field.
	ContentType blogpost.ContentType `json:"content_type,omitempty"`
	// Status holds the value of the "status" field.
	Status blogpost.Status `json:"status,omitempty"`
	// IsFeatured holds the value of the "is_featured" field.
	IsFeatured bool `json:"is_featured,omitempty"`
	// FeaturedImageURL holds the value of the "featured_image_url" field.
	FeaturedImageURL string `json:"featured_image_url,omitempty"`
	// ReadingTimeMinutes holds the value of the "reading_time_minutes" field.
	ReadingTimeMinutes int `json:"reading_time_minutes,omitempty"`
	// ViewCount holds the value of the "view_count" field.
	ViewCount int `json:"view_count,omitempty"`
	// LikeCount holds the value of the "like_count" field.
	LikeCount int `json:"like_count,omitempty"`
	// CommentCount holds the value of the "comment_count" field.
	CommentCount int `json:"comment_count,omitempty"`
	// PublishedAt holds the value of the "published_at" field.
	PublishedAt time.Time `json:"published_at,omitempty"`
	// SeriesOrder holds the value of the "series_order" field.
	SeriesOrder int `json:"series_order,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BlogPostQuery when eager-loading is set.
	Edges        BlogPostEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BlogPostEdges holds the relations/edges for other nodes in the graph.
type BlogPostEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Category holds the value of the category edge.
	Category *BlogCategory `json:"category,omitempty"`
	// Series holds the value of the series edge.
	Series *BlogSeries `json:"series,omitempty"`
	// Tags holds the value of the tags edge.
	Tags []*BlogTag `json:"tags,omitempty"`
	// Translations holds the value of the translations edge.
	Translations []*BlogPostTranslation `json:"translations,omitempty"`
	// Comments holds the value of the comments edge.
	Comments []*BlogComment `json:"comments,omitempty"`
	// BlogPostTags holds the value of the blog_post_tags edge.
	BlogPostTags []*BlogPostTag `json:"blog_post_tags,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlogPostEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CategoryOrErr returns the Category value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlogPostEdges) CategoryOrErr() (*BlogCategory, error) {
	if e.Category != nil {
		return e.Category, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: blogcategory.Label}
	}
	return nil, &NotLoadedError{edge: "category"}
}

// SeriesOrErr returns the Series value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlogPostEdges) SeriesOrErr() (*BlogSeries, error) {
	if e.Series != nil {
		return e.Series, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: blogseries.Label}
	}
	return nil, &NotLoadedError{edge: "series"}
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e BlogPostEdges) TagsOrErr() ([]*BlogTag, error) {
	if e.loadedTypes[3] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// TranslationsOrErr returns the Translations value or an error if the edge
// was not loaded in eager-loading.
func (e BlogPostEdges) TranslationsOrErr() ([]*BlogPostTranslation, error) {
	if e.loadedTypes[4] {
		return e.Translations, nil
	}
	return nil, &NotLoadedError{edge: "translations"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e BlogPostEdges) CommentsOrErr() ([]*BlogComment, error) {
	if e.loadedTypes[5] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// BlogPostTagsOrErr returns the BlogPostTags value or an error if the edge
// was not loaded in eager-loading.
func (e BlogPostEdges) BlogPostTagsOrErr() ([]*BlogPostTag, error) {
	if e.loadedTypes[6] {
		return e.BlogPostTags, nil
	}
	return nil, &NotLoadedError{edge: "blog_post_tags"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BlogPost) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case blogpost.FieldIsFeatured:
			values[i] = new(sql.NullBool)
		case blogpost.FieldReadingTimeMinutes, blogpost.FieldViewCount, blogpost.FieldLikeCount, blogpost.FieldCommentCount, blogpost.FieldSeriesOrder:
			values[i] = new(sql.NullInt64)
		case blogpost.FieldTitle, blogpost.FieldSlug, blogpost.FieldExcerpt, blogpost.FieldContent, blogpost.FieldContentType, blogpost.FieldStatus, blogpost.FieldFeaturedImageURL:
			values[i] = new(sql.NullString)
		case blogpost.FieldPublishedAt, blogpost.FieldCreatedAt, blogpost.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case blogpost.FieldID, blogpost.FieldUserID, blogpost.FieldCategoryID, blogpost.FieldSeriesID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BlogPost fields.
func (bp *BlogPost) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case blogpost.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				bp.ID = *value
			}
		case blogpost.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				bp.UserID = *value
			}
		case blogpost.FieldCategoryID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value != nil {
				bp.CategoryID = *value
			}
		case blogpost.FieldSeriesID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field series_id", values[i])
			} else if value != nil {
				bp.SeriesID = *value
			}
		case blogpost.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				bp.Title = value.String
			}
		case blogpost.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				bp.Slug = value.String
			}
		case blogpost.FieldExcerpt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field excerpt", values[i])
			} else if value.Valid {
				bp.Excerpt = value.String
			}
		case blogpost.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				bp.Content = value.String
			}
		case blogpost.FieldContentType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content_type", values[i])
			} else if value.Valid {
				bp.ContentType = blogpost.ContentType(value.String)
			}
		case blogpost.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				bp.Status = blogpost.Status(value.String)
			}
		case blogpost.FieldIsFeatured:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_featured", values[i])
			} else if value.Valid {
				bp.IsFeatured = value.Bool
			}
		case blogpost.FieldFeaturedImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field featured_image_url", values[i])
			} else if value.Valid {
				bp.FeaturedImageURL = value.String
			}
		case blogpost.FieldReadingTimeMinutes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reading_time_minutes", values[i])
			} else if value.Valid {
				bp.ReadingTimeMinutes = int(value.Int64)
			}
		case blogpost.FieldViewCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field view_count", values[i])
			} else if value.Valid {
				bp.ViewCount = int(value.Int64)
			}
		case blogpost.FieldLikeCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field like_count", values[i])
			} else if value.Valid {
				bp.LikeCount = int(value.Int64)
			}
		case blogpost.FieldCommentCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field comment_count", values[i])
			} else if value.Valid {
				bp.CommentCount = int(value.Int64)
			}
		case blogpost.FieldPublishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field published_at", values[i])
			} else if value.Valid {
				bp.PublishedAt = value.Time
			}
		case blogpost.FieldSeriesOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field series_order", values[i])
			} else if value.Valid {
				bp.SeriesOrder = int(value.Int64)
			}
		case blogpost.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bp.CreatedAt = value.Time
			}
		case blogpost.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bp.UpdatedAt = value.Time
			}
		default:
			bp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BlogPost.
// This includes values selected through modifiers, order, etc.
func (bp *BlogPost) Value(name string) (ent.Value, error) {
	return bp.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the BlogPost entity.
func (bp *BlogPost) QueryUser() *UserQuery {
	return NewBlogPostClient(bp.config).QueryUser(bp)
}

// QueryCategory queries the "category" edge of the BlogPost entity.
func (bp *BlogPost) QueryCategory() *BlogCategoryQuery {
	return NewBlogPostClient(bp.config).QueryCategory(bp)
}

// QuerySeries queries the "series" edge of the BlogPost entity.
func (bp *BlogPost) QuerySeries() *BlogSeriesQuery {
	return NewBlogPostClient(bp.config).QuerySeries(bp)
}

// QueryTags queries the "tags" edge of the BlogPost entity.
func (bp *BlogPost) QueryTags() *BlogTagQuery {
	return NewBlogPostClient(bp.config).QueryTags(bp)
}

// QueryTranslations queries the "translations" edge of the BlogPost entity.
func (bp *BlogPost) QueryTranslations() *BlogPostTranslationQuery {
	return NewBlogPostClient(bp.config).QueryTranslations(bp)
}

// QueryComments queries the "comments" edge of the BlogPost entity.
func (bp *BlogPost) QueryComments() *BlogCommentQuery {
	return NewBlogPostClient(bp.config).QueryComments(bp)
}

// QueryBlogPostTags queries the "blog_post_tags" edge of the BlogPost entity.
func (bp *BlogPost) QueryBlogPostTags() *BlogPostTagQuery {
	return NewBlogPostClient(bp.config).QueryBlogPostTags(bp)
}

// Update returns a builder for updating this BlogPost.
// Note that you need to call BlogPost.Unwrap() before calling this method if this BlogPost
// was returned from a transaction, and the transaction was committed or rolled back.
func (bp *BlogPost) Update() *BlogPostUpdateOne {
	return NewBlogPostClient(bp.config).UpdateOne(bp)
}

// Unwrap unwraps the BlogPost entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bp *BlogPost) Unwrap() *BlogPost {
	_tx, ok := bp.config.driver.(*txDriver)
	if !ok {
		panic("ent: BlogPost is not a transactional entity")
	}
	bp.config.driver = _tx.drv
	return bp
}

// String implements the fmt.Stringer.
func (bp *BlogPost) String() string {
	var builder strings.Builder
	builder.WriteString("BlogPost(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bp.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", bp.UserID))
	builder.WriteString(", ")
	builder.WriteString("category_id=")
	builder.WriteString(fmt.Sprintf("%v", bp.CategoryID))
	builder.WriteString(", ")
	builder.WriteString("series_id=")
	builder.WriteString(fmt.Sprintf("%v", bp.SeriesID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(bp.Title)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(bp.Slug)
	builder.WriteString(", ")
	builder.WriteString("excerpt=")
	builder.WriteString(bp.Excerpt)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(bp.Content)
	builder.WriteString(", ")
	builder.WriteString("content_type=")
	builder.WriteString(fmt.Sprintf("%v", bp.ContentType))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", bp.Status))
	builder.WriteString(", ")
	builder.WriteString("is_featured=")
	builder.WriteString(fmt.Sprintf("%v", bp.IsFeatured))
	builder.WriteString(", ")
	builder.WriteString("featured_image_url=")
	builder.WriteString(bp.FeaturedImageURL)
	builder.WriteString(", ")
	builder.WriteString("reading_time_minutes=")
	builder.WriteString(fmt.Sprintf("%v", bp.ReadingTimeMinutes))
	builder.WriteString(", ")
	builder.WriteString("view_count=")
	builder.WriteString(fmt.Sprintf("%v", bp.ViewCount))
	builder.WriteString(", ")
	builder.WriteString("like_count=")
	builder.WriteString(fmt.Sprintf("%v", bp.LikeCount))
	builder.WriteString(", ")
	builder.WriteString("comment_count=")
	builder.WriteString(fmt.Sprintf("%v", bp.CommentCount))
	builder.WriteString(", ")
	builder.WriteString("published_at=")
	builder.WriteString(bp.PublishedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("series_order=")
	builder.WriteString(fmt.Sprintf("%v", bp.SeriesOrder))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(bp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bp.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BlogPosts is a parsable slice of BlogPost.
type BlogPosts []*BlogPost
