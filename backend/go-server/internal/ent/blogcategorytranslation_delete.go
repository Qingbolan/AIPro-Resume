// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"silan-backend/internal/ent/blogcategorytranslation"
	"silan-backend/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlogCategoryTranslationDelete is the builder for deleting a BlogCategoryTranslation entity.
type BlogCategoryTranslationDelete struct {
	config
	hooks    []Hook
	mutation *BlogCategoryTranslationMutation
}

// Where appends a list predicates to the BlogCategoryTranslationDelete builder.
func (bctd *BlogCategoryTranslationDelete) Where(ps ...predicate.BlogCategoryTranslation) *BlogCategoryTranslationDelete {
	bctd.mutation.Where(ps...)
	return bctd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bctd *BlogCategoryTranslationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, bctd.sqlExec, bctd.mutation, bctd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bctd *BlogCategoryTranslationDelete) ExecX(ctx context.Context) int {
	n, err := bctd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bctd *BlogCategoryTranslationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(blogcategorytranslation.Table, sqlgraph.NewFieldSpec(blogcategorytranslation.FieldID, field.TypeUUID))
	if ps := bctd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bctd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bctd.mutation.done = true
	return affected, err
}

// BlogCategoryTranslationDeleteOne is the builder for deleting a single BlogCategoryTranslation entity.
type BlogCategoryTranslationDeleteOne struct {
	bctd *BlogCategoryTranslationDelete
}

// Where appends a list predicates to the BlogCategoryTranslationDelete builder.
func (bctdo *BlogCategoryTranslationDeleteOne) Where(ps ...predicate.BlogCategoryTranslation) *BlogCategoryTranslationDeleteOne {
	bctdo.bctd.mutation.Where(ps...)
	return bctdo
}

// Exec executes the deletion query.
func (bctdo *BlogCategoryTranslationDeleteOne) Exec(ctx context.Context) error {
	n, err := bctdo.bctd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{blogcategorytranslation.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bctdo *BlogCategoryTranslationDeleteOne) ExecX(ctx context.Context) {
	if err := bctdo.Exec(ctx); err != nil {
		panic(err)
	}
}
