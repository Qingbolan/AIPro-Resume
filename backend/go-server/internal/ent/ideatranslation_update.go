// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/idea"
	"silan-backend/internal/ent/ideatranslation"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// IdeaTranslationUpdate is the builder for updating IdeaTranslation entities.
type IdeaTranslationUpdate struct {
	config
	hooks    []Hook
	mutation *IdeaTranslationMutation
}

// Where appends a list predicates to the IdeaTranslationUpdate builder.
func (itu *IdeaTranslationUpdate) Where(ps ...predicate.IdeaTranslation) *IdeaTranslationUpdate {
	itu.mutation.Where(ps...)
	return itu
}

// SetIdeaID sets the "idea_id" field.
func (itu *IdeaTranslationUpdate) SetIdeaID(u uuid.UUID) *IdeaTranslationUpdate {
	itu.mutation.SetIdeaID(u)
	return itu
}

// SetNillableIdeaID sets the "idea_id" field if the given value is not nil.
func (itu *IdeaTranslationUpdate) SetNillableIdeaID(u *uuid.UUID) *IdeaTranslationUpdate {
	if u != nil {
		itu.SetIdeaID(*u)
	}
	return itu
}

// SetLanguageCode sets the "language_code" field.
func (itu *IdeaTranslationUpdate) SetLanguageCode(s string) *IdeaTranslationUpdate {
	itu.mutation.SetLanguageCode(s)
	return itu
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (itu *IdeaTranslationUpdate) SetNillableLanguageCode(s *string) *IdeaTranslationUpdate {
	if s != nil {
		itu.SetLanguageCode(*s)
	}
	return itu
}

// SetTitle sets the "title" field.
func (itu *IdeaTranslationUpdate) SetTitle(s string) *IdeaTranslationUpdate {
	itu.mutation.SetTitle(s)
	return itu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (itu *IdeaTranslationUpdate) SetNillableTitle(s *string) *IdeaTranslationUpdate {
	if s != nil {
		itu.SetTitle(*s)
	}
	return itu
}

// SetAbstract sets the "abstract" field.
func (itu *IdeaTranslationUpdate) SetAbstract(s string) *IdeaTranslationUpdate {
	itu.mutation.SetAbstract(s)
	return itu
}

// SetNillableAbstract sets the "abstract" field if the given value is not nil.
func (itu *IdeaTranslationUpdate) SetNillableAbstract(s *string) *IdeaTranslationUpdate {
	if s != nil {
		itu.SetAbstract(*s)
	}
	return itu
}

// ClearAbstract clears the value of the "abstract" field.
func (itu *IdeaTranslationUpdate) ClearAbstract() *IdeaTranslationUpdate {
	itu.mutation.ClearAbstract()
	return itu
}

// SetMotivation sets the "motivation" field.
func (itu *IdeaTranslationUpdate) SetMotivation(s string) *IdeaTranslationUpdate {
	itu.mutation.SetMotivation(s)
	return itu
}

// SetNillableMotivation sets the "motivation" field if the given value is not nil.
func (itu *IdeaTranslationUpdate) SetNillableMotivation(s *string) *IdeaTranslationUpdate {
	if s != nil {
		itu.SetMotivation(*s)
	}
	return itu
}

// ClearMotivation clears the value of the "motivation" field.
func (itu *IdeaTranslationUpdate) ClearMotivation() *IdeaTranslationUpdate {
	itu.mutation.ClearMotivation()
	return itu
}

// SetMethodology sets the "methodology" field.
func (itu *IdeaTranslationUpdate) SetMethodology(s string) *IdeaTranslationUpdate {
	itu.mutation.SetMethodology(s)
	return itu
}

// SetNillableMethodology sets the "methodology" field if the given value is not nil.
func (itu *IdeaTranslationUpdate) SetNillableMethodology(s *string) *IdeaTranslationUpdate {
	if s != nil {
		itu.SetMethodology(*s)
	}
	return itu
}

// ClearMethodology clears the value of the "methodology" field.
func (itu *IdeaTranslationUpdate) ClearMethodology() *IdeaTranslationUpdate {
	itu.mutation.ClearMethodology()
	return itu
}

// SetExpectedOutcome sets the "expected_outcome" field.
func (itu *IdeaTranslationUpdate) SetExpectedOutcome(s string) *IdeaTranslationUpdate {
	itu.mutation.SetExpectedOutcome(s)
	return itu
}

// SetNillableExpectedOutcome sets the "expected_outcome" field if the given value is not nil.
func (itu *IdeaTranslationUpdate) SetNillableExpectedOutcome(s *string) *IdeaTranslationUpdate {
	if s != nil {
		itu.SetExpectedOutcome(*s)
	}
	return itu
}

// ClearExpectedOutcome clears the value of the "expected_outcome" field.
func (itu *IdeaTranslationUpdate) ClearExpectedOutcome() *IdeaTranslationUpdate {
	itu.mutation.ClearExpectedOutcome()
	return itu
}

// SetRequiredResources sets the "required_resources" field.
func (itu *IdeaTranslationUpdate) SetRequiredResources(s string) *IdeaTranslationUpdate {
	itu.mutation.SetRequiredResources(s)
	return itu
}

// SetNillableRequiredResources sets the "required_resources" field if the given value is not nil.
func (itu *IdeaTranslationUpdate) SetNillableRequiredResources(s *string) *IdeaTranslationUpdate {
	if s != nil {
		itu.SetRequiredResources(*s)
	}
	return itu
}

// ClearRequiredResources clears the value of the "required_resources" field.
func (itu *IdeaTranslationUpdate) ClearRequiredResources() *IdeaTranslationUpdate {
	itu.mutation.ClearRequiredResources()
	return itu
}

// SetIdea sets the "idea" edge to the Idea entity.
func (itu *IdeaTranslationUpdate) SetIdea(i *Idea) *IdeaTranslationUpdate {
	return itu.SetIdeaID(i.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (itu *IdeaTranslationUpdate) SetLanguageID(id string) *IdeaTranslationUpdate {
	itu.mutation.SetLanguageID(id)
	return itu
}

// SetLanguage sets the "language" edge to the Language entity.
func (itu *IdeaTranslationUpdate) SetLanguage(l *Language) *IdeaTranslationUpdate {
	return itu.SetLanguageID(l.ID)
}

// Mutation returns the IdeaTranslationMutation object of the builder.
func (itu *IdeaTranslationUpdate) Mutation() *IdeaTranslationMutation {
	return itu.mutation
}

// ClearIdea clears the "idea" edge to the Idea entity.
func (itu *IdeaTranslationUpdate) ClearIdea() *IdeaTranslationUpdate {
	itu.mutation.ClearIdea()
	return itu
}

// ClearLanguage clears the "language" edge to the Language entity.
func (itu *IdeaTranslationUpdate) ClearLanguage() *IdeaTranslationUpdate {
	itu.mutation.ClearLanguage()
	return itu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (itu *IdeaTranslationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, itu.sqlSave, itu.mutation, itu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (itu *IdeaTranslationUpdate) SaveX(ctx context.Context) int {
	affected, err := itu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (itu *IdeaTranslationUpdate) Exec(ctx context.Context) error {
	_, err := itu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itu *IdeaTranslationUpdate) ExecX(ctx context.Context) {
	if err := itu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (itu *IdeaTranslationUpdate) check() error {
	if v, ok := itu.mutation.LanguageCode(); ok {
		if err := ideatranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "IdeaTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := itu.mutation.Title(); ok {
		if err := ideatranslation.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "IdeaTranslation.title": %w`, err)}
		}
	}
	if itu.mutation.IdeaCleared() && len(itu.mutation.IdeaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IdeaTranslation.idea"`)
	}
	if itu.mutation.LanguageCleared() && len(itu.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IdeaTranslation.language"`)
	}
	return nil
}

func (itu *IdeaTranslationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := itu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ideatranslation.Table, ideatranslation.Columns, sqlgraph.NewFieldSpec(ideatranslation.FieldID, field.TypeUUID))
	if ps := itu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := itu.mutation.Title(); ok {
		_spec.SetField(ideatranslation.FieldTitle, field.TypeString, value)
	}
	if value, ok := itu.mutation.Abstract(); ok {
		_spec.SetField(ideatranslation.FieldAbstract, field.TypeString, value)
	}
	if itu.mutation.AbstractCleared() {
		_spec.ClearField(ideatranslation.FieldAbstract, field.TypeString)
	}
	if value, ok := itu.mutation.Motivation(); ok {
		_spec.SetField(ideatranslation.FieldMotivation, field.TypeString, value)
	}
	if itu.mutation.MotivationCleared() {
		_spec.ClearField(ideatranslation.FieldMotivation, field.TypeString)
	}
	if value, ok := itu.mutation.Methodology(); ok {
		_spec.SetField(ideatranslation.FieldMethodology, field.TypeString, value)
	}
	if itu.mutation.MethodologyCleared() {
		_spec.ClearField(ideatranslation.FieldMethodology, field.TypeString)
	}
	if value, ok := itu.mutation.ExpectedOutcome(); ok {
		_spec.SetField(ideatranslation.FieldExpectedOutcome, field.TypeString, value)
	}
	if itu.mutation.ExpectedOutcomeCleared() {
		_spec.ClearField(ideatranslation.FieldExpectedOutcome, field.TypeString)
	}
	if value, ok := itu.mutation.RequiredResources(); ok {
		_spec.SetField(ideatranslation.FieldRequiredResources, field.TypeString, value)
	}
	if itu.mutation.RequiredResourcesCleared() {
		_spec.ClearField(ideatranslation.FieldRequiredResources, field.TypeString)
	}
	if itu.mutation.IdeaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ideatranslation.IdeaTable,
			Columns: []string{ideatranslation.IdeaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := itu.mutation.IdeaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ideatranslation.IdeaTable,
			Columns: []string{ideatranslation.IdeaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if itu.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ideatranslation.LanguageTable,
			Columns: []string{ideatranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := itu.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ideatranslation.LanguageTable,
			Columns: []string{ideatranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, itu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ideatranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	itu.mutation.done = true
	return n, nil
}

// IdeaTranslationUpdateOne is the builder for updating a single IdeaTranslation entity.
type IdeaTranslationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IdeaTranslationMutation
}

// SetIdeaID sets the "idea_id" field.
func (ituo *IdeaTranslationUpdateOne) SetIdeaID(u uuid.UUID) *IdeaTranslationUpdateOne {
	ituo.mutation.SetIdeaID(u)
	return ituo
}

// SetNillableIdeaID sets the "idea_id" field if the given value is not nil.
func (ituo *IdeaTranslationUpdateOne) SetNillableIdeaID(u *uuid.UUID) *IdeaTranslationUpdateOne {
	if u != nil {
		ituo.SetIdeaID(*u)
	}
	return ituo
}

// SetLanguageCode sets the "language_code" field.
func (ituo *IdeaTranslationUpdateOne) SetLanguageCode(s string) *IdeaTranslationUpdateOne {
	ituo.mutation.SetLanguageCode(s)
	return ituo
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (ituo *IdeaTranslationUpdateOne) SetNillableLanguageCode(s *string) *IdeaTranslationUpdateOne {
	if s != nil {
		ituo.SetLanguageCode(*s)
	}
	return ituo
}

// SetTitle sets the "title" field.
func (ituo *IdeaTranslationUpdateOne) SetTitle(s string) *IdeaTranslationUpdateOne {
	ituo.mutation.SetTitle(s)
	return ituo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ituo *IdeaTranslationUpdateOne) SetNillableTitle(s *string) *IdeaTranslationUpdateOne {
	if s != nil {
		ituo.SetTitle(*s)
	}
	return ituo
}

// SetAbstract sets the "abstract" field.
func (ituo *IdeaTranslationUpdateOne) SetAbstract(s string) *IdeaTranslationUpdateOne {
	ituo.mutation.SetAbstract(s)
	return ituo
}

// SetNillableAbstract sets the "abstract" field if the given value is not nil.
func (ituo *IdeaTranslationUpdateOne) SetNillableAbstract(s *string) *IdeaTranslationUpdateOne {
	if s != nil {
		ituo.SetAbstract(*s)
	}
	return ituo
}

// ClearAbstract clears the value of the "abstract" field.
func (ituo *IdeaTranslationUpdateOne) ClearAbstract() *IdeaTranslationUpdateOne {
	ituo.mutation.ClearAbstract()
	return ituo
}

// SetMotivation sets the "motivation" field.
func (ituo *IdeaTranslationUpdateOne) SetMotivation(s string) *IdeaTranslationUpdateOne {
	ituo.mutation.SetMotivation(s)
	return ituo
}

// SetNillableMotivation sets the "motivation" field if the given value is not nil.
func (ituo *IdeaTranslationUpdateOne) SetNillableMotivation(s *string) *IdeaTranslationUpdateOne {
	if s != nil {
		ituo.SetMotivation(*s)
	}
	return ituo
}

// ClearMotivation clears the value of the "motivation" field.
func (ituo *IdeaTranslationUpdateOne) ClearMotivation() *IdeaTranslationUpdateOne {
	ituo.mutation.ClearMotivation()
	return ituo
}

// SetMethodology sets the "methodology" field.
func (ituo *IdeaTranslationUpdateOne) SetMethodology(s string) *IdeaTranslationUpdateOne {
	ituo.mutation.SetMethodology(s)
	return ituo
}

// SetNillableMethodology sets the "methodology" field if the given value is not nil.
func (ituo *IdeaTranslationUpdateOne) SetNillableMethodology(s *string) *IdeaTranslationUpdateOne {
	if s != nil {
		ituo.SetMethodology(*s)
	}
	return ituo
}

// ClearMethodology clears the value of the "methodology" field.
func (ituo *IdeaTranslationUpdateOne) ClearMethodology() *IdeaTranslationUpdateOne {
	ituo.mutation.ClearMethodology()
	return ituo
}

// SetExpectedOutcome sets the "expected_outcome" field.
func (ituo *IdeaTranslationUpdateOne) SetExpectedOutcome(s string) *IdeaTranslationUpdateOne {
	ituo.mutation.SetExpectedOutcome(s)
	return ituo
}

// SetNillableExpectedOutcome sets the "expected_outcome" field if the given value is not nil.
func (ituo *IdeaTranslationUpdateOne) SetNillableExpectedOutcome(s *string) *IdeaTranslationUpdateOne {
	if s != nil {
		ituo.SetExpectedOutcome(*s)
	}
	return ituo
}

// ClearExpectedOutcome clears the value of the "expected_outcome" field.
func (ituo *IdeaTranslationUpdateOne) ClearExpectedOutcome() *IdeaTranslationUpdateOne {
	ituo.mutation.ClearExpectedOutcome()
	return ituo
}

// SetRequiredResources sets the "required_resources" field.
func (ituo *IdeaTranslationUpdateOne) SetRequiredResources(s string) *IdeaTranslationUpdateOne {
	ituo.mutation.SetRequiredResources(s)
	return ituo
}

// SetNillableRequiredResources sets the "required_resources" field if the given value is not nil.
func (ituo *IdeaTranslationUpdateOne) SetNillableRequiredResources(s *string) *IdeaTranslationUpdateOne {
	if s != nil {
		ituo.SetRequiredResources(*s)
	}
	return ituo
}

// ClearRequiredResources clears the value of the "required_resources" field.
func (ituo *IdeaTranslationUpdateOne) ClearRequiredResources() *IdeaTranslationUpdateOne {
	ituo.mutation.ClearRequiredResources()
	return ituo
}

// SetIdea sets the "idea" edge to the Idea entity.
func (ituo *IdeaTranslationUpdateOne) SetIdea(i *Idea) *IdeaTranslationUpdateOne {
	return ituo.SetIdeaID(i.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (ituo *IdeaTranslationUpdateOne) SetLanguageID(id string) *IdeaTranslationUpdateOne {
	ituo.mutation.SetLanguageID(id)
	return ituo
}

// SetLanguage sets the "language" edge to the Language entity.
func (ituo *IdeaTranslationUpdateOne) SetLanguage(l *Language) *IdeaTranslationUpdateOne {
	return ituo.SetLanguageID(l.ID)
}

// Mutation returns the IdeaTranslationMutation object of the builder.
func (ituo *IdeaTranslationUpdateOne) Mutation() *IdeaTranslationMutation {
	return ituo.mutation
}

// ClearIdea clears the "idea" edge to the Idea entity.
func (ituo *IdeaTranslationUpdateOne) ClearIdea() *IdeaTranslationUpdateOne {
	ituo.mutation.ClearIdea()
	return ituo
}

// ClearLanguage clears the "language" edge to the Language entity.
func (ituo *IdeaTranslationUpdateOne) ClearLanguage() *IdeaTranslationUpdateOne {
	ituo.mutation.ClearLanguage()
	return ituo
}

// Where appends a list predicates to the IdeaTranslationUpdate builder.
func (ituo *IdeaTranslationUpdateOne) Where(ps ...predicate.IdeaTranslation) *IdeaTranslationUpdateOne {
	ituo.mutation.Where(ps...)
	return ituo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ituo *IdeaTranslationUpdateOne) Select(field string, fields ...string) *IdeaTranslationUpdateOne {
	ituo.fields = append([]string{field}, fields...)
	return ituo
}

// Save executes the query and returns the updated IdeaTranslation entity.
func (ituo *IdeaTranslationUpdateOne) Save(ctx context.Context) (*IdeaTranslation, error) {
	return withHooks(ctx, ituo.sqlSave, ituo.mutation, ituo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ituo *IdeaTranslationUpdateOne) SaveX(ctx context.Context) *IdeaTranslation {
	node, err := ituo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ituo *IdeaTranslationUpdateOne) Exec(ctx context.Context) error {
	_, err := ituo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ituo *IdeaTranslationUpdateOne) ExecX(ctx context.Context) {
	if err := ituo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ituo *IdeaTranslationUpdateOne) check() error {
	if v, ok := ituo.mutation.LanguageCode(); ok {
		if err := ideatranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "IdeaTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := ituo.mutation.Title(); ok {
		if err := ideatranslation.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "IdeaTranslation.title": %w`, err)}
		}
	}
	if ituo.mutation.IdeaCleared() && len(ituo.mutation.IdeaIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IdeaTranslation.idea"`)
	}
	if ituo.mutation.LanguageCleared() && len(ituo.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IdeaTranslation.language"`)
	}
	return nil
}

func (ituo *IdeaTranslationUpdateOne) sqlSave(ctx context.Context) (_node *IdeaTranslation, err error) {
	if err := ituo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ideatranslation.Table, ideatranslation.Columns, sqlgraph.NewFieldSpec(ideatranslation.FieldID, field.TypeUUID))
	id, ok := ituo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IdeaTranslation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ituo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ideatranslation.FieldID)
		for _, f := range fields {
			if !ideatranslation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ideatranslation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ituo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ituo.mutation.Title(); ok {
		_spec.SetField(ideatranslation.FieldTitle, field.TypeString, value)
	}
	if value, ok := ituo.mutation.Abstract(); ok {
		_spec.SetField(ideatranslation.FieldAbstract, field.TypeString, value)
	}
	if ituo.mutation.AbstractCleared() {
		_spec.ClearField(ideatranslation.FieldAbstract, field.TypeString)
	}
	if value, ok := ituo.mutation.Motivation(); ok {
		_spec.SetField(ideatranslation.FieldMotivation, field.TypeString, value)
	}
	if ituo.mutation.MotivationCleared() {
		_spec.ClearField(ideatranslation.FieldMotivation, field.TypeString)
	}
	if value, ok := ituo.mutation.Methodology(); ok {
		_spec.SetField(ideatranslation.FieldMethodology, field.TypeString, value)
	}
	if ituo.mutation.MethodologyCleared() {
		_spec.ClearField(ideatranslation.FieldMethodology, field.TypeString)
	}
	if value, ok := ituo.mutation.ExpectedOutcome(); ok {
		_spec.SetField(ideatranslation.FieldExpectedOutcome, field.TypeString, value)
	}
	if ituo.mutation.ExpectedOutcomeCleared() {
		_spec.ClearField(ideatranslation.FieldExpectedOutcome, field.TypeString)
	}
	if value, ok := ituo.mutation.RequiredResources(); ok {
		_spec.SetField(ideatranslation.FieldRequiredResources, field.TypeString, value)
	}
	if ituo.mutation.RequiredResourcesCleared() {
		_spec.ClearField(ideatranslation.FieldRequiredResources, field.TypeString)
	}
	if ituo.mutation.IdeaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ideatranslation.IdeaTable,
			Columns: []string{ideatranslation.IdeaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ituo.mutation.IdeaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ideatranslation.IdeaTable,
			Columns: []string{ideatranslation.IdeaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ituo.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ideatranslation.LanguageTable,
			Columns: []string{ideatranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ituo.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ideatranslation.LanguageTable,
			Columns: []string{ideatranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &IdeaTranslation{config: ituo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ituo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ideatranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ituo.mutation.done = true
	return _node, nil
}
