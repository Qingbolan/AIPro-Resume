// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/publication"
	"silan-backend/internal/ent/publicationauthor"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PublicationAuthorCreate is the builder for creating a PublicationAuthor entity.
type PublicationAuthorCreate struct {
	config
	mutation *PublicationAuthorMutation
	hooks    []Hook
}

// SetPublicationID sets the "publication_id" field.
func (pac *PublicationAuthorCreate) SetPublicationID(u uuid.UUID) *PublicationAuthorCreate {
	pac.mutation.SetPublicationID(u)
	return pac
}

// SetAuthorName sets the "author_name" field.
func (pac *PublicationAuthorCreate) SetAuthorName(s string) *PublicationAuthorCreate {
	pac.mutation.SetAuthorName(s)
	return pac
}

// SetAuthorOrder sets the "author_order" field.
func (pac *PublicationAuthorCreate) SetAuthorOrder(i int) *PublicationAuthorCreate {
	pac.mutation.SetAuthorOrder(i)
	return pac
}

// SetIsCorresponding sets the "is_corresponding" field.
func (pac *PublicationAuthorCreate) SetIsCorresponding(b bool) *PublicationAuthorCreate {
	pac.mutation.SetIsCorresponding(b)
	return pac
}

// SetNillableIsCorresponding sets the "is_corresponding" field if the given value is not nil.
func (pac *PublicationAuthorCreate) SetNillableIsCorresponding(b *bool) *PublicationAuthorCreate {
	if b != nil {
		pac.SetIsCorresponding(*b)
	}
	return pac
}

// SetAffiliation sets the "affiliation" field.
func (pac *PublicationAuthorCreate) SetAffiliation(s string) *PublicationAuthorCreate {
	pac.mutation.SetAffiliation(s)
	return pac
}

// SetNillableAffiliation sets the "affiliation" field if the given value is not nil.
func (pac *PublicationAuthorCreate) SetNillableAffiliation(s *string) *PublicationAuthorCreate {
	if s != nil {
		pac.SetAffiliation(*s)
	}
	return pac
}

// SetCreatedAt sets the "created_at" field.
func (pac *PublicationAuthorCreate) SetCreatedAt(t time.Time) *PublicationAuthorCreate {
	pac.mutation.SetCreatedAt(t)
	return pac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pac *PublicationAuthorCreate) SetNillableCreatedAt(t *time.Time) *PublicationAuthorCreate {
	if t != nil {
		pac.SetCreatedAt(*t)
	}
	return pac
}

// SetUpdatedAt sets the "updated_at" field.
func (pac *PublicationAuthorCreate) SetUpdatedAt(t time.Time) *PublicationAuthorCreate {
	pac.mutation.SetUpdatedAt(t)
	return pac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pac *PublicationAuthorCreate) SetNillableUpdatedAt(t *time.Time) *PublicationAuthorCreate {
	if t != nil {
		pac.SetUpdatedAt(*t)
	}
	return pac
}

// SetID sets the "id" field.
func (pac *PublicationAuthorCreate) SetID(u uuid.UUID) *PublicationAuthorCreate {
	pac.mutation.SetID(u)
	return pac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pac *PublicationAuthorCreate) SetNillableID(u *uuid.UUID) *PublicationAuthorCreate {
	if u != nil {
		pac.SetID(*u)
	}
	return pac
}

// SetPublication sets the "publication" edge to the Publication entity.
func (pac *PublicationAuthorCreate) SetPublication(p *Publication) *PublicationAuthorCreate {
	return pac.SetPublicationID(p.ID)
}

// Mutation returns the PublicationAuthorMutation object of the builder.
func (pac *PublicationAuthorCreate) Mutation() *PublicationAuthorMutation {
	return pac.mutation
}

// Save creates the PublicationAuthor in the database.
func (pac *PublicationAuthorCreate) Save(ctx context.Context) (*PublicationAuthor, error) {
	pac.defaults()
	return withHooks(ctx, pac.sqlSave, pac.mutation, pac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pac *PublicationAuthorCreate) SaveX(ctx context.Context) *PublicationAuthor {
	v, err := pac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pac *PublicationAuthorCreate) Exec(ctx context.Context) error {
	_, err := pac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pac *PublicationAuthorCreate) ExecX(ctx context.Context) {
	if err := pac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pac *PublicationAuthorCreate) defaults() {
	if _, ok := pac.mutation.IsCorresponding(); !ok {
		v := publicationauthor.DefaultIsCorresponding
		pac.mutation.SetIsCorresponding(v)
	}
	if _, ok := pac.mutation.CreatedAt(); !ok {
		v := publicationauthor.DefaultCreatedAt()
		pac.mutation.SetCreatedAt(v)
	}
	if _, ok := pac.mutation.UpdatedAt(); !ok {
		v := publicationauthor.DefaultUpdatedAt()
		pac.mutation.SetUpdatedAt(v)
	}
	if _, ok := pac.mutation.ID(); !ok {
		v := publicationauthor.DefaultID()
		pac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pac *PublicationAuthorCreate) check() error {
	if _, ok := pac.mutation.PublicationID(); !ok {
		return &ValidationError{Name: "publication_id", err: errors.New(`ent: missing required field "PublicationAuthor.publication_id"`)}
	}
	if _, ok := pac.mutation.AuthorName(); !ok {
		return &ValidationError{Name: "author_name", err: errors.New(`ent: missing required field "PublicationAuthor.author_name"`)}
	}
	if v, ok := pac.mutation.AuthorName(); ok {
		if err := publicationauthor.AuthorNameValidator(v); err != nil {
			return &ValidationError{Name: "author_name", err: fmt.Errorf(`ent: validator failed for field "PublicationAuthor.author_name": %w`, err)}
		}
	}
	if _, ok := pac.mutation.AuthorOrder(); !ok {
		return &ValidationError{Name: "author_order", err: errors.New(`ent: missing required field "PublicationAuthor.author_order"`)}
	}
	if _, ok := pac.mutation.IsCorresponding(); !ok {
		return &ValidationError{Name: "is_corresponding", err: errors.New(`ent: missing required field "PublicationAuthor.is_corresponding"`)}
	}
	if v, ok := pac.mutation.Affiliation(); ok {
		if err := publicationauthor.AffiliationValidator(v); err != nil {
			return &ValidationError{Name: "affiliation", err: fmt.Errorf(`ent: validator failed for field "PublicationAuthor.affiliation": %w`, err)}
		}
	}
	if _, ok := pac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PublicationAuthor.created_at"`)}
	}
	if _, ok := pac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PublicationAuthor.updated_at"`)}
	}
	if len(pac.mutation.PublicationIDs()) == 0 {
		return &ValidationError{Name: "publication", err: errors.New(`ent: missing required edge "PublicationAuthor.publication"`)}
	}
	return nil
}

func (pac *PublicationAuthorCreate) sqlSave(ctx context.Context) (*PublicationAuthor, error) {
	if err := pac.check(); err != nil {
		return nil, err
	}
	_node, _spec := pac.createSpec()
	if err := sqlgraph.CreateNode(ctx, pac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pac.mutation.id = &_node.ID
	pac.mutation.done = true
	return _node, nil
}

func (pac *PublicationAuthorCreate) createSpec() (*PublicationAuthor, *sqlgraph.CreateSpec) {
	var (
		_node = &PublicationAuthor{config: pac.config}
		_spec = sqlgraph.NewCreateSpec(publicationauthor.Table, sqlgraph.NewFieldSpec(publicationauthor.FieldID, field.TypeUUID))
	)
	if id, ok := pac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pac.mutation.AuthorName(); ok {
		_spec.SetField(publicationauthor.FieldAuthorName, field.TypeString, value)
		_node.AuthorName = value
	}
	if value, ok := pac.mutation.AuthorOrder(); ok {
		_spec.SetField(publicationauthor.FieldAuthorOrder, field.TypeInt, value)
		_node.AuthorOrder = value
	}
	if value, ok := pac.mutation.IsCorresponding(); ok {
		_spec.SetField(publicationauthor.FieldIsCorresponding, field.TypeBool, value)
		_node.IsCorresponding = value
	}
	if value, ok := pac.mutation.Affiliation(); ok {
		_spec.SetField(publicationauthor.FieldAffiliation, field.TypeString, value)
		_node.Affiliation = value
	}
	if value, ok := pac.mutation.CreatedAt(); ok {
		_spec.SetField(publicationauthor.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pac.mutation.UpdatedAt(); ok {
		_spec.SetField(publicationauthor.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pac.mutation.PublicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   publicationauthor.PublicationTable,
			Columns: []string{publicationauthor.PublicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publication.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PublicationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PublicationAuthorCreateBulk is the builder for creating many PublicationAuthor entities in bulk.
type PublicationAuthorCreateBulk struct {
	config
	err      error
	builders []*PublicationAuthorCreate
}

// Save creates the PublicationAuthor entities in the database.
func (pacb *PublicationAuthorCreateBulk) Save(ctx context.Context) ([]*PublicationAuthor, error) {
	if pacb.err != nil {
		return nil, pacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pacb.builders))
	nodes := make([]*PublicationAuthor, len(pacb.builders))
	mutators := make([]Mutator, len(pacb.builders))
	for i := range pacb.builders {
		func(i int, root context.Context) {
			builder := pacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PublicationAuthorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pacb *PublicationAuthorCreateBulk) SaveX(ctx context.Context) []*PublicationAuthor {
	v, err := pacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pacb *PublicationAuthorCreateBulk) Exec(ctx context.Context) error {
	_, err := pacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pacb *PublicationAuthorCreateBulk) ExecX(ctx context.Context) {
	if err := pacb.Exec(ctx); err != nil {
		panic(err)
	}
}
