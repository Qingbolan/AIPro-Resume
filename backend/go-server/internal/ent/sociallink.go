// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/personalinfo"
	"silan-backend/internal/ent/sociallink"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// SocialLink is the model entity for the SocialLink schema.
type SocialLink struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// PersonalInfoID holds the value of the "personal_info_id" field.
	PersonalInfoID uuid.UUID `json:"personal_info_id,omitempty"`
	// Platform holds the value of the "platform" field.
	Platform string `json:"platform,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// SortOrder holds the value of the "sort_order" field.
	SortOrder int `json:"sort_order,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SocialLinkQuery when eager-loading is set.
	Edges        SocialLinkEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SocialLinkEdges holds the relations/edges for other nodes in the graph.
type SocialLinkEdges struct {
	// PersonalInfo holds the value of the personal_info edge.
	PersonalInfo *PersonalInfo `json:"personal_info,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PersonalInfoOrErr returns the PersonalInfo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SocialLinkEdges) PersonalInfoOrErr() (*PersonalInfo, error) {
	if e.PersonalInfo != nil {
		return e.PersonalInfo, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: personalinfo.Label}
	}
	return nil, &NotLoadedError{edge: "personal_info"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SocialLink) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sociallink.FieldIsActive:
			values[i] = new(sql.NullBool)
		case sociallink.FieldSortOrder:
			values[i] = new(sql.NullInt64)
		case sociallink.FieldPlatform, sociallink.FieldURL, sociallink.FieldDisplayName:
			values[i] = new(sql.NullString)
		case sociallink.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case sociallink.FieldID, sociallink.FieldPersonalInfoID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SocialLink fields.
func (sl *SocialLink) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sociallink.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sl.ID = *value
			}
		case sociallink.FieldPersonalInfoID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field personal_info_id", values[i])
			} else if value != nil {
				sl.PersonalInfoID = *value
			}
		case sociallink.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				sl.Platform = value.String
			}
		case sociallink.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				sl.URL = value.String
			}
		case sociallink.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				sl.DisplayName = value.String
			}
		case sociallink.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				sl.IsActive = value.Bool
			}
		case sociallink.FieldSortOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_order", values[i])
			} else if value.Valid {
				sl.SortOrder = int(value.Int64)
			}
		case sociallink.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sl.CreatedAt = value.Time
			}
		default:
			sl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SocialLink.
// This includes values selected through modifiers, order, etc.
func (sl *SocialLink) Value(name string) (ent.Value, error) {
	return sl.selectValues.Get(name)
}

// QueryPersonalInfo queries the "personal_info" edge of the SocialLink entity.
func (sl *SocialLink) QueryPersonalInfo() *PersonalInfoQuery {
	return NewSocialLinkClient(sl.config).QueryPersonalInfo(sl)
}

// Update returns a builder for updating this SocialLink.
// Note that you need to call SocialLink.Unwrap() before calling this method if this SocialLink
// was returned from a transaction, and the transaction was committed or rolled back.
func (sl *SocialLink) Update() *SocialLinkUpdateOne {
	return NewSocialLinkClient(sl.config).UpdateOne(sl)
}

// Unwrap unwraps the SocialLink entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sl *SocialLink) Unwrap() *SocialLink {
	_tx, ok := sl.config.driver.(*txDriver)
	if !ok {
		panic("ent: SocialLink is not a transactional entity")
	}
	sl.config.driver = _tx.drv
	return sl
}

// String implements the fmt.Stringer.
func (sl *SocialLink) String() string {
	var builder strings.Builder
	builder.WriteString("SocialLink(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sl.ID))
	builder.WriteString("personal_info_id=")
	builder.WriteString(fmt.Sprintf("%v", sl.PersonalInfoID))
	builder.WriteString(", ")
	builder.WriteString("platform=")
	builder.WriteString(sl.Platform)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(sl.URL)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(sl.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", sl.IsActive))
	builder.WriteString(", ")
	builder.WriteString("sort_order=")
	builder.WriteString(fmt.Sprintf("%v", sl.SortOrder))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sl.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SocialLinks is a parsable slice of SocialLink.
type SocialLinks []*SocialLink
