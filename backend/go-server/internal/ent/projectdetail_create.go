// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/projectdetail"
	"silan-backend/internal/ent/projectdetailtranslation"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProjectDetailCreate is the builder for creating a ProjectDetail entity.
type ProjectDetailCreate struct {
	config
	mutation *ProjectDetailMutation
	hooks    []Hook
}

// SetProjectID sets the "project_id" field.
func (pdc *ProjectDetailCreate) SetProjectID(u uuid.UUID) *ProjectDetailCreate {
	pdc.mutation.SetProjectID(u)
	return pdc
}

// SetDetailedDescription sets the "detailed_description" field.
func (pdc *ProjectDetailCreate) SetDetailedDescription(s string) *ProjectDetailCreate {
	pdc.mutation.SetDetailedDescription(s)
	return pdc
}

// SetNillableDetailedDescription sets the "detailed_description" field if the given value is not nil.
func (pdc *ProjectDetailCreate) SetNillableDetailedDescription(s *string) *ProjectDetailCreate {
	if s != nil {
		pdc.SetDetailedDescription(*s)
	}
	return pdc
}

// SetGoals sets the "goals" field.
func (pdc *ProjectDetailCreate) SetGoals(s string) *ProjectDetailCreate {
	pdc.mutation.SetGoals(s)
	return pdc
}

// SetNillableGoals sets the "goals" field if the given value is not nil.
func (pdc *ProjectDetailCreate) SetNillableGoals(s *string) *ProjectDetailCreate {
	if s != nil {
		pdc.SetGoals(*s)
	}
	return pdc
}

// SetChallenges sets the "challenges" field.
func (pdc *ProjectDetailCreate) SetChallenges(s string) *ProjectDetailCreate {
	pdc.mutation.SetChallenges(s)
	return pdc
}

// SetNillableChallenges sets the "challenges" field if the given value is not nil.
func (pdc *ProjectDetailCreate) SetNillableChallenges(s *string) *ProjectDetailCreate {
	if s != nil {
		pdc.SetChallenges(*s)
	}
	return pdc
}

// SetSolutions sets the "solutions" field.
func (pdc *ProjectDetailCreate) SetSolutions(s string) *ProjectDetailCreate {
	pdc.mutation.SetSolutions(s)
	return pdc
}

// SetNillableSolutions sets the "solutions" field if the given value is not nil.
func (pdc *ProjectDetailCreate) SetNillableSolutions(s *string) *ProjectDetailCreate {
	if s != nil {
		pdc.SetSolutions(*s)
	}
	return pdc
}

// SetLessonsLearned sets the "lessons_learned" field.
func (pdc *ProjectDetailCreate) SetLessonsLearned(s string) *ProjectDetailCreate {
	pdc.mutation.SetLessonsLearned(s)
	return pdc
}

// SetNillableLessonsLearned sets the "lessons_learned" field if the given value is not nil.
func (pdc *ProjectDetailCreate) SetNillableLessonsLearned(s *string) *ProjectDetailCreate {
	if s != nil {
		pdc.SetLessonsLearned(*s)
	}
	return pdc
}

// SetFutureEnhancements sets the "future_enhancements" field.
func (pdc *ProjectDetailCreate) SetFutureEnhancements(s string) *ProjectDetailCreate {
	pdc.mutation.SetFutureEnhancements(s)
	return pdc
}

// SetNillableFutureEnhancements sets the "future_enhancements" field if the given value is not nil.
func (pdc *ProjectDetailCreate) SetNillableFutureEnhancements(s *string) *ProjectDetailCreate {
	if s != nil {
		pdc.SetFutureEnhancements(*s)
	}
	return pdc
}

// SetLicense sets the "license" field.
func (pdc *ProjectDetailCreate) SetLicense(s string) *ProjectDetailCreate {
	pdc.mutation.SetLicense(s)
	return pdc
}

// SetNillableLicense sets the "license" field if the given value is not nil.
func (pdc *ProjectDetailCreate) SetNillableLicense(s *string) *ProjectDetailCreate {
	if s != nil {
		pdc.SetLicense(*s)
	}
	return pdc
}

// SetVersion sets the "version" field.
func (pdc *ProjectDetailCreate) SetVersion(s string) *ProjectDetailCreate {
	pdc.mutation.SetVersion(s)
	return pdc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pdc *ProjectDetailCreate) SetNillableVersion(s *string) *ProjectDetailCreate {
	if s != nil {
		pdc.SetVersion(*s)
	}
	return pdc
}

// SetCreatedAt sets the "created_at" field.
func (pdc *ProjectDetailCreate) SetCreatedAt(t time.Time) *ProjectDetailCreate {
	pdc.mutation.SetCreatedAt(t)
	return pdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pdc *ProjectDetailCreate) SetNillableCreatedAt(t *time.Time) *ProjectDetailCreate {
	if t != nil {
		pdc.SetCreatedAt(*t)
	}
	return pdc
}

// SetUpdatedAt sets the "updated_at" field.
func (pdc *ProjectDetailCreate) SetUpdatedAt(t time.Time) *ProjectDetailCreate {
	pdc.mutation.SetUpdatedAt(t)
	return pdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pdc *ProjectDetailCreate) SetNillableUpdatedAt(t *time.Time) *ProjectDetailCreate {
	if t != nil {
		pdc.SetUpdatedAt(*t)
	}
	return pdc
}

// SetID sets the "id" field.
func (pdc *ProjectDetailCreate) SetID(u uuid.UUID) *ProjectDetailCreate {
	pdc.mutation.SetID(u)
	return pdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pdc *ProjectDetailCreate) SetNillableID(u *uuid.UUID) *ProjectDetailCreate {
	if u != nil {
		pdc.SetID(*u)
	}
	return pdc
}

// SetProject sets the "project" edge to the Project entity.
func (pdc *ProjectDetailCreate) SetProject(p *Project) *ProjectDetailCreate {
	return pdc.SetProjectID(p.ID)
}

// AddTranslationIDs adds the "translations" edge to the ProjectDetailTranslation entity by IDs.
func (pdc *ProjectDetailCreate) AddTranslationIDs(ids ...uuid.UUID) *ProjectDetailCreate {
	pdc.mutation.AddTranslationIDs(ids...)
	return pdc
}

// AddTranslations adds the "translations" edges to the ProjectDetailTranslation entity.
func (pdc *ProjectDetailCreate) AddTranslations(p ...*ProjectDetailTranslation) *ProjectDetailCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pdc.AddTranslationIDs(ids...)
}

// Mutation returns the ProjectDetailMutation object of the builder.
func (pdc *ProjectDetailCreate) Mutation() *ProjectDetailMutation {
	return pdc.mutation
}

// Save creates the ProjectDetail in the database.
func (pdc *ProjectDetailCreate) Save(ctx context.Context) (*ProjectDetail, error) {
	pdc.defaults()
	return withHooks(ctx, pdc.sqlSave, pdc.mutation, pdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pdc *ProjectDetailCreate) SaveX(ctx context.Context) *ProjectDetail {
	v, err := pdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdc *ProjectDetailCreate) Exec(ctx context.Context) error {
	_, err := pdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdc *ProjectDetailCreate) ExecX(ctx context.Context) {
	if err := pdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pdc *ProjectDetailCreate) defaults() {
	if _, ok := pdc.mutation.CreatedAt(); !ok {
		v := projectdetail.DefaultCreatedAt()
		pdc.mutation.SetCreatedAt(v)
	}
	if _, ok := pdc.mutation.UpdatedAt(); !ok {
		v := projectdetail.DefaultUpdatedAt()
		pdc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pdc.mutation.ID(); !ok {
		v := projectdetail.DefaultID()
		pdc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdc *ProjectDetailCreate) check() error {
	if _, ok := pdc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`ent: missing required field "ProjectDetail.project_id"`)}
	}
	if v, ok := pdc.mutation.License(); ok {
		if err := projectdetail.LicenseValidator(v); err != nil {
			return &ValidationError{Name: "license", err: fmt.Errorf(`ent: validator failed for field "ProjectDetail.license": %w`, err)}
		}
	}
	if v, ok := pdc.mutation.Version(); ok {
		if err := projectdetail.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "ProjectDetail.version": %w`, err)}
		}
	}
	if _, ok := pdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProjectDetail.created_at"`)}
	}
	if _, ok := pdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProjectDetail.updated_at"`)}
	}
	if len(pdc.mutation.ProjectIDs()) == 0 {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "ProjectDetail.project"`)}
	}
	return nil
}

func (pdc *ProjectDetailCreate) sqlSave(ctx context.Context) (*ProjectDetail, error) {
	if err := pdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pdc.mutation.id = &_node.ID
	pdc.mutation.done = true
	return _node, nil
}

func (pdc *ProjectDetailCreate) createSpec() (*ProjectDetail, *sqlgraph.CreateSpec) {
	var (
		_node = &ProjectDetail{config: pdc.config}
		_spec = sqlgraph.NewCreateSpec(projectdetail.Table, sqlgraph.NewFieldSpec(projectdetail.FieldID, field.TypeUUID))
	)
	if id, ok := pdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pdc.mutation.DetailedDescription(); ok {
		_spec.SetField(projectdetail.FieldDetailedDescription, field.TypeString, value)
		_node.DetailedDescription = value
	}
	if value, ok := pdc.mutation.Goals(); ok {
		_spec.SetField(projectdetail.FieldGoals, field.TypeString, value)
		_node.Goals = value
	}
	if value, ok := pdc.mutation.Challenges(); ok {
		_spec.SetField(projectdetail.FieldChallenges, field.TypeString, value)
		_node.Challenges = value
	}
	if value, ok := pdc.mutation.Solutions(); ok {
		_spec.SetField(projectdetail.FieldSolutions, field.TypeString, value)
		_node.Solutions = value
	}
	if value, ok := pdc.mutation.LessonsLearned(); ok {
		_spec.SetField(projectdetail.FieldLessonsLearned, field.TypeString, value)
		_node.LessonsLearned = value
	}
	if value, ok := pdc.mutation.FutureEnhancements(); ok {
		_spec.SetField(projectdetail.FieldFutureEnhancements, field.TypeString, value)
		_node.FutureEnhancements = value
	}
	if value, ok := pdc.mutation.License(); ok {
		_spec.SetField(projectdetail.FieldLicense, field.TypeString, value)
		_node.License = value
	}
	if value, ok := pdc.mutation.Version(); ok {
		_spec.SetField(projectdetail.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := pdc.mutation.CreatedAt(); ok {
		_spec.SetField(projectdetail.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pdc.mutation.UpdatedAt(); ok {
		_spec.SetField(projectdetail.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pdc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   projectdetail.ProjectTable,
			Columns: []string{projectdetail.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pdc.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectdetail.TranslationsTable,
			Columns: []string{projectdetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProjectDetailCreateBulk is the builder for creating many ProjectDetail entities in bulk.
type ProjectDetailCreateBulk struct {
	config
	err      error
	builders []*ProjectDetailCreate
}

// Save creates the ProjectDetail entities in the database.
func (pdcb *ProjectDetailCreateBulk) Save(ctx context.Context) ([]*ProjectDetail, error) {
	if pdcb.err != nil {
		return nil, pdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pdcb.builders))
	nodes := make([]*ProjectDetail, len(pdcb.builders))
	mutators := make([]Mutator, len(pdcb.builders))
	for i := range pdcb.builders {
		func(i int, root context.Context) {
			builder := pdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectDetailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pdcb *ProjectDetailCreateBulk) SaveX(ctx context.Context) []*ProjectDetail {
	v, err := pdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdcb *ProjectDetailCreateBulk) Exec(ctx context.Context) error {
	_, err := pdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdcb *ProjectDetailCreateBulk) ExecX(ctx context.Context) {
	if err := pdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
