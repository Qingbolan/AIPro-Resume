// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/workexperience"
	"silan-backend/internal/ent/workexperiencedetail"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// WorkExperienceDetail is the model entity for the WorkExperienceDetail schema.
type WorkExperienceDetail struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// WorkExperienceID holds the value of the "work_experience_id" field.
	WorkExperienceID uuid.UUID `json:"work_experience_id,omitempty"`
	// DetailText holds the value of the "detail_text" field.
	DetailText string `json:"detail_text,omitempty"`
	// SortOrder holds the value of the "sort_order" field.
	SortOrder int `json:"sort_order,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkExperienceDetailQuery when eager-loading is set.
	Edges        WorkExperienceDetailEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WorkExperienceDetailEdges holds the relations/edges for other nodes in the graph.
type WorkExperienceDetailEdges struct {
	// WorkExperience holds the value of the work_experience edge.
	WorkExperience *WorkExperience `json:"work_experience,omitempty"`
	// Translations holds the value of the translations edge.
	Translations []*WorkExperienceDetailTranslation `json:"translations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// WorkExperienceOrErr returns the WorkExperience value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkExperienceDetailEdges) WorkExperienceOrErr() (*WorkExperience, error) {
	if e.WorkExperience != nil {
		return e.WorkExperience, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: workexperience.Label}
	}
	return nil, &NotLoadedError{edge: "work_experience"}
}

// TranslationsOrErr returns the Translations value or an error if the edge
// was not loaded in eager-loading.
func (e WorkExperienceDetailEdges) TranslationsOrErr() ([]*WorkExperienceDetailTranslation, error) {
	if e.loadedTypes[1] {
		return e.Translations, nil
	}
	return nil, &NotLoadedError{edge: "translations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkExperienceDetail) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workexperiencedetail.FieldSortOrder:
			values[i] = new(sql.NullInt64)
		case workexperiencedetail.FieldDetailText:
			values[i] = new(sql.NullString)
		case workexperiencedetail.FieldCreatedAt, workexperiencedetail.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case workexperiencedetail.FieldID, workexperiencedetail.FieldWorkExperienceID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkExperienceDetail fields.
func (wed *WorkExperienceDetail) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workexperiencedetail.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				wed.ID = *value
			}
		case workexperiencedetail.FieldWorkExperienceID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field work_experience_id", values[i])
			} else if value != nil {
				wed.WorkExperienceID = *value
			}
		case workexperiencedetail.FieldDetailText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field detail_text", values[i])
			} else if value.Valid {
				wed.DetailText = value.String
			}
		case workexperiencedetail.FieldSortOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_order", values[i])
			} else if value.Valid {
				wed.SortOrder = int(value.Int64)
			}
		case workexperiencedetail.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wed.CreatedAt = value.Time
			}
		case workexperiencedetail.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wed.UpdatedAt = value.Time
			}
		default:
			wed.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkExperienceDetail.
// This includes values selected through modifiers, order, etc.
func (wed *WorkExperienceDetail) Value(name string) (ent.Value, error) {
	return wed.selectValues.Get(name)
}

// QueryWorkExperience queries the "work_experience" edge of the WorkExperienceDetail entity.
func (wed *WorkExperienceDetail) QueryWorkExperience() *WorkExperienceQuery {
	return NewWorkExperienceDetailClient(wed.config).QueryWorkExperience(wed)
}

// QueryTranslations queries the "translations" edge of the WorkExperienceDetail entity.
func (wed *WorkExperienceDetail) QueryTranslations() *WorkExperienceDetailTranslationQuery {
	return NewWorkExperienceDetailClient(wed.config).QueryTranslations(wed)
}

// Update returns a builder for updating this WorkExperienceDetail.
// Note that you need to call WorkExperienceDetail.Unwrap() before calling this method if this WorkExperienceDetail
// was returned from a transaction, and the transaction was committed or rolled back.
func (wed *WorkExperienceDetail) Update() *WorkExperienceDetailUpdateOne {
	return NewWorkExperienceDetailClient(wed.config).UpdateOne(wed)
}

// Unwrap unwraps the WorkExperienceDetail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wed *WorkExperienceDetail) Unwrap() *WorkExperienceDetail {
	_tx, ok := wed.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkExperienceDetail is not a transactional entity")
	}
	wed.config.driver = _tx.drv
	return wed
}

// String implements the fmt.Stringer.
func (wed *WorkExperienceDetail) String() string {
	var builder strings.Builder
	builder.WriteString("WorkExperienceDetail(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wed.ID))
	builder.WriteString("work_experience_id=")
	builder.WriteString(fmt.Sprintf("%v", wed.WorkExperienceID))
	builder.WriteString(", ")
	builder.WriteString("detail_text=")
	builder.WriteString(wed.DetailText)
	builder.WriteString(", ")
	builder.WriteString("sort_order=")
	builder.WriteString(fmt.Sprintf("%v", wed.SortOrder))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(wed.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wed.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// WorkExperienceDetails is a parsable slice of WorkExperienceDetail.
type WorkExperienceDetails []*WorkExperienceDetail
