// Code generated by ent, DO NOT EDIT.

package blogposttag

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// BlogPostID applies equality check predicate on the "blog_post_id" field. It's identical to BlogPostIDEQ.
func BlogPostID(v uuid.UUID) predicate.BlogPostTag {
	return predicate.BlogPostTag(sql.FieldEQ(FieldBlogPostID, v))
}

// BlogTagID applies equality check predicate on the "blog_tag_id" field. It's identical to BlogTagIDEQ.
func BlogTagID(v uuid.UUID) predicate.BlogPostTag {
	return predicate.BlogPostTag(sql.FieldEQ(FieldBlogTagID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BlogPostTag {
	return predicate.BlogPostTag(sql.FieldEQ(FieldCreatedAt, v))
}

// BlogPostIDEQ applies the EQ predicate on the "blog_post_id" field.
func BlogPostIDEQ(v uuid.UUID) predicate.BlogPostTag {
	return predicate.BlogPostTag(sql.FieldEQ(FieldBlogPostID, v))
}

// BlogPostIDNEQ applies the NEQ predicate on the "blog_post_id" field.
func BlogPostIDNEQ(v uuid.UUID) predicate.BlogPostTag {
	return predicate.BlogPostTag(sql.FieldNEQ(FieldBlogPostID, v))
}

// BlogPostIDIn applies the In predicate on the "blog_post_id" field.
func BlogPostIDIn(vs ...uuid.UUID) predicate.BlogPostTag {
	return predicate.BlogPostTag(sql.FieldIn(FieldBlogPostID, vs...))
}

// BlogPostIDNotIn applies the NotIn predicate on the "blog_post_id" field.
func BlogPostIDNotIn(vs ...uuid.UUID) predicate.BlogPostTag {
	return predicate.BlogPostTag(sql.FieldNotIn(FieldBlogPostID, vs...))
}

// BlogTagIDEQ applies the EQ predicate on the "blog_tag_id" field.
func BlogTagIDEQ(v uuid.UUID) predicate.BlogPostTag {
	return predicate.BlogPostTag(sql.FieldEQ(FieldBlogTagID, v))
}

// BlogTagIDNEQ applies the NEQ predicate on the "blog_tag_id" field.
func BlogTagIDNEQ(v uuid.UUID) predicate.BlogPostTag {
	return predicate.BlogPostTag(sql.FieldNEQ(FieldBlogTagID, v))
}

// BlogTagIDIn applies the In predicate on the "blog_tag_id" field.
func BlogTagIDIn(vs ...uuid.UUID) predicate.BlogPostTag {
	return predicate.BlogPostTag(sql.FieldIn(FieldBlogTagID, vs...))
}

// BlogTagIDNotIn applies the NotIn predicate on the "blog_tag_id" field.
func BlogTagIDNotIn(vs ...uuid.UUID) predicate.BlogPostTag {
	return predicate.BlogPostTag(sql.FieldNotIn(FieldBlogTagID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BlogPostTag {
	return predicate.BlogPostTag(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BlogPostTag {
	return predicate.BlogPostTag(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BlogPostTag {
	return predicate.BlogPostTag(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BlogPostTag {
	return predicate.BlogPostTag(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BlogPostTag {
	return predicate.BlogPostTag(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BlogPostTag {
	return predicate.BlogPostTag(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BlogPostTag {
	return predicate.BlogPostTag(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BlogPostTag {
	return predicate.BlogPostTag(sql.FieldLTE(FieldCreatedAt, v))
}

// HasBlogPost applies the HasEdge predicate on the "blog_post" edge.
func HasBlogPost() predicate.BlogPostTag {
	return predicate.BlogPostTag(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, BlogPostColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, BlogPostTable, BlogPostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlogPostWith applies the HasEdge predicate on the "blog_post" edge with a given conditions (other predicates).
func HasBlogPostWith(preds ...predicate.BlogPost) predicate.BlogPostTag {
	return predicate.BlogPostTag(func(s *sql.Selector) {
		step := newBlogPostStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlogTag applies the HasEdge predicate on the "blog_tag" edge.
func HasBlogTag() predicate.BlogPostTag {
	return predicate.BlogPostTag(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, BlogTagColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, BlogTagTable, BlogTagColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlogTagWith applies the HasEdge predicate on the "blog_tag" edge with a given conditions (other predicates).
func HasBlogTagWith(preds ...predicate.BlogTag) predicate.BlogPostTag {
	return predicate.BlogPostTag(func(s *sql.Selector) {
		step := newBlogTagStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BlogPostTag) predicate.BlogPostTag {
	return predicate.BlogPostTag(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BlogPostTag) predicate.BlogPostTag {
	return predicate.BlogPostTag(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BlogPostTag) predicate.BlogPostTag {
	return predicate.BlogPostTag(sql.NotPredicates(p))
}
