// Code generated by ent, DO NOT EDIT.

package blogposttag

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the blogposttag type in the database.
	Label = "blog_post_tag"
	// FieldBlogPostID holds the string denoting the blog_post_id field in the database.
	FieldBlogPostID = "blog_post_id"
	// FieldBlogTagID holds the string denoting the blog_tag_id field in the database.
	FieldBlogTagID = "blog_tag_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeBlogPost holds the string denoting the blog_post edge name in mutations.
	EdgeBlogPost = "blog_post"
	// EdgeBlogTag holds the string denoting the blog_tag edge name in mutations.
	EdgeBlogTag = "blog_tag"
	// BlogPostFieldID holds the string denoting the ID field of the BlogPost.
	BlogPostFieldID = "id"
	// BlogTagFieldID holds the string denoting the ID field of the BlogTag.
	BlogTagFieldID = "id"
	// Table holds the table name of the blogposttag in the database.
	Table = "blog_post_tags"
	// BlogPostTable is the table that holds the blog_post relation/edge.
	BlogPostTable = "blog_post_tags"
	// BlogPostInverseTable is the table name for the BlogPost entity.
	// It exists in this package in order to avoid circular dependency with the "blogpost" package.
	BlogPostInverseTable = "blog_posts"
	// BlogPostColumn is the table column denoting the blog_post relation/edge.
	BlogPostColumn = "blog_post_id"
	// BlogTagTable is the table that holds the blog_tag relation/edge.
	BlogTagTable = "blog_post_tags"
	// BlogTagInverseTable is the table name for the BlogTag entity.
	// It exists in this package in order to avoid circular dependency with the "blogtag" package.
	BlogTagInverseTable = "blog_tags"
	// BlogTagColumn is the table column denoting the blog_tag relation/edge.
	BlogTagColumn = "blog_tag_id"
)

// Columns holds all SQL columns for blogposttag fields.
var Columns = []string{
	FieldBlogPostID,
	FieldBlogTagID,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the BlogPostTag queries.
type OrderOption func(*sql.Selector)

// ByBlogPostID orders the results by the blog_post_id field.
func ByBlogPostID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlogPostID, opts...).ToFunc()
}

// ByBlogTagID orders the results by the blog_tag_id field.
func ByBlogTagID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlogTagID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByBlogPostField orders the results by blog_post field.
func ByBlogPostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlogPostStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlogTagField orders the results by blog_tag field.
func ByBlogTagField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlogTagStep(), sql.OrderByField(field, opts...))
	}
}
func newBlogPostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, BlogPostColumn),
		sqlgraph.To(BlogPostInverseTable, BlogPostFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BlogPostTable, BlogPostColumn),
	)
}
func newBlogTagStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, BlogTagColumn),
		sqlgraph.To(BlogTagInverseTable, BlogTagFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BlogTagTable, BlogTagColumn),
	)
}
