// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/projectdetail"
	"silan-backend/internal/ent/projectdetailtranslation"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProjectDetailTranslationUpdate is the builder for updating ProjectDetailTranslation entities.
type ProjectDetailTranslationUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectDetailTranslationMutation
}

// Where appends a list predicates to the ProjectDetailTranslationUpdate builder.
func (pdtu *ProjectDetailTranslationUpdate) Where(ps ...predicate.ProjectDetailTranslation) *ProjectDetailTranslationUpdate {
	pdtu.mutation.Where(ps...)
	return pdtu
}

// SetProjectDetailID sets the "project_detail_id" field.
func (pdtu *ProjectDetailTranslationUpdate) SetProjectDetailID(u uuid.UUID) *ProjectDetailTranslationUpdate {
	pdtu.mutation.SetProjectDetailID(u)
	return pdtu
}

// SetNillableProjectDetailID sets the "project_detail_id" field if the given value is not nil.
func (pdtu *ProjectDetailTranslationUpdate) SetNillableProjectDetailID(u *uuid.UUID) *ProjectDetailTranslationUpdate {
	if u != nil {
		pdtu.SetProjectDetailID(*u)
	}
	return pdtu
}

// SetLanguageCode sets the "language_code" field.
func (pdtu *ProjectDetailTranslationUpdate) SetLanguageCode(s string) *ProjectDetailTranslationUpdate {
	pdtu.mutation.SetLanguageCode(s)
	return pdtu
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (pdtu *ProjectDetailTranslationUpdate) SetNillableLanguageCode(s *string) *ProjectDetailTranslationUpdate {
	if s != nil {
		pdtu.SetLanguageCode(*s)
	}
	return pdtu
}

// SetDetailedDescription sets the "detailed_description" field.
func (pdtu *ProjectDetailTranslationUpdate) SetDetailedDescription(s string) *ProjectDetailTranslationUpdate {
	pdtu.mutation.SetDetailedDescription(s)
	return pdtu
}

// SetNillableDetailedDescription sets the "detailed_description" field if the given value is not nil.
func (pdtu *ProjectDetailTranslationUpdate) SetNillableDetailedDescription(s *string) *ProjectDetailTranslationUpdate {
	if s != nil {
		pdtu.SetDetailedDescription(*s)
	}
	return pdtu
}

// ClearDetailedDescription clears the value of the "detailed_description" field.
func (pdtu *ProjectDetailTranslationUpdate) ClearDetailedDescription() *ProjectDetailTranslationUpdate {
	pdtu.mutation.ClearDetailedDescription()
	return pdtu
}

// SetGoals sets the "goals" field.
func (pdtu *ProjectDetailTranslationUpdate) SetGoals(s string) *ProjectDetailTranslationUpdate {
	pdtu.mutation.SetGoals(s)
	return pdtu
}

// SetNillableGoals sets the "goals" field if the given value is not nil.
func (pdtu *ProjectDetailTranslationUpdate) SetNillableGoals(s *string) *ProjectDetailTranslationUpdate {
	if s != nil {
		pdtu.SetGoals(*s)
	}
	return pdtu
}

// ClearGoals clears the value of the "goals" field.
func (pdtu *ProjectDetailTranslationUpdate) ClearGoals() *ProjectDetailTranslationUpdate {
	pdtu.mutation.ClearGoals()
	return pdtu
}

// SetChallenges sets the "challenges" field.
func (pdtu *ProjectDetailTranslationUpdate) SetChallenges(s string) *ProjectDetailTranslationUpdate {
	pdtu.mutation.SetChallenges(s)
	return pdtu
}

// SetNillableChallenges sets the "challenges" field if the given value is not nil.
func (pdtu *ProjectDetailTranslationUpdate) SetNillableChallenges(s *string) *ProjectDetailTranslationUpdate {
	if s != nil {
		pdtu.SetChallenges(*s)
	}
	return pdtu
}

// ClearChallenges clears the value of the "challenges" field.
func (pdtu *ProjectDetailTranslationUpdate) ClearChallenges() *ProjectDetailTranslationUpdate {
	pdtu.mutation.ClearChallenges()
	return pdtu
}

// SetSolutions sets the "solutions" field.
func (pdtu *ProjectDetailTranslationUpdate) SetSolutions(s string) *ProjectDetailTranslationUpdate {
	pdtu.mutation.SetSolutions(s)
	return pdtu
}

// SetNillableSolutions sets the "solutions" field if the given value is not nil.
func (pdtu *ProjectDetailTranslationUpdate) SetNillableSolutions(s *string) *ProjectDetailTranslationUpdate {
	if s != nil {
		pdtu.SetSolutions(*s)
	}
	return pdtu
}

// ClearSolutions clears the value of the "solutions" field.
func (pdtu *ProjectDetailTranslationUpdate) ClearSolutions() *ProjectDetailTranslationUpdate {
	pdtu.mutation.ClearSolutions()
	return pdtu
}

// SetLessonsLearned sets the "lessons_learned" field.
func (pdtu *ProjectDetailTranslationUpdate) SetLessonsLearned(s string) *ProjectDetailTranslationUpdate {
	pdtu.mutation.SetLessonsLearned(s)
	return pdtu
}

// SetNillableLessonsLearned sets the "lessons_learned" field if the given value is not nil.
func (pdtu *ProjectDetailTranslationUpdate) SetNillableLessonsLearned(s *string) *ProjectDetailTranslationUpdate {
	if s != nil {
		pdtu.SetLessonsLearned(*s)
	}
	return pdtu
}

// ClearLessonsLearned clears the value of the "lessons_learned" field.
func (pdtu *ProjectDetailTranslationUpdate) ClearLessonsLearned() *ProjectDetailTranslationUpdate {
	pdtu.mutation.ClearLessonsLearned()
	return pdtu
}

// SetFutureEnhancements sets the "future_enhancements" field.
func (pdtu *ProjectDetailTranslationUpdate) SetFutureEnhancements(s string) *ProjectDetailTranslationUpdate {
	pdtu.mutation.SetFutureEnhancements(s)
	return pdtu
}

// SetNillableFutureEnhancements sets the "future_enhancements" field if the given value is not nil.
func (pdtu *ProjectDetailTranslationUpdate) SetNillableFutureEnhancements(s *string) *ProjectDetailTranslationUpdate {
	if s != nil {
		pdtu.SetFutureEnhancements(*s)
	}
	return pdtu
}

// ClearFutureEnhancements clears the value of the "future_enhancements" field.
func (pdtu *ProjectDetailTranslationUpdate) ClearFutureEnhancements() *ProjectDetailTranslationUpdate {
	pdtu.mutation.ClearFutureEnhancements()
	return pdtu
}

// SetProjectDetail sets the "project_detail" edge to the ProjectDetail entity.
func (pdtu *ProjectDetailTranslationUpdate) SetProjectDetail(p *ProjectDetail) *ProjectDetailTranslationUpdate {
	return pdtu.SetProjectDetailID(p.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (pdtu *ProjectDetailTranslationUpdate) SetLanguageID(id string) *ProjectDetailTranslationUpdate {
	pdtu.mutation.SetLanguageID(id)
	return pdtu
}

// SetLanguage sets the "language" edge to the Language entity.
func (pdtu *ProjectDetailTranslationUpdate) SetLanguage(l *Language) *ProjectDetailTranslationUpdate {
	return pdtu.SetLanguageID(l.ID)
}

// Mutation returns the ProjectDetailTranslationMutation object of the builder.
func (pdtu *ProjectDetailTranslationUpdate) Mutation() *ProjectDetailTranslationMutation {
	return pdtu.mutation
}

// ClearProjectDetail clears the "project_detail" edge to the ProjectDetail entity.
func (pdtu *ProjectDetailTranslationUpdate) ClearProjectDetail() *ProjectDetailTranslationUpdate {
	pdtu.mutation.ClearProjectDetail()
	return pdtu
}

// ClearLanguage clears the "language" edge to the Language entity.
func (pdtu *ProjectDetailTranslationUpdate) ClearLanguage() *ProjectDetailTranslationUpdate {
	pdtu.mutation.ClearLanguage()
	return pdtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pdtu *ProjectDetailTranslationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pdtu.sqlSave, pdtu.mutation, pdtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pdtu *ProjectDetailTranslationUpdate) SaveX(ctx context.Context) int {
	affected, err := pdtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pdtu *ProjectDetailTranslationUpdate) Exec(ctx context.Context) error {
	_, err := pdtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdtu *ProjectDetailTranslationUpdate) ExecX(ctx context.Context) {
	if err := pdtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdtu *ProjectDetailTranslationUpdate) check() error {
	if v, ok := pdtu.mutation.LanguageCode(); ok {
		if err := projectdetailtranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "ProjectDetailTranslation.language_code": %w`, err)}
		}
	}
	if pdtu.mutation.ProjectDetailCleared() && len(pdtu.mutation.ProjectDetailIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectDetailTranslation.project_detail"`)
	}
	if pdtu.mutation.LanguageCleared() && len(pdtu.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectDetailTranslation.language"`)
	}
	return nil
}

func (pdtu *ProjectDetailTranslationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pdtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectdetailtranslation.Table, projectdetailtranslation.Columns, sqlgraph.NewFieldSpec(projectdetailtranslation.FieldID, field.TypeUUID))
	if ps := pdtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pdtu.mutation.DetailedDescription(); ok {
		_spec.SetField(projectdetailtranslation.FieldDetailedDescription, field.TypeString, value)
	}
	if pdtu.mutation.DetailedDescriptionCleared() {
		_spec.ClearField(projectdetailtranslation.FieldDetailedDescription, field.TypeString)
	}
	if value, ok := pdtu.mutation.Goals(); ok {
		_spec.SetField(projectdetailtranslation.FieldGoals, field.TypeString, value)
	}
	if pdtu.mutation.GoalsCleared() {
		_spec.ClearField(projectdetailtranslation.FieldGoals, field.TypeString)
	}
	if value, ok := pdtu.mutation.Challenges(); ok {
		_spec.SetField(projectdetailtranslation.FieldChallenges, field.TypeString, value)
	}
	if pdtu.mutation.ChallengesCleared() {
		_spec.ClearField(projectdetailtranslation.FieldChallenges, field.TypeString)
	}
	if value, ok := pdtu.mutation.Solutions(); ok {
		_spec.SetField(projectdetailtranslation.FieldSolutions, field.TypeString, value)
	}
	if pdtu.mutation.SolutionsCleared() {
		_spec.ClearField(projectdetailtranslation.FieldSolutions, field.TypeString)
	}
	if value, ok := pdtu.mutation.LessonsLearned(); ok {
		_spec.SetField(projectdetailtranslation.FieldLessonsLearned, field.TypeString, value)
	}
	if pdtu.mutation.LessonsLearnedCleared() {
		_spec.ClearField(projectdetailtranslation.FieldLessonsLearned, field.TypeString)
	}
	if value, ok := pdtu.mutation.FutureEnhancements(); ok {
		_spec.SetField(projectdetailtranslation.FieldFutureEnhancements, field.TypeString, value)
	}
	if pdtu.mutation.FutureEnhancementsCleared() {
		_spec.ClearField(projectdetailtranslation.FieldFutureEnhancements, field.TypeString)
	}
	if pdtu.mutation.ProjectDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectdetailtranslation.ProjectDetailTable,
			Columns: []string{projectdetailtranslation.ProjectDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectdetail.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pdtu.mutation.ProjectDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectdetailtranslation.ProjectDetailTable,
			Columns: []string{projectdetailtranslation.ProjectDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectdetail.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pdtu.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectdetailtranslation.LanguageTable,
			Columns: []string{projectdetailtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pdtu.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectdetailtranslation.LanguageTable,
			Columns: []string{projectdetailtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pdtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectdetailtranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pdtu.mutation.done = true
	return n, nil
}

// ProjectDetailTranslationUpdateOne is the builder for updating a single ProjectDetailTranslation entity.
type ProjectDetailTranslationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectDetailTranslationMutation
}

// SetProjectDetailID sets the "project_detail_id" field.
func (pdtuo *ProjectDetailTranslationUpdateOne) SetProjectDetailID(u uuid.UUID) *ProjectDetailTranslationUpdateOne {
	pdtuo.mutation.SetProjectDetailID(u)
	return pdtuo
}

// SetNillableProjectDetailID sets the "project_detail_id" field if the given value is not nil.
func (pdtuo *ProjectDetailTranslationUpdateOne) SetNillableProjectDetailID(u *uuid.UUID) *ProjectDetailTranslationUpdateOne {
	if u != nil {
		pdtuo.SetProjectDetailID(*u)
	}
	return pdtuo
}

// SetLanguageCode sets the "language_code" field.
func (pdtuo *ProjectDetailTranslationUpdateOne) SetLanguageCode(s string) *ProjectDetailTranslationUpdateOne {
	pdtuo.mutation.SetLanguageCode(s)
	return pdtuo
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (pdtuo *ProjectDetailTranslationUpdateOne) SetNillableLanguageCode(s *string) *ProjectDetailTranslationUpdateOne {
	if s != nil {
		pdtuo.SetLanguageCode(*s)
	}
	return pdtuo
}

// SetDetailedDescription sets the "detailed_description" field.
func (pdtuo *ProjectDetailTranslationUpdateOne) SetDetailedDescription(s string) *ProjectDetailTranslationUpdateOne {
	pdtuo.mutation.SetDetailedDescription(s)
	return pdtuo
}

// SetNillableDetailedDescription sets the "detailed_description" field if the given value is not nil.
func (pdtuo *ProjectDetailTranslationUpdateOne) SetNillableDetailedDescription(s *string) *ProjectDetailTranslationUpdateOne {
	if s != nil {
		pdtuo.SetDetailedDescription(*s)
	}
	return pdtuo
}

// ClearDetailedDescription clears the value of the "detailed_description" field.
func (pdtuo *ProjectDetailTranslationUpdateOne) ClearDetailedDescription() *ProjectDetailTranslationUpdateOne {
	pdtuo.mutation.ClearDetailedDescription()
	return pdtuo
}

// SetGoals sets the "goals" field.
func (pdtuo *ProjectDetailTranslationUpdateOne) SetGoals(s string) *ProjectDetailTranslationUpdateOne {
	pdtuo.mutation.SetGoals(s)
	return pdtuo
}

// SetNillableGoals sets the "goals" field if the given value is not nil.
func (pdtuo *ProjectDetailTranslationUpdateOne) SetNillableGoals(s *string) *ProjectDetailTranslationUpdateOne {
	if s != nil {
		pdtuo.SetGoals(*s)
	}
	return pdtuo
}

// ClearGoals clears the value of the "goals" field.
func (pdtuo *ProjectDetailTranslationUpdateOne) ClearGoals() *ProjectDetailTranslationUpdateOne {
	pdtuo.mutation.ClearGoals()
	return pdtuo
}

// SetChallenges sets the "challenges" field.
func (pdtuo *ProjectDetailTranslationUpdateOne) SetChallenges(s string) *ProjectDetailTranslationUpdateOne {
	pdtuo.mutation.SetChallenges(s)
	return pdtuo
}

// SetNillableChallenges sets the "challenges" field if the given value is not nil.
func (pdtuo *ProjectDetailTranslationUpdateOne) SetNillableChallenges(s *string) *ProjectDetailTranslationUpdateOne {
	if s != nil {
		pdtuo.SetChallenges(*s)
	}
	return pdtuo
}

// ClearChallenges clears the value of the "challenges" field.
func (pdtuo *ProjectDetailTranslationUpdateOne) ClearChallenges() *ProjectDetailTranslationUpdateOne {
	pdtuo.mutation.ClearChallenges()
	return pdtuo
}

// SetSolutions sets the "solutions" field.
func (pdtuo *ProjectDetailTranslationUpdateOne) SetSolutions(s string) *ProjectDetailTranslationUpdateOne {
	pdtuo.mutation.SetSolutions(s)
	return pdtuo
}

// SetNillableSolutions sets the "solutions" field if the given value is not nil.
func (pdtuo *ProjectDetailTranslationUpdateOne) SetNillableSolutions(s *string) *ProjectDetailTranslationUpdateOne {
	if s != nil {
		pdtuo.SetSolutions(*s)
	}
	return pdtuo
}

// ClearSolutions clears the value of the "solutions" field.
func (pdtuo *ProjectDetailTranslationUpdateOne) ClearSolutions() *ProjectDetailTranslationUpdateOne {
	pdtuo.mutation.ClearSolutions()
	return pdtuo
}

// SetLessonsLearned sets the "lessons_learned" field.
func (pdtuo *ProjectDetailTranslationUpdateOne) SetLessonsLearned(s string) *ProjectDetailTranslationUpdateOne {
	pdtuo.mutation.SetLessonsLearned(s)
	return pdtuo
}

// SetNillableLessonsLearned sets the "lessons_learned" field if the given value is not nil.
func (pdtuo *ProjectDetailTranslationUpdateOne) SetNillableLessonsLearned(s *string) *ProjectDetailTranslationUpdateOne {
	if s != nil {
		pdtuo.SetLessonsLearned(*s)
	}
	return pdtuo
}

// ClearLessonsLearned clears the value of the "lessons_learned" field.
func (pdtuo *ProjectDetailTranslationUpdateOne) ClearLessonsLearned() *ProjectDetailTranslationUpdateOne {
	pdtuo.mutation.ClearLessonsLearned()
	return pdtuo
}

// SetFutureEnhancements sets the "future_enhancements" field.
func (pdtuo *ProjectDetailTranslationUpdateOne) SetFutureEnhancements(s string) *ProjectDetailTranslationUpdateOne {
	pdtuo.mutation.SetFutureEnhancements(s)
	return pdtuo
}

// SetNillableFutureEnhancements sets the "future_enhancements" field if the given value is not nil.
func (pdtuo *ProjectDetailTranslationUpdateOne) SetNillableFutureEnhancements(s *string) *ProjectDetailTranslationUpdateOne {
	if s != nil {
		pdtuo.SetFutureEnhancements(*s)
	}
	return pdtuo
}

// ClearFutureEnhancements clears the value of the "future_enhancements" field.
func (pdtuo *ProjectDetailTranslationUpdateOne) ClearFutureEnhancements() *ProjectDetailTranslationUpdateOne {
	pdtuo.mutation.ClearFutureEnhancements()
	return pdtuo
}

// SetProjectDetail sets the "project_detail" edge to the ProjectDetail entity.
func (pdtuo *ProjectDetailTranslationUpdateOne) SetProjectDetail(p *ProjectDetail) *ProjectDetailTranslationUpdateOne {
	return pdtuo.SetProjectDetailID(p.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (pdtuo *ProjectDetailTranslationUpdateOne) SetLanguageID(id string) *ProjectDetailTranslationUpdateOne {
	pdtuo.mutation.SetLanguageID(id)
	return pdtuo
}

// SetLanguage sets the "language" edge to the Language entity.
func (pdtuo *ProjectDetailTranslationUpdateOne) SetLanguage(l *Language) *ProjectDetailTranslationUpdateOne {
	return pdtuo.SetLanguageID(l.ID)
}

// Mutation returns the ProjectDetailTranslationMutation object of the builder.
func (pdtuo *ProjectDetailTranslationUpdateOne) Mutation() *ProjectDetailTranslationMutation {
	return pdtuo.mutation
}

// ClearProjectDetail clears the "project_detail" edge to the ProjectDetail entity.
func (pdtuo *ProjectDetailTranslationUpdateOne) ClearProjectDetail() *ProjectDetailTranslationUpdateOne {
	pdtuo.mutation.ClearProjectDetail()
	return pdtuo
}

// ClearLanguage clears the "language" edge to the Language entity.
func (pdtuo *ProjectDetailTranslationUpdateOne) ClearLanguage() *ProjectDetailTranslationUpdateOne {
	pdtuo.mutation.ClearLanguage()
	return pdtuo
}

// Where appends a list predicates to the ProjectDetailTranslationUpdate builder.
func (pdtuo *ProjectDetailTranslationUpdateOne) Where(ps ...predicate.ProjectDetailTranslation) *ProjectDetailTranslationUpdateOne {
	pdtuo.mutation.Where(ps...)
	return pdtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pdtuo *ProjectDetailTranslationUpdateOne) Select(field string, fields ...string) *ProjectDetailTranslationUpdateOne {
	pdtuo.fields = append([]string{field}, fields...)
	return pdtuo
}

// Save executes the query and returns the updated ProjectDetailTranslation entity.
func (pdtuo *ProjectDetailTranslationUpdateOne) Save(ctx context.Context) (*ProjectDetailTranslation, error) {
	return withHooks(ctx, pdtuo.sqlSave, pdtuo.mutation, pdtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pdtuo *ProjectDetailTranslationUpdateOne) SaveX(ctx context.Context) *ProjectDetailTranslation {
	node, err := pdtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pdtuo *ProjectDetailTranslationUpdateOne) Exec(ctx context.Context) error {
	_, err := pdtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdtuo *ProjectDetailTranslationUpdateOne) ExecX(ctx context.Context) {
	if err := pdtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdtuo *ProjectDetailTranslationUpdateOne) check() error {
	if v, ok := pdtuo.mutation.LanguageCode(); ok {
		if err := projectdetailtranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "ProjectDetailTranslation.language_code": %w`, err)}
		}
	}
	if pdtuo.mutation.ProjectDetailCleared() && len(pdtuo.mutation.ProjectDetailIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectDetailTranslation.project_detail"`)
	}
	if pdtuo.mutation.LanguageCleared() && len(pdtuo.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectDetailTranslation.language"`)
	}
	return nil
}

func (pdtuo *ProjectDetailTranslationUpdateOne) sqlSave(ctx context.Context) (_node *ProjectDetailTranslation, err error) {
	if err := pdtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectdetailtranslation.Table, projectdetailtranslation.Columns, sqlgraph.NewFieldSpec(projectdetailtranslation.FieldID, field.TypeUUID))
	id, ok := pdtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProjectDetailTranslation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pdtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectdetailtranslation.FieldID)
		for _, f := range fields {
			if !projectdetailtranslation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != projectdetailtranslation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pdtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pdtuo.mutation.DetailedDescription(); ok {
		_spec.SetField(projectdetailtranslation.FieldDetailedDescription, field.TypeString, value)
	}
	if pdtuo.mutation.DetailedDescriptionCleared() {
		_spec.ClearField(projectdetailtranslation.FieldDetailedDescription, field.TypeString)
	}
	if value, ok := pdtuo.mutation.Goals(); ok {
		_spec.SetField(projectdetailtranslation.FieldGoals, field.TypeString, value)
	}
	if pdtuo.mutation.GoalsCleared() {
		_spec.ClearField(projectdetailtranslation.FieldGoals, field.TypeString)
	}
	if value, ok := pdtuo.mutation.Challenges(); ok {
		_spec.SetField(projectdetailtranslation.FieldChallenges, field.TypeString, value)
	}
	if pdtuo.mutation.ChallengesCleared() {
		_spec.ClearField(projectdetailtranslation.FieldChallenges, field.TypeString)
	}
	if value, ok := pdtuo.mutation.Solutions(); ok {
		_spec.SetField(projectdetailtranslation.FieldSolutions, field.TypeString, value)
	}
	if pdtuo.mutation.SolutionsCleared() {
		_spec.ClearField(projectdetailtranslation.FieldSolutions, field.TypeString)
	}
	if value, ok := pdtuo.mutation.LessonsLearned(); ok {
		_spec.SetField(projectdetailtranslation.FieldLessonsLearned, field.TypeString, value)
	}
	if pdtuo.mutation.LessonsLearnedCleared() {
		_spec.ClearField(projectdetailtranslation.FieldLessonsLearned, field.TypeString)
	}
	if value, ok := pdtuo.mutation.FutureEnhancements(); ok {
		_spec.SetField(projectdetailtranslation.FieldFutureEnhancements, field.TypeString, value)
	}
	if pdtuo.mutation.FutureEnhancementsCleared() {
		_spec.ClearField(projectdetailtranslation.FieldFutureEnhancements, field.TypeString)
	}
	if pdtuo.mutation.ProjectDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectdetailtranslation.ProjectDetailTable,
			Columns: []string{projectdetailtranslation.ProjectDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectdetail.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pdtuo.mutation.ProjectDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectdetailtranslation.ProjectDetailTable,
			Columns: []string{projectdetailtranslation.ProjectDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectdetail.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pdtuo.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectdetailtranslation.LanguageTable,
			Columns: []string{projectdetailtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pdtuo.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectdetailtranslation.LanguageTable,
			Columns: []string{projectdetailtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProjectDetailTranslation{config: pdtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pdtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectdetailtranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pdtuo.mutation.done = true
	return _node, nil
}
