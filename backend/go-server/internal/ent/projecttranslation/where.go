// Code generated by ent, DO NOT EDIT.

package projecttranslation

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldLTE(FieldID, id))
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v uuid.UUID) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldEQ(FieldProjectID, v))
}

// LanguageCode applies equality check predicate on the "language_code" field. It's identical to LanguageCodeEQ.
func LanguageCode(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldEQ(FieldLanguageCode, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldEQ(FieldDescription, v))
}

// ProjectType applies equality check predicate on the "project_type" field. It's identical to ProjectTypeEQ.
func ProjectType(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldEQ(FieldProjectType, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldEQ(FieldCreatedAt, v))
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v uuid.UUID) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldEQ(FieldProjectID, v))
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v uuid.UUID) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldNEQ(FieldProjectID, v))
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...uuid.UUID) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldIn(FieldProjectID, vs...))
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...uuid.UUID) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldNotIn(FieldProjectID, vs...))
}

// LanguageCodeEQ applies the EQ predicate on the "language_code" field.
func LanguageCodeEQ(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldEQ(FieldLanguageCode, v))
}

// LanguageCodeNEQ applies the NEQ predicate on the "language_code" field.
func LanguageCodeNEQ(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldNEQ(FieldLanguageCode, v))
}

// LanguageCodeIn applies the In predicate on the "language_code" field.
func LanguageCodeIn(vs ...string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldIn(FieldLanguageCode, vs...))
}

// LanguageCodeNotIn applies the NotIn predicate on the "language_code" field.
func LanguageCodeNotIn(vs ...string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldNotIn(FieldLanguageCode, vs...))
}

// LanguageCodeGT applies the GT predicate on the "language_code" field.
func LanguageCodeGT(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldGT(FieldLanguageCode, v))
}

// LanguageCodeGTE applies the GTE predicate on the "language_code" field.
func LanguageCodeGTE(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldGTE(FieldLanguageCode, v))
}

// LanguageCodeLT applies the LT predicate on the "language_code" field.
func LanguageCodeLT(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldLT(FieldLanguageCode, v))
}

// LanguageCodeLTE applies the LTE predicate on the "language_code" field.
func LanguageCodeLTE(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldLTE(FieldLanguageCode, v))
}

// LanguageCodeContains applies the Contains predicate on the "language_code" field.
func LanguageCodeContains(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldContains(FieldLanguageCode, v))
}

// LanguageCodeHasPrefix applies the HasPrefix predicate on the "language_code" field.
func LanguageCodeHasPrefix(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldHasPrefix(FieldLanguageCode, v))
}

// LanguageCodeHasSuffix applies the HasSuffix predicate on the "language_code" field.
func LanguageCodeHasSuffix(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldHasSuffix(FieldLanguageCode, v))
}

// LanguageCodeEqualFold applies the EqualFold predicate on the "language_code" field.
func LanguageCodeEqualFold(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldEqualFold(FieldLanguageCode, v))
}

// LanguageCodeContainsFold applies the ContainsFold predicate on the "language_code" field.
func LanguageCodeContainsFold(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldContainsFold(FieldLanguageCode, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldContainsFold(FieldDescription, v))
}

// ProjectTypeEQ applies the EQ predicate on the "project_type" field.
func ProjectTypeEQ(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldEQ(FieldProjectType, v))
}

// ProjectTypeNEQ applies the NEQ predicate on the "project_type" field.
func ProjectTypeNEQ(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldNEQ(FieldProjectType, v))
}

// ProjectTypeIn applies the In predicate on the "project_type" field.
func ProjectTypeIn(vs ...string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldIn(FieldProjectType, vs...))
}

// ProjectTypeNotIn applies the NotIn predicate on the "project_type" field.
func ProjectTypeNotIn(vs ...string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldNotIn(FieldProjectType, vs...))
}

// ProjectTypeGT applies the GT predicate on the "project_type" field.
func ProjectTypeGT(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldGT(FieldProjectType, v))
}

// ProjectTypeGTE applies the GTE predicate on the "project_type" field.
func ProjectTypeGTE(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldGTE(FieldProjectType, v))
}

// ProjectTypeLT applies the LT predicate on the "project_type" field.
func ProjectTypeLT(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldLT(FieldProjectType, v))
}

// ProjectTypeLTE applies the LTE predicate on the "project_type" field.
func ProjectTypeLTE(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldLTE(FieldProjectType, v))
}

// ProjectTypeContains applies the Contains predicate on the "project_type" field.
func ProjectTypeContains(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldContains(FieldProjectType, v))
}

// ProjectTypeHasPrefix applies the HasPrefix predicate on the "project_type" field.
func ProjectTypeHasPrefix(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldHasPrefix(FieldProjectType, v))
}

// ProjectTypeHasSuffix applies the HasSuffix predicate on the "project_type" field.
func ProjectTypeHasSuffix(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldHasSuffix(FieldProjectType, v))
}

// ProjectTypeIsNil applies the IsNil predicate on the "project_type" field.
func ProjectTypeIsNil() predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldIsNull(FieldProjectType))
}

// ProjectTypeNotNil applies the NotNil predicate on the "project_type" field.
func ProjectTypeNotNil() predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldNotNull(FieldProjectType))
}

// ProjectTypeEqualFold applies the EqualFold predicate on the "project_type" field.
func ProjectTypeEqualFold(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldEqualFold(FieldProjectType, v))
}

// ProjectTypeContainsFold applies the ContainsFold predicate on the "project_type" field.
func ProjectTypeContainsFold(v string) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldContainsFold(FieldProjectType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.FieldLTE(FieldCreatedAt, v))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.ProjectTranslation {
	return predicate.ProjectTranslation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLanguage applies the HasEdge predicate on the "language" edge.
func HasLanguage() predicate.ProjectTranslation {
	return predicate.ProjectTranslation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LanguageTable, LanguageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLanguageWith applies the HasEdge predicate on the "language" edge with a given conditions (other predicates).
func HasLanguageWith(preds ...predicate.Language) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(func(s *sql.Selector) {
		step := newLanguageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProjectTranslation) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProjectTranslation) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProjectTranslation) predicate.ProjectTranslation {
	return predicate.ProjectTranslation(sql.NotPredicates(p))
}
