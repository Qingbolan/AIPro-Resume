// Code generated by ent, DO NOT EDIT.

package project

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUserID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldTitle, v))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldSlug, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDescription, v))
}

// ProjectType applies equality check predicate on the "project_type" field. It's identical to ProjectTypeEQ.
func ProjectType(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldProjectType, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldEndDate, v))
}

// GithubURL applies equality check predicate on the "github_url" field. It's identical to GithubURLEQ.
func GithubURL(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldGithubURL, v))
}

// DemoURL applies equality check predicate on the "demo_url" field. It's identical to DemoURLEQ.
func DemoURL(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDemoURL, v))
}

// DocumentationURL applies equality check predicate on the "documentation_url" field. It's identical to DocumentationURLEQ.
func DocumentationURL(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDocumentationURL, v))
}

// ThumbnailURL applies equality check predicate on the "thumbnail_url" field. It's identical to ThumbnailURLEQ.
func ThumbnailURL(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldThumbnailURL, v))
}

// IsFeatured applies equality check predicate on the "is_featured" field. It's identical to IsFeaturedEQ.
func IsFeatured(v bool) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldIsFeatured, v))
}

// IsPublic applies equality check predicate on the "is_public" field. It's identical to IsPublicEQ.
func IsPublic(v bool) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldIsPublic, v))
}

// ViewCount applies equality check predicate on the "view_count" field. It's identical to ViewCountEQ.
func ViewCount(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldViewCount, v))
}

// StarCount applies equality check predicate on the "star_count" field. It's identical to StarCountEQ.
func StarCount(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldStarCount, v))
}

// SortOrder applies equality check predicate on the "sort_order" field. It's identical to SortOrderEQ.
func SortOrder(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldSortOrder, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldUserID, vs...))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldTitle, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldSlug, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldDescription, v))
}

// ProjectTypeEQ applies the EQ predicate on the "project_type" field.
func ProjectTypeEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldProjectType, v))
}

// ProjectTypeNEQ applies the NEQ predicate on the "project_type" field.
func ProjectTypeNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldProjectType, v))
}

// ProjectTypeIn applies the In predicate on the "project_type" field.
func ProjectTypeIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldProjectType, vs...))
}

// ProjectTypeNotIn applies the NotIn predicate on the "project_type" field.
func ProjectTypeNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldProjectType, vs...))
}

// ProjectTypeGT applies the GT predicate on the "project_type" field.
func ProjectTypeGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldProjectType, v))
}

// ProjectTypeGTE applies the GTE predicate on the "project_type" field.
func ProjectTypeGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldProjectType, v))
}

// ProjectTypeLT applies the LT predicate on the "project_type" field.
func ProjectTypeLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldProjectType, v))
}

// ProjectTypeLTE applies the LTE predicate on the "project_type" field.
func ProjectTypeLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldProjectType, v))
}

// ProjectTypeContains applies the Contains predicate on the "project_type" field.
func ProjectTypeContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldProjectType, v))
}

// ProjectTypeHasPrefix applies the HasPrefix predicate on the "project_type" field.
func ProjectTypeHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldProjectType, v))
}

// ProjectTypeHasSuffix applies the HasSuffix predicate on the "project_type" field.
func ProjectTypeHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldProjectType, v))
}

// ProjectTypeEqualFold applies the EqualFold predicate on the "project_type" field.
func ProjectTypeEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldProjectType, v))
}

// ProjectTypeContainsFold applies the ContainsFold predicate on the "project_type" field.
func ProjectTypeContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldProjectType, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldStatus, vs...))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldStartDate, v))
}

// StartDateIsNil applies the IsNil predicate on the "start_date" field.
func StartDateIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldStartDate))
}

// StartDateNotNil applies the NotNil predicate on the "start_date" field.
func StartDateNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldStartDate))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldEndDate, v))
}

// EndDateIsNil applies the IsNil predicate on the "end_date" field.
func EndDateIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldEndDate))
}

// EndDateNotNil applies the NotNil predicate on the "end_date" field.
func EndDateNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldEndDate))
}

// GithubURLEQ applies the EQ predicate on the "github_url" field.
func GithubURLEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldGithubURL, v))
}

// GithubURLNEQ applies the NEQ predicate on the "github_url" field.
func GithubURLNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldGithubURL, v))
}

// GithubURLIn applies the In predicate on the "github_url" field.
func GithubURLIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldGithubURL, vs...))
}

// GithubURLNotIn applies the NotIn predicate on the "github_url" field.
func GithubURLNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldGithubURL, vs...))
}

// GithubURLGT applies the GT predicate on the "github_url" field.
func GithubURLGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldGithubURL, v))
}

// GithubURLGTE applies the GTE predicate on the "github_url" field.
func GithubURLGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldGithubURL, v))
}

// GithubURLLT applies the LT predicate on the "github_url" field.
func GithubURLLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldGithubURL, v))
}

// GithubURLLTE applies the LTE predicate on the "github_url" field.
func GithubURLLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldGithubURL, v))
}

// GithubURLContains applies the Contains predicate on the "github_url" field.
func GithubURLContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldGithubURL, v))
}

// GithubURLHasPrefix applies the HasPrefix predicate on the "github_url" field.
func GithubURLHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldGithubURL, v))
}

// GithubURLHasSuffix applies the HasSuffix predicate on the "github_url" field.
func GithubURLHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldGithubURL, v))
}

// GithubURLIsNil applies the IsNil predicate on the "github_url" field.
func GithubURLIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldGithubURL))
}

// GithubURLNotNil applies the NotNil predicate on the "github_url" field.
func GithubURLNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldGithubURL))
}

// GithubURLEqualFold applies the EqualFold predicate on the "github_url" field.
func GithubURLEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldGithubURL, v))
}

// GithubURLContainsFold applies the ContainsFold predicate on the "github_url" field.
func GithubURLContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldGithubURL, v))
}

// DemoURLEQ applies the EQ predicate on the "demo_url" field.
func DemoURLEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDemoURL, v))
}

// DemoURLNEQ applies the NEQ predicate on the "demo_url" field.
func DemoURLNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldDemoURL, v))
}

// DemoURLIn applies the In predicate on the "demo_url" field.
func DemoURLIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldDemoURL, vs...))
}

// DemoURLNotIn applies the NotIn predicate on the "demo_url" field.
func DemoURLNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldDemoURL, vs...))
}

// DemoURLGT applies the GT predicate on the "demo_url" field.
func DemoURLGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldDemoURL, v))
}

// DemoURLGTE applies the GTE predicate on the "demo_url" field.
func DemoURLGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldDemoURL, v))
}

// DemoURLLT applies the LT predicate on the "demo_url" field.
func DemoURLLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldDemoURL, v))
}

// DemoURLLTE applies the LTE predicate on the "demo_url" field.
func DemoURLLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldDemoURL, v))
}

// DemoURLContains applies the Contains predicate on the "demo_url" field.
func DemoURLContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldDemoURL, v))
}

// DemoURLHasPrefix applies the HasPrefix predicate on the "demo_url" field.
func DemoURLHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldDemoURL, v))
}

// DemoURLHasSuffix applies the HasSuffix predicate on the "demo_url" field.
func DemoURLHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldDemoURL, v))
}

// DemoURLIsNil applies the IsNil predicate on the "demo_url" field.
func DemoURLIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldDemoURL))
}

// DemoURLNotNil applies the NotNil predicate on the "demo_url" field.
func DemoURLNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldDemoURL))
}

// DemoURLEqualFold applies the EqualFold predicate on the "demo_url" field.
func DemoURLEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldDemoURL, v))
}

// DemoURLContainsFold applies the ContainsFold predicate on the "demo_url" field.
func DemoURLContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldDemoURL, v))
}

// DocumentationURLEQ applies the EQ predicate on the "documentation_url" field.
func DocumentationURLEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDocumentationURL, v))
}

// DocumentationURLNEQ applies the NEQ predicate on the "documentation_url" field.
func DocumentationURLNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldDocumentationURL, v))
}

// DocumentationURLIn applies the In predicate on the "documentation_url" field.
func DocumentationURLIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldDocumentationURL, vs...))
}

// DocumentationURLNotIn applies the NotIn predicate on the "documentation_url" field.
func DocumentationURLNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldDocumentationURL, vs...))
}

// DocumentationURLGT applies the GT predicate on the "documentation_url" field.
func DocumentationURLGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldDocumentationURL, v))
}

// DocumentationURLGTE applies the GTE predicate on the "documentation_url" field.
func DocumentationURLGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldDocumentationURL, v))
}

// DocumentationURLLT applies the LT predicate on the "documentation_url" field.
func DocumentationURLLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldDocumentationURL, v))
}

// DocumentationURLLTE applies the LTE predicate on the "documentation_url" field.
func DocumentationURLLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldDocumentationURL, v))
}

// DocumentationURLContains applies the Contains predicate on the "documentation_url" field.
func DocumentationURLContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldDocumentationURL, v))
}

// DocumentationURLHasPrefix applies the HasPrefix predicate on the "documentation_url" field.
func DocumentationURLHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldDocumentationURL, v))
}

// DocumentationURLHasSuffix applies the HasSuffix predicate on the "documentation_url" field.
func DocumentationURLHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldDocumentationURL, v))
}

// DocumentationURLIsNil applies the IsNil predicate on the "documentation_url" field.
func DocumentationURLIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldDocumentationURL))
}

// DocumentationURLNotNil applies the NotNil predicate on the "documentation_url" field.
func DocumentationURLNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldDocumentationURL))
}

// DocumentationURLEqualFold applies the EqualFold predicate on the "documentation_url" field.
func DocumentationURLEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldDocumentationURL, v))
}

// DocumentationURLContainsFold applies the ContainsFold predicate on the "documentation_url" field.
func DocumentationURLContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldDocumentationURL, v))
}

// ThumbnailURLEQ applies the EQ predicate on the "thumbnail_url" field.
func ThumbnailURLEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldThumbnailURL, v))
}

// ThumbnailURLNEQ applies the NEQ predicate on the "thumbnail_url" field.
func ThumbnailURLNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldThumbnailURL, v))
}

// ThumbnailURLIn applies the In predicate on the "thumbnail_url" field.
func ThumbnailURLIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldThumbnailURL, vs...))
}

// ThumbnailURLNotIn applies the NotIn predicate on the "thumbnail_url" field.
func ThumbnailURLNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldThumbnailURL, vs...))
}

// ThumbnailURLGT applies the GT predicate on the "thumbnail_url" field.
func ThumbnailURLGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldThumbnailURL, v))
}

// ThumbnailURLGTE applies the GTE predicate on the "thumbnail_url" field.
func ThumbnailURLGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldThumbnailURL, v))
}

// ThumbnailURLLT applies the LT predicate on the "thumbnail_url" field.
func ThumbnailURLLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldThumbnailURL, v))
}

// ThumbnailURLLTE applies the LTE predicate on the "thumbnail_url" field.
func ThumbnailURLLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldThumbnailURL, v))
}

// ThumbnailURLContains applies the Contains predicate on the "thumbnail_url" field.
func ThumbnailURLContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldThumbnailURL, v))
}

// ThumbnailURLHasPrefix applies the HasPrefix predicate on the "thumbnail_url" field.
func ThumbnailURLHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldThumbnailURL, v))
}

// ThumbnailURLHasSuffix applies the HasSuffix predicate on the "thumbnail_url" field.
func ThumbnailURLHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldThumbnailURL, v))
}

// ThumbnailURLIsNil applies the IsNil predicate on the "thumbnail_url" field.
func ThumbnailURLIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldThumbnailURL))
}

// ThumbnailURLNotNil applies the NotNil predicate on the "thumbnail_url" field.
func ThumbnailURLNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldThumbnailURL))
}

// ThumbnailURLEqualFold applies the EqualFold predicate on the "thumbnail_url" field.
func ThumbnailURLEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldThumbnailURL, v))
}

// ThumbnailURLContainsFold applies the ContainsFold predicate on the "thumbnail_url" field.
func ThumbnailURLContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldThumbnailURL, v))
}

// IsFeaturedEQ applies the EQ predicate on the "is_featured" field.
func IsFeaturedEQ(v bool) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldIsFeatured, v))
}

// IsFeaturedNEQ applies the NEQ predicate on the "is_featured" field.
func IsFeaturedNEQ(v bool) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldIsFeatured, v))
}

// IsPublicEQ applies the EQ predicate on the "is_public" field.
func IsPublicEQ(v bool) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldIsPublic, v))
}

// IsPublicNEQ applies the NEQ predicate on the "is_public" field.
func IsPublicNEQ(v bool) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldIsPublic, v))
}

// ViewCountEQ applies the EQ predicate on the "view_count" field.
func ViewCountEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldViewCount, v))
}

// ViewCountNEQ applies the NEQ predicate on the "view_count" field.
func ViewCountNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldViewCount, v))
}

// ViewCountIn applies the In predicate on the "view_count" field.
func ViewCountIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldViewCount, vs...))
}

// ViewCountNotIn applies the NotIn predicate on the "view_count" field.
func ViewCountNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldViewCount, vs...))
}

// ViewCountGT applies the GT predicate on the "view_count" field.
func ViewCountGT(v int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldViewCount, v))
}

// ViewCountGTE applies the GTE predicate on the "view_count" field.
func ViewCountGTE(v int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldViewCount, v))
}

// ViewCountLT applies the LT predicate on the "view_count" field.
func ViewCountLT(v int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldViewCount, v))
}

// ViewCountLTE applies the LTE predicate on the "view_count" field.
func ViewCountLTE(v int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldViewCount, v))
}

// StarCountEQ applies the EQ predicate on the "star_count" field.
func StarCountEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldStarCount, v))
}

// StarCountNEQ applies the NEQ predicate on the "star_count" field.
func StarCountNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldStarCount, v))
}

// StarCountIn applies the In predicate on the "star_count" field.
func StarCountIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldStarCount, vs...))
}

// StarCountNotIn applies the NotIn predicate on the "star_count" field.
func StarCountNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldStarCount, vs...))
}

// StarCountGT applies the GT predicate on the "star_count" field.
func StarCountGT(v int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldStarCount, v))
}

// StarCountGTE applies the GTE predicate on the "star_count" field.
func StarCountGTE(v int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldStarCount, v))
}

// StarCountLT applies the LT predicate on the "star_count" field.
func StarCountLT(v int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldStarCount, v))
}

// StarCountLTE applies the LTE predicate on the "star_count" field.
func StarCountLTE(v int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldStarCount, v))
}

// SortOrderEQ applies the EQ predicate on the "sort_order" field.
func SortOrderEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldSortOrder, v))
}

// SortOrderNEQ applies the NEQ predicate on the "sort_order" field.
func SortOrderNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldSortOrder, v))
}

// SortOrderIn applies the In predicate on the "sort_order" field.
func SortOrderIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldSortOrder, vs...))
}

// SortOrderNotIn applies the NotIn predicate on the "sort_order" field.
func SortOrderNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldSortOrder, vs...))
}

// SortOrderGT applies the GT predicate on the "sort_order" field.
func SortOrderGT(v int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldSortOrder, v))
}

// SortOrderGTE applies the GTE predicate on the "sort_order" field.
func SortOrderGTE(v int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldSortOrder, v))
}

// SortOrderLT applies the LT predicate on the "sort_order" field.
func SortOrderLT(v int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldSortOrder, v))
}

// SortOrderLTE applies the LTE predicate on the "sort_order" field.
func SortOrderLTE(v int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldSortOrder, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTranslations applies the HasEdge predicate on the "translations" edge.
func HasTranslations() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TranslationsTable, TranslationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTranslationsWith applies the HasEdge predicate on the "translations" edge with a given conditions (other predicates).
func HasTranslationsWith(preds ...predicate.ProjectTranslation) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newTranslationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTechnologies applies the HasEdge predicate on the "technologies" edge.
func HasTechnologies() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TechnologiesTable, TechnologiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTechnologiesWith applies the HasEdge predicate on the "technologies" edge with a given conditions (other predicates).
func HasTechnologiesWith(preds ...predicate.ProjectTechnology) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newTechnologiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDetails applies the HasEdge predicate on the "details" edge.
func HasDetails() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, DetailsTable, DetailsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDetailsWith applies the HasEdge predicate on the "details" edge with a given conditions (other predicates).
func HasDetailsWith(preds ...predicate.ProjectDetail) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newDetailsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasImages applies the HasEdge predicate on the "images" edge.
func HasImages() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ImagesTable, ImagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasImagesWith applies the HasEdge predicate on the "images" edge with a given conditions (other predicates).
func HasImagesWith(preds ...predicate.ProjectImage) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newImagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSourceRelationships applies the HasEdge predicate on the "source_relationships" edge.
func HasSourceRelationships() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SourceRelationshipsTable, SourceRelationshipsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSourceRelationshipsWith applies the HasEdge predicate on the "source_relationships" edge with a given conditions (other predicates).
func HasSourceRelationshipsWith(preds ...predicate.ProjectRelationship) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newSourceRelationshipsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTargetRelationships applies the HasEdge predicate on the "target_relationships" edge.
func HasTargetRelationships() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TargetRelationshipsTable, TargetRelationshipsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTargetRelationshipsWith applies the HasEdge predicate on the "target_relationships" edge with a given conditions (other predicates).
func HasTargetRelationshipsWith(preds ...predicate.ProjectRelationship) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newTargetRelationshipsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Project) predicate.Project {
	return predicate.Project(sql.NotPredicates(p))
}
