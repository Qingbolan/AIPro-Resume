// Code generated by ent, DO NOT EDIT.

package project

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the project type in the database.
	Label = "project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldProjectType holds the string denoting the project_type field in the database.
	FieldProjectType = "project_type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldGithubURL holds the string denoting the github_url field in the database.
	FieldGithubURL = "github_url"
	// FieldDemoURL holds the string denoting the demo_url field in the database.
	FieldDemoURL = "demo_url"
	// FieldDocumentationURL holds the string denoting the documentation_url field in the database.
	FieldDocumentationURL = "documentation_url"
	// FieldThumbnailURL holds the string denoting the thumbnail_url field in the database.
	FieldThumbnailURL = "thumbnail_url"
	// FieldIsFeatured holds the string denoting the is_featured field in the database.
	FieldIsFeatured = "is_featured"
	// FieldIsPublic holds the string denoting the is_public field in the database.
	FieldIsPublic = "is_public"
	// FieldViewCount holds the string denoting the view_count field in the database.
	FieldViewCount = "view_count"
	// FieldStarCount holds the string denoting the star_count field in the database.
	FieldStarCount = "star_count"
	// FieldSortOrder holds the string denoting the sort_order field in the database.
	FieldSortOrder = "sort_order"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeTranslations holds the string denoting the translations edge name in mutations.
	EdgeTranslations = "translations"
	// EdgeTechnologies holds the string denoting the technologies edge name in mutations.
	EdgeTechnologies = "technologies"
	// EdgeDetails holds the string denoting the details edge name in mutations.
	EdgeDetails = "details"
	// EdgeImages holds the string denoting the images edge name in mutations.
	EdgeImages = "images"
	// EdgeSourceRelationships holds the string denoting the source_relationships edge name in mutations.
	EdgeSourceRelationships = "source_relationships"
	// EdgeTargetRelationships holds the string denoting the target_relationships edge name in mutations.
	EdgeTargetRelationships = "target_relationships"
	// Table holds the table name of the project in the database.
	Table = "projects"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "projects"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// TranslationsTable is the table that holds the translations relation/edge.
	TranslationsTable = "project_translations"
	// TranslationsInverseTable is the table name for the ProjectTranslation entity.
	// It exists in this package in order to avoid circular dependency with the "projecttranslation" package.
	TranslationsInverseTable = "project_translations"
	// TranslationsColumn is the table column denoting the translations relation/edge.
	TranslationsColumn = "project_id"
	// TechnologiesTable is the table that holds the technologies relation/edge.
	TechnologiesTable = "project_technologies"
	// TechnologiesInverseTable is the table name for the ProjectTechnology entity.
	// It exists in this package in order to avoid circular dependency with the "projecttechnology" package.
	TechnologiesInverseTable = "project_technologies"
	// TechnologiesColumn is the table column denoting the technologies relation/edge.
	TechnologiesColumn = "project_id"
	// DetailsTable is the table that holds the details relation/edge.
	DetailsTable = "project_details"
	// DetailsInverseTable is the table name for the ProjectDetail entity.
	// It exists in this package in order to avoid circular dependency with the "projectdetail" package.
	DetailsInverseTable = "project_details"
	// DetailsColumn is the table column denoting the details relation/edge.
	DetailsColumn = "project_id"
	// ImagesTable is the table that holds the images relation/edge.
	ImagesTable = "project_images"
	// ImagesInverseTable is the table name for the ProjectImage entity.
	// It exists in this package in order to avoid circular dependency with the "projectimage" package.
	ImagesInverseTable = "project_images"
	// ImagesColumn is the table column denoting the images relation/edge.
	ImagesColumn = "project_id"
	// SourceRelationshipsTable is the table that holds the source_relationships relation/edge.
	SourceRelationshipsTable = "project_relationships"
	// SourceRelationshipsInverseTable is the table name for the ProjectRelationship entity.
	// It exists in this package in order to avoid circular dependency with the "projectrelationship" package.
	SourceRelationshipsInverseTable = "project_relationships"
	// SourceRelationshipsColumn is the table column denoting the source_relationships relation/edge.
	SourceRelationshipsColumn = "source_project_id"
	// TargetRelationshipsTable is the table that holds the target_relationships relation/edge.
	TargetRelationshipsTable = "project_relationships"
	// TargetRelationshipsInverseTable is the table name for the ProjectRelationship entity.
	// It exists in this package in order to avoid circular dependency with the "projectrelationship" package.
	TargetRelationshipsInverseTable = "project_relationships"
	// TargetRelationshipsColumn is the table column denoting the target_relationships relation/edge.
	TargetRelationshipsColumn = "target_project_id"
)

// Columns holds all SQL columns for project fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldTitle,
	FieldSlug,
	FieldDescription,
	FieldProjectType,
	FieldStatus,
	FieldStartDate,
	FieldEndDate,
	FieldGithubURL,
	FieldDemoURL,
	FieldDocumentationURL,
	FieldThumbnailURL,
	FieldIsFeatured,
	FieldIsPublic,
	FieldViewCount,
	FieldStarCount,
	FieldSortOrder,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	SlugValidator func(string) error
	// DefaultProjectType holds the default value on creation for the "project_type" field.
	DefaultProjectType string
	// ProjectTypeValidator is a validator for the "project_type" field. It is called by the builders before save.
	ProjectTypeValidator func(string) error
	// GithubURLValidator is a validator for the "github_url" field. It is called by the builders before save.
	GithubURLValidator func(string) error
	// DemoURLValidator is a validator for the "demo_url" field. It is called by the builders before save.
	DemoURLValidator func(string) error
	// DocumentationURLValidator is a validator for the "documentation_url" field. It is called by the builders before save.
	DocumentationURLValidator func(string) error
	// ThumbnailURLValidator is a validator for the "thumbnail_url" field. It is called by the builders before save.
	ThumbnailURLValidator func(string) error
	// DefaultIsFeatured holds the default value on creation for the "is_featured" field.
	DefaultIsFeatured bool
	// DefaultIsPublic holds the default value on creation for the "is_public" field.
	DefaultIsPublic bool
	// DefaultViewCount holds the default value on creation for the "view_count" field.
	DefaultViewCount int
	// DefaultStarCount holds the default value on creation for the "star_count" field.
	DefaultStarCount int
	// DefaultSortOrder holds the default value on creation for the "sort_order" field.
	DefaultSortOrder int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// StatusActive is the default value of the Status enum.
const DefaultStatus = StatusActive

// Status values.
const (
	StatusActive    Status = "active"
	StatusCompleted Status = "completed"
	StatusPaused    Status = "paused"
	StatusCancelled Status = "cancelled"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusActive, StatusCompleted, StatusPaused, StatusCancelled:
		return nil
	default:
		return fmt.Errorf("project: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Project queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByProjectType orders the results by the project_type field.
func ByProjectType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByEndDate orders the results by the end_date field.
func ByEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndDate, opts...).ToFunc()
}

// ByGithubURL orders the results by the github_url field.
func ByGithubURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGithubURL, opts...).ToFunc()
}

// ByDemoURL orders the results by the demo_url field.
func ByDemoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDemoURL, opts...).ToFunc()
}

// ByDocumentationURL orders the results by the documentation_url field.
func ByDocumentationURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDocumentationURL, opts...).ToFunc()
}

// ByThumbnailURL orders the results by the thumbnail_url field.
func ByThumbnailURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThumbnailURL, opts...).ToFunc()
}

// ByIsFeatured orders the results by the is_featured field.
func ByIsFeatured(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsFeatured, opts...).ToFunc()
}

// ByIsPublic orders the results by the is_public field.
func ByIsPublic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPublic, opts...).ToFunc()
}

// ByViewCount orders the results by the view_count field.
func ByViewCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldViewCount, opts...).ToFunc()
}

// ByStarCount orders the results by the star_count field.
func ByStarCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStarCount, opts...).ToFunc()
}

// BySortOrder orders the results by the sort_order field.
func BySortOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSortOrder, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByTranslationsCount orders the results by translations count.
func ByTranslationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTranslationsStep(), opts...)
	}
}

// ByTranslations orders the results by translations terms.
func ByTranslations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTranslationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTechnologiesCount orders the results by technologies count.
func ByTechnologiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTechnologiesStep(), opts...)
	}
}

// ByTechnologies orders the results by technologies terms.
func ByTechnologies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTechnologiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDetailsField orders the results by details field.
func ByDetailsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDetailsStep(), sql.OrderByField(field, opts...))
	}
}

// ByImagesCount orders the results by images count.
func ByImagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newImagesStep(), opts...)
	}
}

// ByImages orders the results by images terms.
func ByImages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newImagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySourceRelationshipsCount orders the results by source_relationships count.
func BySourceRelationshipsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSourceRelationshipsStep(), opts...)
	}
}

// BySourceRelationships orders the results by source_relationships terms.
func BySourceRelationships(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSourceRelationshipsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTargetRelationshipsCount orders the results by target_relationships count.
func ByTargetRelationshipsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTargetRelationshipsStep(), opts...)
	}
}

// ByTargetRelationships orders the results by target_relationships terms.
func ByTargetRelationships(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTargetRelationshipsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newTranslationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TranslationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TranslationsTable, TranslationsColumn),
	)
}
func newTechnologiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TechnologiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TechnologiesTable, TechnologiesColumn),
	)
}
func newDetailsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DetailsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, DetailsTable, DetailsColumn),
	)
}
func newImagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ImagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ImagesTable, ImagesColumn),
	)
}
func newSourceRelationshipsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SourceRelationshipsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SourceRelationshipsTable, SourceRelationshipsColumn),
	)
}
func newTargetRelationshipsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TargetRelationshipsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TargetRelationshipsTable, TargetRelationshipsColumn),
	)
}
