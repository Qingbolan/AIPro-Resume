// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/projectimage"
	"silan-backend/internal/ent/projectimagetranslation"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProjectImageTranslationUpdate is the builder for updating ProjectImageTranslation entities.
type ProjectImageTranslationUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectImageTranslationMutation
}

// Where appends a list predicates to the ProjectImageTranslationUpdate builder.
func (pitu *ProjectImageTranslationUpdate) Where(ps ...predicate.ProjectImageTranslation) *ProjectImageTranslationUpdate {
	pitu.mutation.Where(ps...)
	return pitu
}

// SetProjectImageID sets the "project_image_id" field.
func (pitu *ProjectImageTranslationUpdate) SetProjectImageID(u uuid.UUID) *ProjectImageTranslationUpdate {
	pitu.mutation.SetProjectImageID(u)
	return pitu
}

// SetNillableProjectImageID sets the "project_image_id" field if the given value is not nil.
func (pitu *ProjectImageTranslationUpdate) SetNillableProjectImageID(u *uuid.UUID) *ProjectImageTranslationUpdate {
	if u != nil {
		pitu.SetProjectImageID(*u)
	}
	return pitu
}

// SetLanguageCode sets the "language_code" field.
func (pitu *ProjectImageTranslationUpdate) SetLanguageCode(s string) *ProjectImageTranslationUpdate {
	pitu.mutation.SetLanguageCode(s)
	return pitu
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (pitu *ProjectImageTranslationUpdate) SetNillableLanguageCode(s *string) *ProjectImageTranslationUpdate {
	if s != nil {
		pitu.SetLanguageCode(*s)
	}
	return pitu
}

// SetAltText sets the "alt_text" field.
func (pitu *ProjectImageTranslationUpdate) SetAltText(s string) *ProjectImageTranslationUpdate {
	pitu.mutation.SetAltText(s)
	return pitu
}

// SetNillableAltText sets the "alt_text" field if the given value is not nil.
func (pitu *ProjectImageTranslationUpdate) SetNillableAltText(s *string) *ProjectImageTranslationUpdate {
	if s != nil {
		pitu.SetAltText(*s)
	}
	return pitu
}

// ClearAltText clears the value of the "alt_text" field.
func (pitu *ProjectImageTranslationUpdate) ClearAltText() *ProjectImageTranslationUpdate {
	pitu.mutation.ClearAltText()
	return pitu
}

// SetCaption sets the "caption" field.
func (pitu *ProjectImageTranslationUpdate) SetCaption(s string) *ProjectImageTranslationUpdate {
	pitu.mutation.SetCaption(s)
	return pitu
}

// SetNillableCaption sets the "caption" field if the given value is not nil.
func (pitu *ProjectImageTranslationUpdate) SetNillableCaption(s *string) *ProjectImageTranslationUpdate {
	if s != nil {
		pitu.SetCaption(*s)
	}
	return pitu
}

// ClearCaption clears the value of the "caption" field.
func (pitu *ProjectImageTranslationUpdate) ClearCaption() *ProjectImageTranslationUpdate {
	pitu.mutation.ClearCaption()
	return pitu
}

// SetUpdatedAt sets the "updated_at" field.
func (pitu *ProjectImageTranslationUpdate) SetUpdatedAt(t time.Time) *ProjectImageTranslationUpdate {
	pitu.mutation.SetUpdatedAt(t)
	return pitu
}

// SetProjectImage sets the "project_image" edge to the ProjectImage entity.
func (pitu *ProjectImageTranslationUpdate) SetProjectImage(p *ProjectImage) *ProjectImageTranslationUpdate {
	return pitu.SetProjectImageID(p.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (pitu *ProjectImageTranslationUpdate) SetLanguageID(id string) *ProjectImageTranslationUpdate {
	pitu.mutation.SetLanguageID(id)
	return pitu
}

// SetLanguage sets the "language" edge to the Language entity.
func (pitu *ProjectImageTranslationUpdate) SetLanguage(l *Language) *ProjectImageTranslationUpdate {
	return pitu.SetLanguageID(l.ID)
}

// Mutation returns the ProjectImageTranslationMutation object of the builder.
func (pitu *ProjectImageTranslationUpdate) Mutation() *ProjectImageTranslationMutation {
	return pitu.mutation
}

// ClearProjectImage clears the "project_image" edge to the ProjectImage entity.
func (pitu *ProjectImageTranslationUpdate) ClearProjectImage() *ProjectImageTranslationUpdate {
	pitu.mutation.ClearProjectImage()
	return pitu
}

// ClearLanguage clears the "language" edge to the Language entity.
func (pitu *ProjectImageTranslationUpdate) ClearLanguage() *ProjectImageTranslationUpdate {
	pitu.mutation.ClearLanguage()
	return pitu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pitu *ProjectImageTranslationUpdate) Save(ctx context.Context) (int, error) {
	pitu.defaults()
	return withHooks(ctx, pitu.sqlSave, pitu.mutation, pitu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pitu *ProjectImageTranslationUpdate) SaveX(ctx context.Context) int {
	affected, err := pitu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pitu *ProjectImageTranslationUpdate) Exec(ctx context.Context) error {
	_, err := pitu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pitu *ProjectImageTranslationUpdate) ExecX(ctx context.Context) {
	if err := pitu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pitu *ProjectImageTranslationUpdate) defaults() {
	if _, ok := pitu.mutation.UpdatedAt(); !ok {
		v := projectimagetranslation.UpdateDefaultUpdatedAt()
		pitu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pitu *ProjectImageTranslationUpdate) check() error {
	if v, ok := pitu.mutation.LanguageCode(); ok {
		if err := projectimagetranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "ProjectImageTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := pitu.mutation.AltText(); ok {
		if err := projectimagetranslation.AltTextValidator(v); err != nil {
			return &ValidationError{Name: "alt_text", err: fmt.Errorf(`ent: validator failed for field "ProjectImageTranslation.alt_text": %w`, err)}
		}
	}
	if pitu.mutation.ProjectImageCleared() && len(pitu.mutation.ProjectImageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectImageTranslation.project_image"`)
	}
	if pitu.mutation.LanguageCleared() && len(pitu.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectImageTranslation.language"`)
	}
	return nil
}

func (pitu *ProjectImageTranslationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pitu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectimagetranslation.Table, projectimagetranslation.Columns, sqlgraph.NewFieldSpec(projectimagetranslation.FieldID, field.TypeUUID))
	if ps := pitu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pitu.mutation.AltText(); ok {
		_spec.SetField(projectimagetranslation.FieldAltText, field.TypeString, value)
	}
	if pitu.mutation.AltTextCleared() {
		_spec.ClearField(projectimagetranslation.FieldAltText, field.TypeString)
	}
	if value, ok := pitu.mutation.Caption(); ok {
		_spec.SetField(projectimagetranslation.FieldCaption, field.TypeString, value)
	}
	if pitu.mutation.CaptionCleared() {
		_spec.ClearField(projectimagetranslation.FieldCaption, field.TypeString)
	}
	if value, ok := pitu.mutation.UpdatedAt(); ok {
		_spec.SetField(projectimagetranslation.FieldUpdatedAt, field.TypeTime, value)
	}
	if pitu.mutation.ProjectImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectimagetranslation.ProjectImageTable,
			Columns: []string{projectimagetranslation.ProjectImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectimage.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pitu.mutation.ProjectImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectimagetranslation.ProjectImageTable,
			Columns: []string{projectimagetranslation.ProjectImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectimage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pitu.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectimagetranslation.LanguageTable,
			Columns: []string{projectimagetranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pitu.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectimagetranslation.LanguageTable,
			Columns: []string{projectimagetranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pitu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectimagetranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pitu.mutation.done = true
	return n, nil
}

// ProjectImageTranslationUpdateOne is the builder for updating a single ProjectImageTranslation entity.
type ProjectImageTranslationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectImageTranslationMutation
}

// SetProjectImageID sets the "project_image_id" field.
func (pituo *ProjectImageTranslationUpdateOne) SetProjectImageID(u uuid.UUID) *ProjectImageTranslationUpdateOne {
	pituo.mutation.SetProjectImageID(u)
	return pituo
}

// SetNillableProjectImageID sets the "project_image_id" field if the given value is not nil.
func (pituo *ProjectImageTranslationUpdateOne) SetNillableProjectImageID(u *uuid.UUID) *ProjectImageTranslationUpdateOne {
	if u != nil {
		pituo.SetProjectImageID(*u)
	}
	return pituo
}

// SetLanguageCode sets the "language_code" field.
func (pituo *ProjectImageTranslationUpdateOne) SetLanguageCode(s string) *ProjectImageTranslationUpdateOne {
	pituo.mutation.SetLanguageCode(s)
	return pituo
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (pituo *ProjectImageTranslationUpdateOne) SetNillableLanguageCode(s *string) *ProjectImageTranslationUpdateOne {
	if s != nil {
		pituo.SetLanguageCode(*s)
	}
	return pituo
}

// SetAltText sets the "alt_text" field.
func (pituo *ProjectImageTranslationUpdateOne) SetAltText(s string) *ProjectImageTranslationUpdateOne {
	pituo.mutation.SetAltText(s)
	return pituo
}

// SetNillableAltText sets the "alt_text" field if the given value is not nil.
func (pituo *ProjectImageTranslationUpdateOne) SetNillableAltText(s *string) *ProjectImageTranslationUpdateOne {
	if s != nil {
		pituo.SetAltText(*s)
	}
	return pituo
}

// ClearAltText clears the value of the "alt_text" field.
func (pituo *ProjectImageTranslationUpdateOne) ClearAltText() *ProjectImageTranslationUpdateOne {
	pituo.mutation.ClearAltText()
	return pituo
}

// SetCaption sets the "caption" field.
func (pituo *ProjectImageTranslationUpdateOne) SetCaption(s string) *ProjectImageTranslationUpdateOne {
	pituo.mutation.SetCaption(s)
	return pituo
}

// SetNillableCaption sets the "caption" field if the given value is not nil.
func (pituo *ProjectImageTranslationUpdateOne) SetNillableCaption(s *string) *ProjectImageTranslationUpdateOne {
	if s != nil {
		pituo.SetCaption(*s)
	}
	return pituo
}

// ClearCaption clears the value of the "caption" field.
func (pituo *ProjectImageTranslationUpdateOne) ClearCaption() *ProjectImageTranslationUpdateOne {
	pituo.mutation.ClearCaption()
	return pituo
}

// SetUpdatedAt sets the "updated_at" field.
func (pituo *ProjectImageTranslationUpdateOne) SetUpdatedAt(t time.Time) *ProjectImageTranslationUpdateOne {
	pituo.mutation.SetUpdatedAt(t)
	return pituo
}

// SetProjectImage sets the "project_image" edge to the ProjectImage entity.
func (pituo *ProjectImageTranslationUpdateOne) SetProjectImage(p *ProjectImage) *ProjectImageTranslationUpdateOne {
	return pituo.SetProjectImageID(p.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (pituo *ProjectImageTranslationUpdateOne) SetLanguageID(id string) *ProjectImageTranslationUpdateOne {
	pituo.mutation.SetLanguageID(id)
	return pituo
}

// SetLanguage sets the "language" edge to the Language entity.
func (pituo *ProjectImageTranslationUpdateOne) SetLanguage(l *Language) *ProjectImageTranslationUpdateOne {
	return pituo.SetLanguageID(l.ID)
}

// Mutation returns the ProjectImageTranslationMutation object of the builder.
func (pituo *ProjectImageTranslationUpdateOne) Mutation() *ProjectImageTranslationMutation {
	return pituo.mutation
}

// ClearProjectImage clears the "project_image" edge to the ProjectImage entity.
func (pituo *ProjectImageTranslationUpdateOne) ClearProjectImage() *ProjectImageTranslationUpdateOne {
	pituo.mutation.ClearProjectImage()
	return pituo
}

// ClearLanguage clears the "language" edge to the Language entity.
func (pituo *ProjectImageTranslationUpdateOne) ClearLanguage() *ProjectImageTranslationUpdateOne {
	pituo.mutation.ClearLanguage()
	return pituo
}

// Where appends a list predicates to the ProjectImageTranslationUpdate builder.
func (pituo *ProjectImageTranslationUpdateOne) Where(ps ...predicate.ProjectImageTranslation) *ProjectImageTranslationUpdateOne {
	pituo.mutation.Where(ps...)
	return pituo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pituo *ProjectImageTranslationUpdateOne) Select(field string, fields ...string) *ProjectImageTranslationUpdateOne {
	pituo.fields = append([]string{field}, fields...)
	return pituo
}

// Save executes the query and returns the updated ProjectImageTranslation entity.
func (pituo *ProjectImageTranslationUpdateOne) Save(ctx context.Context) (*ProjectImageTranslation, error) {
	pituo.defaults()
	return withHooks(ctx, pituo.sqlSave, pituo.mutation, pituo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pituo *ProjectImageTranslationUpdateOne) SaveX(ctx context.Context) *ProjectImageTranslation {
	node, err := pituo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pituo *ProjectImageTranslationUpdateOne) Exec(ctx context.Context) error {
	_, err := pituo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pituo *ProjectImageTranslationUpdateOne) ExecX(ctx context.Context) {
	if err := pituo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pituo *ProjectImageTranslationUpdateOne) defaults() {
	if _, ok := pituo.mutation.UpdatedAt(); !ok {
		v := projectimagetranslation.UpdateDefaultUpdatedAt()
		pituo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pituo *ProjectImageTranslationUpdateOne) check() error {
	if v, ok := pituo.mutation.LanguageCode(); ok {
		if err := projectimagetranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "ProjectImageTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := pituo.mutation.AltText(); ok {
		if err := projectimagetranslation.AltTextValidator(v); err != nil {
			return &ValidationError{Name: "alt_text", err: fmt.Errorf(`ent: validator failed for field "ProjectImageTranslation.alt_text": %w`, err)}
		}
	}
	if pituo.mutation.ProjectImageCleared() && len(pituo.mutation.ProjectImageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectImageTranslation.project_image"`)
	}
	if pituo.mutation.LanguageCleared() && len(pituo.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectImageTranslation.language"`)
	}
	return nil
}

func (pituo *ProjectImageTranslationUpdateOne) sqlSave(ctx context.Context) (_node *ProjectImageTranslation, err error) {
	if err := pituo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectimagetranslation.Table, projectimagetranslation.Columns, sqlgraph.NewFieldSpec(projectimagetranslation.FieldID, field.TypeUUID))
	id, ok := pituo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProjectImageTranslation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pituo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectimagetranslation.FieldID)
		for _, f := range fields {
			if !projectimagetranslation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != projectimagetranslation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pituo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pituo.mutation.AltText(); ok {
		_spec.SetField(projectimagetranslation.FieldAltText, field.TypeString, value)
	}
	if pituo.mutation.AltTextCleared() {
		_spec.ClearField(projectimagetranslation.FieldAltText, field.TypeString)
	}
	if value, ok := pituo.mutation.Caption(); ok {
		_spec.SetField(projectimagetranslation.FieldCaption, field.TypeString, value)
	}
	if pituo.mutation.CaptionCleared() {
		_spec.ClearField(projectimagetranslation.FieldCaption, field.TypeString)
	}
	if value, ok := pituo.mutation.UpdatedAt(); ok {
		_spec.SetField(projectimagetranslation.FieldUpdatedAt, field.TypeTime, value)
	}
	if pituo.mutation.ProjectImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectimagetranslation.ProjectImageTable,
			Columns: []string{projectimagetranslation.ProjectImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectimage.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pituo.mutation.ProjectImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectimagetranslation.ProjectImageTable,
			Columns: []string{projectimagetranslation.ProjectImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectimage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pituo.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectimagetranslation.LanguageTable,
			Columns: []string{projectimagetranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pituo.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectimagetranslation.LanguageTable,
			Columns: []string{projectimagetranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProjectImageTranslation{config: pituo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pituo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectimagetranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pituo.mutation.done = true
	return _node, nil
}
