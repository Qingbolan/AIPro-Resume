// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/workexperience"
	"silan-backend/internal/ent/workexperiencetranslation"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// WorkExperienceTranslation is the model entity for the WorkExperienceTranslation schema.
type WorkExperienceTranslation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// WorkExperienceID holds the value of the "work_experience_id" field.
	WorkExperienceID uuid.UUID `json:"work_experience_id,omitempty"`
	// LanguageCode holds the value of the "language_code" field.
	LanguageCode string `json:"language_code,omitempty"`
	// Company holds the value of the "company" field.
	Company string `json:"company,omitempty"`
	// Position holds the value of the "position" field.
	Position string `json:"position,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkExperienceTranslationQuery when eager-loading is set.
	Edges        WorkExperienceTranslationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WorkExperienceTranslationEdges holds the relations/edges for other nodes in the graph.
type WorkExperienceTranslationEdges struct {
	// WorkExperience holds the value of the work_experience edge.
	WorkExperience *WorkExperience `json:"work_experience,omitempty"`
	// Language holds the value of the language edge.
	Language *Language `json:"language,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// WorkExperienceOrErr returns the WorkExperience value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkExperienceTranslationEdges) WorkExperienceOrErr() (*WorkExperience, error) {
	if e.WorkExperience != nil {
		return e.WorkExperience, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: workexperience.Label}
	}
	return nil, &NotLoadedError{edge: "work_experience"}
}

// LanguageOrErr returns the Language value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkExperienceTranslationEdges) LanguageOrErr() (*Language, error) {
	if e.Language != nil {
		return e.Language, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: language.Label}
	}
	return nil, &NotLoadedError{edge: "language"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkExperienceTranslation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workexperiencetranslation.FieldLanguageCode, workexperiencetranslation.FieldCompany, workexperiencetranslation.FieldPosition, workexperiencetranslation.FieldLocation:
			values[i] = new(sql.NullString)
		case workexperiencetranslation.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case workexperiencetranslation.FieldID, workexperiencetranslation.FieldWorkExperienceID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkExperienceTranslation fields.
func (wet *WorkExperienceTranslation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workexperiencetranslation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				wet.ID = *value
			}
		case workexperiencetranslation.FieldWorkExperienceID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field work_experience_id", values[i])
			} else if value != nil {
				wet.WorkExperienceID = *value
			}
		case workexperiencetranslation.FieldLanguageCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language_code", values[i])
			} else if value.Valid {
				wet.LanguageCode = value.String
			}
		case workexperiencetranslation.FieldCompany:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company", values[i])
			} else if value.Valid {
				wet.Company = value.String
			}
		case workexperiencetranslation.FieldPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				wet.Position = value.String
			}
		case workexperiencetranslation.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				wet.Location = value.String
			}
		case workexperiencetranslation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wet.CreatedAt = value.Time
			}
		default:
			wet.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkExperienceTranslation.
// This includes values selected through modifiers, order, etc.
func (wet *WorkExperienceTranslation) Value(name string) (ent.Value, error) {
	return wet.selectValues.Get(name)
}

// QueryWorkExperience queries the "work_experience" edge of the WorkExperienceTranslation entity.
func (wet *WorkExperienceTranslation) QueryWorkExperience() *WorkExperienceQuery {
	return NewWorkExperienceTranslationClient(wet.config).QueryWorkExperience(wet)
}

// QueryLanguage queries the "language" edge of the WorkExperienceTranslation entity.
func (wet *WorkExperienceTranslation) QueryLanguage() *LanguageQuery {
	return NewWorkExperienceTranslationClient(wet.config).QueryLanguage(wet)
}

// Update returns a builder for updating this WorkExperienceTranslation.
// Note that you need to call WorkExperienceTranslation.Unwrap() before calling this method if this WorkExperienceTranslation
// was returned from a transaction, and the transaction was committed or rolled back.
func (wet *WorkExperienceTranslation) Update() *WorkExperienceTranslationUpdateOne {
	return NewWorkExperienceTranslationClient(wet.config).UpdateOne(wet)
}

// Unwrap unwraps the WorkExperienceTranslation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wet *WorkExperienceTranslation) Unwrap() *WorkExperienceTranslation {
	_tx, ok := wet.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkExperienceTranslation is not a transactional entity")
	}
	wet.config.driver = _tx.drv
	return wet
}

// String implements the fmt.Stringer.
func (wet *WorkExperienceTranslation) String() string {
	var builder strings.Builder
	builder.WriteString("WorkExperienceTranslation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wet.ID))
	builder.WriteString("work_experience_id=")
	builder.WriteString(fmt.Sprintf("%v", wet.WorkExperienceID))
	builder.WriteString(", ")
	builder.WriteString("language_code=")
	builder.WriteString(wet.LanguageCode)
	builder.WriteString(", ")
	builder.WriteString("company=")
	builder.WriteString(wet.Company)
	builder.WriteString(", ")
	builder.WriteString("position=")
	builder.WriteString(wet.Position)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(wet.Location)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(wet.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// WorkExperienceTranslations is a parsable slice of WorkExperienceTranslation.
type WorkExperienceTranslations []*WorkExperienceTranslation
