// Code generated by ent, DO NOT EDIT.

package personalinfotranslation

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldLTE(FieldID, id))
}

// PersonalInfoID applies equality check predicate on the "personal_info_id" field. It's identical to PersonalInfoIDEQ.
func PersonalInfoID(v uuid.UUID) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldEQ(FieldPersonalInfoID, v))
}

// LanguageCode applies equality check predicate on the "language_code" field. It's identical to LanguageCodeEQ.
func LanguageCode(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldEQ(FieldLanguageCode, v))
}

// FullName applies equality check predicate on the "full_name" field. It's identical to FullNameEQ.
func FullName(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldEQ(FieldFullName, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldEQ(FieldTitle, v))
}

// CurrentStatus applies equality check predicate on the "current_status" field. It's identical to CurrentStatusEQ.
func CurrentStatus(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldEQ(FieldCurrentStatus, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldEQ(FieldLocation, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldEQ(FieldCreatedAt, v))
}

// PersonalInfoIDEQ applies the EQ predicate on the "personal_info_id" field.
func PersonalInfoIDEQ(v uuid.UUID) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldEQ(FieldPersonalInfoID, v))
}

// PersonalInfoIDNEQ applies the NEQ predicate on the "personal_info_id" field.
func PersonalInfoIDNEQ(v uuid.UUID) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldNEQ(FieldPersonalInfoID, v))
}

// PersonalInfoIDIn applies the In predicate on the "personal_info_id" field.
func PersonalInfoIDIn(vs ...uuid.UUID) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldIn(FieldPersonalInfoID, vs...))
}

// PersonalInfoIDNotIn applies the NotIn predicate on the "personal_info_id" field.
func PersonalInfoIDNotIn(vs ...uuid.UUID) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldNotIn(FieldPersonalInfoID, vs...))
}

// LanguageCodeEQ applies the EQ predicate on the "language_code" field.
func LanguageCodeEQ(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldEQ(FieldLanguageCode, v))
}

// LanguageCodeNEQ applies the NEQ predicate on the "language_code" field.
func LanguageCodeNEQ(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldNEQ(FieldLanguageCode, v))
}

// LanguageCodeIn applies the In predicate on the "language_code" field.
func LanguageCodeIn(vs ...string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldIn(FieldLanguageCode, vs...))
}

// LanguageCodeNotIn applies the NotIn predicate on the "language_code" field.
func LanguageCodeNotIn(vs ...string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldNotIn(FieldLanguageCode, vs...))
}

// LanguageCodeGT applies the GT predicate on the "language_code" field.
func LanguageCodeGT(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldGT(FieldLanguageCode, v))
}

// LanguageCodeGTE applies the GTE predicate on the "language_code" field.
func LanguageCodeGTE(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldGTE(FieldLanguageCode, v))
}

// LanguageCodeLT applies the LT predicate on the "language_code" field.
func LanguageCodeLT(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldLT(FieldLanguageCode, v))
}

// LanguageCodeLTE applies the LTE predicate on the "language_code" field.
func LanguageCodeLTE(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldLTE(FieldLanguageCode, v))
}

// LanguageCodeContains applies the Contains predicate on the "language_code" field.
func LanguageCodeContains(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldContains(FieldLanguageCode, v))
}

// LanguageCodeHasPrefix applies the HasPrefix predicate on the "language_code" field.
func LanguageCodeHasPrefix(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldHasPrefix(FieldLanguageCode, v))
}

// LanguageCodeHasSuffix applies the HasSuffix predicate on the "language_code" field.
func LanguageCodeHasSuffix(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldHasSuffix(FieldLanguageCode, v))
}

// LanguageCodeEqualFold applies the EqualFold predicate on the "language_code" field.
func LanguageCodeEqualFold(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldEqualFold(FieldLanguageCode, v))
}

// LanguageCodeContainsFold applies the ContainsFold predicate on the "language_code" field.
func LanguageCodeContainsFold(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldContainsFold(FieldLanguageCode, v))
}

// FullNameEQ applies the EQ predicate on the "full_name" field.
func FullNameEQ(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldEQ(FieldFullName, v))
}

// FullNameNEQ applies the NEQ predicate on the "full_name" field.
func FullNameNEQ(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldNEQ(FieldFullName, v))
}

// FullNameIn applies the In predicate on the "full_name" field.
func FullNameIn(vs ...string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldIn(FieldFullName, vs...))
}

// FullNameNotIn applies the NotIn predicate on the "full_name" field.
func FullNameNotIn(vs ...string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldNotIn(FieldFullName, vs...))
}

// FullNameGT applies the GT predicate on the "full_name" field.
func FullNameGT(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldGT(FieldFullName, v))
}

// FullNameGTE applies the GTE predicate on the "full_name" field.
func FullNameGTE(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldGTE(FieldFullName, v))
}

// FullNameLT applies the LT predicate on the "full_name" field.
func FullNameLT(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldLT(FieldFullName, v))
}

// FullNameLTE applies the LTE predicate on the "full_name" field.
func FullNameLTE(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldLTE(FieldFullName, v))
}

// FullNameContains applies the Contains predicate on the "full_name" field.
func FullNameContains(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldContains(FieldFullName, v))
}

// FullNameHasPrefix applies the HasPrefix predicate on the "full_name" field.
func FullNameHasPrefix(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldHasPrefix(FieldFullName, v))
}

// FullNameHasSuffix applies the HasSuffix predicate on the "full_name" field.
func FullNameHasSuffix(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldHasSuffix(FieldFullName, v))
}

// FullNameIsNil applies the IsNil predicate on the "full_name" field.
func FullNameIsNil() predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldIsNull(FieldFullName))
}

// FullNameNotNil applies the NotNil predicate on the "full_name" field.
func FullNameNotNil() predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldNotNull(FieldFullName))
}

// FullNameEqualFold applies the EqualFold predicate on the "full_name" field.
func FullNameEqualFold(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldEqualFold(FieldFullName, v))
}

// FullNameContainsFold applies the ContainsFold predicate on the "full_name" field.
func FullNameContainsFold(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldContainsFold(FieldFullName, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldIsNull(FieldTitle))
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldNotNull(FieldTitle))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldContainsFold(FieldTitle, v))
}

// CurrentStatusEQ applies the EQ predicate on the "current_status" field.
func CurrentStatusEQ(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldEQ(FieldCurrentStatus, v))
}

// CurrentStatusNEQ applies the NEQ predicate on the "current_status" field.
func CurrentStatusNEQ(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldNEQ(FieldCurrentStatus, v))
}

// CurrentStatusIn applies the In predicate on the "current_status" field.
func CurrentStatusIn(vs ...string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldIn(FieldCurrentStatus, vs...))
}

// CurrentStatusNotIn applies the NotIn predicate on the "current_status" field.
func CurrentStatusNotIn(vs ...string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldNotIn(FieldCurrentStatus, vs...))
}

// CurrentStatusGT applies the GT predicate on the "current_status" field.
func CurrentStatusGT(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldGT(FieldCurrentStatus, v))
}

// CurrentStatusGTE applies the GTE predicate on the "current_status" field.
func CurrentStatusGTE(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldGTE(FieldCurrentStatus, v))
}

// CurrentStatusLT applies the LT predicate on the "current_status" field.
func CurrentStatusLT(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldLT(FieldCurrentStatus, v))
}

// CurrentStatusLTE applies the LTE predicate on the "current_status" field.
func CurrentStatusLTE(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldLTE(FieldCurrentStatus, v))
}

// CurrentStatusContains applies the Contains predicate on the "current_status" field.
func CurrentStatusContains(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldContains(FieldCurrentStatus, v))
}

// CurrentStatusHasPrefix applies the HasPrefix predicate on the "current_status" field.
func CurrentStatusHasPrefix(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldHasPrefix(FieldCurrentStatus, v))
}

// CurrentStatusHasSuffix applies the HasSuffix predicate on the "current_status" field.
func CurrentStatusHasSuffix(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldHasSuffix(FieldCurrentStatus, v))
}

// CurrentStatusIsNil applies the IsNil predicate on the "current_status" field.
func CurrentStatusIsNil() predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldIsNull(FieldCurrentStatus))
}

// CurrentStatusNotNil applies the NotNil predicate on the "current_status" field.
func CurrentStatusNotNil() predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldNotNull(FieldCurrentStatus))
}

// CurrentStatusEqualFold applies the EqualFold predicate on the "current_status" field.
func CurrentStatusEqualFold(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldEqualFold(FieldCurrentStatus, v))
}

// CurrentStatusContainsFold applies the ContainsFold predicate on the "current_status" field.
func CurrentStatusContainsFold(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldContainsFold(FieldCurrentStatus, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldIsNull(FieldLocation))
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldNotNull(FieldLocation))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldContainsFold(FieldLocation, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.FieldLTE(FieldCreatedAt, v))
}

// HasPersonalInfo applies the HasEdge predicate on the "personal_info" edge.
func HasPersonalInfo() predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PersonalInfoTable, PersonalInfoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPersonalInfoWith applies the HasEdge predicate on the "personal_info" edge with a given conditions (other predicates).
func HasPersonalInfoWith(preds ...predicate.PersonalInfo) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(func(s *sql.Selector) {
		step := newPersonalInfoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLanguage applies the HasEdge predicate on the "language" edge.
func HasLanguage() predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LanguageTable, LanguageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLanguageWith applies the HasEdge predicate on the "language" edge with a given conditions (other predicates).
func HasLanguageWith(preds ...predicate.Language) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(func(s *sql.Selector) {
		step := newLanguageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PersonalInfoTranslation) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PersonalInfoTranslation) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PersonalInfoTranslation) predicate.PersonalInfoTranslation {
	return predicate.PersonalInfoTranslation(sql.NotPredicates(p))
}
