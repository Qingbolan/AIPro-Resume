// Code generated by ent, DO NOT EDIT.

package projectrelationship

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldLTE(FieldID, id))
}

// SourceProjectID applies equality check predicate on the "source_project_id" field. It's identical to SourceProjectIDEQ.
func SourceProjectID(v uuid.UUID) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldEQ(FieldSourceProjectID, v))
}

// TargetProjectID applies equality check predicate on the "target_project_id" field. It's identical to TargetProjectIDEQ.
func TargetProjectID(v uuid.UUID) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldEQ(FieldTargetProjectID, v))
}

// RelationshipType applies equality check predicate on the "relationship_type" field. It's identical to RelationshipTypeEQ.
func RelationshipType(v string) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldEQ(FieldRelationshipType, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldEQ(FieldCreatedAt, v))
}

// SourceProjectIDEQ applies the EQ predicate on the "source_project_id" field.
func SourceProjectIDEQ(v uuid.UUID) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldEQ(FieldSourceProjectID, v))
}

// SourceProjectIDNEQ applies the NEQ predicate on the "source_project_id" field.
func SourceProjectIDNEQ(v uuid.UUID) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldNEQ(FieldSourceProjectID, v))
}

// SourceProjectIDIn applies the In predicate on the "source_project_id" field.
func SourceProjectIDIn(vs ...uuid.UUID) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldIn(FieldSourceProjectID, vs...))
}

// SourceProjectIDNotIn applies the NotIn predicate on the "source_project_id" field.
func SourceProjectIDNotIn(vs ...uuid.UUID) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldNotIn(FieldSourceProjectID, vs...))
}

// TargetProjectIDEQ applies the EQ predicate on the "target_project_id" field.
func TargetProjectIDEQ(v uuid.UUID) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldEQ(FieldTargetProjectID, v))
}

// TargetProjectIDNEQ applies the NEQ predicate on the "target_project_id" field.
func TargetProjectIDNEQ(v uuid.UUID) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldNEQ(FieldTargetProjectID, v))
}

// TargetProjectIDIn applies the In predicate on the "target_project_id" field.
func TargetProjectIDIn(vs ...uuid.UUID) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldIn(FieldTargetProjectID, vs...))
}

// TargetProjectIDNotIn applies the NotIn predicate on the "target_project_id" field.
func TargetProjectIDNotIn(vs ...uuid.UUID) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldNotIn(FieldTargetProjectID, vs...))
}

// RelationshipTypeEQ applies the EQ predicate on the "relationship_type" field.
func RelationshipTypeEQ(v string) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldEQ(FieldRelationshipType, v))
}

// RelationshipTypeNEQ applies the NEQ predicate on the "relationship_type" field.
func RelationshipTypeNEQ(v string) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldNEQ(FieldRelationshipType, v))
}

// RelationshipTypeIn applies the In predicate on the "relationship_type" field.
func RelationshipTypeIn(vs ...string) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldIn(FieldRelationshipType, vs...))
}

// RelationshipTypeNotIn applies the NotIn predicate on the "relationship_type" field.
func RelationshipTypeNotIn(vs ...string) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldNotIn(FieldRelationshipType, vs...))
}

// RelationshipTypeGT applies the GT predicate on the "relationship_type" field.
func RelationshipTypeGT(v string) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldGT(FieldRelationshipType, v))
}

// RelationshipTypeGTE applies the GTE predicate on the "relationship_type" field.
func RelationshipTypeGTE(v string) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldGTE(FieldRelationshipType, v))
}

// RelationshipTypeLT applies the LT predicate on the "relationship_type" field.
func RelationshipTypeLT(v string) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldLT(FieldRelationshipType, v))
}

// RelationshipTypeLTE applies the LTE predicate on the "relationship_type" field.
func RelationshipTypeLTE(v string) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldLTE(FieldRelationshipType, v))
}

// RelationshipTypeContains applies the Contains predicate on the "relationship_type" field.
func RelationshipTypeContains(v string) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldContains(FieldRelationshipType, v))
}

// RelationshipTypeHasPrefix applies the HasPrefix predicate on the "relationship_type" field.
func RelationshipTypeHasPrefix(v string) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldHasPrefix(FieldRelationshipType, v))
}

// RelationshipTypeHasSuffix applies the HasSuffix predicate on the "relationship_type" field.
func RelationshipTypeHasSuffix(v string) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldHasSuffix(FieldRelationshipType, v))
}

// RelationshipTypeEqualFold applies the EqualFold predicate on the "relationship_type" field.
func RelationshipTypeEqualFold(v string) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldEqualFold(FieldRelationshipType, v))
}

// RelationshipTypeContainsFold applies the ContainsFold predicate on the "relationship_type" field.
func RelationshipTypeContainsFold(v string) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldContainsFold(FieldRelationshipType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.FieldLTE(FieldCreatedAt, v))
}

// HasSourceProject applies the HasEdge predicate on the "source_project" edge.
func HasSourceProject() predicate.ProjectRelationship {
	return predicate.ProjectRelationship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SourceProjectTable, SourceProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSourceProjectWith applies the HasEdge predicate on the "source_project" edge with a given conditions (other predicates).
func HasSourceProjectWith(preds ...predicate.Project) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(func(s *sql.Selector) {
		step := newSourceProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTargetProject applies the HasEdge predicate on the "target_project" edge.
func HasTargetProject() predicate.ProjectRelationship {
	return predicate.ProjectRelationship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TargetProjectTable, TargetProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTargetProjectWith applies the HasEdge predicate on the "target_project" edge with a given conditions (other predicates).
func HasTargetProjectWith(preds ...predicate.Project) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(func(s *sql.Selector) {
		step := newTargetProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProjectRelationship) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProjectRelationship) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProjectRelationship) predicate.ProjectRelationship {
	return predicate.ProjectRelationship(sql.NotPredicates(p))
}
