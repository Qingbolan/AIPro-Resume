// Code generated by ent, DO NOT EDIT.

package projectrelationship

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the projectrelationship type in the database.
	Label = "project_relationship"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSourceProjectID holds the string denoting the source_project_id field in the database.
	FieldSourceProjectID = "source_project_id"
	// FieldTargetProjectID holds the string denoting the target_project_id field in the database.
	FieldTargetProjectID = "target_project_id"
	// FieldRelationshipType holds the string denoting the relationship_type field in the database.
	FieldRelationshipType = "relationship_type"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeSourceProject holds the string denoting the source_project edge name in mutations.
	EdgeSourceProject = "source_project"
	// EdgeTargetProject holds the string denoting the target_project edge name in mutations.
	EdgeTargetProject = "target_project"
	// Table holds the table name of the projectrelationship in the database.
	Table = "project_relationships"
	// SourceProjectTable is the table that holds the source_project relation/edge.
	SourceProjectTable = "project_relationships"
	// SourceProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	SourceProjectInverseTable = "projects"
	// SourceProjectColumn is the table column denoting the source_project relation/edge.
	SourceProjectColumn = "source_project_id"
	// TargetProjectTable is the table that holds the target_project relation/edge.
	TargetProjectTable = "project_relationships"
	// TargetProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	TargetProjectInverseTable = "projects"
	// TargetProjectColumn is the table column denoting the target_project relation/edge.
	TargetProjectColumn = "target_project_id"
)

// Columns holds all SQL columns for projectrelationship fields.
var Columns = []string{
	FieldID,
	FieldSourceProjectID,
	FieldTargetProjectID,
	FieldRelationshipType,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// RelationshipTypeValidator is a validator for the "relationship_type" field. It is called by the builders before save.
	RelationshipTypeValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ProjectRelationship queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySourceProjectID orders the results by the source_project_id field.
func BySourceProjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceProjectID, opts...).ToFunc()
}

// ByTargetProjectID orders the results by the target_project_id field.
func ByTargetProjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetProjectID, opts...).ToFunc()
}

// ByRelationshipType orders the results by the relationship_type field.
func ByRelationshipType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRelationshipType, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// BySourceProjectField orders the results by source_project field.
func BySourceProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSourceProjectStep(), sql.OrderByField(field, opts...))
	}
}

// ByTargetProjectField orders the results by target_project field.
func ByTargetProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTargetProjectStep(), sql.OrderByField(field, opts...))
	}
}
func newSourceProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SourceProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SourceProjectTable, SourceProjectColumn),
	)
}
func newTargetProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TargetProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TargetProjectTable, TargetProjectColumn),
	)
}
