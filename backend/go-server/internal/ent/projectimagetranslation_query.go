// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/projectimage"
	"silan-backend/internal/ent/projectimagetranslation"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProjectImageTranslationQuery is the builder for querying ProjectImageTranslation entities.
type ProjectImageTranslationQuery struct {
	config
	ctx              *QueryContext
	order            []projectimagetranslation.OrderOption
	inters           []Interceptor
	predicates       []predicate.ProjectImageTranslation
	withProjectImage *ProjectImageQuery
	withLanguage     *LanguageQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProjectImageTranslationQuery builder.
func (pitq *ProjectImageTranslationQuery) Where(ps ...predicate.ProjectImageTranslation) *ProjectImageTranslationQuery {
	pitq.predicates = append(pitq.predicates, ps...)
	return pitq
}

// Limit the number of records to be returned by this query.
func (pitq *ProjectImageTranslationQuery) Limit(limit int) *ProjectImageTranslationQuery {
	pitq.ctx.Limit = &limit
	return pitq
}

// Offset to start from.
func (pitq *ProjectImageTranslationQuery) Offset(offset int) *ProjectImageTranslationQuery {
	pitq.ctx.Offset = &offset
	return pitq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pitq *ProjectImageTranslationQuery) Unique(unique bool) *ProjectImageTranslationQuery {
	pitq.ctx.Unique = &unique
	return pitq
}

// Order specifies how the records should be ordered.
func (pitq *ProjectImageTranslationQuery) Order(o ...projectimagetranslation.OrderOption) *ProjectImageTranslationQuery {
	pitq.order = append(pitq.order, o...)
	return pitq
}

// QueryProjectImage chains the current query on the "project_image" edge.
func (pitq *ProjectImageTranslationQuery) QueryProjectImage() *ProjectImageQuery {
	query := (&ProjectImageClient{config: pitq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pitq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pitq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(projectimagetranslation.Table, projectimagetranslation.FieldID, selector),
			sqlgraph.To(projectimage.Table, projectimage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectimagetranslation.ProjectImageTable, projectimagetranslation.ProjectImageColumn),
		)
		fromU = sqlgraph.SetNeighbors(pitq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLanguage chains the current query on the "language" edge.
func (pitq *ProjectImageTranslationQuery) QueryLanguage() *LanguageQuery {
	query := (&LanguageClient{config: pitq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pitq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pitq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(projectimagetranslation.Table, projectimagetranslation.FieldID, selector),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectimagetranslation.LanguageTable, projectimagetranslation.LanguageColumn),
		)
		fromU = sqlgraph.SetNeighbors(pitq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProjectImageTranslation entity from the query.
// Returns a *NotFoundError when no ProjectImageTranslation was found.
func (pitq *ProjectImageTranslationQuery) First(ctx context.Context) (*ProjectImageTranslation, error) {
	nodes, err := pitq.Limit(1).All(setContextOp(ctx, pitq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{projectimagetranslation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pitq *ProjectImageTranslationQuery) FirstX(ctx context.Context) *ProjectImageTranslation {
	node, err := pitq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProjectImageTranslation ID from the query.
// Returns a *NotFoundError when no ProjectImageTranslation ID was found.
func (pitq *ProjectImageTranslationQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pitq.Limit(1).IDs(setContextOp(ctx, pitq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{projectimagetranslation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pitq *ProjectImageTranslationQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := pitq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProjectImageTranslation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProjectImageTranslation entity is found.
// Returns a *NotFoundError when no ProjectImageTranslation entities are found.
func (pitq *ProjectImageTranslationQuery) Only(ctx context.Context) (*ProjectImageTranslation, error) {
	nodes, err := pitq.Limit(2).All(setContextOp(ctx, pitq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{projectimagetranslation.Label}
	default:
		return nil, &NotSingularError{projectimagetranslation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pitq *ProjectImageTranslationQuery) OnlyX(ctx context.Context) *ProjectImageTranslation {
	node, err := pitq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProjectImageTranslation ID in the query.
// Returns a *NotSingularError when more than one ProjectImageTranslation ID is found.
// Returns a *NotFoundError when no entities are found.
func (pitq *ProjectImageTranslationQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pitq.Limit(2).IDs(setContextOp(ctx, pitq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{projectimagetranslation.Label}
	default:
		err = &NotSingularError{projectimagetranslation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pitq *ProjectImageTranslationQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := pitq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProjectImageTranslations.
func (pitq *ProjectImageTranslationQuery) All(ctx context.Context) ([]*ProjectImageTranslation, error) {
	ctx = setContextOp(ctx, pitq.ctx, ent.OpQueryAll)
	if err := pitq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ProjectImageTranslation, *ProjectImageTranslationQuery]()
	return withInterceptors[[]*ProjectImageTranslation](ctx, pitq, qr, pitq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pitq *ProjectImageTranslationQuery) AllX(ctx context.Context) []*ProjectImageTranslation {
	nodes, err := pitq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProjectImageTranslation IDs.
func (pitq *ProjectImageTranslationQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if pitq.ctx.Unique == nil && pitq.path != nil {
		pitq.Unique(true)
	}
	ctx = setContextOp(ctx, pitq.ctx, ent.OpQueryIDs)
	if err = pitq.Select(projectimagetranslation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pitq *ProjectImageTranslationQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := pitq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pitq *ProjectImageTranslationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pitq.ctx, ent.OpQueryCount)
	if err := pitq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pitq, querierCount[*ProjectImageTranslationQuery](), pitq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pitq *ProjectImageTranslationQuery) CountX(ctx context.Context) int {
	count, err := pitq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pitq *ProjectImageTranslationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pitq.ctx, ent.OpQueryExist)
	switch _, err := pitq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pitq *ProjectImageTranslationQuery) ExistX(ctx context.Context) bool {
	exist, err := pitq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProjectImageTranslationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pitq *ProjectImageTranslationQuery) Clone() *ProjectImageTranslationQuery {
	if pitq == nil {
		return nil
	}
	return &ProjectImageTranslationQuery{
		config:           pitq.config,
		ctx:              pitq.ctx.Clone(),
		order:            append([]projectimagetranslation.OrderOption{}, pitq.order...),
		inters:           append([]Interceptor{}, pitq.inters...),
		predicates:       append([]predicate.ProjectImageTranslation{}, pitq.predicates...),
		withProjectImage: pitq.withProjectImage.Clone(),
		withLanguage:     pitq.withLanguage.Clone(),
		// clone intermediate query.
		sql:  pitq.sql.Clone(),
		path: pitq.path,
	}
}

// WithProjectImage tells the query-builder to eager-load the nodes that are connected to
// the "project_image" edge. The optional arguments are used to configure the query builder of the edge.
func (pitq *ProjectImageTranslationQuery) WithProjectImage(opts ...func(*ProjectImageQuery)) *ProjectImageTranslationQuery {
	query := (&ProjectImageClient{config: pitq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pitq.withProjectImage = query
	return pitq
}

// WithLanguage tells the query-builder to eager-load the nodes that are connected to
// the "language" edge. The optional arguments are used to configure the query builder of the edge.
func (pitq *ProjectImageTranslationQuery) WithLanguage(opts ...func(*LanguageQuery)) *ProjectImageTranslationQuery {
	query := (&LanguageClient{config: pitq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pitq.withLanguage = query
	return pitq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ProjectImageID uuid.UUID `json:"project_image_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProjectImageTranslation.Query().
//		GroupBy(projectimagetranslation.FieldProjectImageID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pitq *ProjectImageTranslationQuery) GroupBy(field string, fields ...string) *ProjectImageTranslationGroupBy {
	pitq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ProjectImageTranslationGroupBy{build: pitq}
	grbuild.flds = &pitq.ctx.Fields
	grbuild.label = projectimagetranslation.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ProjectImageID uuid.UUID `json:"project_image_id,omitempty"`
//	}
//
//	client.ProjectImageTranslation.Query().
//		Select(projectimagetranslation.FieldProjectImageID).
//		Scan(ctx, &v)
func (pitq *ProjectImageTranslationQuery) Select(fields ...string) *ProjectImageTranslationSelect {
	pitq.ctx.Fields = append(pitq.ctx.Fields, fields...)
	sbuild := &ProjectImageTranslationSelect{ProjectImageTranslationQuery: pitq}
	sbuild.label = projectimagetranslation.Label
	sbuild.flds, sbuild.scan = &pitq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ProjectImageTranslationSelect configured with the given aggregations.
func (pitq *ProjectImageTranslationQuery) Aggregate(fns ...AggregateFunc) *ProjectImageTranslationSelect {
	return pitq.Select().Aggregate(fns...)
}

func (pitq *ProjectImageTranslationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pitq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pitq); err != nil {
				return err
			}
		}
	}
	for _, f := range pitq.ctx.Fields {
		if !projectimagetranslation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pitq.path != nil {
		prev, err := pitq.path(ctx)
		if err != nil {
			return err
		}
		pitq.sql = prev
	}
	return nil
}

func (pitq *ProjectImageTranslationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ProjectImageTranslation, error) {
	var (
		nodes       = []*ProjectImageTranslation{}
		_spec       = pitq.querySpec()
		loadedTypes = [2]bool{
			pitq.withProjectImage != nil,
			pitq.withLanguage != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ProjectImageTranslation).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ProjectImageTranslation{config: pitq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pitq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pitq.withProjectImage; query != nil {
		if err := pitq.loadProjectImage(ctx, query, nodes, nil,
			func(n *ProjectImageTranslation, e *ProjectImage) { n.Edges.ProjectImage = e }); err != nil {
			return nil, err
		}
	}
	if query := pitq.withLanguage; query != nil {
		if err := pitq.loadLanguage(ctx, query, nodes, nil,
			func(n *ProjectImageTranslation, e *Language) { n.Edges.Language = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pitq *ProjectImageTranslationQuery) loadProjectImage(ctx context.Context, query *ProjectImageQuery, nodes []*ProjectImageTranslation, init func(*ProjectImageTranslation), assign func(*ProjectImageTranslation, *ProjectImage)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProjectImageTranslation)
	for i := range nodes {
		fk := nodes[i].ProjectImageID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(projectimage.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "project_image_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pitq *ProjectImageTranslationQuery) loadLanguage(ctx context.Context, query *LanguageQuery, nodes []*ProjectImageTranslation, init func(*ProjectImageTranslation), assign func(*ProjectImageTranslation, *Language)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*ProjectImageTranslation)
	for i := range nodes {
		fk := nodes[i].LanguageCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(language.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "language_code" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (pitq *ProjectImageTranslationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pitq.querySpec()
	_spec.Node.Columns = pitq.ctx.Fields
	if len(pitq.ctx.Fields) > 0 {
		_spec.Unique = pitq.ctx.Unique != nil && *pitq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pitq.driver, _spec)
}

func (pitq *ProjectImageTranslationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(projectimagetranslation.Table, projectimagetranslation.Columns, sqlgraph.NewFieldSpec(projectimagetranslation.FieldID, field.TypeUUID))
	_spec.From = pitq.sql
	if unique := pitq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pitq.path != nil {
		_spec.Unique = true
	}
	if fields := pitq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectimagetranslation.FieldID)
		for i := range fields {
			if fields[i] != projectimagetranslation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if pitq.withProjectImage != nil {
			_spec.Node.AddColumnOnce(projectimagetranslation.FieldProjectImageID)
		}
		if pitq.withLanguage != nil {
			_spec.Node.AddColumnOnce(projectimagetranslation.FieldLanguageCode)
		}
	}
	if ps := pitq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pitq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pitq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pitq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pitq *ProjectImageTranslationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pitq.driver.Dialect())
	t1 := builder.Table(projectimagetranslation.Table)
	columns := pitq.ctx.Fields
	if len(columns) == 0 {
		columns = projectimagetranslation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pitq.sql != nil {
		selector = pitq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pitq.ctx.Unique != nil && *pitq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pitq.predicates {
		p(selector)
	}
	for _, p := range pitq.order {
		p(selector)
	}
	if offset := pitq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pitq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProjectImageTranslationGroupBy is the group-by builder for ProjectImageTranslation entities.
type ProjectImageTranslationGroupBy struct {
	selector
	build *ProjectImageTranslationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pitgb *ProjectImageTranslationGroupBy) Aggregate(fns ...AggregateFunc) *ProjectImageTranslationGroupBy {
	pitgb.fns = append(pitgb.fns, fns...)
	return pitgb
}

// Scan applies the selector query and scans the result into the given value.
func (pitgb *ProjectImageTranslationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pitgb.build.ctx, ent.OpQueryGroupBy)
	if err := pitgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProjectImageTranslationQuery, *ProjectImageTranslationGroupBy](ctx, pitgb.build, pitgb, pitgb.build.inters, v)
}

func (pitgb *ProjectImageTranslationGroupBy) sqlScan(ctx context.Context, root *ProjectImageTranslationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pitgb.fns))
	for _, fn := range pitgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pitgb.flds)+len(pitgb.fns))
		for _, f := range *pitgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pitgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pitgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ProjectImageTranslationSelect is the builder for selecting fields of ProjectImageTranslation entities.
type ProjectImageTranslationSelect struct {
	*ProjectImageTranslationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pits *ProjectImageTranslationSelect) Aggregate(fns ...AggregateFunc) *ProjectImageTranslationSelect {
	pits.fns = append(pits.fns, fns...)
	return pits
}

// Scan applies the selector query and scans the result into the given value.
func (pits *ProjectImageTranslationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pits.ctx, ent.OpQuerySelect)
	if err := pits.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProjectImageTranslationQuery, *ProjectImageTranslationSelect](ctx, pits.ProjectImageTranslationQuery, pits, pits.inters, v)
}

func (pits *ProjectImageTranslationSelect) sqlScan(ctx context.Context, root *ProjectImageTranslationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pits.fns))
	for _, fn := range pits.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pits.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pits.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
