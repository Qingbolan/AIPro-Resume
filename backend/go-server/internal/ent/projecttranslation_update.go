// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/projecttranslation"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProjectTranslationUpdate is the builder for updating ProjectTranslation entities.
type ProjectTranslationUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectTranslationMutation
}

// Where appends a list predicates to the ProjectTranslationUpdate builder.
func (ptu *ProjectTranslationUpdate) Where(ps ...predicate.ProjectTranslation) *ProjectTranslationUpdate {
	ptu.mutation.Where(ps...)
	return ptu
}

// SetProjectID sets the "project_id" field.
func (ptu *ProjectTranslationUpdate) SetProjectID(u uuid.UUID) *ProjectTranslationUpdate {
	ptu.mutation.SetProjectID(u)
	return ptu
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (ptu *ProjectTranslationUpdate) SetNillableProjectID(u *uuid.UUID) *ProjectTranslationUpdate {
	if u != nil {
		ptu.SetProjectID(*u)
	}
	return ptu
}

// SetLanguageCode sets the "language_code" field.
func (ptu *ProjectTranslationUpdate) SetLanguageCode(s string) *ProjectTranslationUpdate {
	ptu.mutation.SetLanguageCode(s)
	return ptu
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (ptu *ProjectTranslationUpdate) SetNillableLanguageCode(s *string) *ProjectTranslationUpdate {
	if s != nil {
		ptu.SetLanguageCode(*s)
	}
	return ptu
}

// SetTitle sets the "title" field.
func (ptu *ProjectTranslationUpdate) SetTitle(s string) *ProjectTranslationUpdate {
	ptu.mutation.SetTitle(s)
	return ptu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ptu *ProjectTranslationUpdate) SetNillableTitle(s *string) *ProjectTranslationUpdate {
	if s != nil {
		ptu.SetTitle(*s)
	}
	return ptu
}

// SetDescription sets the "description" field.
func (ptu *ProjectTranslationUpdate) SetDescription(s string) *ProjectTranslationUpdate {
	ptu.mutation.SetDescription(s)
	return ptu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptu *ProjectTranslationUpdate) SetNillableDescription(s *string) *ProjectTranslationUpdate {
	if s != nil {
		ptu.SetDescription(*s)
	}
	return ptu
}

// ClearDescription clears the value of the "description" field.
func (ptu *ProjectTranslationUpdate) ClearDescription() *ProjectTranslationUpdate {
	ptu.mutation.ClearDescription()
	return ptu
}

// SetProjectType sets the "project_type" field.
func (ptu *ProjectTranslationUpdate) SetProjectType(s string) *ProjectTranslationUpdate {
	ptu.mutation.SetProjectType(s)
	return ptu
}

// SetNillableProjectType sets the "project_type" field if the given value is not nil.
func (ptu *ProjectTranslationUpdate) SetNillableProjectType(s *string) *ProjectTranslationUpdate {
	if s != nil {
		ptu.SetProjectType(*s)
	}
	return ptu
}

// ClearProjectType clears the value of the "project_type" field.
func (ptu *ProjectTranslationUpdate) ClearProjectType() *ProjectTranslationUpdate {
	ptu.mutation.ClearProjectType()
	return ptu
}

// SetProject sets the "project" edge to the Project entity.
func (ptu *ProjectTranslationUpdate) SetProject(p *Project) *ProjectTranslationUpdate {
	return ptu.SetProjectID(p.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (ptu *ProjectTranslationUpdate) SetLanguageID(id string) *ProjectTranslationUpdate {
	ptu.mutation.SetLanguageID(id)
	return ptu
}

// SetLanguage sets the "language" edge to the Language entity.
func (ptu *ProjectTranslationUpdate) SetLanguage(l *Language) *ProjectTranslationUpdate {
	return ptu.SetLanguageID(l.ID)
}

// Mutation returns the ProjectTranslationMutation object of the builder.
func (ptu *ProjectTranslationUpdate) Mutation() *ProjectTranslationMutation {
	return ptu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (ptu *ProjectTranslationUpdate) ClearProject() *ProjectTranslationUpdate {
	ptu.mutation.ClearProject()
	return ptu
}

// ClearLanguage clears the "language" edge to the Language entity.
func (ptu *ProjectTranslationUpdate) ClearLanguage() *ProjectTranslationUpdate {
	ptu.mutation.ClearLanguage()
	return ptu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptu *ProjectTranslationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ptu.sqlSave, ptu.mutation, ptu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *ProjectTranslationUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *ProjectTranslationUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *ProjectTranslationUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptu *ProjectTranslationUpdate) check() error {
	if v, ok := ptu.mutation.LanguageCode(); ok {
		if err := projecttranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "ProjectTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := ptu.mutation.Title(); ok {
		if err := projecttranslation.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "ProjectTranslation.title": %w`, err)}
		}
	}
	if v, ok := ptu.mutation.ProjectType(); ok {
		if err := projecttranslation.ProjectTypeValidator(v); err != nil {
			return &ValidationError{Name: "project_type", err: fmt.Errorf(`ent: validator failed for field "ProjectTranslation.project_type": %w`, err)}
		}
	}
	if ptu.mutation.ProjectCleared() && len(ptu.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectTranslation.project"`)
	}
	if ptu.mutation.LanguageCleared() && len(ptu.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectTranslation.language"`)
	}
	return nil
}

func (ptu *ProjectTranslationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ptu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(projecttranslation.Table, projecttranslation.Columns, sqlgraph.NewFieldSpec(projecttranslation.FieldID, field.TypeUUID))
	if ps := ptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptu.mutation.Title(); ok {
		_spec.SetField(projecttranslation.FieldTitle, field.TypeString, value)
	}
	if value, ok := ptu.mutation.Description(); ok {
		_spec.SetField(projecttranslation.FieldDescription, field.TypeString, value)
	}
	if ptu.mutation.DescriptionCleared() {
		_spec.ClearField(projecttranslation.FieldDescription, field.TypeString)
	}
	if value, ok := ptu.mutation.ProjectType(); ok {
		_spec.SetField(projecttranslation.FieldProjectType, field.TypeString, value)
	}
	if ptu.mutation.ProjectTypeCleared() {
		_spec.ClearField(projecttranslation.FieldProjectType, field.TypeString)
	}
	if ptu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projecttranslation.ProjectTable,
			Columns: []string{projecttranslation.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projecttranslation.ProjectTable,
			Columns: []string{projecttranslation.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptu.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projecttranslation.LanguageTable,
			Columns: []string{projecttranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projecttranslation.LanguageTable,
			Columns: []string{projecttranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projecttranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ptu.mutation.done = true
	return n, nil
}

// ProjectTranslationUpdateOne is the builder for updating a single ProjectTranslation entity.
type ProjectTranslationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectTranslationMutation
}

// SetProjectID sets the "project_id" field.
func (ptuo *ProjectTranslationUpdateOne) SetProjectID(u uuid.UUID) *ProjectTranslationUpdateOne {
	ptuo.mutation.SetProjectID(u)
	return ptuo
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (ptuo *ProjectTranslationUpdateOne) SetNillableProjectID(u *uuid.UUID) *ProjectTranslationUpdateOne {
	if u != nil {
		ptuo.SetProjectID(*u)
	}
	return ptuo
}

// SetLanguageCode sets the "language_code" field.
func (ptuo *ProjectTranslationUpdateOne) SetLanguageCode(s string) *ProjectTranslationUpdateOne {
	ptuo.mutation.SetLanguageCode(s)
	return ptuo
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (ptuo *ProjectTranslationUpdateOne) SetNillableLanguageCode(s *string) *ProjectTranslationUpdateOne {
	if s != nil {
		ptuo.SetLanguageCode(*s)
	}
	return ptuo
}

// SetTitle sets the "title" field.
func (ptuo *ProjectTranslationUpdateOne) SetTitle(s string) *ProjectTranslationUpdateOne {
	ptuo.mutation.SetTitle(s)
	return ptuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ptuo *ProjectTranslationUpdateOne) SetNillableTitle(s *string) *ProjectTranslationUpdateOne {
	if s != nil {
		ptuo.SetTitle(*s)
	}
	return ptuo
}

// SetDescription sets the "description" field.
func (ptuo *ProjectTranslationUpdateOne) SetDescription(s string) *ProjectTranslationUpdateOne {
	ptuo.mutation.SetDescription(s)
	return ptuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptuo *ProjectTranslationUpdateOne) SetNillableDescription(s *string) *ProjectTranslationUpdateOne {
	if s != nil {
		ptuo.SetDescription(*s)
	}
	return ptuo
}

// ClearDescription clears the value of the "description" field.
func (ptuo *ProjectTranslationUpdateOne) ClearDescription() *ProjectTranslationUpdateOne {
	ptuo.mutation.ClearDescription()
	return ptuo
}

// SetProjectType sets the "project_type" field.
func (ptuo *ProjectTranslationUpdateOne) SetProjectType(s string) *ProjectTranslationUpdateOne {
	ptuo.mutation.SetProjectType(s)
	return ptuo
}

// SetNillableProjectType sets the "project_type" field if the given value is not nil.
func (ptuo *ProjectTranslationUpdateOne) SetNillableProjectType(s *string) *ProjectTranslationUpdateOne {
	if s != nil {
		ptuo.SetProjectType(*s)
	}
	return ptuo
}

// ClearProjectType clears the value of the "project_type" field.
func (ptuo *ProjectTranslationUpdateOne) ClearProjectType() *ProjectTranslationUpdateOne {
	ptuo.mutation.ClearProjectType()
	return ptuo
}

// SetProject sets the "project" edge to the Project entity.
func (ptuo *ProjectTranslationUpdateOne) SetProject(p *Project) *ProjectTranslationUpdateOne {
	return ptuo.SetProjectID(p.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (ptuo *ProjectTranslationUpdateOne) SetLanguageID(id string) *ProjectTranslationUpdateOne {
	ptuo.mutation.SetLanguageID(id)
	return ptuo
}

// SetLanguage sets the "language" edge to the Language entity.
func (ptuo *ProjectTranslationUpdateOne) SetLanguage(l *Language) *ProjectTranslationUpdateOne {
	return ptuo.SetLanguageID(l.ID)
}

// Mutation returns the ProjectTranslationMutation object of the builder.
func (ptuo *ProjectTranslationUpdateOne) Mutation() *ProjectTranslationMutation {
	return ptuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (ptuo *ProjectTranslationUpdateOne) ClearProject() *ProjectTranslationUpdateOne {
	ptuo.mutation.ClearProject()
	return ptuo
}

// ClearLanguage clears the "language" edge to the Language entity.
func (ptuo *ProjectTranslationUpdateOne) ClearLanguage() *ProjectTranslationUpdateOne {
	ptuo.mutation.ClearLanguage()
	return ptuo
}

// Where appends a list predicates to the ProjectTranslationUpdate builder.
func (ptuo *ProjectTranslationUpdateOne) Where(ps ...predicate.ProjectTranslation) *ProjectTranslationUpdateOne {
	ptuo.mutation.Where(ps...)
	return ptuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptuo *ProjectTranslationUpdateOne) Select(field string, fields ...string) *ProjectTranslationUpdateOne {
	ptuo.fields = append([]string{field}, fields...)
	return ptuo
}

// Save executes the query and returns the updated ProjectTranslation entity.
func (ptuo *ProjectTranslationUpdateOne) Save(ctx context.Context) (*ProjectTranslation, error) {
	return withHooks(ctx, ptuo.sqlSave, ptuo.mutation, ptuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *ProjectTranslationUpdateOne) SaveX(ctx context.Context) *ProjectTranslation {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *ProjectTranslationUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *ProjectTranslationUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptuo *ProjectTranslationUpdateOne) check() error {
	if v, ok := ptuo.mutation.LanguageCode(); ok {
		if err := projecttranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "ProjectTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := ptuo.mutation.Title(); ok {
		if err := projecttranslation.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "ProjectTranslation.title": %w`, err)}
		}
	}
	if v, ok := ptuo.mutation.ProjectType(); ok {
		if err := projecttranslation.ProjectTypeValidator(v); err != nil {
			return &ValidationError{Name: "project_type", err: fmt.Errorf(`ent: validator failed for field "ProjectTranslation.project_type": %w`, err)}
		}
	}
	if ptuo.mutation.ProjectCleared() && len(ptuo.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectTranslation.project"`)
	}
	if ptuo.mutation.LanguageCleared() && len(ptuo.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectTranslation.language"`)
	}
	return nil
}

func (ptuo *ProjectTranslationUpdateOne) sqlSave(ctx context.Context) (_node *ProjectTranslation, err error) {
	if err := ptuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(projecttranslation.Table, projecttranslation.Columns, sqlgraph.NewFieldSpec(projecttranslation.FieldID, field.TypeUUID))
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProjectTranslation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projecttranslation.FieldID)
		for _, f := range fields {
			if !projecttranslation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != projecttranslation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptuo.mutation.Title(); ok {
		_spec.SetField(projecttranslation.FieldTitle, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.Description(); ok {
		_spec.SetField(projecttranslation.FieldDescription, field.TypeString, value)
	}
	if ptuo.mutation.DescriptionCleared() {
		_spec.ClearField(projecttranslation.FieldDescription, field.TypeString)
	}
	if value, ok := ptuo.mutation.ProjectType(); ok {
		_spec.SetField(projecttranslation.FieldProjectType, field.TypeString, value)
	}
	if ptuo.mutation.ProjectTypeCleared() {
		_spec.ClearField(projecttranslation.FieldProjectType, field.TypeString)
	}
	if ptuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projecttranslation.ProjectTable,
			Columns: []string{projecttranslation.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projecttranslation.ProjectTable,
			Columns: []string{projecttranslation.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptuo.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projecttranslation.LanguageTable,
			Columns: []string{projecttranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projecttranslation.LanguageTable,
			Columns: []string{projecttranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProjectTranslation{config: ptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projecttranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ptuo.mutation.done = true
	return _node, nil
}
