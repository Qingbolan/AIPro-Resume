// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/education"
	"silan-backend/internal/ent/educationtranslation"
	"silan-backend/internal/ent/language"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// EducationTranslation is the model entity for the EducationTranslation schema.
type EducationTranslation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// EducationID holds the value of the "education_id" field.
	EducationID uuid.UUID `json:"education_id,omitempty"`
	// LanguageCode holds the value of the "language_code" field.
	LanguageCode string `json:"language_code,omitempty"`
	// Institution holds the value of the "institution" field.
	Institution string `json:"institution,omitempty"`
	// Degree holds the value of the "degree" field.
	Degree string `json:"degree,omitempty"`
	// FieldOfStudy holds the value of the "field_of_study" field.
	FieldOfStudy string `json:"field_of_study,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EducationTranslationQuery when eager-loading is set.
	Edges        EducationTranslationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EducationTranslationEdges holds the relations/edges for other nodes in the graph.
type EducationTranslationEdges struct {
	// Education holds the value of the education edge.
	Education *Education `json:"education,omitempty"`
	// Language holds the value of the language edge.
	Language *Language `json:"language,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EducationOrErr returns the Education value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EducationTranslationEdges) EducationOrErr() (*Education, error) {
	if e.Education != nil {
		return e.Education, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: education.Label}
	}
	return nil, &NotLoadedError{edge: "education"}
}

// LanguageOrErr returns the Language value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EducationTranslationEdges) LanguageOrErr() (*Language, error) {
	if e.Language != nil {
		return e.Language, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: language.Label}
	}
	return nil, &NotLoadedError{edge: "language"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EducationTranslation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case educationtranslation.FieldLanguageCode, educationtranslation.FieldInstitution, educationtranslation.FieldDegree, educationtranslation.FieldFieldOfStudy, educationtranslation.FieldLocation:
			values[i] = new(sql.NullString)
		case educationtranslation.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case educationtranslation.FieldID, educationtranslation.FieldEducationID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EducationTranslation fields.
func (et *EducationTranslation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case educationtranslation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				et.ID = *value
			}
		case educationtranslation.FieldEducationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field education_id", values[i])
			} else if value != nil {
				et.EducationID = *value
			}
		case educationtranslation.FieldLanguageCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language_code", values[i])
			} else if value.Valid {
				et.LanguageCode = value.String
			}
		case educationtranslation.FieldInstitution:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field institution", values[i])
			} else if value.Valid {
				et.Institution = value.String
			}
		case educationtranslation.FieldDegree:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field degree", values[i])
			} else if value.Valid {
				et.Degree = value.String
			}
		case educationtranslation.FieldFieldOfStudy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field field_of_study", values[i])
			} else if value.Valid {
				et.FieldOfStudy = value.String
			}
		case educationtranslation.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				et.Location = value.String
			}
		case educationtranslation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				et.CreatedAt = value.Time
			}
		default:
			et.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EducationTranslation.
// This includes values selected through modifiers, order, etc.
func (et *EducationTranslation) Value(name string) (ent.Value, error) {
	return et.selectValues.Get(name)
}

// QueryEducation queries the "education" edge of the EducationTranslation entity.
func (et *EducationTranslation) QueryEducation() *EducationQuery {
	return NewEducationTranslationClient(et.config).QueryEducation(et)
}

// QueryLanguage queries the "language" edge of the EducationTranslation entity.
func (et *EducationTranslation) QueryLanguage() *LanguageQuery {
	return NewEducationTranslationClient(et.config).QueryLanguage(et)
}

// Update returns a builder for updating this EducationTranslation.
// Note that you need to call EducationTranslation.Unwrap() before calling this method if this EducationTranslation
// was returned from a transaction, and the transaction was committed or rolled back.
func (et *EducationTranslation) Update() *EducationTranslationUpdateOne {
	return NewEducationTranslationClient(et.config).UpdateOne(et)
}

// Unwrap unwraps the EducationTranslation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (et *EducationTranslation) Unwrap() *EducationTranslation {
	_tx, ok := et.config.driver.(*txDriver)
	if !ok {
		panic("ent: EducationTranslation is not a transactional entity")
	}
	et.config.driver = _tx.drv
	return et
}

// String implements the fmt.Stringer.
func (et *EducationTranslation) String() string {
	var builder strings.Builder
	builder.WriteString("EducationTranslation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", et.ID))
	builder.WriteString("education_id=")
	builder.WriteString(fmt.Sprintf("%v", et.EducationID))
	builder.WriteString(", ")
	builder.WriteString("language_code=")
	builder.WriteString(et.LanguageCode)
	builder.WriteString(", ")
	builder.WriteString("institution=")
	builder.WriteString(et.Institution)
	builder.WriteString(", ")
	builder.WriteString("degree=")
	builder.WriteString(et.Degree)
	builder.WriteString(", ")
	builder.WriteString("field_of_study=")
	builder.WriteString(et.FieldOfStudy)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(et.Location)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(et.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// EducationTranslations is a parsable slice of EducationTranslation.
type EducationTranslations []*EducationTranslation
