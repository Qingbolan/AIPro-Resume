// Code generated by ent, DO NOT EDIT.

package blogposttranslation

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldLTE(FieldID, id))
}

// BlogPostID applies equality check predicate on the "blog_post_id" field. It's identical to BlogPostIDEQ.
func BlogPostID(v uuid.UUID) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldEQ(FieldBlogPostID, v))
}

// LanguageCode applies equality check predicate on the "language_code" field. It's identical to LanguageCodeEQ.
func LanguageCode(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldEQ(FieldLanguageCode, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldEQ(FieldTitle, v))
}

// Excerpt applies equality check predicate on the "excerpt" field. It's identical to ExcerptEQ.
func Excerpt(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldEQ(FieldExcerpt, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldEQ(FieldContent, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldEQ(FieldCreatedAt, v))
}

// BlogPostIDEQ applies the EQ predicate on the "blog_post_id" field.
func BlogPostIDEQ(v uuid.UUID) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldEQ(FieldBlogPostID, v))
}

// BlogPostIDNEQ applies the NEQ predicate on the "blog_post_id" field.
func BlogPostIDNEQ(v uuid.UUID) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldNEQ(FieldBlogPostID, v))
}

// BlogPostIDIn applies the In predicate on the "blog_post_id" field.
func BlogPostIDIn(vs ...uuid.UUID) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldIn(FieldBlogPostID, vs...))
}

// BlogPostIDNotIn applies the NotIn predicate on the "blog_post_id" field.
func BlogPostIDNotIn(vs ...uuid.UUID) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldNotIn(FieldBlogPostID, vs...))
}

// LanguageCodeEQ applies the EQ predicate on the "language_code" field.
func LanguageCodeEQ(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldEQ(FieldLanguageCode, v))
}

// LanguageCodeNEQ applies the NEQ predicate on the "language_code" field.
func LanguageCodeNEQ(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldNEQ(FieldLanguageCode, v))
}

// LanguageCodeIn applies the In predicate on the "language_code" field.
func LanguageCodeIn(vs ...string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldIn(FieldLanguageCode, vs...))
}

// LanguageCodeNotIn applies the NotIn predicate on the "language_code" field.
func LanguageCodeNotIn(vs ...string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldNotIn(FieldLanguageCode, vs...))
}

// LanguageCodeGT applies the GT predicate on the "language_code" field.
func LanguageCodeGT(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldGT(FieldLanguageCode, v))
}

// LanguageCodeGTE applies the GTE predicate on the "language_code" field.
func LanguageCodeGTE(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldGTE(FieldLanguageCode, v))
}

// LanguageCodeLT applies the LT predicate on the "language_code" field.
func LanguageCodeLT(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldLT(FieldLanguageCode, v))
}

// LanguageCodeLTE applies the LTE predicate on the "language_code" field.
func LanguageCodeLTE(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldLTE(FieldLanguageCode, v))
}

// LanguageCodeContains applies the Contains predicate on the "language_code" field.
func LanguageCodeContains(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldContains(FieldLanguageCode, v))
}

// LanguageCodeHasPrefix applies the HasPrefix predicate on the "language_code" field.
func LanguageCodeHasPrefix(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldHasPrefix(FieldLanguageCode, v))
}

// LanguageCodeHasSuffix applies the HasSuffix predicate on the "language_code" field.
func LanguageCodeHasSuffix(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldHasSuffix(FieldLanguageCode, v))
}

// LanguageCodeEqualFold applies the EqualFold predicate on the "language_code" field.
func LanguageCodeEqualFold(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldEqualFold(FieldLanguageCode, v))
}

// LanguageCodeContainsFold applies the ContainsFold predicate on the "language_code" field.
func LanguageCodeContainsFold(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldContainsFold(FieldLanguageCode, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldContainsFold(FieldTitle, v))
}

// ExcerptEQ applies the EQ predicate on the "excerpt" field.
func ExcerptEQ(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldEQ(FieldExcerpt, v))
}

// ExcerptNEQ applies the NEQ predicate on the "excerpt" field.
func ExcerptNEQ(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldNEQ(FieldExcerpt, v))
}

// ExcerptIn applies the In predicate on the "excerpt" field.
func ExcerptIn(vs ...string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldIn(FieldExcerpt, vs...))
}

// ExcerptNotIn applies the NotIn predicate on the "excerpt" field.
func ExcerptNotIn(vs ...string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldNotIn(FieldExcerpt, vs...))
}

// ExcerptGT applies the GT predicate on the "excerpt" field.
func ExcerptGT(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldGT(FieldExcerpt, v))
}

// ExcerptGTE applies the GTE predicate on the "excerpt" field.
func ExcerptGTE(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldGTE(FieldExcerpt, v))
}

// ExcerptLT applies the LT predicate on the "excerpt" field.
func ExcerptLT(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldLT(FieldExcerpt, v))
}

// ExcerptLTE applies the LTE predicate on the "excerpt" field.
func ExcerptLTE(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldLTE(FieldExcerpt, v))
}

// ExcerptContains applies the Contains predicate on the "excerpt" field.
func ExcerptContains(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldContains(FieldExcerpt, v))
}

// ExcerptHasPrefix applies the HasPrefix predicate on the "excerpt" field.
func ExcerptHasPrefix(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldHasPrefix(FieldExcerpt, v))
}

// ExcerptHasSuffix applies the HasSuffix predicate on the "excerpt" field.
func ExcerptHasSuffix(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldHasSuffix(FieldExcerpt, v))
}

// ExcerptIsNil applies the IsNil predicate on the "excerpt" field.
func ExcerptIsNil() predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldIsNull(FieldExcerpt))
}

// ExcerptNotNil applies the NotNil predicate on the "excerpt" field.
func ExcerptNotNil() predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldNotNull(FieldExcerpt))
}

// ExcerptEqualFold applies the EqualFold predicate on the "excerpt" field.
func ExcerptEqualFold(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldEqualFold(FieldExcerpt, v))
}

// ExcerptContainsFold applies the ContainsFold predicate on the "excerpt" field.
func ExcerptContainsFold(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldContainsFold(FieldExcerpt, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldContainsFold(FieldContent, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.FieldLTE(FieldCreatedAt, v))
}

// HasBlogPost applies the HasEdge predicate on the "blog_post" edge.
func HasBlogPost() predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BlogPostTable, BlogPostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlogPostWith applies the HasEdge predicate on the "blog_post" edge with a given conditions (other predicates).
func HasBlogPostWith(preds ...predicate.BlogPost) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(func(s *sql.Selector) {
		step := newBlogPostStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLanguage applies the HasEdge predicate on the "language" edge.
func HasLanguage() predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LanguageTable, LanguageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLanguageWith applies the HasEdge predicate on the "language" edge with a given conditions (other predicates).
func HasLanguageWith(preds ...predicate.Language) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(func(s *sql.Selector) {
		step := newLanguageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BlogPostTranslation) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BlogPostTranslation) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BlogPostTranslation) predicate.BlogPostTranslation {
	return predicate.BlogPostTranslation(sql.NotPredicates(p))
}
