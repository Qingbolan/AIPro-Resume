// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/workexperience"
	"silan-backend/internal/ent/workexperiencetranslation"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkExperienceTranslationCreate is the builder for creating a WorkExperienceTranslation entity.
type WorkExperienceTranslationCreate struct {
	config
	mutation *WorkExperienceTranslationMutation
	hooks    []Hook
}

// SetWorkExperienceID sets the "work_experience_id" field.
func (wetc *WorkExperienceTranslationCreate) SetWorkExperienceID(u uuid.UUID) *WorkExperienceTranslationCreate {
	wetc.mutation.SetWorkExperienceID(u)
	return wetc
}

// SetLanguageCode sets the "language_code" field.
func (wetc *WorkExperienceTranslationCreate) SetLanguageCode(s string) *WorkExperienceTranslationCreate {
	wetc.mutation.SetLanguageCode(s)
	return wetc
}

// SetCompany sets the "company" field.
func (wetc *WorkExperienceTranslationCreate) SetCompany(s string) *WorkExperienceTranslationCreate {
	wetc.mutation.SetCompany(s)
	return wetc
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (wetc *WorkExperienceTranslationCreate) SetNillableCompany(s *string) *WorkExperienceTranslationCreate {
	if s != nil {
		wetc.SetCompany(*s)
	}
	return wetc
}

// SetPosition sets the "position" field.
func (wetc *WorkExperienceTranslationCreate) SetPosition(s string) *WorkExperienceTranslationCreate {
	wetc.mutation.SetPosition(s)
	return wetc
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (wetc *WorkExperienceTranslationCreate) SetNillablePosition(s *string) *WorkExperienceTranslationCreate {
	if s != nil {
		wetc.SetPosition(*s)
	}
	return wetc
}

// SetLocation sets the "location" field.
func (wetc *WorkExperienceTranslationCreate) SetLocation(s string) *WorkExperienceTranslationCreate {
	wetc.mutation.SetLocation(s)
	return wetc
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (wetc *WorkExperienceTranslationCreate) SetNillableLocation(s *string) *WorkExperienceTranslationCreate {
	if s != nil {
		wetc.SetLocation(*s)
	}
	return wetc
}

// SetCreatedAt sets the "created_at" field.
func (wetc *WorkExperienceTranslationCreate) SetCreatedAt(t time.Time) *WorkExperienceTranslationCreate {
	wetc.mutation.SetCreatedAt(t)
	return wetc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wetc *WorkExperienceTranslationCreate) SetNillableCreatedAt(t *time.Time) *WorkExperienceTranslationCreate {
	if t != nil {
		wetc.SetCreatedAt(*t)
	}
	return wetc
}

// SetID sets the "id" field.
func (wetc *WorkExperienceTranslationCreate) SetID(u uuid.UUID) *WorkExperienceTranslationCreate {
	wetc.mutation.SetID(u)
	return wetc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wetc *WorkExperienceTranslationCreate) SetNillableID(u *uuid.UUID) *WorkExperienceTranslationCreate {
	if u != nil {
		wetc.SetID(*u)
	}
	return wetc
}

// SetWorkExperience sets the "work_experience" edge to the WorkExperience entity.
func (wetc *WorkExperienceTranslationCreate) SetWorkExperience(w *WorkExperience) *WorkExperienceTranslationCreate {
	return wetc.SetWorkExperienceID(w.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (wetc *WorkExperienceTranslationCreate) SetLanguageID(id string) *WorkExperienceTranslationCreate {
	wetc.mutation.SetLanguageID(id)
	return wetc
}

// SetLanguage sets the "language" edge to the Language entity.
func (wetc *WorkExperienceTranslationCreate) SetLanguage(l *Language) *WorkExperienceTranslationCreate {
	return wetc.SetLanguageID(l.ID)
}

// Mutation returns the WorkExperienceTranslationMutation object of the builder.
func (wetc *WorkExperienceTranslationCreate) Mutation() *WorkExperienceTranslationMutation {
	return wetc.mutation
}

// Save creates the WorkExperienceTranslation in the database.
func (wetc *WorkExperienceTranslationCreate) Save(ctx context.Context) (*WorkExperienceTranslation, error) {
	wetc.defaults()
	return withHooks(ctx, wetc.sqlSave, wetc.mutation, wetc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wetc *WorkExperienceTranslationCreate) SaveX(ctx context.Context) *WorkExperienceTranslation {
	v, err := wetc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wetc *WorkExperienceTranslationCreate) Exec(ctx context.Context) error {
	_, err := wetc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wetc *WorkExperienceTranslationCreate) ExecX(ctx context.Context) {
	if err := wetc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wetc *WorkExperienceTranslationCreate) defaults() {
	if _, ok := wetc.mutation.CreatedAt(); !ok {
		v := workexperiencetranslation.DefaultCreatedAt()
		wetc.mutation.SetCreatedAt(v)
	}
	if _, ok := wetc.mutation.ID(); !ok {
		v := workexperiencetranslation.DefaultID()
		wetc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wetc *WorkExperienceTranslationCreate) check() error {
	if _, ok := wetc.mutation.WorkExperienceID(); !ok {
		return &ValidationError{Name: "work_experience_id", err: errors.New(`ent: missing required field "WorkExperienceTranslation.work_experience_id"`)}
	}
	if _, ok := wetc.mutation.LanguageCode(); !ok {
		return &ValidationError{Name: "language_code", err: errors.New(`ent: missing required field "WorkExperienceTranslation.language_code"`)}
	}
	if v, ok := wetc.mutation.LanguageCode(); ok {
		if err := workexperiencetranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "WorkExperienceTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := wetc.mutation.Company(); ok {
		if err := workexperiencetranslation.CompanyValidator(v); err != nil {
			return &ValidationError{Name: "company", err: fmt.Errorf(`ent: validator failed for field "WorkExperienceTranslation.company": %w`, err)}
		}
	}
	if v, ok := wetc.mutation.Position(); ok {
		if err := workexperiencetranslation.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "WorkExperienceTranslation.position": %w`, err)}
		}
	}
	if v, ok := wetc.mutation.Location(); ok {
		if err := workexperiencetranslation.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "WorkExperienceTranslation.location": %w`, err)}
		}
	}
	if _, ok := wetc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WorkExperienceTranslation.created_at"`)}
	}
	if len(wetc.mutation.WorkExperienceIDs()) == 0 {
		return &ValidationError{Name: "work_experience", err: errors.New(`ent: missing required edge "WorkExperienceTranslation.work_experience"`)}
	}
	if len(wetc.mutation.LanguageIDs()) == 0 {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required edge "WorkExperienceTranslation.language"`)}
	}
	return nil
}

func (wetc *WorkExperienceTranslationCreate) sqlSave(ctx context.Context) (*WorkExperienceTranslation, error) {
	if err := wetc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wetc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wetc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wetc.mutation.id = &_node.ID
	wetc.mutation.done = true
	return _node, nil
}

func (wetc *WorkExperienceTranslationCreate) createSpec() (*WorkExperienceTranslation, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkExperienceTranslation{config: wetc.config}
		_spec = sqlgraph.NewCreateSpec(workexperiencetranslation.Table, sqlgraph.NewFieldSpec(workexperiencetranslation.FieldID, field.TypeUUID))
	)
	if id, ok := wetc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wetc.mutation.Company(); ok {
		_spec.SetField(workexperiencetranslation.FieldCompany, field.TypeString, value)
		_node.Company = value
	}
	if value, ok := wetc.mutation.Position(); ok {
		_spec.SetField(workexperiencetranslation.FieldPosition, field.TypeString, value)
		_node.Position = value
	}
	if value, ok := wetc.mutation.Location(); ok {
		_spec.SetField(workexperiencetranslation.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := wetc.mutation.CreatedAt(); ok {
		_spec.SetField(workexperiencetranslation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := wetc.mutation.WorkExperienceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workexperiencetranslation.WorkExperienceTable,
			Columns: []string{workexperiencetranslation.WorkExperienceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workexperience.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkExperienceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wetc.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workexperiencetranslation.LanguageTable,
			Columns: []string{workexperiencetranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LanguageCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkExperienceTranslationCreateBulk is the builder for creating many WorkExperienceTranslation entities in bulk.
type WorkExperienceTranslationCreateBulk struct {
	config
	err      error
	builders []*WorkExperienceTranslationCreate
}

// Save creates the WorkExperienceTranslation entities in the database.
func (wetcb *WorkExperienceTranslationCreateBulk) Save(ctx context.Context) ([]*WorkExperienceTranslation, error) {
	if wetcb.err != nil {
		return nil, wetcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wetcb.builders))
	nodes := make([]*WorkExperienceTranslation, len(wetcb.builders))
	mutators := make([]Mutator, len(wetcb.builders))
	for i := range wetcb.builders {
		func(i int, root context.Context) {
			builder := wetcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkExperienceTranslationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wetcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wetcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wetcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wetcb *WorkExperienceTranslationCreateBulk) SaveX(ctx context.Context) []*WorkExperienceTranslation {
	v, err := wetcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wetcb *WorkExperienceTranslationCreateBulk) Exec(ctx context.Context) error {
	_, err := wetcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wetcb *WorkExperienceTranslationCreateBulk) ExecX(ctx context.Context) {
	if err := wetcb.Exec(ctx); err != nil {
		panic(err)
	}
}
