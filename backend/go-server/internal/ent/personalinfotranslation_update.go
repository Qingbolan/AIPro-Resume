// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/personalinfo"
	"silan-backend/internal/ent/personalinfotranslation"
	"silan-backend/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PersonalInfoTranslationUpdate is the builder for updating PersonalInfoTranslation entities.
type PersonalInfoTranslationUpdate struct {
	config
	hooks    []Hook
	mutation *PersonalInfoTranslationMutation
}

// Where appends a list predicates to the PersonalInfoTranslationUpdate builder.
func (pitu *PersonalInfoTranslationUpdate) Where(ps ...predicate.PersonalInfoTranslation) *PersonalInfoTranslationUpdate {
	pitu.mutation.Where(ps...)
	return pitu
}

// SetPersonalInfoID sets the "personal_info_id" field.
func (pitu *PersonalInfoTranslationUpdate) SetPersonalInfoID(u uuid.UUID) *PersonalInfoTranslationUpdate {
	pitu.mutation.SetPersonalInfoID(u)
	return pitu
}

// SetNillablePersonalInfoID sets the "personal_info_id" field if the given value is not nil.
func (pitu *PersonalInfoTranslationUpdate) SetNillablePersonalInfoID(u *uuid.UUID) *PersonalInfoTranslationUpdate {
	if u != nil {
		pitu.SetPersonalInfoID(*u)
	}
	return pitu
}

// SetLanguageCode sets the "language_code" field.
func (pitu *PersonalInfoTranslationUpdate) SetLanguageCode(s string) *PersonalInfoTranslationUpdate {
	pitu.mutation.SetLanguageCode(s)
	return pitu
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (pitu *PersonalInfoTranslationUpdate) SetNillableLanguageCode(s *string) *PersonalInfoTranslationUpdate {
	if s != nil {
		pitu.SetLanguageCode(*s)
	}
	return pitu
}

// SetFullName sets the "full_name" field.
func (pitu *PersonalInfoTranslationUpdate) SetFullName(s string) *PersonalInfoTranslationUpdate {
	pitu.mutation.SetFullName(s)
	return pitu
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (pitu *PersonalInfoTranslationUpdate) SetNillableFullName(s *string) *PersonalInfoTranslationUpdate {
	if s != nil {
		pitu.SetFullName(*s)
	}
	return pitu
}

// ClearFullName clears the value of the "full_name" field.
func (pitu *PersonalInfoTranslationUpdate) ClearFullName() *PersonalInfoTranslationUpdate {
	pitu.mutation.ClearFullName()
	return pitu
}

// SetTitle sets the "title" field.
func (pitu *PersonalInfoTranslationUpdate) SetTitle(s string) *PersonalInfoTranslationUpdate {
	pitu.mutation.SetTitle(s)
	return pitu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pitu *PersonalInfoTranslationUpdate) SetNillableTitle(s *string) *PersonalInfoTranslationUpdate {
	if s != nil {
		pitu.SetTitle(*s)
	}
	return pitu
}

// ClearTitle clears the value of the "title" field.
func (pitu *PersonalInfoTranslationUpdate) ClearTitle() *PersonalInfoTranslationUpdate {
	pitu.mutation.ClearTitle()
	return pitu
}

// SetCurrentStatus sets the "current_status" field.
func (pitu *PersonalInfoTranslationUpdate) SetCurrentStatus(s string) *PersonalInfoTranslationUpdate {
	pitu.mutation.SetCurrentStatus(s)
	return pitu
}

// SetNillableCurrentStatus sets the "current_status" field if the given value is not nil.
func (pitu *PersonalInfoTranslationUpdate) SetNillableCurrentStatus(s *string) *PersonalInfoTranslationUpdate {
	if s != nil {
		pitu.SetCurrentStatus(*s)
	}
	return pitu
}

// ClearCurrentStatus clears the value of the "current_status" field.
func (pitu *PersonalInfoTranslationUpdate) ClearCurrentStatus() *PersonalInfoTranslationUpdate {
	pitu.mutation.ClearCurrentStatus()
	return pitu
}

// SetLocation sets the "location" field.
func (pitu *PersonalInfoTranslationUpdate) SetLocation(s string) *PersonalInfoTranslationUpdate {
	pitu.mutation.SetLocation(s)
	return pitu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (pitu *PersonalInfoTranslationUpdate) SetNillableLocation(s *string) *PersonalInfoTranslationUpdate {
	if s != nil {
		pitu.SetLocation(*s)
	}
	return pitu
}

// ClearLocation clears the value of the "location" field.
func (pitu *PersonalInfoTranslationUpdate) ClearLocation() *PersonalInfoTranslationUpdate {
	pitu.mutation.ClearLocation()
	return pitu
}

// SetPersonalInfo sets the "personal_info" edge to the PersonalInfo entity.
func (pitu *PersonalInfoTranslationUpdate) SetPersonalInfo(p *PersonalInfo) *PersonalInfoTranslationUpdate {
	return pitu.SetPersonalInfoID(p.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (pitu *PersonalInfoTranslationUpdate) SetLanguageID(id string) *PersonalInfoTranslationUpdate {
	pitu.mutation.SetLanguageID(id)
	return pitu
}

// SetLanguage sets the "language" edge to the Language entity.
func (pitu *PersonalInfoTranslationUpdate) SetLanguage(l *Language) *PersonalInfoTranslationUpdate {
	return pitu.SetLanguageID(l.ID)
}

// Mutation returns the PersonalInfoTranslationMutation object of the builder.
func (pitu *PersonalInfoTranslationUpdate) Mutation() *PersonalInfoTranslationMutation {
	return pitu.mutation
}

// ClearPersonalInfo clears the "personal_info" edge to the PersonalInfo entity.
func (pitu *PersonalInfoTranslationUpdate) ClearPersonalInfo() *PersonalInfoTranslationUpdate {
	pitu.mutation.ClearPersonalInfo()
	return pitu
}

// ClearLanguage clears the "language" edge to the Language entity.
func (pitu *PersonalInfoTranslationUpdate) ClearLanguage() *PersonalInfoTranslationUpdate {
	pitu.mutation.ClearLanguage()
	return pitu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pitu *PersonalInfoTranslationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pitu.sqlSave, pitu.mutation, pitu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pitu *PersonalInfoTranslationUpdate) SaveX(ctx context.Context) int {
	affected, err := pitu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pitu *PersonalInfoTranslationUpdate) Exec(ctx context.Context) error {
	_, err := pitu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pitu *PersonalInfoTranslationUpdate) ExecX(ctx context.Context) {
	if err := pitu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pitu *PersonalInfoTranslationUpdate) check() error {
	if v, ok := pitu.mutation.LanguageCode(); ok {
		if err := personalinfotranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "PersonalInfoTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := pitu.mutation.FullName(); ok {
		if err := personalinfotranslation.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "PersonalInfoTranslation.full_name": %w`, err)}
		}
	}
	if v, ok := pitu.mutation.Title(); ok {
		if err := personalinfotranslation.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "PersonalInfoTranslation.title": %w`, err)}
		}
	}
	if v, ok := pitu.mutation.Location(); ok {
		if err := personalinfotranslation.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "PersonalInfoTranslation.location": %w`, err)}
		}
	}
	if pitu.mutation.PersonalInfoCleared() && len(pitu.mutation.PersonalInfoIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PersonalInfoTranslation.personal_info"`)
	}
	if pitu.mutation.LanguageCleared() && len(pitu.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PersonalInfoTranslation.language"`)
	}
	return nil
}

func (pitu *PersonalInfoTranslationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pitu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(personalinfotranslation.Table, personalinfotranslation.Columns, sqlgraph.NewFieldSpec(personalinfotranslation.FieldID, field.TypeUUID))
	if ps := pitu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pitu.mutation.FullName(); ok {
		_spec.SetField(personalinfotranslation.FieldFullName, field.TypeString, value)
	}
	if pitu.mutation.FullNameCleared() {
		_spec.ClearField(personalinfotranslation.FieldFullName, field.TypeString)
	}
	if value, ok := pitu.mutation.Title(); ok {
		_spec.SetField(personalinfotranslation.FieldTitle, field.TypeString, value)
	}
	if pitu.mutation.TitleCleared() {
		_spec.ClearField(personalinfotranslation.FieldTitle, field.TypeString)
	}
	if value, ok := pitu.mutation.CurrentStatus(); ok {
		_spec.SetField(personalinfotranslation.FieldCurrentStatus, field.TypeString, value)
	}
	if pitu.mutation.CurrentStatusCleared() {
		_spec.ClearField(personalinfotranslation.FieldCurrentStatus, field.TypeString)
	}
	if value, ok := pitu.mutation.Location(); ok {
		_spec.SetField(personalinfotranslation.FieldLocation, field.TypeString, value)
	}
	if pitu.mutation.LocationCleared() {
		_spec.ClearField(personalinfotranslation.FieldLocation, field.TypeString)
	}
	if pitu.mutation.PersonalInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personalinfotranslation.PersonalInfoTable,
			Columns: []string{personalinfotranslation.PersonalInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalinfo.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pitu.mutation.PersonalInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personalinfotranslation.PersonalInfoTable,
			Columns: []string{personalinfotranslation.PersonalInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalinfo.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pitu.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personalinfotranslation.LanguageTable,
			Columns: []string{personalinfotranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pitu.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personalinfotranslation.LanguageTable,
			Columns: []string{personalinfotranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pitu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personalinfotranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pitu.mutation.done = true
	return n, nil
}

// PersonalInfoTranslationUpdateOne is the builder for updating a single PersonalInfoTranslation entity.
type PersonalInfoTranslationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PersonalInfoTranslationMutation
}

// SetPersonalInfoID sets the "personal_info_id" field.
func (pituo *PersonalInfoTranslationUpdateOne) SetPersonalInfoID(u uuid.UUID) *PersonalInfoTranslationUpdateOne {
	pituo.mutation.SetPersonalInfoID(u)
	return pituo
}

// SetNillablePersonalInfoID sets the "personal_info_id" field if the given value is not nil.
func (pituo *PersonalInfoTranslationUpdateOne) SetNillablePersonalInfoID(u *uuid.UUID) *PersonalInfoTranslationUpdateOne {
	if u != nil {
		pituo.SetPersonalInfoID(*u)
	}
	return pituo
}

// SetLanguageCode sets the "language_code" field.
func (pituo *PersonalInfoTranslationUpdateOne) SetLanguageCode(s string) *PersonalInfoTranslationUpdateOne {
	pituo.mutation.SetLanguageCode(s)
	return pituo
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (pituo *PersonalInfoTranslationUpdateOne) SetNillableLanguageCode(s *string) *PersonalInfoTranslationUpdateOne {
	if s != nil {
		pituo.SetLanguageCode(*s)
	}
	return pituo
}

// SetFullName sets the "full_name" field.
func (pituo *PersonalInfoTranslationUpdateOne) SetFullName(s string) *PersonalInfoTranslationUpdateOne {
	pituo.mutation.SetFullName(s)
	return pituo
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (pituo *PersonalInfoTranslationUpdateOne) SetNillableFullName(s *string) *PersonalInfoTranslationUpdateOne {
	if s != nil {
		pituo.SetFullName(*s)
	}
	return pituo
}

// ClearFullName clears the value of the "full_name" field.
func (pituo *PersonalInfoTranslationUpdateOne) ClearFullName() *PersonalInfoTranslationUpdateOne {
	pituo.mutation.ClearFullName()
	return pituo
}

// SetTitle sets the "title" field.
func (pituo *PersonalInfoTranslationUpdateOne) SetTitle(s string) *PersonalInfoTranslationUpdateOne {
	pituo.mutation.SetTitle(s)
	return pituo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pituo *PersonalInfoTranslationUpdateOne) SetNillableTitle(s *string) *PersonalInfoTranslationUpdateOne {
	if s != nil {
		pituo.SetTitle(*s)
	}
	return pituo
}

// ClearTitle clears the value of the "title" field.
func (pituo *PersonalInfoTranslationUpdateOne) ClearTitle() *PersonalInfoTranslationUpdateOne {
	pituo.mutation.ClearTitle()
	return pituo
}

// SetCurrentStatus sets the "current_status" field.
func (pituo *PersonalInfoTranslationUpdateOne) SetCurrentStatus(s string) *PersonalInfoTranslationUpdateOne {
	pituo.mutation.SetCurrentStatus(s)
	return pituo
}

// SetNillableCurrentStatus sets the "current_status" field if the given value is not nil.
func (pituo *PersonalInfoTranslationUpdateOne) SetNillableCurrentStatus(s *string) *PersonalInfoTranslationUpdateOne {
	if s != nil {
		pituo.SetCurrentStatus(*s)
	}
	return pituo
}

// ClearCurrentStatus clears the value of the "current_status" field.
func (pituo *PersonalInfoTranslationUpdateOne) ClearCurrentStatus() *PersonalInfoTranslationUpdateOne {
	pituo.mutation.ClearCurrentStatus()
	return pituo
}

// SetLocation sets the "location" field.
func (pituo *PersonalInfoTranslationUpdateOne) SetLocation(s string) *PersonalInfoTranslationUpdateOne {
	pituo.mutation.SetLocation(s)
	return pituo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (pituo *PersonalInfoTranslationUpdateOne) SetNillableLocation(s *string) *PersonalInfoTranslationUpdateOne {
	if s != nil {
		pituo.SetLocation(*s)
	}
	return pituo
}

// ClearLocation clears the value of the "location" field.
func (pituo *PersonalInfoTranslationUpdateOne) ClearLocation() *PersonalInfoTranslationUpdateOne {
	pituo.mutation.ClearLocation()
	return pituo
}

// SetPersonalInfo sets the "personal_info" edge to the PersonalInfo entity.
func (pituo *PersonalInfoTranslationUpdateOne) SetPersonalInfo(p *PersonalInfo) *PersonalInfoTranslationUpdateOne {
	return pituo.SetPersonalInfoID(p.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (pituo *PersonalInfoTranslationUpdateOne) SetLanguageID(id string) *PersonalInfoTranslationUpdateOne {
	pituo.mutation.SetLanguageID(id)
	return pituo
}

// SetLanguage sets the "language" edge to the Language entity.
func (pituo *PersonalInfoTranslationUpdateOne) SetLanguage(l *Language) *PersonalInfoTranslationUpdateOne {
	return pituo.SetLanguageID(l.ID)
}

// Mutation returns the PersonalInfoTranslationMutation object of the builder.
func (pituo *PersonalInfoTranslationUpdateOne) Mutation() *PersonalInfoTranslationMutation {
	return pituo.mutation
}

// ClearPersonalInfo clears the "personal_info" edge to the PersonalInfo entity.
func (pituo *PersonalInfoTranslationUpdateOne) ClearPersonalInfo() *PersonalInfoTranslationUpdateOne {
	pituo.mutation.ClearPersonalInfo()
	return pituo
}

// ClearLanguage clears the "language" edge to the Language entity.
func (pituo *PersonalInfoTranslationUpdateOne) ClearLanguage() *PersonalInfoTranslationUpdateOne {
	pituo.mutation.ClearLanguage()
	return pituo
}

// Where appends a list predicates to the PersonalInfoTranslationUpdate builder.
func (pituo *PersonalInfoTranslationUpdateOne) Where(ps ...predicate.PersonalInfoTranslation) *PersonalInfoTranslationUpdateOne {
	pituo.mutation.Where(ps...)
	return pituo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pituo *PersonalInfoTranslationUpdateOne) Select(field string, fields ...string) *PersonalInfoTranslationUpdateOne {
	pituo.fields = append([]string{field}, fields...)
	return pituo
}

// Save executes the query and returns the updated PersonalInfoTranslation entity.
func (pituo *PersonalInfoTranslationUpdateOne) Save(ctx context.Context) (*PersonalInfoTranslation, error) {
	return withHooks(ctx, pituo.sqlSave, pituo.mutation, pituo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pituo *PersonalInfoTranslationUpdateOne) SaveX(ctx context.Context) *PersonalInfoTranslation {
	node, err := pituo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pituo *PersonalInfoTranslationUpdateOne) Exec(ctx context.Context) error {
	_, err := pituo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pituo *PersonalInfoTranslationUpdateOne) ExecX(ctx context.Context) {
	if err := pituo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pituo *PersonalInfoTranslationUpdateOne) check() error {
	if v, ok := pituo.mutation.LanguageCode(); ok {
		if err := personalinfotranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "PersonalInfoTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := pituo.mutation.FullName(); ok {
		if err := personalinfotranslation.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "PersonalInfoTranslation.full_name": %w`, err)}
		}
	}
	if v, ok := pituo.mutation.Title(); ok {
		if err := personalinfotranslation.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "PersonalInfoTranslation.title": %w`, err)}
		}
	}
	if v, ok := pituo.mutation.Location(); ok {
		if err := personalinfotranslation.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "PersonalInfoTranslation.location": %w`, err)}
		}
	}
	if pituo.mutation.PersonalInfoCleared() && len(pituo.mutation.PersonalInfoIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PersonalInfoTranslation.personal_info"`)
	}
	if pituo.mutation.LanguageCleared() && len(pituo.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PersonalInfoTranslation.language"`)
	}
	return nil
}

func (pituo *PersonalInfoTranslationUpdateOne) sqlSave(ctx context.Context) (_node *PersonalInfoTranslation, err error) {
	if err := pituo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(personalinfotranslation.Table, personalinfotranslation.Columns, sqlgraph.NewFieldSpec(personalinfotranslation.FieldID, field.TypeUUID))
	id, ok := pituo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PersonalInfoTranslation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pituo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, personalinfotranslation.FieldID)
		for _, f := range fields {
			if !personalinfotranslation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != personalinfotranslation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pituo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pituo.mutation.FullName(); ok {
		_spec.SetField(personalinfotranslation.FieldFullName, field.TypeString, value)
	}
	if pituo.mutation.FullNameCleared() {
		_spec.ClearField(personalinfotranslation.FieldFullName, field.TypeString)
	}
	if value, ok := pituo.mutation.Title(); ok {
		_spec.SetField(personalinfotranslation.FieldTitle, field.TypeString, value)
	}
	if pituo.mutation.TitleCleared() {
		_spec.ClearField(personalinfotranslation.FieldTitle, field.TypeString)
	}
	if value, ok := pituo.mutation.CurrentStatus(); ok {
		_spec.SetField(personalinfotranslation.FieldCurrentStatus, field.TypeString, value)
	}
	if pituo.mutation.CurrentStatusCleared() {
		_spec.ClearField(personalinfotranslation.FieldCurrentStatus, field.TypeString)
	}
	if value, ok := pituo.mutation.Location(); ok {
		_spec.SetField(personalinfotranslation.FieldLocation, field.TypeString, value)
	}
	if pituo.mutation.LocationCleared() {
		_spec.ClearField(personalinfotranslation.FieldLocation, field.TypeString)
	}
	if pituo.mutation.PersonalInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personalinfotranslation.PersonalInfoTable,
			Columns: []string{personalinfotranslation.PersonalInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalinfo.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pituo.mutation.PersonalInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personalinfotranslation.PersonalInfoTable,
			Columns: []string{personalinfotranslation.PersonalInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalinfo.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pituo.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personalinfotranslation.LanguageTable,
			Columns: []string{personalinfotranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pituo.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personalinfotranslation.LanguageTable,
			Columns: []string{personalinfotranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PersonalInfoTranslation{config: pituo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pituo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personalinfotranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pituo.mutation.done = true
	return _node, nil
}
