// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/education"
	"silan-backend/internal/ent/educationdetail"
	"silan-backend/internal/ent/educationdetailtranslation"
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// EducationDetailUpdate is the builder for updating EducationDetail entities.
type EducationDetailUpdate struct {
	config
	hooks    []Hook
	mutation *EducationDetailMutation
}

// Where appends a list predicates to the EducationDetailUpdate builder.
func (edu *EducationDetailUpdate) Where(ps ...predicate.EducationDetail) *EducationDetailUpdate {
	edu.mutation.Where(ps...)
	return edu
}

// SetEducationID sets the "education_id" field.
func (edu *EducationDetailUpdate) SetEducationID(u uuid.UUID) *EducationDetailUpdate {
	edu.mutation.SetEducationID(u)
	return edu
}

// SetNillableEducationID sets the "education_id" field if the given value is not nil.
func (edu *EducationDetailUpdate) SetNillableEducationID(u *uuid.UUID) *EducationDetailUpdate {
	if u != nil {
		edu.SetEducationID(*u)
	}
	return edu
}

// SetDetailText sets the "detail_text" field.
func (edu *EducationDetailUpdate) SetDetailText(s string) *EducationDetailUpdate {
	edu.mutation.SetDetailText(s)
	return edu
}

// SetNillableDetailText sets the "detail_text" field if the given value is not nil.
func (edu *EducationDetailUpdate) SetNillableDetailText(s *string) *EducationDetailUpdate {
	if s != nil {
		edu.SetDetailText(*s)
	}
	return edu
}

// SetSortOrder sets the "sort_order" field.
func (edu *EducationDetailUpdate) SetSortOrder(i int) *EducationDetailUpdate {
	edu.mutation.ResetSortOrder()
	edu.mutation.SetSortOrder(i)
	return edu
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (edu *EducationDetailUpdate) SetNillableSortOrder(i *int) *EducationDetailUpdate {
	if i != nil {
		edu.SetSortOrder(*i)
	}
	return edu
}

// AddSortOrder adds i to the "sort_order" field.
func (edu *EducationDetailUpdate) AddSortOrder(i int) *EducationDetailUpdate {
	edu.mutation.AddSortOrder(i)
	return edu
}

// SetUpdatedAt sets the "updated_at" field.
func (edu *EducationDetailUpdate) SetUpdatedAt(t time.Time) *EducationDetailUpdate {
	edu.mutation.SetUpdatedAt(t)
	return edu
}

// SetEducation sets the "education" edge to the Education entity.
func (edu *EducationDetailUpdate) SetEducation(e *Education) *EducationDetailUpdate {
	return edu.SetEducationID(e.ID)
}

// AddTranslationIDs adds the "translations" edge to the EducationDetailTranslation entity by IDs.
func (edu *EducationDetailUpdate) AddTranslationIDs(ids ...uuid.UUID) *EducationDetailUpdate {
	edu.mutation.AddTranslationIDs(ids...)
	return edu
}

// AddTranslations adds the "translations" edges to the EducationDetailTranslation entity.
func (edu *EducationDetailUpdate) AddTranslations(e ...*EducationDetailTranslation) *EducationDetailUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return edu.AddTranslationIDs(ids...)
}

// Mutation returns the EducationDetailMutation object of the builder.
func (edu *EducationDetailUpdate) Mutation() *EducationDetailMutation {
	return edu.mutation
}

// ClearEducation clears the "education" edge to the Education entity.
func (edu *EducationDetailUpdate) ClearEducation() *EducationDetailUpdate {
	edu.mutation.ClearEducation()
	return edu
}

// ClearTranslations clears all "translations" edges to the EducationDetailTranslation entity.
func (edu *EducationDetailUpdate) ClearTranslations() *EducationDetailUpdate {
	edu.mutation.ClearTranslations()
	return edu
}

// RemoveTranslationIDs removes the "translations" edge to EducationDetailTranslation entities by IDs.
func (edu *EducationDetailUpdate) RemoveTranslationIDs(ids ...uuid.UUID) *EducationDetailUpdate {
	edu.mutation.RemoveTranslationIDs(ids...)
	return edu
}

// RemoveTranslations removes "translations" edges to EducationDetailTranslation entities.
func (edu *EducationDetailUpdate) RemoveTranslations(e ...*EducationDetailTranslation) *EducationDetailUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return edu.RemoveTranslationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (edu *EducationDetailUpdate) Save(ctx context.Context) (int, error) {
	edu.defaults()
	return withHooks(ctx, edu.sqlSave, edu.mutation, edu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (edu *EducationDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := edu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (edu *EducationDetailUpdate) Exec(ctx context.Context) error {
	_, err := edu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (edu *EducationDetailUpdate) ExecX(ctx context.Context) {
	if err := edu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (edu *EducationDetailUpdate) defaults() {
	if _, ok := edu.mutation.UpdatedAt(); !ok {
		v := educationdetail.UpdateDefaultUpdatedAt()
		edu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (edu *EducationDetailUpdate) check() error {
	if v, ok := edu.mutation.DetailText(); ok {
		if err := educationdetail.DetailTextValidator(v); err != nil {
			return &ValidationError{Name: "detail_text", err: fmt.Errorf(`ent: validator failed for field "EducationDetail.detail_text": %w`, err)}
		}
	}
	if edu.mutation.EducationCleared() && len(edu.mutation.EducationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EducationDetail.education"`)
	}
	return nil
}

func (edu *EducationDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := edu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(educationdetail.Table, educationdetail.Columns, sqlgraph.NewFieldSpec(educationdetail.FieldID, field.TypeUUID))
	if ps := edu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := edu.mutation.DetailText(); ok {
		_spec.SetField(educationdetail.FieldDetailText, field.TypeString, value)
	}
	if value, ok := edu.mutation.SortOrder(); ok {
		_spec.SetField(educationdetail.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := edu.mutation.AddedSortOrder(); ok {
		_spec.AddField(educationdetail.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := edu.mutation.UpdatedAt(); ok {
		_spec.SetField(educationdetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if edu.mutation.EducationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   educationdetail.EducationTable,
			Columns: []string{educationdetail.EducationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := edu.mutation.EducationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   educationdetail.EducationTable,
			Columns: []string{educationdetail.EducationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if edu.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   educationdetail.TranslationsTable,
			Columns: []string{educationdetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := edu.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !edu.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   educationdetail.TranslationsTable,
			Columns: []string{educationdetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := edu.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   educationdetail.TranslationsTable,
			Columns: []string{educationdetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, edu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{educationdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	edu.mutation.done = true
	return n, nil
}

// EducationDetailUpdateOne is the builder for updating a single EducationDetail entity.
type EducationDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EducationDetailMutation
}

// SetEducationID sets the "education_id" field.
func (eduo *EducationDetailUpdateOne) SetEducationID(u uuid.UUID) *EducationDetailUpdateOne {
	eduo.mutation.SetEducationID(u)
	return eduo
}

// SetNillableEducationID sets the "education_id" field if the given value is not nil.
func (eduo *EducationDetailUpdateOne) SetNillableEducationID(u *uuid.UUID) *EducationDetailUpdateOne {
	if u != nil {
		eduo.SetEducationID(*u)
	}
	return eduo
}

// SetDetailText sets the "detail_text" field.
func (eduo *EducationDetailUpdateOne) SetDetailText(s string) *EducationDetailUpdateOne {
	eduo.mutation.SetDetailText(s)
	return eduo
}

// SetNillableDetailText sets the "detail_text" field if the given value is not nil.
func (eduo *EducationDetailUpdateOne) SetNillableDetailText(s *string) *EducationDetailUpdateOne {
	if s != nil {
		eduo.SetDetailText(*s)
	}
	return eduo
}

// SetSortOrder sets the "sort_order" field.
func (eduo *EducationDetailUpdateOne) SetSortOrder(i int) *EducationDetailUpdateOne {
	eduo.mutation.ResetSortOrder()
	eduo.mutation.SetSortOrder(i)
	return eduo
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (eduo *EducationDetailUpdateOne) SetNillableSortOrder(i *int) *EducationDetailUpdateOne {
	if i != nil {
		eduo.SetSortOrder(*i)
	}
	return eduo
}

// AddSortOrder adds i to the "sort_order" field.
func (eduo *EducationDetailUpdateOne) AddSortOrder(i int) *EducationDetailUpdateOne {
	eduo.mutation.AddSortOrder(i)
	return eduo
}

// SetUpdatedAt sets the "updated_at" field.
func (eduo *EducationDetailUpdateOne) SetUpdatedAt(t time.Time) *EducationDetailUpdateOne {
	eduo.mutation.SetUpdatedAt(t)
	return eduo
}

// SetEducation sets the "education" edge to the Education entity.
func (eduo *EducationDetailUpdateOne) SetEducation(e *Education) *EducationDetailUpdateOne {
	return eduo.SetEducationID(e.ID)
}

// AddTranslationIDs adds the "translations" edge to the EducationDetailTranslation entity by IDs.
func (eduo *EducationDetailUpdateOne) AddTranslationIDs(ids ...uuid.UUID) *EducationDetailUpdateOne {
	eduo.mutation.AddTranslationIDs(ids...)
	return eduo
}

// AddTranslations adds the "translations" edges to the EducationDetailTranslation entity.
func (eduo *EducationDetailUpdateOne) AddTranslations(e ...*EducationDetailTranslation) *EducationDetailUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eduo.AddTranslationIDs(ids...)
}

// Mutation returns the EducationDetailMutation object of the builder.
func (eduo *EducationDetailUpdateOne) Mutation() *EducationDetailMutation {
	return eduo.mutation
}

// ClearEducation clears the "education" edge to the Education entity.
func (eduo *EducationDetailUpdateOne) ClearEducation() *EducationDetailUpdateOne {
	eduo.mutation.ClearEducation()
	return eduo
}

// ClearTranslations clears all "translations" edges to the EducationDetailTranslation entity.
func (eduo *EducationDetailUpdateOne) ClearTranslations() *EducationDetailUpdateOne {
	eduo.mutation.ClearTranslations()
	return eduo
}

// RemoveTranslationIDs removes the "translations" edge to EducationDetailTranslation entities by IDs.
func (eduo *EducationDetailUpdateOne) RemoveTranslationIDs(ids ...uuid.UUID) *EducationDetailUpdateOne {
	eduo.mutation.RemoveTranslationIDs(ids...)
	return eduo
}

// RemoveTranslations removes "translations" edges to EducationDetailTranslation entities.
func (eduo *EducationDetailUpdateOne) RemoveTranslations(e ...*EducationDetailTranslation) *EducationDetailUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eduo.RemoveTranslationIDs(ids...)
}

// Where appends a list predicates to the EducationDetailUpdate builder.
func (eduo *EducationDetailUpdateOne) Where(ps ...predicate.EducationDetail) *EducationDetailUpdateOne {
	eduo.mutation.Where(ps...)
	return eduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eduo *EducationDetailUpdateOne) Select(field string, fields ...string) *EducationDetailUpdateOne {
	eduo.fields = append([]string{field}, fields...)
	return eduo
}

// Save executes the query and returns the updated EducationDetail entity.
func (eduo *EducationDetailUpdateOne) Save(ctx context.Context) (*EducationDetail, error) {
	eduo.defaults()
	return withHooks(ctx, eduo.sqlSave, eduo.mutation, eduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eduo *EducationDetailUpdateOne) SaveX(ctx context.Context) *EducationDetail {
	node, err := eduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eduo *EducationDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := eduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eduo *EducationDetailUpdateOne) ExecX(ctx context.Context) {
	if err := eduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eduo *EducationDetailUpdateOne) defaults() {
	if _, ok := eduo.mutation.UpdatedAt(); !ok {
		v := educationdetail.UpdateDefaultUpdatedAt()
		eduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eduo *EducationDetailUpdateOne) check() error {
	if v, ok := eduo.mutation.DetailText(); ok {
		if err := educationdetail.DetailTextValidator(v); err != nil {
			return &ValidationError{Name: "detail_text", err: fmt.Errorf(`ent: validator failed for field "EducationDetail.detail_text": %w`, err)}
		}
	}
	if eduo.mutation.EducationCleared() && len(eduo.mutation.EducationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EducationDetail.education"`)
	}
	return nil
}

func (eduo *EducationDetailUpdateOne) sqlSave(ctx context.Context) (_node *EducationDetail, err error) {
	if err := eduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(educationdetail.Table, educationdetail.Columns, sqlgraph.NewFieldSpec(educationdetail.FieldID, field.TypeUUID))
	id, ok := eduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EducationDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, educationdetail.FieldID)
		for _, f := range fields {
			if !educationdetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != educationdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eduo.mutation.DetailText(); ok {
		_spec.SetField(educationdetail.FieldDetailText, field.TypeString, value)
	}
	if value, ok := eduo.mutation.SortOrder(); ok {
		_spec.SetField(educationdetail.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := eduo.mutation.AddedSortOrder(); ok {
		_spec.AddField(educationdetail.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := eduo.mutation.UpdatedAt(); ok {
		_spec.SetField(educationdetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if eduo.mutation.EducationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   educationdetail.EducationTable,
			Columns: []string{educationdetail.EducationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eduo.mutation.EducationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   educationdetail.EducationTable,
			Columns: []string{educationdetail.EducationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eduo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   educationdetail.TranslationsTable,
			Columns: []string{educationdetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eduo.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !eduo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   educationdetail.TranslationsTable,
			Columns: []string{educationdetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eduo.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   educationdetail.TranslationsTable,
			Columns: []string{educationdetail.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationdetailtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EducationDetail{config: eduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{educationdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eduo.mutation.done = true
	return _node, nil
}
