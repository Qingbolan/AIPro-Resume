// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"silan-backend/internal/ent/blogcategory"
	"silan-backend/internal/ent/blogcategorytranslation"
	"silan-backend/internal/ent/blogpost"
	"silan-backend/internal/ent/predicate"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BlogCategoryQuery is the builder for querying BlogCategory entities.
type BlogCategoryQuery struct {
	config
	ctx              *QueryContext
	order            []blogcategory.OrderOption
	inters           []Interceptor
	predicates       []predicate.BlogCategory
	withTranslations *BlogCategoryTranslationQuery
	withBlogPosts    *BlogPostQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BlogCategoryQuery builder.
func (bcq *BlogCategoryQuery) Where(ps ...predicate.BlogCategory) *BlogCategoryQuery {
	bcq.predicates = append(bcq.predicates, ps...)
	return bcq
}

// Limit the number of records to be returned by this query.
func (bcq *BlogCategoryQuery) Limit(limit int) *BlogCategoryQuery {
	bcq.ctx.Limit = &limit
	return bcq
}

// Offset to start from.
func (bcq *BlogCategoryQuery) Offset(offset int) *BlogCategoryQuery {
	bcq.ctx.Offset = &offset
	return bcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (bcq *BlogCategoryQuery) Unique(unique bool) *BlogCategoryQuery {
	bcq.ctx.Unique = &unique
	return bcq
}

// Order specifies how the records should be ordered.
func (bcq *BlogCategoryQuery) Order(o ...blogcategory.OrderOption) *BlogCategoryQuery {
	bcq.order = append(bcq.order, o...)
	return bcq
}

// QueryTranslations chains the current query on the "translations" edge.
func (bcq *BlogCategoryQuery) QueryTranslations() *BlogCategoryTranslationQuery {
	query := (&BlogCategoryTranslationClient{config: bcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(blogcategory.Table, blogcategory.FieldID, selector),
			sqlgraph.To(blogcategorytranslation.Table, blogcategorytranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, blogcategory.TranslationsTable, blogcategory.TranslationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(bcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBlogPosts chains the current query on the "blog_posts" edge.
func (bcq *BlogCategoryQuery) QueryBlogPosts() *BlogPostQuery {
	query := (&BlogPostClient{config: bcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(blogcategory.Table, blogcategory.FieldID, selector),
			sqlgraph.To(blogpost.Table, blogpost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, blogcategory.BlogPostsTable, blogcategory.BlogPostsColumn),
		)
		fromU = sqlgraph.SetNeighbors(bcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BlogCategory entity from the query.
// Returns a *NotFoundError when no BlogCategory was found.
func (bcq *BlogCategoryQuery) First(ctx context.Context) (*BlogCategory, error) {
	nodes, err := bcq.Limit(1).All(setContextOp(ctx, bcq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{blogcategory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bcq *BlogCategoryQuery) FirstX(ctx context.Context) *BlogCategory {
	node, err := bcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BlogCategory ID from the query.
// Returns a *NotFoundError when no BlogCategory ID was found.
func (bcq *BlogCategoryQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = bcq.Limit(1).IDs(setContextOp(ctx, bcq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{blogcategory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (bcq *BlogCategoryQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := bcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BlogCategory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BlogCategory entity is found.
// Returns a *NotFoundError when no BlogCategory entities are found.
func (bcq *BlogCategoryQuery) Only(ctx context.Context) (*BlogCategory, error) {
	nodes, err := bcq.Limit(2).All(setContextOp(ctx, bcq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{blogcategory.Label}
	default:
		return nil, &NotSingularError{blogcategory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bcq *BlogCategoryQuery) OnlyX(ctx context.Context) *BlogCategory {
	node, err := bcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BlogCategory ID in the query.
// Returns a *NotSingularError when more than one BlogCategory ID is found.
// Returns a *NotFoundError when no entities are found.
func (bcq *BlogCategoryQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = bcq.Limit(2).IDs(setContextOp(ctx, bcq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{blogcategory.Label}
	default:
		err = &NotSingularError{blogcategory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bcq *BlogCategoryQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := bcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BlogCategories.
func (bcq *BlogCategoryQuery) All(ctx context.Context) ([]*BlogCategory, error) {
	ctx = setContextOp(ctx, bcq.ctx, ent.OpQueryAll)
	if err := bcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BlogCategory, *BlogCategoryQuery]()
	return withInterceptors[[]*BlogCategory](ctx, bcq, qr, bcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (bcq *BlogCategoryQuery) AllX(ctx context.Context) []*BlogCategory {
	nodes, err := bcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BlogCategory IDs.
func (bcq *BlogCategoryQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if bcq.ctx.Unique == nil && bcq.path != nil {
		bcq.Unique(true)
	}
	ctx = setContextOp(ctx, bcq.ctx, ent.OpQueryIDs)
	if err = bcq.Select(blogcategory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bcq *BlogCategoryQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := bcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bcq *BlogCategoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, bcq.ctx, ent.OpQueryCount)
	if err := bcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, bcq, querierCount[*BlogCategoryQuery](), bcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (bcq *BlogCategoryQuery) CountX(ctx context.Context) int {
	count, err := bcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bcq *BlogCategoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, bcq.ctx, ent.OpQueryExist)
	switch _, err := bcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (bcq *BlogCategoryQuery) ExistX(ctx context.Context) bool {
	exist, err := bcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BlogCategoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bcq *BlogCategoryQuery) Clone() *BlogCategoryQuery {
	if bcq == nil {
		return nil
	}
	return &BlogCategoryQuery{
		config:           bcq.config,
		ctx:              bcq.ctx.Clone(),
		order:            append([]blogcategory.OrderOption{}, bcq.order...),
		inters:           append([]Interceptor{}, bcq.inters...),
		predicates:       append([]predicate.BlogCategory{}, bcq.predicates...),
		withTranslations: bcq.withTranslations.Clone(),
		withBlogPosts:    bcq.withBlogPosts.Clone(),
		// clone intermediate query.
		sql:  bcq.sql.Clone(),
		path: bcq.path,
	}
}

// WithTranslations tells the query-builder to eager-load the nodes that are connected to
// the "translations" edge. The optional arguments are used to configure the query builder of the edge.
func (bcq *BlogCategoryQuery) WithTranslations(opts ...func(*BlogCategoryTranslationQuery)) *BlogCategoryQuery {
	query := (&BlogCategoryTranslationClient{config: bcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bcq.withTranslations = query
	return bcq
}

// WithBlogPosts tells the query-builder to eager-load the nodes that are connected to
// the "blog_posts" edge. The optional arguments are used to configure the query builder of the edge.
func (bcq *BlogCategoryQuery) WithBlogPosts(opts ...func(*BlogPostQuery)) *BlogCategoryQuery {
	query := (&BlogPostClient{config: bcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bcq.withBlogPosts = query
	return bcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BlogCategory.Query().
//		GroupBy(blogcategory.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (bcq *BlogCategoryQuery) GroupBy(field string, fields ...string) *BlogCategoryGroupBy {
	bcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BlogCategoryGroupBy{build: bcq}
	grbuild.flds = &bcq.ctx.Fields
	grbuild.label = blogcategory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.BlogCategory.Query().
//		Select(blogcategory.FieldName).
//		Scan(ctx, &v)
func (bcq *BlogCategoryQuery) Select(fields ...string) *BlogCategorySelect {
	bcq.ctx.Fields = append(bcq.ctx.Fields, fields...)
	sbuild := &BlogCategorySelect{BlogCategoryQuery: bcq}
	sbuild.label = blogcategory.Label
	sbuild.flds, sbuild.scan = &bcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BlogCategorySelect configured with the given aggregations.
func (bcq *BlogCategoryQuery) Aggregate(fns ...AggregateFunc) *BlogCategorySelect {
	return bcq.Select().Aggregate(fns...)
}

func (bcq *BlogCategoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range bcq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, bcq); err != nil {
				return err
			}
		}
	}
	for _, f := range bcq.ctx.Fields {
		if !blogcategory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if bcq.path != nil {
		prev, err := bcq.path(ctx)
		if err != nil {
			return err
		}
		bcq.sql = prev
	}
	return nil
}

func (bcq *BlogCategoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BlogCategory, error) {
	var (
		nodes       = []*BlogCategory{}
		_spec       = bcq.querySpec()
		loadedTypes = [2]bool{
			bcq.withTranslations != nil,
			bcq.withBlogPosts != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BlogCategory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BlogCategory{config: bcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, bcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := bcq.withTranslations; query != nil {
		if err := bcq.loadTranslations(ctx, query, nodes,
			func(n *BlogCategory) { n.Edges.Translations = []*BlogCategoryTranslation{} },
			func(n *BlogCategory, e *BlogCategoryTranslation) {
				n.Edges.Translations = append(n.Edges.Translations, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := bcq.withBlogPosts; query != nil {
		if err := bcq.loadBlogPosts(ctx, query, nodes,
			func(n *BlogCategory) { n.Edges.BlogPosts = []*BlogPost{} },
			func(n *BlogCategory, e *BlogPost) { n.Edges.BlogPosts = append(n.Edges.BlogPosts, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (bcq *BlogCategoryQuery) loadTranslations(ctx context.Context, query *BlogCategoryTranslationQuery, nodes []*BlogCategory, init func(*BlogCategory), assign func(*BlogCategory, *BlogCategoryTranslation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*BlogCategory)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(blogcategorytranslation.FieldBlogCategoryID)
	}
	query.Where(predicate.BlogCategoryTranslation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(blogcategory.TranslationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.BlogCategoryID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "blog_category_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bcq *BlogCategoryQuery) loadBlogPosts(ctx context.Context, query *BlogPostQuery, nodes []*BlogCategory, init func(*BlogCategory), assign func(*BlogCategory, *BlogPost)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*BlogCategory)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(blogpost.FieldCategoryID)
	}
	query.Where(predicate.BlogPost(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(blogcategory.BlogPostsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CategoryID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "category_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (bcq *BlogCategoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bcq.querySpec()
	_spec.Node.Columns = bcq.ctx.Fields
	if len(bcq.ctx.Fields) > 0 {
		_spec.Unique = bcq.ctx.Unique != nil && *bcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, bcq.driver, _spec)
}

func (bcq *BlogCategoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(blogcategory.Table, blogcategory.Columns, sqlgraph.NewFieldSpec(blogcategory.FieldID, field.TypeUUID))
	_spec.From = bcq.sql
	if unique := bcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if bcq.path != nil {
		_spec.Unique = true
	}
	if fields := bcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blogcategory.FieldID)
		for i := range fields {
			if fields[i] != blogcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := bcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (bcq *BlogCategoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(bcq.driver.Dialect())
	t1 := builder.Table(blogcategory.Table)
	columns := bcq.ctx.Fields
	if len(columns) == 0 {
		columns = blogcategory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if bcq.sql != nil {
		selector = bcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if bcq.ctx.Unique != nil && *bcq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range bcq.predicates {
		p(selector)
	}
	for _, p := range bcq.order {
		p(selector)
	}
	if offset := bcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BlogCategoryGroupBy is the group-by builder for BlogCategory entities.
type BlogCategoryGroupBy struct {
	selector
	build *BlogCategoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bcgb *BlogCategoryGroupBy) Aggregate(fns ...AggregateFunc) *BlogCategoryGroupBy {
	bcgb.fns = append(bcgb.fns, fns...)
	return bcgb
}

// Scan applies the selector query and scans the result into the given value.
func (bcgb *BlogCategoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bcgb.build.ctx, ent.OpQueryGroupBy)
	if err := bcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BlogCategoryQuery, *BlogCategoryGroupBy](ctx, bcgb.build, bcgb, bcgb.build.inters, v)
}

func (bcgb *BlogCategoryGroupBy) sqlScan(ctx context.Context, root *BlogCategoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(bcgb.fns))
	for _, fn := range bcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*bcgb.flds)+len(bcgb.fns))
		for _, f := range *bcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*bcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BlogCategorySelect is the builder for selecting fields of BlogCategory entities.
type BlogCategorySelect struct {
	*BlogCategoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bcs *BlogCategorySelect) Aggregate(fns ...AggregateFunc) *BlogCategorySelect {
	bcs.fns = append(bcs.fns, fns...)
	return bcs
}

// Scan applies the selector query and scans the result into the given value.
func (bcs *BlogCategorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bcs.ctx, ent.OpQuerySelect)
	if err := bcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BlogCategoryQuery, *BlogCategorySelect](ctx, bcs.BlogCategoryQuery, bcs, bcs.inters, v)
}

func (bcs *BlogCategorySelect) sqlScan(ctx context.Context, root *BlogCategoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bcs.fns))
	for _, fn := range bcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
