// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/recentupdatetranslation"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RecentUpdateTranslationDelete is the builder for deleting a RecentUpdateTranslation entity.
type RecentUpdateTranslationDelete struct {
	config
	hooks    []Hook
	mutation *RecentUpdateTranslationMutation
}

// Where appends a list predicates to the RecentUpdateTranslationDelete builder.
func (rutd *RecentUpdateTranslationDelete) Where(ps ...predicate.RecentUpdateTranslation) *RecentUpdateTranslationDelete {
	rutd.mutation.Where(ps...)
	return rutd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rutd *RecentUpdateTranslationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rutd.sqlExec, rutd.mutation, rutd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rutd *RecentUpdateTranslationDelete) ExecX(ctx context.Context) int {
	n, err := rutd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rutd *RecentUpdateTranslationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(recentupdatetranslation.Table, sqlgraph.NewFieldSpec(recentupdatetranslation.FieldID, field.TypeUUID))
	if ps := rutd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rutd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rutd.mutation.done = true
	return affected, err
}

// RecentUpdateTranslationDeleteOne is the builder for deleting a single RecentUpdateTranslation entity.
type RecentUpdateTranslationDeleteOne struct {
	rutd *RecentUpdateTranslationDelete
}

// Where appends a list predicates to the RecentUpdateTranslationDelete builder.
func (rutdo *RecentUpdateTranslationDeleteOne) Where(ps ...predicate.RecentUpdateTranslation) *RecentUpdateTranslationDeleteOne {
	rutdo.rutd.mutation.Where(ps...)
	return rutdo
}

// Exec executes the deletion query.
func (rutdo *RecentUpdateTranslationDeleteOne) Exec(ctx context.Context) error {
	n, err := rutdo.rutd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{recentupdatetranslation.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rutdo *RecentUpdateTranslationDeleteOne) ExecX(ctx context.Context) {
	if err := rutdo.Exec(ctx); err != nil {
		panic(err)
	}
}
