// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/projectdetail"
	"silan-backend/internal/ent/projectdetailtranslation"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProjectDetailTranslationCreate is the builder for creating a ProjectDetailTranslation entity.
type ProjectDetailTranslationCreate struct {
	config
	mutation *ProjectDetailTranslationMutation
	hooks    []Hook
}

// SetProjectDetailID sets the "project_detail_id" field.
func (pdtc *ProjectDetailTranslationCreate) SetProjectDetailID(u uuid.UUID) *ProjectDetailTranslationCreate {
	pdtc.mutation.SetProjectDetailID(u)
	return pdtc
}

// SetLanguageCode sets the "language_code" field.
func (pdtc *ProjectDetailTranslationCreate) SetLanguageCode(s string) *ProjectDetailTranslationCreate {
	pdtc.mutation.SetLanguageCode(s)
	return pdtc
}

// SetDetailedDescription sets the "detailed_description" field.
func (pdtc *ProjectDetailTranslationCreate) SetDetailedDescription(s string) *ProjectDetailTranslationCreate {
	pdtc.mutation.SetDetailedDescription(s)
	return pdtc
}

// SetNillableDetailedDescription sets the "detailed_description" field if the given value is not nil.
func (pdtc *ProjectDetailTranslationCreate) SetNillableDetailedDescription(s *string) *ProjectDetailTranslationCreate {
	if s != nil {
		pdtc.SetDetailedDescription(*s)
	}
	return pdtc
}

// SetGoals sets the "goals" field.
func (pdtc *ProjectDetailTranslationCreate) SetGoals(s string) *ProjectDetailTranslationCreate {
	pdtc.mutation.SetGoals(s)
	return pdtc
}

// SetNillableGoals sets the "goals" field if the given value is not nil.
func (pdtc *ProjectDetailTranslationCreate) SetNillableGoals(s *string) *ProjectDetailTranslationCreate {
	if s != nil {
		pdtc.SetGoals(*s)
	}
	return pdtc
}

// SetChallenges sets the "challenges" field.
func (pdtc *ProjectDetailTranslationCreate) SetChallenges(s string) *ProjectDetailTranslationCreate {
	pdtc.mutation.SetChallenges(s)
	return pdtc
}

// SetNillableChallenges sets the "challenges" field if the given value is not nil.
func (pdtc *ProjectDetailTranslationCreate) SetNillableChallenges(s *string) *ProjectDetailTranslationCreate {
	if s != nil {
		pdtc.SetChallenges(*s)
	}
	return pdtc
}

// SetSolutions sets the "solutions" field.
func (pdtc *ProjectDetailTranslationCreate) SetSolutions(s string) *ProjectDetailTranslationCreate {
	pdtc.mutation.SetSolutions(s)
	return pdtc
}

// SetNillableSolutions sets the "solutions" field if the given value is not nil.
func (pdtc *ProjectDetailTranslationCreate) SetNillableSolutions(s *string) *ProjectDetailTranslationCreate {
	if s != nil {
		pdtc.SetSolutions(*s)
	}
	return pdtc
}

// SetLessonsLearned sets the "lessons_learned" field.
func (pdtc *ProjectDetailTranslationCreate) SetLessonsLearned(s string) *ProjectDetailTranslationCreate {
	pdtc.mutation.SetLessonsLearned(s)
	return pdtc
}

// SetNillableLessonsLearned sets the "lessons_learned" field if the given value is not nil.
func (pdtc *ProjectDetailTranslationCreate) SetNillableLessonsLearned(s *string) *ProjectDetailTranslationCreate {
	if s != nil {
		pdtc.SetLessonsLearned(*s)
	}
	return pdtc
}

// SetFutureEnhancements sets the "future_enhancements" field.
func (pdtc *ProjectDetailTranslationCreate) SetFutureEnhancements(s string) *ProjectDetailTranslationCreate {
	pdtc.mutation.SetFutureEnhancements(s)
	return pdtc
}

// SetNillableFutureEnhancements sets the "future_enhancements" field if the given value is not nil.
func (pdtc *ProjectDetailTranslationCreate) SetNillableFutureEnhancements(s *string) *ProjectDetailTranslationCreate {
	if s != nil {
		pdtc.SetFutureEnhancements(*s)
	}
	return pdtc
}

// SetCreatedAt sets the "created_at" field.
func (pdtc *ProjectDetailTranslationCreate) SetCreatedAt(t time.Time) *ProjectDetailTranslationCreate {
	pdtc.mutation.SetCreatedAt(t)
	return pdtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pdtc *ProjectDetailTranslationCreate) SetNillableCreatedAt(t *time.Time) *ProjectDetailTranslationCreate {
	if t != nil {
		pdtc.SetCreatedAt(*t)
	}
	return pdtc
}

// SetUpdatedAt sets the "updated_at" field.
func (pdtc *ProjectDetailTranslationCreate) SetUpdatedAt(t time.Time) *ProjectDetailTranslationCreate {
	pdtc.mutation.SetUpdatedAt(t)
	return pdtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pdtc *ProjectDetailTranslationCreate) SetNillableUpdatedAt(t *time.Time) *ProjectDetailTranslationCreate {
	if t != nil {
		pdtc.SetUpdatedAt(*t)
	}
	return pdtc
}

// SetID sets the "id" field.
func (pdtc *ProjectDetailTranslationCreate) SetID(u uuid.UUID) *ProjectDetailTranslationCreate {
	pdtc.mutation.SetID(u)
	return pdtc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pdtc *ProjectDetailTranslationCreate) SetNillableID(u *uuid.UUID) *ProjectDetailTranslationCreate {
	if u != nil {
		pdtc.SetID(*u)
	}
	return pdtc
}

// SetProjectDetail sets the "project_detail" edge to the ProjectDetail entity.
func (pdtc *ProjectDetailTranslationCreate) SetProjectDetail(p *ProjectDetail) *ProjectDetailTranslationCreate {
	return pdtc.SetProjectDetailID(p.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (pdtc *ProjectDetailTranslationCreate) SetLanguageID(id string) *ProjectDetailTranslationCreate {
	pdtc.mutation.SetLanguageID(id)
	return pdtc
}

// SetLanguage sets the "language" edge to the Language entity.
func (pdtc *ProjectDetailTranslationCreate) SetLanguage(l *Language) *ProjectDetailTranslationCreate {
	return pdtc.SetLanguageID(l.ID)
}

// Mutation returns the ProjectDetailTranslationMutation object of the builder.
func (pdtc *ProjectDetailTranslationCreate) Mutation() *ProjectDetailTranslationMutation {
	return pdtc.mutation
}

// Save creates the ProjectDetailTranslation in the database.
func (pdtc *ProjectDetailTranslationCreate) Save(ctx context.Context) (*ProjectDetailTranslation, error) {
	pdtc.defaults()
	return withHooks(ctx, pdtc.sqlSave, pdtc.mutation, pdtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pdtc *ProjectDetailTranslationCreate) SaveX(ctx context.Context) *ProjectDetailTranslation {
	v, err := pdtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdtc *ProjectDetailTranslationCreate) Exec(ctx context.Context) error {
	_, err := pdtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdtc *ProjectDetailTranslationCreate) ExecX(ctx context.Context) {
	if err := pdtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pdtc *ProjectDetailTranslationCreate) defaults() {
	if _, ok := pdtc.mutation.CreatedAt(); !ok {
		v := projectdetailtranslation.DefaultCreatedAt()
		pdtc.mutation.SetCreatedAt(v)
	}
	if _, ok := pdtc.mutation.UpdatedAt(); !ok {
		v := projectdetailtranslation.DefaultUpdatedAt()
		pdtc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pdtc.mutation.ID(); !ok {
		v := projectdetailtranslation.DefaultID()
		pdtc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdtc *ProjectDetailTranslationCreate) check() error {
	if _, ok := pdtc.mutation.ProjectDetailID(); !ok {
		return &ValidationError{Name: "project_detail_id", err: errors.New(`ent: missing required field "ProjectDetailTranslation.project_detail_id"`)}
	}
	if _, ok := pdtc.mutation.LanguageCode(); !ok {
		return &ValidationError{Name: "language_code", err: errors.New(`ent: missing required field "ProjectDetailTranslation.language_code"`)}
	}
	if v, ok := pdtc.mutation.LanguageCode(); ok {
		if err := projectdetailtranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "ProjectDetailTranslation.language_code": %w`, err)}
		}
	}
	if _, ok := pdtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProjectDetailTranslation.created_at"`)}
	}
	if _, ok := pdtc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProjectDetailTranslation.updated_at"`)}
	}
	if len(pdtc.mutation.ProjectDetailIDs()) == 0 {
		return &ValidationError{Name: "project_detail", err: errors.New(`ent: missing required edge "ProjectDetailTranslation.project_detail"`)}
	}
	if len(pdtc.mutation.LanguageIDs()) == 0 {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required edge "ProjectDetailTranslation.language"`)}
	}
	return nil
}

func (pdtc *ProjectDetailTranslationCreate) sqlSave(ctx context.Context) (*ProjectDetailTranslation, error) {
	if err := pdtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pdtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pdtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pdtc.mutation.id = &_node.ID
	pdtc.mutation.done = true
	return _node, nil
}

func (pdtc *ProjectDetailTranslationCreate) createSpec() (*ProjectDetailTranslation, *sqlgraph.CreateSpec) {
	var (
		_node = &ProjectDetailTranslation{config: pdtc.config}
		_spec = sqlgraph.NewCreateSpec(projectdetailtranslation.Table, sqlgraph.NewFieldSpec(projectdetailtranslation.FieldID, field.TypeUUID))
	)
	if id, ok := pdtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pdtc.mutation.DetailedDescription(); ok {
		_spec.SetField(projectdetailtranslation.FieldDetailedDescription, field.TypeString, value)
		_node.DetailedDescription = value
	}
	if value, ok := pdtc.mutation.Goals(); ok {
		_spec.SetField(projectdetailtranslation.FieldGoals, field.TypeString, value)
		_node.Goals = value
	}
	if value, ok := pdtc.mutation.Challenges(); ok {
		_spec.SetField(projectdetailtranslation.FieldChallenges, field.TypeString, value)
		_node.Challenges = value
	}
	if value, ok := pdtc.mutation.Solutions(); ok {
		_spec.SetField(projectdetailtranslation.FieldSolutions, field.TypeString, value)
		_node.Solutions = value
	}
	if value, ok := pdtc.mutation.LessonsLearned(); ok {
		_spec.SetField(projectdetailtranslation.FieldLessonsLearned, field.TypeString, value)
		_node.LessonsLearned = value
	}
	if value, ok := pdtc.mutation.FutureEnhancements(); ok {
		_spec.SetField(projectdetailtranslation.FieldFutureEnhancements, field.TypeString, value)
		_node.FutureEnhancements = value
	}
	if value, ok := pdtc.mutation.CreatedAt(); ok {
		_spec.SetField(projectdetailtranslation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pdtc.mutation.UpdatedAt(); ok {
		_spec.SetField(projectdetailtranslation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pdtc.mutation.ProjectDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectdetailtranslation.ProjectDetailTable,
			Columns: []string{projectdetailtranslation.ProjectDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectdetail.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectDetailID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pdtc.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectdetailtranslation.LanguageTable,
			Columns: []string{projectdetailtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LanguageCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProjectDetailTranslationCreateBulk is the builder for creating many ProjectDetailTranslation entities in bulk.
type ProjectDetailTranslationCreateBulk struct {
	config
	err      error
	builders []*ProjectDetailTranslationCreate
}

// Save creates the ProjectDetailTranslation entities in the database.
func (pdtcb *ProjectDetailTranslationCreateBulk) Save(ctx context.Context) ([]*ProjectDetailTranslation, error) {
	if pdtcb.err != nil {
		return nil, pdtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pdtcb.builders))
	nodes := make([]*ProjectDetailTranslation, len(pdtcb.builders))
	mutators := make([]Mutator, len(pdtcb.builders))
	for i := range pdtcb.builders {
		func(i int, root context.Context) {
			builder := pdtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectDetailTranslationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pdtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pdtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pdtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pdtcb *ProjectDetailTranslationCreateBulk) SaveX(ctx context.Context) []*ProjectDetailTranslation {
	v, err := pdtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdtcb *ProjectDetailTranslationCreateBulk) Exec(ctx context.Context) error {
	_, err := pdtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdtcb *ProjectDetailTranslationCreateBulk) ExecX(ctx context.Context) {
	if err := pdtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
