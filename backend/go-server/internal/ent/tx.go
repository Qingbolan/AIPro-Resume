// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"sync"

	"entgo.io/ent/dialect"
)

// Tx is a transactional client that is created by calling Client.Tx().
type Tx struct {
	config
	// Award is the client for interacting with the Award builders.
	Award *AwardClient
	// AwardTranslation is the client for interacting with the AwardTranslation builders.
	AwardTranslation *AwardTranslationClient
	// BlogCategory is the client for interacting with the BlogCategory builders.
	BlogCategory *BlogCategoryClient
	// BlogCategoryTranslation is the client for interacting with the BlogCategoryTranslation builders.
	BlogCategoryTranslation *BlogCategoryTranslationClient
	// BlogComment is the client for interacting with the BlogComment builders.
	BlogComment *BlogCommentClient
	// BlogPost is the client for interacting with the BlogPost builders.
	BlogPost *BlogPostClient
	// BlogPostTag is the client for interacting with the BlogPostTag builders.
	BlogPostTag *BlogPostTagClient
	// BlogPostTranslation is the client for interacting with the BlogPostTranslation builders.
	BlogPostTranslation *BlogPostTranslationClient
	// BlogSeries is the client for interacting with the BlogSeries builders.
	BlogSeries *BlogSeriesClient
	// BlogSeriesTranslation is the client for interacting with the BlogSeriesTranslation builders.
	BlogSeriesTranslation *BlogSeriesTranslationClient
	// BlogTag is the client for interacting with the BlogTag builders.
	BlogTag *BlogTagClient
	// Education is the client for interacting with the Education builders.
	Education *EducationClient
	// EducationDetail is the client for interacting with the EducationDetail builders.
	EducationDetail *EducationDetailClient
	// EducationDetailTranslation is the client for interacting with the EducationDetailTranslation builders.
	EducationDetailTranslation *EducationDetailTranslationClient
	// EducationTranslation is the client for interacting with the EducationTranslation builders.
	EducationTranslation *EducationTranslationClient
	// Idea is the client for interacting with the Idea builders.
	Idea *IdeaClient
	// IdeaTranslation is the client for interacting with the IdeaTranslation builders.
	IdeaTranslation *IdeaTranslationClient
	// Language is the client for interacting with the Language builders.
	Language *LanguageClient
	// PersonalInfo is the client for interacting with the PersonalInfo builders.
	PersonalInfo *PersonalInfoClient
	// PersonalInfoTranslation is the client for interacting with the PersonalInfoTranslation builders.
	PersonalInfoTranslation *PersonalInfoTranslationClient
	// Project is the client for interacting with the Project builders.
	Project *ProjectClient
	// ProjectDetail is the client for interacting with the ProjectDetail builders.
	ProjectDetail *ProjectDetailClient
	// ProjectDetailTranslation is the client for interacting with the ProjectDetailTranslation builders.
	ProjectDetailTranslation *ProjectDetailTranslationClient
	// ProjectImage is the client for interacting with the ProjectImage builders.
	ProjectImage *ProjectImageClient
	// ProjectImageTranslation is the client for interacting with the ProjectImageTranslation builders.
	ProjectImageTranslation *ProjectImageTranslationClient
	// ProjectRelationship is the client for interacting with the ProjectRelationship builders.
	ProjectRelationship *ProjectRelationshipClient
	// ProjectTechnology is the client for interacting with the ProjectTechnology builders.
	ProjectTechnology *ProjectTechnologyClient
	// ProjectTranslation is the client for interacting with the ProjectTranslation builders.
	ProjectTranslation *ProjectTranslationClient
	// Publication is the client for interacting with the Publication builders.
	Publication *PublicationClient
	// PublicationAuthor is the client for interacting with the PublicationAuthor builders.
	PublicationAuthor *PublicationAuthorClient
	// PublicationTranslation is the client for interacting with the PublicationTranslation builders.
	PublicationTranslation *PublicationTranslationClient
	// RecentUpdate is the client for interacting with the RecentUpdate builders.
	RecentUpdate *RecentUpdateClient
	// RecentUpdateTranslation is the client for interacting with the RecentUpdateTranslation builders.
	RecentUpdateTranslation *RecentUpdateTranslationClient
	// ResearchProject is the client for interacting with the ResearchProject builders.
	ResearchProject *ResearchProjectClient
	// ResearchProjectDetail is the client for interacting with the ResearchProjectDetail builders.
	ResearchProjectDetail *ResearchProjectDetailClient
	// ResearchProjectDetailTranslation is the client for interacting with the ResearchProjectDetailTranslation builders.
	ResearchProjectDetailTranslation *ResearchProjectDetailTranslationClient
	// ResearchProjectTranslation is the client for interacting with the ResearchProjectTranslation builders.
	ResearchProjectTranslation *ResearchProjectTranslationClient
	// SocialLink is the client for interacting with the SocialLink builders.
	SocialLink *SocialLinkClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// WorkExperience is the client for interacting with the WorkExperience builders.
	WorkExperience *WorkExperienceClient
	// WorkExperienceDetail is the client for interacting with the WorkExperienceDetail builders.
	WorkExperienceDetail *WorkExperienceDetailClient
	// WorkExperienceDetailTranslation is the client for interacting with the WorkExperienceDetailTranslation builders.
	WorkExperienceDetailTranslation *WorkExperienceDetailTranslationClient
	// WorkExperienceTranslation is the client for interacting with the WorkExperienceTranslation builders.
	WorkExperienceTranslation *WorkExperienceTranslationClient

	// lazily loaded.
	client     *Client
	clientOnce sync.Once
	// ctx lives for the life of the transaction. It is
	// the same context used by the underlying connection.
	ctx context.Context
}

type (
	// Committer is the interface that wraps the Commit method.
	Committer interface {
		Commit(context.Context, *Tx) error
	}

	// The CommitFunc type is an adapter to allow the use of ordinary
	// function as a Committer. If f is a function with the appropriate
	// signature, CommitFunc(f) is a Committer that calls f.
	CommitFunc func(context.Context, *Tx) error

	// CommitHook defines the "commit middleware". A function that gets a Committer
	// and returns a Committer. For example:
	//
	//	hook := func(next ent.Committer) ent.Committer {
	//		return ent.CommitFunc(func(ctx context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Commit(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	CommitHook func(Committer) Committer
)

// Commit calls f(ctx, m).
func (f CommitFunc) Commit(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Commit commits the transaction.
func (tx *Tx) Commit() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Committer = CommitFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Commit()
	})
	txDriver.mu.Lock()
	hooks := append([]CommitHook(nil), txDriver.onCommit...)
	txDriver.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Commit(tx.ctx, tx)
}

// OnCommit adds a hook to call on commit.
func (tx *Tx) OnCommit(f CommitHook) {
	txDriver := tx.config.driver.(*txDriver)
	txDriver.mu.Lock()
	txDriver.onCommit = append(txDriver.onCommit, f)
	txDriver.mu.Unlock()
}

type (
	// Rollbacker is the interface that wraps the Rollback method.
	Rollbacker interface {
		Rollback(context.Context, *Tx) error
	}

	// The RollbackFunc type is an adapter to allow the use of ordinary
	// function as a Rollbacker. If f is a function with the appropriate
	// signature, RollbackFunc(f) is a Rollbacker that calls f.
	RollbackFunc func(context.Context, *Tx) error

	// RollbackHook defines the "rollback middleware". A function that gets a Rollbacker
	// and returns a Rollbacker. For example:
	//
	//	hook := func(next ent.Rollbacker) ent.Rollbacker {
	//		return ent.RollbackFunc(func(ctx context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Rollback(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	RollbackHook func(Rollbacker) Rollbacker
)

// Rollback calls f(ctx, m).
func (f RollbackFunc) Rollback(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Rollback rollbacks the transaction.
func (tx *Tx) Rollback() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Rollbacker = RollbackFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Rollback()
	})
	txDriver.mu.Lock()
	hooks := append([]RollbackHook(nil), txDriver.onRollback...)
	txDriver.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Rollback(tx.ctx, tx)
}

// OnRollback adds a hook to call on rollback.
func (tx *Tx) OnRollback(f RollbackHook) {
	txDriver := tx.config.driver.(*txDriver)
	txDriver.mu.Lock()
	txDriver.onRollback = append(txDriver.onRollback, f)
	txDriver.mu.Unlock()
}

// Client returns a Client that binds to current transaction.
func (tx *Tx) Client() *Client {
	tx.clientOnce.Do(func() {
		tx.client = &Client{config: tx.config}
		tx.client.init()
	})
	return tx.client
}

func (tx *Tx) init() {
	tx.Award = NewAwardClient(tx.config)
	tx.AwardTranslation = NewAwardTranslationClient(tx.config)
	tx.BlogCategory = NewBlogCategoryClient(tx.config)
	tx.BlogCategoryTranslation = NewBlogCategoryTranslationClient(tx.config)
	tx.BlogComment = NewBlogCommentClient(tx.config)
	tx.BlogPost = NewBlogPostClient(tx.config)
	tx.BlogPostTag = NewBlogPostTagClient(tx.config)
	tx.BlogPostTranslation = NewBlogPostTranslationClient(tx.config)
	tx.BlogSeries = NewBlogSeriesClient(tx.config)
	tx.BlogSeriesTranslation = NewBlogSeriesTranslationClient(tx.config)
	tx.BlogTag = NewBlogTagClient(tx.config)
	tx.Education = NewEducationClient(tx.config)
	tx.EducationDetail = NewEducationDetailClient(tx.config)
	tx.EducationDetailTranslation = NewEducationDetailTranslationClient(tx.config)
	tx.EducationTranslation = NewEducationTranslationClient(tx.config)
	tx.Idea = NewIdeaClient(tx.config)
	tx.IdeaTranslation = NewIdeaTranslationClient(tx.config)
	tx.Language = NewLanguageClient(tx.config)
	tx.PersonalInfo = NewPersonalInfoClient(tx.config)
	tx.PersonalInfoTranslation = NewPersonalInfoTranslationClient(tx.config)
	tx.Project = NewProjectClient(tx.config)
	tx.ProjectDetail = NewProjectDetailClient(tx.config)
	tx.ProjectDetailTranslation = NewProjectDetailTranslationClient(tx.config)
	tx.ProjectImage = NewProjectImageClient(tx.config)
	tx.ProjectImageTranslation = NewProjectImageTranslationClient(tx.config)
	tx.ProjectRelationship = NewProjectRelationshipClient(tx.config)
	tx.ProjectTechnology = NewProjectTechnologyClient(tx.config)
	tx.ProjectTranslation = NewProjectTranslationClient(tx.config)
	tx.Publication = NewPublicationClient(tx.config)
	tx.PublicationAuthor = NewPublicationAuthorClient(tx.config)
	tx.PublicationTranslation = NewPublicationTranslationClient(tx.config)
	tx.RecentUpdate = NewRecentUpdateClient(tx.config)
	tx.RecentUpdateTranslation = NewRecentUpdateTranslationClient(tx.config)
	tx.ResearchProject = NewResearchProjectClient(tx.config)
	tx.ResearchProjectDetail = NewResearchProjectDetailClient(tx.config)
	tx.ResearchProjectDetailTranslation = NewResearchProjectDetailTranslationClient(tx.config)
	tx.ResearchProjectTranslation = NewResearchProjectTranslationClient(tx.config)
	tx.SocialLink = NewSocialLinkClient(tx.config)
	tx.User = NewUserClient(tx.config)
	tx.WorkExperience = NewWorkExperienceClient(tx.config)
	tx.WorkExperienceDetail = NewWorkExperienceDetailClient(tx.config)
	tx.WorkExperienceDetailTranslation = NewWorkExperienceDetailTranslationClient(tx.config)
	tx.WorkExperienceTranslation = NewWorkExperienceTranslationClient(tx.config)
}

// txDriver wraps the given dialect.Tx with a nop dialect.Driver implementation.
// The idea is to support transactions without adding any extra code to the builders.
// When a builder calls to driver.Tx(), it gets the same dialect.Tx instance.
// Commit and Rollback are nop for the internal builders and the user must call one
// of them in order to commit or rollback the transaction.
//
// If a closed transaction is embedded in one of the generated entities, and the entity
// applies a query, for example: Award.QueryXXX(), the query will be executed
// through the driver which created this transaction.
//
// Note that txDriver is not goroutine safe.
type txDriver struct {
	// the driver we started the transaction from.
	drv dialect.Driver
	// tx is the underlying transaction.
	tx dialect.Tx
	// completion hooks.
	mu         sync.Mutex
	onCommit   []CommitHook
	onRollback []RollbackHook
}

// newTx creates a new transactional driver.
func newTx(ctx context.Context, drv dialect.Driver) (*txDriver, error) {
	tx, err := drv.Tx(ctx)
	if err != nil {
		return nil, err
	}
	return &txDriver{tx: tx, drv: drv}, nil
}

// Tx returns the transaction wrapper (txDriver) to avoid Commit or Rollback calls
// from the internal builders. Should be called only by the internal builders.
func (tx *txDriver) Tx(context.Context) (dialect.Tx, error) { return tx, nil }

// Dialect returns the dialect of the driver we started the transaction from.
func (tx *txDriver) Dialect() string { return tx.drv.Dialect() }

// Close is a nop close.
func (*txDriver) Close() error { return nil }

// Commit is a nop commit for the internal builders.
// User must call `Tx.Commit` in order to commit the transaction.
func (*txDriver) Commit() error { return nil }

// Rollback is a nop rollback for the internal builders.
// User must call `Tx.Rollback` in order to rollback the transaction.
func (*txDriver) Rollback() error { return nil }

// Exec calls tx.Exec.
func (tx *txDriver) Exec(ctx context.Context, query string, args, v any) error {
	return tx.tx.Exec(ctx, query, args, v)
}

// Query calls tx.Query.
func (tx *txDriver) Query(ctx context.Context, query string, args, v any) error {
	return tx.tx.Query(ctx, query, args, v)
}

var _ dialect.Driver = (*txDriver)(nil)
