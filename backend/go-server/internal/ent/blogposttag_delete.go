// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"silan-backend/internal/ent/blogposttag"
	"silan-backend/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// BlogPostTagDelete is the builder for deleting a BlogPostTag entity.
type BlogPostTagDelete struct {
	config
	hooks    []Hook
	mutation *BlogPostTagMutation
}

// Where appends a list predicates to the BlogPostTagDelete builder.
func (bptd *BlogPostTagDelete) Where(ps ...predicate.BlogPostTag) *BlogPostTagDelete {
	bptd.mutation.Where(ps...)
	return bptd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bptd *BlogPostTagDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, bptd.sqlExec, bptd.mutation, bptd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bptd *BlogPostTagDelete) ExecX(ctx context.Context) int {
	n, err := bptd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bptd *BlogPostTagDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(blogposttag.Table, nil)
	if ps := bptd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bptd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bptd.mutation.done = true
	return affected, err
}

// BlogPostTagDeleteOne is the builder for deleting a single BlogPostTag entity.
type BlogPostTagDeleteOne struct {
	bptd *BlogPostTagDelete
}

// Where appends a list predicates to the BlogPostTagDelete builder.
func (bptdo *BlogPostTagDeleteOne) Where(ps ...predicate.BlogPostTag) *BlogPostTagDeleteOne {
	bptdo.bptd.mutation.Where(ps...)
	return bptdo
}

// Exec executes the deletion query.
func (bptdo *BlogPostTagDeleteOne) Exec(ctx context.Context) error {
	n, err := bptdo.bptd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{blogposttag.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bptdo *BlogPostTagDeleteOne) ExecX(ctx context.Context) {
	if err := bptdo.Exec(ctx); err != nil {
		panic(err)
	}
}
