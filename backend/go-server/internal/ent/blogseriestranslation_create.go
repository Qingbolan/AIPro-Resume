// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/blogseries"
	"silan-backend/internal/ent/blogseriestranslation"
	"silan-backend/internal/ent/language"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BlogSeriesTranslationCreate is the builder for creating a BlogSeriesTranslation entity.
type BlogSeriesTranslationCreate struct {
	config
	mutation *BlogSeriesTranslationMutation
	hooks    []Hook
}

// SetBlogSeriesID sets the "blog_series_id" field.
func (bstc *BlogSeriesTranslationCreate) SetBlogSeriesID(u uuid.UUID) *BlogSeriesTranslationCreate {
	bstc.mutation.SetBlogSeriesID(u)
	return bstc
}

// SetLanguageCode sets the "language_code" field.
func (bstc *BlogSeriesTranslationCreate) SetLanguageCode(s string) *BlogSeriesTranslationCreate {
	bstc.mutation.SetLanguageCode(s)
	return bstc
}

// SetTitle sets the "title" field.
func (bstc *BlogSeriesTranslationCreate) SetTitle(s string) *BlogSeriesTranslationCreate {
	bstc.mutation.SetTitle(s)
	return bstc
}

// SetDescription sets the "description" field.
func (bstc *BlogSeriesTranslationCreate) SetDescription(s string) *BlogSeriesTranslationCreate {
	bstc.mutation.SetDescription(s)
	return bstc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bstc *BlogSeriesTranslationCreate) SetNillableDescription(s *string) *BlogSeriesTranslationCreate {
	if s != nil {
		bstc.SetDescription(*s)
	}
	return bstc
}

// SetCreatedAt sets the "created_at" field.
func (bstc *BlogSeriesTranslationCreate) SetCreatedAt(t time.Time) *BlogSeriesTranslationCreate {
	bstc.mutation.SetCreatedAt(t)
	return bstc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bstc *BlogSeriesTranslationCreate) SetNillableCreatedAt(t *time.Time) *BlogSeriesTranslationCreate {
	if t != nil {
		bstc.SetCreatedAt(*t)
	}
	return bstc
}

// SetID sets the "id" field.
func (bstc *BlogSeriesTranslationCreate) SetID(u uuid.UUID) *BlogSeriesTranslationCreate {
	bstc.mutation.SetID(u)
	return bstc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bstc *BlogSeriesTranslationCreate) SetNillableID(u *uuid.UUID) *BlogSeriesTranslationCreate {
	if u != nil {
		bstc.SetID(*u)
	}
	return bstc
}

// SetBlogSeries sets the "blog_series" edge to the BlogSeries entity.
func (bstc *BlogSeriesTranslationCreate) SetBlogSeries(b *BlogSeries) *BlogSeriesTranslationCreate {
	return bstc.SetBlogSeriesID(b.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (bstc *BlogSeriesTranslationCreate) SetLanguageID(id string) *BlogSeriesTranslationCreate {
	bstc.mutation.SetLanguageID(id)
	return bstc
}

// SetLanguage sets the "language" edge to the Language entity.
func (bstc *BlogSeriesTranslationCreate) SetLanguage(l *Language) *BlogSeriesTranslationCreate {
	return bstc.SetLanguageID(l.ID)
}

// Mutation returns the BlogSeriesTranslationMutation object of the builder.
func (bstc *BlogSeriesTranslationCreate) Mutation() *BlogSeriesTranslationMutation {
	return bstc.mutation
}

// Save creates the BlogSeriesTranslation in the database.
func (bstc *BlogSeriesTranslationCreate) Save(ctx context.Context) (*BlogSeriesTranslation, error) {
	bstc.defaults()
	return withHooks(ctx, bstc.sqlSave, bstc.mutation, bstc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bstc *BlogSeriesTranslationCreate) SaveX(ctx context.Context) *BlogSeriesTranslation {
	v, err := bstc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bstc *BlogSeriesTranslationCreate) Exec(ctx context.Context) error {
	_, err := bstc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bstc *BlogSeriesTranslationCreate) ExecX(ctx context.Context) {
	if err := bstc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bstc *BlogSeriesTranslationCreate) defaults() {
	if _, ok := bstc.mutation.CreatedAt(); !ok {
		v := blogseriestranslation.DefaultCreatedAt()
		bstc.mutation.SetCreatedAt(v)
	}
	if _, ok := bstc.mutation.ID(); !ok {
		v := blogseriestranslation.DefaultID()
		bstc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bstc *BlogSeriesTranslationCreate) check() error {
	if _, ok := bstc.mutation.BlogSeriesID(); !ok {
		return &ValidationError{Name: "blog_series_id", err: errors.New(`ent: missing required field "BlogSeriesTranslation.blog_series_id"`)}
	}
	if _, ok := bstc.mutation.LanguageCode(); !ok {
		return &ValidationError{Name: "language_code", err: errors.New(`ent: missing required field "BlogSeriesTranslation.language_code"`)}
	}
	if v, ok := bstc.mutation.LanguageCode(); ok {
		if err := blogseriestranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "BlogSeriesTranslation.language_code": %w`, err)}
		}
	}
	if _, ok := bstc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "BlogSeriesTranslation.title"`)}
	}
	if v, ok := bstc.mutation.Title(); ok {
		if err := blogseriestranslation.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "BlogSeriesTranslation.title": %w`, err)}
		}
	}
	if _, ok := bstc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlogSeriesTranslation.created_at"`)}
	}
	if len(bstc.mutation.BlogSeriesIDs()) == 0 {
		return &ValidationError{Name: "blog_series", err: errors.New(`ent: missing required edge "BlogSeriesTranslation.blog_series"`)}
	}
	if len(bstc.mutation.LanguageIDs()) == 0 {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required edge "BlogSeriesTranslation.language"`)}
	}
	return nil
}

func (bstc *BlogSeriesTranslationCreate) sqlSave(ctx context.Context) (*BlogSeriesTranslation, error) {
	if err := bstc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bstc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bstc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bstc.mutation.id = &_node.ID
	bstc.mutation.done = true
	return _node, nil
}

func (bstc *BlogSeriesTranslationCreate) createSpec() (*BlogSeriesTranslation, *sqlgraph.CreateSpec) {
	var (
		_node = &BlogSeriesTranslation{config: bstc.config}
		_spec = sqlgraph.NewCreateSpec(blogseriestranslation.Table, sqlgraph.NewFieldSpec(blogseriestranslation.FieldID, field.TypeUUID))
	)
	if id, ok := bstc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bstc.mutation.Title(); ok {
		_spec.SetField(blogseriestranslation.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := bstc.mutation.Description(); ok {
		_spec.SetField(blogseriestranslation.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := bstc.mutation.CreatedAt(); ok {
		_spec.SetField(blogseriestranslation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := bstc.mutation.BlogSeriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogseriestranslation.BlogSeriesTable,
			Columns: []string{blogseriestranslation.BlogSeriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogseries.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BlogSeriesID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bstc.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogseriestranslation.LanguageTable,
			Columns: []string{blogseriestranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LanguageCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BlogSeriesTranslationCreateBulk is the builder for creating many BlogSeriesTranslation entities in bulk.
type BlogSeriesTranslationCreateBulk struct {
	config
	err      error
	builders []*BlogSeriesTranslationCreate
}

// Save creates the BlogSeriesTranslation entities in the database.
func (bstcb *BlogSeriesTranslationCreateBulk) Save(ctx context.Context) ([]*BlogSeriesTranslation, error) {
	if bstcb.err != nil {
		return nil, bstcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bstcb.builders))
	nodes := make([]*BlogSeriesTranslation, len(bstcb.builders))
	mutators := make([]Mutator, len(bstcb.builders))
	for i := range bstcb.builders {
		func(i int, root context.Context) {
			builder := bstcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlogSeriesTranslationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bstcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bstcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bstcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bstcb *BlogSeriesTranslationCreateBulk) SaveX(ctx context.Context) []*BlogSeriesTranslation {
	v, err := bstcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bstcb *BlogSeriesTranslationCreateBulk) Exec(ctx context.Context) error {
	_, err := bstcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bstcb *BlogSeriesTranslationCreateBulk) ExecX(ctx context.Context) {
	if err := bstcb.Exec(ctx); err != nil {
		panic(err)
	}
}
