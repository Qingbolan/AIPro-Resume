// Code generated by ent, DO NOT EDIT.

package projectimagetranslation

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldLTE(FieldID, id))
}

// ProjectImageID applies equality check predicate on the "project_image_id" field. It's identical to ProjectImageIDEQ.
func ProjectImageID(v uuid.UUID) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldEQ(FieldProjectImageID, v))
}

// LanguageCode applies equality check predicate on the "language_code" field. It's identical to LanguageCodeEQ.
func LanguageCode(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldEQ(FieldLanguageCode, v))
}

// AltText applies equality check predicate on the "alt_text" field. It's identical to AltTextEQ.
func AltText(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldEQ(FieldAltText, v))
}

// Caption applies equality check predicate on the "caption" field. It's identical to CaptionEQ.
func Caption(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldEQ(FieldCaption, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldEQ(FieldCreatedAt, v))
}

// ProjectImageIDEQ applies the EQ predicate on the "project_image_id" field.
func ProjectImageIDEQ(v uuid.UUID) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldEQ(FieldProjectImageID, v))
}

// ProjectImageIDNEQ applies the NEQ predicate on the "project_image_id" field.
func ProjectImageIDNEQ(v uuid.UUID) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldNEQ(FieldProjectImageID, v))
}

// ProjectImageIDIn applies the In predicate on the "project_image_id" field.
func ProjectImageIDIn(vs ...uuid.UUID) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldIn(FieldProjectImageID, vs...))
}

// ProjectImageIDNotIn applies the NotIn predicate on the "project_image_id" field.
func ProjectImageIDNotIn(vs ...uuid.UUID) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldNotIn(FieldProjectImageID, vs...))
}

// LanguageCodeEQ applies the EQ predicate on the "language_code" field.
func LanguageCodeEQ(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldEQ(FieldLanguageCode, v))
}

// LanguageCodeNEQ applies the NEQ predicate on the "language_code" field.
func LanguageCodeNEQ(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldNEQ(FieldLanguageCode, v))
}

// LanguageCodeIn applies the In predicate on the "language_code" field.
func LanguageCodeIn(vs ...string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldIn(FieldLanguageCode, vs...))
}

// LanguageCodeNotIn applies the NotIn predicate on the "language_code" field.
func LanguageCodeNotIn(vs ...string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldNotIn(FieldLanguageCode, vs...))
}

// LanguageCodeGT applies the GT predicate on the "language_code" field.
func LanguageCodeGT(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldGT(FieldLanguageCode, v))
}

// LanguageCodeGTE applies the GTE predicate on the "language_code" field.
func LanguageCodeGTE(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldGTE(FieldLanguageCode, v))
}

// LanguageCodeLT applies the LT predicate on the "language_code" field.
func LanguageCodeLT(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldLT(FieldLanguageCode, v))
}

// LanguageCodeLTE applies the LTE predicate on the "language_code" field.
func LanguageCodeLTE(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldLTE(FieldLanguageCode, v))
}

// LanguageCodeContains applies the Contains predicate on the "language_code" field.
func LanguageCodeContains(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldContains(FieldLanguageCode, v))
}

// LanguageCodeHasPrefix applies the HasPrefix predicate on the "language_code" field.
func LanguageCodeHasPrefix(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldHasPrefix(FieldLanguageCode, v))
}

// LanguageCodeHasSuffix applies the HasSuffix predicate on the "language_code" field.
func LanguageCodeHasSuffix(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldHasSuffix(FieldLanguageCode, v))
}

// LanguageCodeEqualFold applies the EqualFold predicate on the "language_code" field.
func LanguageCodeEqualFold(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldEqualFold(FieldLanguageCode, v))
}

// LanguageCodeContainsFold applies the ContainsFold predicate on the "language_code" field.
func LanguageCodeContainsFold(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldContainsFold(FieldLanguageCode, v))
}

// AltTextEQ applies the EQ predicate on the "alt_text" field.
func AltTextEQ(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldEQ(FieldAltText, v))
}

// AltTextNEQ applies the NEQ predicate on the "alt_text" field.
func AltTextNEQ(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldNEQ(FieldAltText, v))
}

// AltTextIn applies the In predicate on the "alt_text" field.
func AltTextIn(vs ...string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldIn(FieldAltText, vs...))
}

// AltTextNotIn applies the NotIn predicate on the "alt_text" field.
func AltTextNotIn(vs ...string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldNotIn(FieldAltText, vs...))
}

// AltTextGT applies the GT predicate on the "alt_text" field.
func AltTextGT(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldGT(FieldAltText, v))
}

// AltTextGTE applies the GTE predicate on the "alt_text" field.
func AltTextGTE(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldGTE(FieldAltText, v))
}

// AltTextLT applies the LT predicate on the "alt_text" field.
func AltTextLT(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldLT(FieldAltText, v))
}

// AltTextLTE applies the LTE predicate on the "alt_text" field.
func AltTextLTE(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldLTE(FieldAltText, v))
}

// AltTextContains applies the Contains predicate on the "alt_text" field.
func AltTextContains(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldContains(FieldAltText, v))
}

// AltTextHasPrefix applies the HasPrefix predicate on the "alt_text" field.
func AltTextHasPrefix(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldHasPrefix(FieldAltText, v))
}

// AltTextHasSuffix applies the HasSuffix predicate on the "alt_text" field.
func AltTextHasSuffix(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldHasSuffix(FieldAltText, v))
}

// AltTextIsNil applies the IsNil predicate on the "alt_text" field.
func AltTextIsNil() predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldIsNull(FieldAltText))
}

// AltTextNotNil applies the NotNil predicate on the "alt_text" field.
func AltTextNotNil() predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldNotNull(FieldAltText))
}

// AltTextEqualFold applies the EqualFold predicate on the "alt_text" field.
func AltTextEqualFold(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldEqualFold(FieldAltText, v))
}

// AltTextContainsFold applies the ContainsFold predicate on the "alt_text" field.
func AltTextContainsFold(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldContainsFold(FieldAltText, v))
}

// CaptionEQ applies the EQ predicate on the "caption" field.
func CaptionEQ(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldEQ(FieldCaption, v))
}

// CaptionNEQ applies the NEQ predicate on the "caption" field.
func CaptionNEQ(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldNEQ(FieldCaption, v))
}

// CaptionIn applies the In predicate on the "caption" field.
func CaptionIn(vs ...string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldIn(FieldCaption, vs...))
}

// CaptionNotIn applies the NotIn predicate on the "caption" field.
func CaptionNotIn(vs ...string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldNotIn(FieldCaption, vs...))
}

// CaptionGT applies the GT predicate on the "caption" field.
func CaptionGT(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldGT(FieldCaption, v))
}

// CaptionGTE applies the GTE predicate on the "caption" field.
func CaptionGTE(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldGTE(FieldCaption, v))
}

// CaptionLT applies the LT predicate on the "caption" field.
func CaptionLT(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldLT(FieldCaption, v))
}

// CaptionLTE applies the LTE predicate on the "caption" field.
func CaptionLTE(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldLTE(FieldCaption, v))
}

// CaptionContains applies the Contains predicate on the "caption" field.
func CaptionContains(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldContains(FieldCaption, v))
}

// CaptionHasPrefix applies the HasPrefix predicate on the "caption" field.
func CaptionHasPrefix(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldHasPrefix(FieldCaption, v))
}

// CaptionHasSuffix applies the HasSuffix predicate on the "caption" field.
func CaptionHasSuffix(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldHasSuffix(FieldCaption, v))
}

// CaptionIsNil applies the IsNil predicate on the "caption" field.
func CaptionIsNil() predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldIsNull(FieldCaption))
}

// CaptionNotNil applies the NotNil predicate on the "caption" field.
func CaptionNotNil() predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldNotNull(FieldCaption))
}

// CaptionEqualFold applies the EqualFold predicate on the "caption" field.
func CaptionEqualFold(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldEqualFold(FieldCaption, v))
}

// CaptionContainsFold applies the ContainsFold predicate on the "caption" field.
func CaptionContainsFold(v string) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldContainsFold(FieldCaption, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.FieldLTE(FieldCreatedAt, v))
}

// HasProjectImage applies the HasEdge predicate on the "project_image" edge.
func HasProjectImage() predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectImageTable, ProjectImageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectImageWith applies the HasEdge predicate on the "project_image" edge with a given conditions (other predicates).
func HasProjectImageWith(preds ...predicate.ProjectImage) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(func(s *sql.Selector) {
		step := newProjectImageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLanguage applies the HasEdge predicate on the "language" edge.
func HasLanguage() predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LanguageTable, LanguageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLanguageWith applies the HasEdge predicate on the "language" edge with a given conditions (other predicates).
func HasLanguageWith(preds ...predicate.Language) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(func(s *sql.Selector) {
		step := newLanguageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProjectImageTranslation) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProjectImageTranslation) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProjectImageTranslation) predicate.ProjectImageTranslation {
	return predicate.ProjectImageTranslation(sql.NotPredicates(p))
}
