// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/workexperiencedetail"
	"silan-backend/internal/ent/workexperiencedetailtranslation"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkExperienceDetailTranslationQuery is the builder for querying WorkExperienceDetailTranslation entities.
type WorkExperienceDetailTranslationQuery struct {
	config
	ctx                      *QueryContext
	order                    []workexperiencedetailtranslation.OrderOption
	inters                   []Interceptor
	predicates               []predicate.WorkExperienceDetailTranslation
	withWorkExperienceDetail *WorkExperienceDetailQuery
	withLanguage             *LanguageQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WorkExperienceDetailTranslationQuery builder.
func (wedtq *WorkExperienceDetailTranslationQuery) Where(ps ...predicate.WorkExperienceDetailTranslation) *WorkExperienceDetailTranslationQuery {
	wedtq.predicates = append(wedtq.predicates, ps...)
	return wedtq
}

// Limit the number of records to be returned by this query.
func (wedtq *WorkExperienceDetailTranslationQuery) Limit(limit int) *WorkExperienceDetailTranslationQuery {
	wedtq.ctx.Limit = &limit
	return wedtq
}

// Offset to start from.
func (wedtq *WorkExperienceDetailTranslationQuery) Offset(offset int) *WorkExperienceDetailTranslationQuery {
	wedtq.ctx.Offset = &offset
	return wedtq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (wedtq *WorkExperienceDetailTranslationQuery) Unique(unique bool) *WorkExperienceDetailTranslationQuery {
	wedtq.ctx.Unique = &unique
	return wedtq
}

// Order specifies how the records should be ordered.
func (wedtq *WorkExperienceDetailTranslationQuery) Order(o ...workexperiencedetailtranslation.OrderOption) *WorkExperienceDetailTranslationQuery {
	wedtq.order = append(wedtq.order, o...)
	return wedtq
}

// QueryWorkExperienceDetail chains the current query on the "work_experience_detail" edge.
func (wedtq *WorkExperienceDetailTranslationQuery) QueryWorkExperienceDetail() *WorkExperienceDetailQuery {
	query := (&WorkExperienceDetailClient{config: wedtq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wedtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wedtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workexperiencedetailtranslation.Table, workexperiencedetailtranslation.FieldID, selector),
			sqlgraph.To(workexperiencedetail.Table, workexperiencedetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workexperiencedetailtranslation.WorkExperienceDetailTable, workexperiencedetailtranslation.WorkExperienceDetailColumn),
		)
		fromU = sqlgraph.SetNeighbors(wedtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLanguage chains the current query on the "language" edge.
func (wedtq *WorkExperienceDetailTranslationQuery) QueryLanguage() *LanguageQuery {
	query := (&LanguageClient{config: wedtq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wedtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wedtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workexperiencedetailtranslation.Table, workexperiencedetailtranslation.FieldID, selector),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workexperiencedetailtranslation.LanguageTable, workexperiencedetailtranslation.LanguageColumn),
		)
		fromU = sqlgraph.SetNeighbors(wedtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first WorkExperienceDetailTranslation entity from the query.
// Returns a *NotFoundError when no WorkExperienceDetailTranslation was found.
func (wedtq *WorkExperienceDetailTranslationQuery) First(ctx context.Context) (*WorkExperienceDetailTranslation, error) {
	nodes, err := wedtq.Limit(1).All(setContextOp(ctx, wedtq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{workexperiencedetailtranslation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (wedtq *WorkExperienceDetailTranslationQuery) FirstX(ctx context.Context) *WorkExperienceDetailTranslation {
	node, err := wedtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WorkExperienceDetailTranslation ID from the query.
// Returns a *NotFoundError when no WorkExperienceDetailTranslation ID was found.
func (wedtq *WorkExperienceDetailTranslationQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = wedtq.Limit(1).IDs(setContextOp(ctx, wedtq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{workexperiencedetailtranslation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (wedtq *WorkExperienceDetailTranslationQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := wedtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WorkExperienceDetailTranslation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one WorkExperienceDetailTranslation entity is found.
// Returns a *NotFoundError when no WorkExperienceDetailTranslation entities are found.
func (wedtq *WorkExperienceDetailTranslationQuery) Only(ctx context.Context) (*WorkExperienceDetailTranslation, error) {
	nodes, err := wedtq.Limit(2).All(setContextOp(ctx, wedtq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{workexperiencedetailtranslation.Label}
	default:
		return nil, &NotSingularError{workexperiencedetailtranslation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (wedtq *WorkExperienceDetailTranslationQuery) OnlyX(ctx context.Context) *WorkExperienceDetailTranslation {
	node, err := wedtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WorkExperienceDetailTranslation ID in the query.
// Returns a *NotSingularError when more than one WorkExperienceDetailTranslation ID is found.
// Returns a *NotFoundError when no entities are found.
func (wedtq *WorkExperienceDetailTranslationQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = wedtq.Limit(2).IDs(setContextOp(ctx, wedtq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{workexperiencedetailtranslation.Label}
	default:
		err = &NotSingularError{workexperiencedetailtranslation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (wedtq *WorkExperienceDetailTranslationQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := wedtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WorkExperienceDetailTranslations.
func (wedtq *WorkExperienceDetailTranslationQuery) All(ctx context.Context) ([]*WorkExperienceDetailTranslation, error) {
	ctx = setContextOp(ctx, wedtq.ctx, ent.OpQueryAll)
	if err := wedtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*WorkExperienceDetailTranslation, *WorkExperienceDetailTranslationQuery]()
	return withInterceptors[[]*WorkExperienceDetailTranslation](ctx, wedtq, qr, wedtq.inters)
}

// AllX is like All, but panics if an error occurs.
func (wedtq *WorkExperienceDetailTranslationQuery) AllX(ctx context.Context) []*WorkExperienceDetailTranslation {
	nodes, err := wedtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WorkExperienceDetailTranslation IDs.
func (wedtq *WorkExperienceDetailTranslationQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if wedtq.ctx.Unique == nil && wedtq.path != nil {
		wedtq.Unique(true)
	}
	ctx = setContextOp(ctx, wedtq.ctx, ent.OpQueryIDs)
	if err = wedtq.Select(workexperiencedetailtranslation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (wedtq *WorkExperienceDetailTranslationQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := wedtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (wedtq *WorkExperienceDetailTranslationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, wedtq.ctx, ent.OpQueryCount)
	if err := wedtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, wedtq, querierCount[*WorkExperienceDetailTranslationQuery](), wedtq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (wedtq *WorkExperienceDetailTranslationQuery) CountX(ctx context.Context) int {
	count, err := wedtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (wedtq *WorkExperienceDetailTranslationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, wedtq.ctx, ent.OpQueryExist)
	switch _, err := wedtq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (wedtq *WorkExperienceDetailTranslationQuery) ExistX(ctx context.Context) bool {
	exist, err := wedtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WorkExperienceDetailTranslationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (wedtq *WorkExperienceDetailTranslationQuery) Clone() *WorkExperienceDetailTranslationQuery {
	if wedtq == nil {
		return nil
	}
	return &WorkExperienceDetailTranslationQuery{
		config:                   wedtq.config,
		ctx:                      wedtq.ctx.Clone(),
		order:                    append([]workexperiencedetailtranslation.OrderOption{}, wedtq.order...),
		inters:                   append([]Interceptor{}, wedtq.inters...),
		predicates:               append([]predicate.WorkExperienceDetailTranslation{}, wedtq.predicates...),
		withWorkExperienceDetail: wedtq.withWorkExperienceDetail.Clone(),
		withLanguage:             wedtq.withLanguage.Clone(),
		// clone intermediate query.
		sql:  wedtq.sql.Clone(),
		path: wedtq.path,
	}
}

// WithWorkExperienceDetail tells the query-builder to eager-load the nodes that are connected to
// the "work_experience_detail" edge. The optional arguments are used to configure the query builder of the edge.
func (wedtq *WorkExperienceDetailTranslationQuery) WithWorkExperienceDetail(opts ...func(*WorkExperienceDetailQuery)) *WorkExperienceDetailTranslationQuery {
	query := (&WorkExperienceDetailClient{config: wedtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wedtq.withWorkExperienceDetail = query
	return wedtq
}

// WithLanguage tells the query-builder to eager-load the nodes that are connected to
// the "language" edge. The optional arguments are used to configure the query builder of the edge.
func (wedtq *WorkExperienceDetailTranslationQuery) WithLanguage(opts ...func(*LanguageQuery)) *WorkExperienceDetailTranslationQuery {
	query := (&LanguageClient{config: wedtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wedtq.withLanguage = query
	return wedtq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		WorkExperienceDetailID uuid.UUID `json:"work_experience_detail_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WorkExperienceDetailTranslation.Query().
//		GroupBy(workexperiencedetailtranslation.FieldWorkExperienceDetailID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (wedtq *WorkExperienceDetailTranslationQuery) GroupBy(field string, fields ...string) *WorkExperienceDetailTranslationGroupBy {
	wedtq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &WorkExperienceDetailTranslationGroupBy{build: wedtq}
	grbuild.flds = &wedtq.ctx.Fields
	grbuild.label = workexperiencedetailtranslation.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		WorkExperienceDetailID uuid.UUID `json:"work_experience_detail_id,omitempty"`
//	}
//
//	client.WorkExperienceDetailTranslation.Query().
//		Select(workexperiencedetailtranslation.FieldWorkExperienceDetailID).
//		Scan(ctx, &v)
func (wedtq *WorkExperienceDetailTranslationQuery) Select(fields ...string) *WorkExperienceDetailTranslationSelect {
	wedtq.ctx.Fields = append(wedtq.ctx.Fields, fields...)
	sbuild := &WorkExperienceDetailTranslationSelect{WorkExperienceDetailTranslationQuery: wedtq}
	sbuild.label = workexperiencedetailtranslation.Label
	sbuild.flds, sbuild.scan = &wedtq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a WorkExperienceDetailTranslationSelect configured with the given aggregations.
func (wedtq *WorkExperienceDetailTranslationQuery) Aggregate(fns ...AggregateFunc) *WorkExperienceDetailTranslationSelect {
	return wedtq.Select().Aggregate(fns...)
}

func (wedtq *WorkExperienceDetailTranslationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range wedtq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, wedtq); err != nil {
				return err
			}
		}
	}
	for _, f := range wedtq.ctx.Fields {
		if !workexperiencedetailtranslation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if wedtq.path != nil {
		prev, err := wedtq.path(ctx)
		if err != nil {
			return err
		}
		wedtq.sql = prev
	}
	return nil
}

func (wedtq *WorkExperienceDetailTranslationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*WorkExperienceDetailTranslation, error) {
	var (
		nodes       = []*WorkExperienceDetailTranslation{}
		_spec       = wedtq.querySpec()
		loadedTypes = [2]bool{
			wedtq.withWorkExperienceDetail != nil,
			wedtq.withLanguage != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*WorkExperienceDetailTranslation).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &WorkExperienceDetailTranslation{config: wedtq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, wedtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := wedtq.withWorkExperienceDetail; query != nil {
		if err := wedtq.loadWorkExperienceDetail(ctx, query, nodes, nil,
			func(n *WorkExperienceDetailTranslation, e *WorkExperienceDetail) { n.Edges.WorkExperienceDetail = e }); err != nil {
			return nil, err
		}
	}
	if query := wedtq.withLanguage; query != nil {
		if err := wedtq.loadLanguage(ctx, query, nodes, nil,
			func(n *WorkExperienceDetailTranslation, e *Language) { n.Edges.Language = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (wedtq *WorkExperienceDetailTranslationQuery) loadWorkExperienceDetail(ctx context.Context, query *WorkExperienceDetailQuery, nodes []*WorkExperienceDetailTranslation, init func(*WorkExperienceDetailTranslation), assign func(*WorkExperienceDetailTranslation, *WorkExperienceDetail)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*WorkExperienceDetailTranslation)
	for i := range nodes {
		fk := nodes[i].WorkExperienceDetailID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(workexperiencedetail.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "work_experience_detail_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (wedtq *WorkExperienceDetailTranslationQuery) loadLanguage(ctx context.Context, query *LanguageQuery, nodes []*WorkExperienceDetailTranslation, init func(*WorkExperienceDetailTranslation), assign func(*WorkExperienceDetailTranslation, *Language)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*WorkExperienceDetailTranslation)
	for i := range nodes {
		fk := nodes[i].LanguageCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(language.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "language_code" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (wedtq *WorkExperienceDetailTranslationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := wedtq.querySpec()
	_spec.Node.Columns = wedtq.ctx.Fields
	if len(wedtq.ctx.Fields) > 0 {
		_spec.Unique = wedtq.ctx.Unique != nil && *wedtq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, wedtq.driver, _spec)
}

func (wedtq *WorkExperienceDetailTranslationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(workexperiencedetailtranslation.Table, workexperiencedetailtranslation.Columns, sqlgraph.NewFieldSpec(workexperiencedetailtranslation.FieldID, field.TypeUUID))
	_spec.From = wedtq.sql
	if unique := wedtq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if wedtq.path != nil {
		_spec.Unique = true
	}
	if fields := wedtq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workexperiencedetailtranslation.FieldID)
		for i := range fields {
			if fields[i] != workexperiencedetailtranslation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if wedtq.withWorkExperienceDetail != nil {
			_spec.Node.AddColumnOnce(workexperiencedetailtranslation.FieldWorkExperienceDetailID)
		}
		if wedtq.withLanguage != nil {
			_spec.Node.AddColumnOnce(workexperiencedetailtranslation.FieldLanguageCode)
		}
	}
	if ps := wedtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := wedtq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := wedtq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := wedtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (wedtq *WorkExperienceDetailTranslationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(wedtq.driver.Dialect())
	t1 := builder.Table(workexperiencedetailtranslation.Table)
	columns := wedtq.ctx.Fields
	if len(columns) == 0 {
		columns = workexperiencedetailtranslation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if wedtq.sql != nil {
		selector = wedtq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if wedtq.ctx.Unique != nil && *wedtq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range wedtq.predicates {
		p(selector)
	}
	for _, p := range wedtq.order {
		p(selector)
	}
	if offset := wedtq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := wedtq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WorkExperienceDetailTranslationGroupBy is the group-by builder for WorkExperienceDetailTranslation entities.
type WorkExperienceDetailTranslationGroupBy struct {
	selector
	build *WorkExperienceDetailTranslationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wedtgb *WorkExperienceDetailTranslationGroupBy) Aggregate(fns ...AggregateFunc) *WorkExperienceDetailTranslationGroupBy {
	wedtgb.fns = append(wedtgb.fns, fns...)
	return wedtgb
}

// Scan applies the selector query and scans the result into the given value.
func (wedtgb *WorkExperienceDetailTranslationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wedtgb.build.ctx, ent.OpQueryGroupBy)
	if err := wedtgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkExperienceDetailTranslationQuery, *WorkExperienceDetailTranslationGroupBy](ctx, wedtgb.build, wedtgb, wedtgb.build.inters, v)
}

func (wedtgb *WorkExperienceDetailTranslationGroupBy) sqlScan(ctx context.Context, root *WorkExperienceDetailTranslationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(wedtgb.fns))
	for _, fn := range wedtgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*wedtgb.flds)+len(wedtgb.fns))
		for _, f := range *wedtgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*wedtgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wedtgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// WorkExperienceDetailTranslationSelect is the builder for selecting fields of WorkExperienceDetailTranslation entities.
type WorkExperienceDetailTranslationSelect struct {
	*WorkExperienceDetailTranslationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (wedts *WorkExperienceDetailTranslationSelect) Aggregate(fns ...AggregateFunc) *WorkExperienceDetailTranslationSelect {
	wedts.fns = append(wedts.fns, fns...)
	return wedts
}

// Scan applies the selector query and scans the result into the given value.
func (wedts *WorkExperienceDetailTranslationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wedts.ctx, ent.OpQuerySelect)
	if err := wedts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkExperienceDetailTranslationQuery, *WorkExperienceDetailTranslationSelect](ctx, wedts.WorkExperienceDetailTranslationQuery, wedts, wedts.inters, v)
}

func (wedts *WorkExperienceDetailTranslationSelect) sqlScan(ctx context.Context, root *WorkExperienceDetailTranslationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(wedts.fns))
	for _, fn := range wedts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*wedts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wedts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
