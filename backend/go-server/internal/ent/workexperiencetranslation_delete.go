// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/workexperiencetranslation"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkExperienceTranslationDelete is the builder for deleting a WorkExperienceTranslation entity.
type WorkExperienceTranslationDelete struct {
	config
	hooks    []Hook
	mutation *WorkExperienceTranslationMutation
}

// Where appends a list predicates to the WorkExperienceTranslationDelete builder.
func (wetd *WorkExperienceTranslationDelete) Where(ps ...predicate.WorkExperienceTranslation) *WorkExperienceTranslationDelete {
	wetd.mutation.Where(ps...)
	return wetd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wetd *WorkExperienceTranslationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wetd.sqlExec, wetd.mutation, wetd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wetd *WorkExperienceTranslationDelete) ExecX(ctx context.Context) int {
	n, err := wetd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wetd *WorkExperienceTranslationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(workexperiencetranslation.Table, sqlgraph.NewFieldSpec(workexperiencetranslation.FieldID, field.TypeUUID))
	if ps := wetd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wetd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wetd.mutation.done = true
	return affected, err
}

// WorkExperienceTranslationDeleteOne is the builder for deleting a single WorkExperienceTranslation entity.
type WorkExperienceTranslationDeleteOne struct {
	wetd *WorkExperienceTranslationDelete
}

// Where appends a list predicates to the WorkExperienceTranslationDelete builder.
func (wetdo *WorkExperienceTranslationDeleteOne) Where(ps ...predicate.WorkExperienceTranslation) *WorkExperienceTranslationDeleteOne {
	wetdo.wetd.mutation.Where(ps...)
	return wetdo
}

// Exec executes the deletion query.
func (wetdo *WorkExperienceTranslationDeleteOne) Exec(ctx context.Context) error {
	n, err := wetdo.wetd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{workexperiencetranslation.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wetdo *WorkExperienceTranslationDeleteOne) ExecX(ctx context.Context) {
	if err := wetdo.Exec(ctx); err != nil {
		panic(err)
	}
}
