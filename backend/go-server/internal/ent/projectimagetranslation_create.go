// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/projectimage"
	"silan-backend/internal/ent/projectimagetranslation"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProjectImageTranslationCreate is the builder for creating a ProjectImageTranslation entity.
type ProjectImageTranslationCreate struct {
	config
	mutation *ProjectImageTranslationMutation
	hooks    []Hook
}

// SetProjectImageID sets the "project_image_id" field.
func (pitc *ProjectImageTranslationCreate) SetProjectImageID(u uuid.UUID) *ProjectImageTranslationCreate {
	pitc.mutation.SetProjectImageID(u)
	return pitc
}

// SetLanguageCode sets the "language_code" field.
func (pitc *ProjectImageTranslationCreate) SetLanguageCode(s string) *ProjectImageTranslationCreate {
	pitc.mutation.SetLanguageCode(s)
	return pitc
}

// SetAltText sets the "alt_text" field.
func (pitc *ProjectImageTranslationCreate) SetAltText(s string) *ProjectImageTranslationCreate {
	pitc.mutation.SetAltText(s)
	return pitc
}

// SetNillableAltText sets the "alt_text" field if the given value is not nil.
func (pitc *ProjectImageTranslationCreate) SetNillableAltText(s *string) *ProjectImageTranslationCreate {
	if s != nil {
		pitc.SetAltText(*s)
	}
	return pitc
}

// SetCaption sets the "caption" field.
func (pitc *ProjectImageTranslationCreate) SetCaption(s string) *ProjectImageTranslationCreate {
	pitc.mutation.SetCaption(s)
	return pitc
}

// SetNillableCaption sets the "caption" field if the given value is not nil.
func (pitc *ProjectImageTranslationCreate) SetNillableCaption(s *string) *ProjectImageTranslationCreate {
	if s != nil {
		pitc.SetCaption(*s)
	}
	return pitc
}

// SetCreatedAt sets the "created_at" field.
func (pitc *ProjectImageTranslationCreate) SetCreatedAt(t time.Time) *ProjectImageTranslationCreate {
	pitc.mutation.SetCreatedAt(t)
	return pitc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pitc *ProjectImageTranslationCreate) SetNillableCreatedAt(t *time.Time) *ProjectImageTranslationCreate {
	if t != nil {
		pitc.SetCreatedAt(*t)
	}
	return pitc
}

// SetUpdatedAt sets the "updated_at" field.
func (pitc *ProjectImageTranslationCreate) SetUpdatedAt(t time.Time) *ProjectImageTranslationCreate {
	pitc.mutation.SetUpdatedAt(t)
	return pitc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pitc *ProjectImageTranslationCreate) SetNillableUpdatedAt(t *time.Time) *ProjectImageTranslationCreate {
	if t != nil {
		pitc.SetUpdatedAt(*t)
	}
	return pitc
}

// SetID sets the "id" field.
func (pitc *ProjectImageTranslationCreate) SetID(u uuid.UUID) *ProjectImageTranslationCreate {
	pitc.mutation.SetID(u)
	return pitc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pitc *ProjectImageTranslationCreate) SetNillableID(u *uuid.UUID) *ProjectImageTranslationCreate {
	if u != nil {
		pitc.SetID(*u)
	}
	return pitc
}

// SetProjectImage sets the "project_image" edge to the ProjectImage entity.
func (pitc *ProjectImageTranslationCreate) SetProjectImage(p *ProjectImage) *ProjectImageTranslationCreate {
	return pitc.SetProjectImageID(p.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (pitc *ProjectImageTranslationCreate) SetLanguageID(id string) *ProjectImageTranslationCreate {
	pitc.mutation.SetLanguageID(id)
	return pitc
}

// SetLanguage sets the "language" edge to the Language entity.
func (pitc *ProjectImageTranslationCreate) SetLanguage(l *Language) *ProjectImageTranslationCreate {
	return pitc.SetLanguageID(l.ID)
}

// Mutation returns the ProjectImageTranslationMutation object of the builder.
func (pitc *ProjectImageTranslationCreate) Mutation() *ProjectImageTranslationMutation {
	return pitc.mutation
}

// Save creates the ProjectImageTranslation in the database.
func (pitc *ProjectImageTranslationCreate) Save(ctx context.Context) (*ProjectImageTranslation, error) {
	pitc.defaults()
	return withHooks(ctx, pitc.sqlSave, pitc.mutation, pitc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pitc *ProjectImageTranslationCreate) SaveX(ctx context.Context) *ProjectImageTranslation {
	v, err := pitc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pitc *ProjectImageTranslationCreate) Exec(ctx context.Context) error {
	_, err := pitc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pitc *ProjectImageTranslationCreate) ExecX(ctx context.Context) {
	if err := pitc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pitc *ProjectImageTranslationCreate) defaults() {
	if _, ok := pitc.mutation.CreatedAt(); !ok {
		v := projectimagetranslation.DefaultCreatedAt()
		pitc.mutation.SetCreatedAt(v)
	}
	if _, ok := pitc.mutation.UpdatedAt(); !ok {
		v := projectimagetranslation.DefaultUpdatedAt()
		pitc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pitc.mutation.ID(); !ok {
		v := projectimagetranslation.DefaultID()
		pitc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pitc *ProjectImageTranslationCreate) check() error {
	if _, ok := pitc.mutation.ProjectImageID(); !ok {
		return &ValidationError{Name: "project_image_id", err: errors.New(`ent: missing required field "ProjectImageTranslation.project_image_id"`)}
	}
	if _, ok := pitc.mutation.LanguageCode(); !ok {
		return &ValidationError{Name: "language_code", err: errors.New(`ent: missing required field "ProjectImageTranslation.language_code"`)}
	}
	if v, ok := pitc.mutation.LanguageCode(); ok {
		if err := projectimagetranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "ProjectImageTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := pitc.mutation.AltText(); ok {
		if err := projectimagetranslation.AltTextValidator(v); err != nil {
			return &ValidationError{Name: "alt_text", err: fmt.Errorf(`ent: validator failed for field "ProjectImageTranslation.alt_text": %w`, err)}
		}
	}
	if _, ok := pitc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProjectImageTranslation.created_at"`)}
	}
	if _, ok := pitc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProjectImageTranslation.updated_at"`)}
	}
	if len(pitc.mutation.ProjectImageIDs()) == 0 {
		return &ValidationError{Name: "project_image", err: errors.New(`ent: missing required edge "ProjectImageTranslation.project_image"`)}
	}
	if len(pitc.mutation.LanguageIDs()) == 0 {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required edge "ProjectImageTranslation.language"`)}
	}
	return nil
}

func (pitc *ProjectImageTranslationCreate) sqlSave(ctx context.Context) (*ProjectImageTranslation, error) {
	if err := pitc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pitc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pitc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pitc.mutation.id = &_node.ID
	pitc.mutation.done = true
	return _node, nil
}

func (pitc *ProjectImageTranslationCreate) createSpec() (*ProjectImageTranslation, *sqlgraph.CreateSpec) {
	var (
		_node = &ProjectImageTranslation{config: pitc.config}
		_spec = sqlgraph.NewCreateSpec(projectimagetranslation.Table, sqlgraph.NewFieldSpec(projectimagetranslation.FieldID, field.TypeUUID))
	)
	if id, ok := pitc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pitc.mutation.AltText(); ok {
		_spec.SetField(projectimagetranslation.FieldAltText, field.TypeString, value)
		_node.AltText = value
	}
	if value, ok := pitc.mutation.Caption(); ok {
		_spec.SetField(projectimagetranslation.FieldCaption, field.TypeString, value)
		_node.Caption = value
	}
	if value, ok := pitc.mutation.CreatedAt(); ok {
		_spec.SetField(projectimagetranslation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pitc.mutation.UpdatedAt(); ok {
		_spec.SetField(projectimagetranslation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pitc.mutation.ProjectImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectimagetranslation.ProjectImageTable,
			Columns: []string{projectimagetranslation.ProjectImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectimage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectImageID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pitc.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectimagetranslation.LanguageTable,
			Columns: []string{projectimagetranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LanguageCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProjectImageTranslationCreateBulk is the builder for creating many ProjectImageTranslation entities in bulk.
type ProjectImageTranslationCreateBulk struct {
	config
	err      error
	builders []*ProjectImageTranslationCreate
}

// Save creates the ProjectImageTranslation entities in the database.
func (pitcb *ProjectImageTranslationCreateBulk) Save(ctx context.Context) ([]*ProjectImageTranslation, error) {
	if pitcb.err != nil {
		return nil, pitcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pitcb.builders))
	nodes := make([]*ProjectImageTranslation, len(pitcb.builders))
	mutators := make([]Mutator, len(pitcb.builders))
	for i := range pitcb.builders {
		func(i int, root context.Context) {
			builder := pitcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectImageTranslationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pitcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pitcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pitcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pitcb *ProjectImageTranslationCreateBulk) SaveX(ctx context.Context) []*ProjectImageTranslation {
	v, err := pitcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pitcb *ProjectImageTranslationCreateBulk) Exec(ctx context.Context) error {
	_, err := pitcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pitcb *ProjectImageTranslationCreateBulk) ExecX(ctx context.Context) {
	if err := pitcb.Exec(ctx); err != nil {
		panic(err)
	}
}
