// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/researchproject"
	"silan-backend/internal/ent/researchprojectdetail"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ResearchProjectDetail is the model entity for the ResearchProjectDetail schema.
type ResearchProjectDetail struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ResearchProjectID holds the value of the "research_project_id" field.
	ResearchProjectID uuid.UUID `json:"research_project_id,omitempty"`
	// DetailText holds the value of the "detail_text" field.
	DetailText string `json:"detail_text,omitempty"`
	// SortOrder holds the value of the "sort_order" field.
	SortOrder int `json:"sort_order,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResearchProjectDetailQuery when eager-loading is set.
	Edges        ResearchProjectDetailEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ResearchProjectDetailEdges holds the relations/edges for other nodes in the graph.
type ResearchProjectDetailEdges struct {
	// ResearchProject holds the value of the research_project edge.
	ResearchProject *ResearchProject `json:"research_project,omitempty"`
	// Translations holds the value of the translations edge.
	Translations []*ResearchProjectDetailTranslation `json:"translations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ResearchProjectOrErr returns the ResearchProject value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResearchProjectDetailEdges) ResearchProjectOrErr() (*ResearchProject, error) {
	if e.ResearchProject != nil {
		return e.ResearchProject, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: researchproject.Label}
	}
	return nil, &NotLoadedError{edge: "research_project"}
}

// TranslationsOrErr returns the Translations value or an error if the edge
// was not loaded in eager-loading.
func (e ResearchProjectDetailEdges) TranslationsOrErr() ([]*ResearchProjectDetailTranslation, error) {
	if e.loadedTypes[1] {
		return e.Translations, nil
	}
	return nil, &NotLoadedError{edge: "translations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResearchProjectDetail) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case researchprojectdetail.FieldSortOrder:
			values[i] = new(sql.NullInt64)
		case researchprojectdetail.FieldDetailText:
			values[i] = new(sql.NullString)
		case researchprojectdetail.FieldCreatedAt, researchprojectdetail.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case researchprojectdetail.FieldID, researchprojectdetail.FieldResearchProjectID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResearchProjectDetail fields.
func (rpd *ResearchProjectDetail) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case researchprojectdetail.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rpd.ID = *value
			}
		case researchprojectdetail.FieldResearchProjectID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field research_project_id", values[i])
			} else if value != nil {
				rpd.ResearchProjectID = *value
			}
		case researchprojectdetail.FieldDetailText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field detail_text", values[i])
			} else if value.Valid {
				rpd.DetailText = value.String
			}
		case researchprojectdetail.FieldSortOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_order", values[i])
			} else if value.Valid {
				rpd.SortOrder = int(value.Int64)
			}
		case researchprojectdetail.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rpd.CreatedAt = value.Time
			}
		case researchprojectdetail.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rpd.UpdatedAt = value.Time
			}
		default:
			rpd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ResearchProjectDetail.
// This includes values selected through modifiers, order, etc.
func (rpd *ResearchProjectDetail) Value(name string) (ent.Value, error) {
	return rpd.selectValues.Get(name)
}

// QueryResearchProject queries the "research_project" edge of the ResearchProjectDetail entity.
func (rpd *ResearchProjectDetail) QueryResearchProject() *ResearchProjectQuery {
	return NewResearchProjectDetailClient(rpd.config).QueryResearchProject(rpd)
}

// QueryTranslations queries the "translations" edge of the ResearchProjectDetail entity.
func (rpd *ResearchProjectDetail) QueryTranslations() *ResearchProjectDetailTranslationQuery {
	return NewResearchProjectDetailClient(rpd.config).QueryTranslations(rpd)
}

// Update returns a builder for updating this ResearchProjectDetail.
// Note that you need to call ResearchProjectDetail.Unwrap() before calling this method if this ResearchProjectDetail
// was returned from a transaction, and the transaction was committed or rolled back.
func (rpd *ResearchProjectDetail) Update() *ResearchProjectDetailUpdateOne {
	return NewResearchProjectDetailClient(rpd.config).UpdateOne(rpd)
}

// Unwrap unwraps the ResearchProjectDetail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rpd *ResearchProjectDetail) Unwrap() *ResearchProjectDetail {
	_tx, ok := rpd.config.driver.(*txDriver)
	if !ok {
		panic("ent: ResearchProjectDetail is not a transactional entity")
	}
	rpd.config.driver = _tx.drv
	return rpd
}

// String implements the fmt.Stringer.
func (rpd *ResearchProjectDetail) String() string {
	var builder strings.Builder
	builder.WriteString("ResearchProjectDetail(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rpd.ID))
	builder.WriteString("research_project_id=")
	builder.WriteString(fmt.Sprintf("%v", rpd.ResearchProjectID))
	builder.WriteString(", ")
	builder.WriteString("detail_text=")
	builder.WriteString(rpd.DetailText)
	builder.WriteString(", ")
	builder.WriteString("sort_order=")
	builder.WriteString(fmt.Sprintf("%v", rpd.SortOrder))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rpd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rpd.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ResearchProjectDetails is a parsable slice of ResearchProjectDetail.
type ResearchProjectDetails []*ResearchProjectDetail
