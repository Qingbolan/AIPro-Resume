// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/workexperience"
	"silan-backend/internal/ent/workexperiencedetail"
	"silan-backend/internal/ent/workexperiencedetailtranslation"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkExperienceDetailQuery is the builder for querying WorkExperienceDetail entities.
type WorkExperienceDetailQuery struct {
	config
	ctx                *QueryContext
	order              []workexperiencedetail.OrderOption
	inters             []Interceptor
	predicates         []predicate.WorkExperienceDetail
	withWorkExperience *WorkExperienceQuery
	withTranslations   *WorkExperienceDetailTranslationQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WorkExperienceDetailQuery builder.
func (wedq *WorkExperienceDetailQuery) Where(ps ...predicate.WorkExperienceDetail) *WorkExperienceDetailQuery {
	wedq.predicates = append(wedq.predicates, ps...)
	return wedq
}

// Limit the number of records to be returned by this query.
func (wedq *WorkExperienceDetailQuery) Limit(limit int) *WorkExperienceDetailQuery {
	wedq.ctx.Limit = &limit
	return wedq
}

// Offset to start from.
func (wedq *WorkExperienceDetailQuery) Offset(offset int) *WorkExperienceDetailQuery {
	wedq.ctx.Offset = &offset
	return wedq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (wedq *WorkExperienceDetailQuery) Unique(unique bool) *WorkExperienceDetailQuery {
	wedq.ctx.Unique = &unique
	return wedq
}

// Order specifies how the records should be ordered.
func (wedq *WorkExperienceDetailQuery) Order(o ...workexperiencedetail.OrderOption) *WorkExperienceDetailQuery {
	wedq.order = append(wedq.order, o...)
	return wedq
}

// QueryWorkExperience chains the current query on the "work_experience" edge.
func (wedq *WorkExperienceDetailQuery) QueryWorkExperience() *WorkExperienceQuery {
	query := (&WorkExperienceClient{config: wedq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wedq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wedq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workexperiencedetail.Table, workexperiencedetail.FieldID, selector),
			sqlgraph.To(workexperience.Table, workexperience.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workexperiencedetail.WorkExperienceTable, workexperiencedetail.WorkExperienceColumn),
		)
		fromU = sqlgraph.SetNeighbors(wedq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTranslations chains the current query on the "translations" edge.
func (wedq *WorkExperienceDetailQuery) QueryTranslations() *WorkExperienceDetailTranslationQuery {
	query := (&WorkExperienceDetailTranslationClient{config: wedq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wedq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wedq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workexperiencedetail.Table, workexperiencedetail.FieldID, selector),
			sqlgraph.To(workexperiencedetailtranslation.Table, workexperiencedetailtranslation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workexperiencedetail.TranslationsTable, workexperiencedetail.TranslationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(wedq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first WorkExperienceDetail entity from the query.
// Returns a *NotFoundError when no WorkExperienceDetail was found.
func (wedq *WorkExperienceDetailQuery) First(ctx context.Context) (*WorkExperienceDetail, error) {
	nodes, err := wedq.Limit(1).All(setContextOp(ctx, wedq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{workexperiencedetail.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (wedq *WorkExperienceDetailQuery) FirstX(ctx context.Context) *WorkExperienceDetail {
	node, err := wedq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WorkExperienceDetail ID from the query.
// Returns a *NotFoundError when no WorkExperienceDetail ID was found.
func (wedq *WorkExperienceDetailQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = wedq.Limit(1).IDs(setContextOp(ctx, wedq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{workexperiencedetail.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (wedq *WorkExperienceDetailQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := wedq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WorkExperienceDetail entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one WorkExperienceDetail entity is found.
// Returns a *NotFoundError when no WorkExperienceDetail entities are found.
func (wedq *WorkExperienceDetailQuery) Only(ctx context.Context) (*WorkExperienceDetail, error) {
	nodes, err := wedq.Limit(2).All(setContextOp(ctx, wedq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{workexperiencedetail.Label}
	default:
		return nil, &NotSingularError{workexperiencedetail.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (wedq *WorkExperienceDetailQuery) OnlyX(ctx context.Context) *WorkExperienceDetail {
	node, err := wedq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WorkExperienceDetail ID in the query.
// Returns a *NotSingularError when more than one WorkExperienceDetail ID is found.
// Returns a *NotFoundError when no entities are found.
func (wedq *WorkExperienceDetailQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = wedq.Limit(2).IDs(setContextOp(ctx, wedq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{workexperiencedetail.Label}
	default:
		err = &NotSingularError{workexperiencedetail.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (wedq *WorkExperienceDetailQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := wedq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WorkExperienceDetails.
func (wedq *WorkExperienceDetailQuery) All(ctx context.Context) ([]*WorkExperienceDetail, error) {
	ctx = setContextOp(ctx, wedq.ctx, ent.OpQueryAll)
	if err := wedq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*WorkExperienceDetail, *WorkExperienceDetailQuery]()
	return withInterceptors[[]*WorkExperienceDetail](ctx, wedq, qr, wedq.inters)
}

// AllX is like All, but panics if an error occurs.
func (wedq *WorkExperienceDetailQuery) AllX(ctx context.Context) []*WorkExperienceDetail {
	nodes, err := wedq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WorkExperienceDetail IDs.
func (wedq *WorkExperienceDetailQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if wedq.ctx.Unique == nil && wedq.path != nil {
		wedq.Unique(true)
	}
	ctx = setContextOp(ctx, wedq.ctx, ent.OpQueryIDs)
	if err = wedq.Select(workexperiencedetail.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (wedq *WorkExperienceDetailQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := wedq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (wedq *WorkExperienceDetailQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, wedq.ctx, ent.OpQueryCount)
	if err := wedq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, wedq, querierCount[*WorkExperienceDetailQuery](), wedq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (wedq *WorkExperienceDetailQuery) CountX(ctx context.Context) int {
	count, err := wedq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (wedq *WorkExperienceDetailQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, wedq.ctx, ent.OpQueryExist)
	switch _, err := wedq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (wedq *WorkExperienceDetailQuery) ExistX(ctx context.Context) bool {
	exist, err := wedq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WorkExperienceDetailQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (wedq *WorkExperienceDetailQuery) Clone() *WorkExperienceDetailQuery {
	if wedq == nil {
		return nil
	}
	return &WorkExperienceDetailQuery{
		config:             wedq.config,
		ctx:                wedq.ctx.Clone(),
		order:              append([]workexperiencedetail.OrderOption{}, wedq.order...),
		inters:             append([]Interceptor{}, wedq.inters...),
		predicates:         append([]predicate.WorkExperienceDetail{}, wedq.predicates...),
		withWorkExperience: wedq.withWorkExperience.Clone(),
		withTranslations:   wedq.withTranslations.Clone(),
		// clone intermediate query.
		sql:  wedq.sql.Clone(),
		path: wedq.path,
	}
}

// WithWorkExperience tells the query-builder to eager-load the nodes that are connected to
// the "work_experience" edge. The optional arguments are used to configure the query builder of the edge.
func (wedq *WorkExperienceDetailQuery) WithWorkExperience(opts ...func(*WorkExperienceQuery)) *WorkExperienceDetailQuery {
	query := (&WorkExperienceClient{config: wedq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wedq.withWorkExperience = query
	return wedq
}

// WithTranslations tells the query-builder to eager-load the nodes that are connected to
// the "translations" edge. The optional arguments are used to configure the query builder of the edge.
func (wedq *WorkExperienceDetailQuery) WithTranslations(opts ...func(*WorkExperienceDetailTranslationQuery)) *WorkExperienceDetailQuery {
	query := (&WorkExperienceDetailTranslationClient{config: wedq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wedq.withTranslations = query
	return wedq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		WorkExperienceID uuid.UUID `json:"work_experience_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WorkExperienceDetail.Query().
//		GroupBy(workexperiencedetail.FieldWorkExperienceID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (wedq *WorkExperienceDetailQuery) GroupBy(field string, fields ...string) *WorkExperienceDetailGroupBy {
	wedq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &WorkExperienceDetailGroupBy{build: wedq}
	grbuild.flds = &wedq.ctx.Fields
	grbuild.label = workexperiencedetail.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		WorkExperienceID uuid.UUID `json:"work_experience_id,omitempty"`
//	}
//
//	client.WorkExperienceDetail.Query().
//		Select(workexperiencedetail.FieldWorkExperienceID).
//		Scan(ctx, &v)
func (wedq *WorkExperienceDetailQuery) Select(fields ...string) *WorkExperienceDetailSelect {
	wedq.ctx.Fields = append(wedq.ctx.Fields, fields...)
	sbuild := &WorkExperienceDetailSelect{WorkExperienceDetailQuery: wedq}
	sbuild.label = workexperiencedetail.Label
	sbuild.flds, sbuild.scan = &wedq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a WorkExperienceDetailSelect configured with the given aggregations.
func (wedq *WorkExperienceDetailQuery) Aggregate(fns ...AggregateFunc) *WorkExperienceDetailSelect {
	return wedq.Select().Aggregate(fns...)
}

func (wedq *WorkExperienceDetailQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range wedq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, wedq); err != nil {
				return err
			}
		}
	}
	for _, f := range wedq.ctx.Fields {
		if !workexperiencedetail.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if wedq.path != nil {
		prev, err := wedq.path(ctx)
		if err != nil {
			return err
		}
		wedq.sql = prev
	}
	return nil
}

func (wedq *WorkExperienceDetailQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*WorkExperienceDetail, error) {
	var (
		nodes       = []*WorkExperienceDetail{}
		_spec       = wedq.querySpec()
		loadedTypes = [2]bool{
			wedq.withWorkExperience != nil,
			wedq.withTranslations != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*WorkExperienceDetail).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &WorkExperienceDetail{config: wedq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, wedq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := wedq.withWorkExperience; query != nil {
		if err := wedq.loadWorkExperience(ctx, query, nodes, nil,
			func(n *WorkExperienceDetail, e *WorkExperience) { n.Edges.WorkExperience = e }); err != nil {
			return nil, err
		}
	}
	if query := wedq.withTranslations; query != nil {
		if err := wedq.loadTranslations(ctx, query, nodes,
			func(n *WorkExperienceDetail) { n.Edges.Translations = []*WorkExperienceDetailTranslation{} },
			func(n *WorkExperienceDetail, e *WorkExperienceDetailTranslation) {
				n.Edges.Translations = append(n.Edges.Translations, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (wedq *WorkExperienceDetailQuery) loadWorkExperience(ctx context.Context, query *WorkExperienceQuery, nodes []*WorkExperienceDetail, init func(*WorkExperienceDetail), assign func(*WorkExperienceDetail, *WorkExperience)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*WorkExperienceDetail)
	for i := range nodes {
		fk := nodes[i].WorkExperienceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(workexperience.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "work_experience_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (wedq *WorkExperienceDetailQuery) loadTranslations(ctx context.Context, query *WorkExperienceDetailTranslationQuery, nodes []*WorkExperienceDetail, init func(*WorkExperienceDetail), assign func(*WorkExperienceDetail, *WorkExperienceDetailTranslation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*WorkExperienceDetail)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(workexperiencedetailtranslation.FieldWorkExperienceDetailID)
	}
	query.Where(predicate.WorkExperienceDetailTranslation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(workexperiencedetail.TranslationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.WorkExperienceDetailID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "work_experience_detail_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (wedq *WorkExperienceDetailQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := wedq.querySpec()
	_spec.Node.Columns = wedq.ctx.Fields
	if len(wedq.ctx.Fields) > 0 {
		_spec.Unique = wedq.ctx.Unique != nil && *wedq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, wedq.driver, _spec)
}

func (wedq *WorkExperienceDetailQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(workexperiencedetail.Table, workexperiencedetail.Columns, sqlgraph.NewFieldSpec(workexperiencedetail.FieldID, field.TypeUUID))
	_spec.From = wedq.sql
	if unique := wedq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if wedq.path != nil {
		_spec.Unique = true
	}
	if fields := wedq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workexperiencedetail.FieldID)
		for i := range fields {
			if fields[i] != workexperiencedetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if wedq.withWorkExperience != nil {
			_spec.Node.AddColumnOnce(workexperiencedetail.FieldWorkExperienceID)
		}
	}
	if ps := wedq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := wedq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := wedq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := wedq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (wedq *WorkExperienceDetailQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(wedq.driver.Dialect())
	t1 := builder.Table(workexperiencedetail.Table)
	columns := wedq.ctx.Fields
	if len(columns) == 0 {
		columns = workexperiencedetail.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if wedq.sql != nil {
		selector = wedq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if wedq.ctx.Unique != nil && *wedq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range wedq.predicates {
		p(selector)
	}
	for _, p := range wedq.order {
		p(selector)
	}
	if offset := wedq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := wedq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WorkExperienceDetailGroupBy is the group-by builder for WorkExperienceDetail entities.
type WorkExperienceDetailGroupBy struct {
	selector
	build *WorkExperienceDetailQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wedgb *WorkExperienceDetailGroupBy) Aggregate(fns ...AggregateFunc) *WorkExperienceDetailGroupBy {
	wedgb.fns = append(wedgb.fns, fns...)
	return wedgb
}

// Scan applies the selector query and scans the result into the given value.
func (wedgb *WorkExperienceDetailGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wedgb.build.ctx, ent.OpQueryGroupBy)
	if err := wedgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkExperienceDetailQuery, *WorkExperienceDetailGroupBy](ctx, wedgb.build, wedgb, wedgb.build.inters, v)
}

func (wedgb *WorkExperienceDetailGroupBy) sqlScan(ctx context.Context, root *WorkExperienceDetailQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(wedgb.fns))
	for _, fn := range wedgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*wedgb.flds)+len(wedgb.fns))
		for _, f := range *wedgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*wedgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wedgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// WorkExperienceDetailSelect is the builder for selecting fields of WorkExperienceDetail entities.
type WorkExperienceDetailSelect struct {
	*WorkExperienceDetailQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (weds *WorkExperienceDetailSelect) Aggregate(fns ...AggregateFunc) *WorkExperienceDetailSelect {
	weds.fns = append(weds.fns, fns...)
	return weds
}

// Scan applies the selector query and scans the result into the given value.
func (weds *WorkExperienceDetailSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, weds.ctx, ent.OpQuerySelect)
	if err := weds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkExperienceDetailQuery, *WorkExperienceDetailSelect](ctx, weds.WorkExperienceDetailQuery, weds, weds.inters, v)
}

func (weds *WorkExperienceDetailSelect) sqlScan(ctx context.Context, root *WorkExperienceDetailQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(weds.fns))
	for _, fn := range weds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*weds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := weds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
