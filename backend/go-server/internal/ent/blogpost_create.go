// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/blogcategory"
	"silan-backend/internal/ent/blogcomment"
	"silan-backend/internal/ent/blogpost"
	"silan-backend/internal/ent/blogposttranslation"
	"silan-backend/internal/ent/blogseries"
	"silan-backend/internal/ent/blogtag"
	"silan-backend/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BlogPostCreate is the builder for creating a BlogPost entity.
type BlogPostCreate struct {
	config
	mutation *BlogPostMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (bpc *BlogPostCreate) SetUserID(u uuid.UUID) *BlogPostCreate {
	bpc.mutation.SetUserID(u)
	return bpc
}

// SetCategoryID sets the "category_id" field.
func (bpc *BlogPostCreate) SetCategoryID(u uuid.UUID) *BlogPostCreate {
	bpc.mutation.SetCategoryID(u)
	return bpc
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (bpc *BlogPostCreate) SetNillableCategoryID(u *uuid.UUID) *BlogPostCreate {
	if u != nil {
		bpc.SetCategoryID(*u)
	}
	return bpc
}

// SetSeriesID sets the "series_id" field.
func (bpc *BlogPostCreate) SetSeriesID(u uuid.UUID) *BlogPostCreate {
	bpc.mutation.SetSeriesID(u)
	return bpc
}

// SetNillableSeriesID sets the "series_id" field if the given value is not nil.
func (bpc *BlogPostCreate) SetNillableSeriesID(u *uuid.UUID) *BlogPostCreate {
	if u != nil {
		bpc.SetSeriesID(*u)
	}
	return bpc
}

// SetTitle sets the "title" field.
func (bpc *BlogPostCreate) SetTitle(s string) *BlogPostCreate {
	bpc.mutation.SetTitle(s)
	return bpc
}

// SetSlug sets the "slug" field.
func (bpc *BlogPostCreate) SetSlug(s string) *BlogPostCreate {
	bpc.mutation.SetSlug(s)
	return bpc
}

// SetExcerpt sets the "excerpt" field.
func (bpc *BlogPostCreate) SetExcerpt(s string) *BlogPostCreate {
	bpc.mutation.SetExcerpt(s)
	return bpc
}

// SetNillableExcerpt sets the "excerpt" field if the given value is not nil.
func (bpc *BlogPostCreate) SetNillableExcerpt(s *string) *BlogPostCreate {
	if s != nil {
		bpc.SetExcerpt(*s)
	}
	return bpc
}

// SetContent sets the "content" field.
func (bpc *BlogPostCreate) SetContent(s string) *BlogPostCreate {
	bpc.mutation.SetContent(s)
	return bpc
}

// SetContentType sets the "content_type" field.
func (bpc *BlogPostCreate) SetContentType(bt blogpost.ContentType) *BlogPostCreate {
	bpc.mutation.SetContentType(bt)
	return bpc
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (bpc *BlogPostCreate) SetNillableContentType(bt *blogpost.ContentType) *BlogPostCreate {
	if bt != nil {
		bpc.SetContentType(*bt)
	}
	return bpc
}

// SetStatus sets the "status" field.
func (bpc *BlogPostCreate) SetStatus(b blogpost.Status) *BlogPostCreate {
	bpc.mutation.SetStatus(b)
	return bpc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bpc *BlogPostCreate) SetNillableStatus(b *blogpost.Status) *BlogPostCreate {
	if b != nil {
		bpc.SetStatus(*b)
	}
	return bpc
}

// SetIsFeatured sets the "is_featured" field.
func (bpc *BlogPostCreate) SetIsFeatured(b bool) *BlogPostCreate {
	bpc.mutation.SetIsFeatured(b)
	return bpc
}

// SetNillableIsFeatured sets the "is_featured" field if the given value is not nil.
func (bpc *BlogPostCreate) SetNillableIsFeatured(b *bool) *BlogPostCreate {
	if b != nil {
		bpc.SetIsFeatured(*b)
	}
	return bpc
}

// SetFeaturedImageURL sets the "featured_image_url" field.
func (bpc *BlogPostCreate) SetFeaturedImageURL(s string) *BlogPostCreate {
	bpc.mutation.SetFeaturedImageURL(s)
	return bpc
}

// SetNillableFeaturedImageURL sets the "featured_image_url" field if the given value is not nil.
func (bpc *BlogPostCreate) SetNillableFeaturedImageURL(s *string) *BlogPostCreate {
	if s != nil {
		bpc.SetFeaturedImageURL(*s)
	}
	return bpc
}

// SetReadingTimeMinutes sets the "reading_time_minutes" field.
func (bpc *BlogPostCreate) SetReadingTimeMinutes(i int) *BlogPostCreate {
	bpc.mutation.SetReadingTimeMinutes(i)
	return bpc
}

// SetNillableReadingTimeMinutes sets the "reading_time_minutes" field if the given value is not nil.
func (bpc *BlogPostCreate) SetNillableReadingTimeMinutes(i *int) *BlogPostCreate {
	if i != nil {
		bpc.SetReadingTimeMinutes(*i)
	}
	return bpc
}

// SetViewCount sets the "view_count" field.
func (bpc *BlogPostCreate) SetViewCount(i int) *BlogPostCreate {
	bpc.mutation.SetViewCount(i)
	return bpc
}

// SetNillableViewCount sets the "view_count" field if the given value is not nil.
func (bpc *BlogPostCreate) SetNillableViewCount(i *int) *BlogPostCreate {
	if i != nil {
		bpc.SetViewCount(*i)
	}
	return bpc
}

// SetLikeCount sets the "like_count" field.
func (bpc *BlogPostCreate) SetLikeCount(i int) *BlogPostCreate {
	bpc.mutation.SetLikeCount(i)
	return bpc
}

// SetNillableLikeCount sets the "like_count" field if the given value is not nil.
func (bpc *BlogPostCreate) SetNillableLikeCount(i *int) *BlogPostCreate {
	if i != nil {
		bpc.SetLikeCount(*i)
	}
	return bpc
}

// SetCommentCount sets the "comment_count" field.
func (bpc *BlogPostCreate) SetCommentCount(i int) *BlogPostCreate {
	bpc.mutation.SetCommentCount(i)
	return bpc
}

// SetNillableCommentCount sets the "comment_count" field if the given value is not nil.
func (bpc *BlogPostCreate) SetNillableCommentCount(i *int) *BlogPostCreate {
	if i != nil {
		bpc.SetCommentCount(*i)
	}
	return bpc
}

// SetPublishedAt sets the "published_at" field.
func (bpc *BlogPostCreate) SetPublishedAt(t time.Time) *BlogPostCreate {
	bpc.mutation.SetPublishedAt(t)
	return bpc
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (bpc *BlogPostCreate) SetNillablePublishedAt(t *time.Time) *BlogPostCreate {
	if t != nil {
		bpc.SetPublishedAt(*t)
	}
	return bpc
}

// SetSeriesOrder sets the "series_order" field.
func (bpc *BlogPostCreate) SetSeriesOrder(i int) *BlogPostCreate {
	bpc.mutation.SetSeriesOrder(i)
	return bpc
}

// SetNillableSeriesOrder sets the "series_order" field if the given value is not nil.
func (bpc *BlogPostCreate) SetNillableSeriesOrder(i *int) *BlogPostCreate {
	if i != nil {
		bpc.SetSeriesOrder(*i)
	}
	return bpc
}

// SetCreatedAt sets the "created_at" field.
func (bpc *BlogPostCreate) SetCreatedAt(t time.Time) *BlogPostCreate {
	bpc.mutation.SetCreatedAt(t)
	return bpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bpc *BlogPostCreate) SetNillableCreatedAt(t *time.Time) *BlogPostCreate {
	if t != nil {
		bpc.SetCreatedAt(*t)
	}
	return bpc
}

// SetUpdatedAt sets the "updated_at" field.
func (bpc *BlogPostCreate) SetUpdatedAt(t time.Time) *BlogPostCreate {
	bpc.mutation.SetUpdatedAt(t)
	return bpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bpc *BlogPostCreate) SetNillableUpdatedAt(t *time.Time) *BlogPostCreate {
	if t != nil {
		bpc.SetUpdatedAt(*t)
	}
	return bpc
}

// SetID sets the "id" field.
func (bpc *BlogPostCreate) SetID(u uuid.UUID) *BlogPostCreate {
	bpc.mutation.SetID(u)
	return bpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bpc *BlogPostCreate) SetNillableID(u *uuid.UUID) *BlogPostCreate {
	if u != nil {
		bpc.SetID(*u)
	}
	return bpc
}

// SetUser sets the "user" edge to the User entity.
func (bpc *BlogPostCreate) SetUser(u *User) *BlogPostCreate {
	return bpc.SetUserID(u.ID)
}

// SetCategory sets the "category" edge to the BlogCategory entity.
func (bpc *BlogPostCreate) SetCategory(b *BlogCategory) *BlogPostCreate {
	return bpc.SetCategoryID(b.ID)
}

// SetSeries sets the "series" edge to the BlogSeries entity.
func (bpc *BlogPostCreate) SetSeries(b *BlogSeries) *BlogPostCreate {
	return bpc.SetSeriesID(b.ID)
}

// AddTagIDs adds the "tags" edge to the BlogTag entity by IDs.
func (bpc *BlogPostCreate) AddTagIDs(ids ...uuid.UUID) *BlogPostCreate {
	bpc.mutation.AddTagIDs(ids...)
	return bpc
}

// AddTags adds the "tags" edges to the BlogTag entity.
func (bpc *BlogPostCreate) AddTags(b ...*BlogTag) *BlogPostCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bpc.AddTagIDs(ids...)
}

// AddTranslationIDs adds the "translations" edge to the BlogPostTranslation entity by IDs.
func (bpc *BlogPostCreate) AddTranslationIDs(ids ...uuid.UUID) *BlogPostCreate {
	bpc.mutation.AddTranslationIDs(ids...)
	return bpc
}

// AddTranslations adds the "translations" edges to the BlogPostTranslation entity.
func (bpc *BlogPostCreate) AddTranslations(b ...*BlogPostTranslation) *BlogPostCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bpc.AddTranslationIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the BlogComment entity by IDs.
func (bpc *BlogPostCreate) AddCommentIDs(ids ...uuid.UUID) *BlogPostCreate {
	bpc.mutation.AddCommentIDs(ids...)
	return bpc
}

// AddComments adds the "comments" edges to the BlogComment entity.
func (bpc *BlogPostCreate) AddComments(b ...*BlogComment) *BlogPostCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bpc.AddCommentIDs(ids...)
}

// Mutation returns the BlogPostMutation object of the builder.
func (bpc *BlogPostCreate) Mutation() *BlogPostMutation {
	return bpc.mutation
}

// Save creates the BlogPost in the database.
func (bpc *BlogPostCreate) Save(ctx context.Context) (*BlogPost, error) {
	bpc.defaults()
	return withHooks(ctx, bpc.sqlSave, bpc.mutation, bpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bpc *BlogPostCreate) SaveX(ctx context.Context) *BlogPost {
	v, err := bpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bpc *BlogPostCreate) Exec(ctx context.Context) error {
	_, err := bpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpc *BlogPostCreate) ExecX(ctx context.Context) {
	if err := bpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bpc *BlogPostCreate) defaults() {
	if _, ok := bpc.mutation.ContentType(); !ok {
		v := blogpost.DefaultContentType
		bpc.mutation.SetContentType(v)
	}
	if _, ok := bpc.mutation.Status(); !ok {
		v := blogpost.DefaultStatus
		bpc.mutation.SetStatus(v)
	}
	if _, ok := bpc.mutation.IsFeatured(); !ok {
		v := blogpost.DefaultIsFeatured
		bpc.mutation.SetIsFeatured(v)
	}
	if _, ok := bpc.mutation.ViewCount(); !ok {
		v := blogpost.DefaultViewCount
		bpc.mutation.SetViewCount(v)
	}
	if _, ok := bpc.mutation.LikeCount(); !ok {
		v := blogpost.DefaultLikeCount
		bpc.mutation.SetLikeCount(v)
	}
	if _, ok := bpc.mutation.CommentCount(); !ok {
		v := blogpost.DefaultCommentCount
		bpc.mutation.SetCommentCount(v)
	}
	if _, ok := bpc.mutation.CreatedAt(); !ok {
		v := blogpost.DefaultCreatedAt()
		bpc.mutation.SetCreatedAt(v)
	}
	if _, ok := bpc.mutation.UpdatedAt(); !ok {
		v := blogpost.DefaultUpdatedAt()
		bpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bpc.mutation.ID(); !ok {
		v := blogpost.DefaultID()
		bpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bpc *BlogPostCreate) check() error {
	if _, ok := bpc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "BlogPost.user_id"`)}
	}
	if _, ok := bpc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "BlogPost.title"`)}
	}
	if v, ok := bpc.mutation.Title(); ok {
		if err := blogpost.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "BlogPost.title": %w`, err)}
		}
	}
	if _, ok := bpc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "BlogPost.slug"`)}
	}
	if v, ok := bpc.mutation.Slug(); ok {
		if err := blogpost.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "BlogPost.slug": %w`, err)}
		}
	}
	if _, ok := bpc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "BlogPost.content"`)}
	}
	if v, ok := bpc.mutation.Content(); ok {
		if err := blogpost.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "BlogPost.content": %w`, err)}
		}
	}
	if _, ok := bpc.mutation.ContentType(); !ok {
		return &ValidationError{Name: "content_type", err: errors.New(`ent: missing required field "BlogPost.content_type"`)}
	}
	if v, ok := bpc.mutation.ContentType(); ok {
		if err := blogpost.ContentTypeValidator(v); err != nil {
			return &ValidationError{Name: "content_type", err: fmt.Errorf(`ent: validator failed for field "BlogPost.content_type": %w`, err)}
		}
	}
	if _, ok := bpc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "BlogPost.status"`)}
	}
	if v, ok := bpc.mutation.Status(); ok {
		if err := blogpost.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "BlogPost.status": %w`, err)}
		}
	}
	if _, ok := bpc.mutation.IsFeatured(); !ok {
		return &ValidationError{Name: "is_featured", err: errors.New(`ent: missing required field "BlogPost.is_featured"`)}
	}
	if v, ok := bpc.mutation.FeaturedImageURL(); ok {
		if err := blogpost.FeaturedImageURLValidator(v); err != nil {
			return &ValidationError{Name: "featured_image_url", err: fmt.Errorf(`ent: validator failed for field "BlogPost.featured_image_url": %w`, err)}
		}
	}
	if _, ok := bpc.mutation.ViewCount(); !ok {
		return &ValidationError{Name: "view_count", err: errors.New(`ent: missing required field "BlogPost.view_count"`)}
	}
	if _, ok := bpc.mutation.LikeCount(); !ok {
		return &ValidationError{Name: "like_count", err: errors.New(`ent: missing required field "BlogPost.like_count"`)}
	}
	if _, ok := bpc.mutation.CommentCount(); !ok {
		return &ValidationError{Name: "comment_count", err: errors.New(`ent: missing required field "BlogPost.comment_count"`)}
	}
	if _, ok := bpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlogPost.created_at"`)}
	}
	if _, ok := bpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BlogPost.updated_at"`)}
	}
	if len(bpc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "BlogPost.user"`)}
	}
	return nil
}

func (bpc *BlogPostCreate) sqlSave(ctx context.Context) (*BlogPost, error) {
	if err := bpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bpc.mutation.id = &_node.ID
	bpc.mutation.done = true
	return _node, nil
}

func (bpc *BlogPostCreate) createSpec() (*BlogPost, *sqlgraph.CreateSpec) {
	var (
		_node = &BlogPost{config: bpc.config}
		_spec = sqlgraph.NewCreateSpec(blogpost.Table, sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID))
	)
	if id, ok := bpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bpc.mutation.Title(); ok {
		_spec.SetField(blogpost.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := bpc.mutation.Slug(); ok {
		_spec.SetField(blogpost.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := bpc.mutation.Excerpt(); ok {
		_spec.SetField(blogpost.FieldExcerpt, field.TypeString, value)
		_node.Excerpt = value
	}
	if value, ok := bpc.mutation.Content(); ok {
		_spec.SetField(blogpost.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := bpc.mutation.ContentType(); ok {
		_spec.SetField(blogpost.FieldContentType, field.TypeEnum, value)
		_node.ContentType = value
	}
	if value, ok := bpc.mutation.Status(); ok {
		_spec.SetField(blogpost.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := bpc.mutation.IsFeatured(); ok {
		_spec.SetField(blogpost.FieldIsFeatured, field.TypeBool, value)
		_node.IsFeatured = value
	}
	if value, ok := bpc.mutation.FeaturedImageURL(); ok {
		_spec.SetField(blogpost.FieldFeaturedImageURL, field.TypeString, value)
		_node.FeaturedImageURL = value
	}
	if value, ok := bpc.mutation.ReadingTimeMinutes(); ok {
		_spec.SetField(blogpost.FieldReadingTimeMinutes, field.TypeInt, value)
		_node.ReadingTimeMinutes = value
	}
	if value, ok := bpc.mutation.ViewCount(); ok {
		_spec.SetField(blogpost.FieldViewCount, field.TypeInt, value)
		_node.ViewCount = value
	}
	if value, ok := bpc.mutation.LikeCount(); ok {
		_spec.SetField(blogpost.FieldLikeCount, field.TypeInt, value)
		_node.LikeCount = value
	}
	if value, ok := bpc.mutation.CommentCount(); ok {
		_spec.SetField(blogpost.FieldCommentCount, field.TypeInt, value)
		_node.CommentCount = value
	}
	if value, ok := bpc.mutation.PublishedAt(); ok {
		_spec.SetField(blogpost.FieldPublishedAt, field.TypeTime, value)
		_node.PublishedAt = value
	}
	if value, ok := bpc.mutation.SeriesOrder(); ok {
		_spec.SetField(blogpost.FieldSeriesOrder, field.TypeInt, value)
		_node.SeriesOrder = value
	}
	if value, ok := bpc.mutation.CreatedAt(); ok {
		_spec.SetField(blogpost.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bpc.mutation.UpdatedAt(); ok {
		_spec.SetField(blogpost.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := bpc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogpost.UserTable,
			Columns: []string{blogpost.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bpc.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogpost.CategoryTable,
			Columns: []string{blogpost.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CategoryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bpc.mutation.SeriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogpost.SeriesTable,
			Columns: []string{blogpost.SeriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogseries.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SeriesID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bpc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   blogpost.TagsTable,
			Columns: blogpost.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogtag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &BlogPostTagCreate{config: bpc.config, mutation: newBlogPostTagMutation(bpc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bpc.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogpost.TranslationsTable,
			Columns: []string{blogpost.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogposttranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bpc.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogpost.CommentsTable,
			Columns: []string{blogpost.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BlogPostCreateBulk is the builder for creating many BlogPost entities in bulk.
type BlogPostCreateBulk struct {
	config
	err      error
	builders []*BlogPostCreate
}

// Save creates the BlogPost entities in the database.
func (bpcb *BlogPostCreateBulk) Save(ctx context.Context) ([]*BlogPost, error) {
	if bpcb.err != nil {
		return nil, bpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bpcb.builders))
	nodes := make([]*BlogPost, len(bpcb.builders))
	mutators := make([]Mutator, len(bpcb.builders))
	for i := range bpcb.builders {
		func(i int, root context.Context) {
			builder := bpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlogPostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bpcb *BlogPostCreateBulk) SaveX(ctx context.Context) []*BlogPost {
	v, err := bpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bpcb *BlogPostCreateBulk) Exec(ctx context.Context) error {
	_, err := bpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpcb *BlogPostCreateBulk) ExecX(ctx context.Context) {
	if err := bpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
