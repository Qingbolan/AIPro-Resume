// Code generated by ent, DO NOT EDIT.

package publicationauthor

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the publicationauthor type in the database.
	Label = "publication_author"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPublicationID holds the string denoting the publication_id field in the database.
	FieldPublicationID = "publication_id"
	// FieldAuthorName holds the string denoting the author_name field in the database.
	FieldAuthorName = "author_name"
	// FieldAuthorOrder holds the string denoting the author_order field in the database.
	FieldAuthorOrder = "author_order"
	// FieldIsCorresponding holds the string denoting the is_corresponding field in the database.
	FieldIsCorresponding = "is_corresponding"
	// FieldAffiliation holds the string denoting the affiliation field in the database.
	FieldAffiliation = "affiliation"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgePublication holds the string denoting the publication edge name in mutations.
	EdgePublication = "publication"
	// Table holds the table name of the publicationauthor in the database.
	Table = "publication_authors"
	// PublicationTable is the table that holds the publication relation/edge.
	PublicationTable = "publication_authors"
	// PublicationInverseTable is the table name for the Publication entity.
	// It exists in this package in order to avoid circular dependency with the "publication" package.
	PublicationInverseTable = "publications"
	// PublicationColumn is the table column denoting the publication relation/edge.
	PublicationColumn = "publication_id"
)

// Columns holds all SQL columns for publicationauthor fields.
var Columns = []string{
	FieldID,
	FieldPublicationID,
	FieldAuthorName,
	FieldAuthorOrder,
	FieldIsCorresponding,
	FieldAffiliation,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// AuthorNameValidator is a validator for the "author_name" field. It is called by the builders before save.
	AuthorNameValidator func(string) error
	// DefaultIsCorresponding holds the default value on creation for the "is_corresponding" field.
	DefaultIsCorresponding bool
	// AffiliationValidator is a validator for the "affiliation" field. It is called by the builders before save.
	AffiliationValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the PublicationAuthor queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPublicationID orders the results by the publication_id field.
func ByPublicationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublicationID, opts...).ToFunc()
}

// ByAuthorName orders the results by the author_name field.
func ByAuthorName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthorName, opts...).ToFunc()
}

// ByAuthorOrder orders the results by the author_order field.
func ByAuthorOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthorOrder, opts...).ToFunc()
}

// ByIsCorresponding orders the results by the is_corresponding field.
func ByIsCorresponding(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsCorresponding, opts...).ToFunc()
}

// ByAffiliation orders the results by the affiliation field.
func ByAffiliation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAffiliation, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPublicationField orders the results by publication field.
func ByPublicationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPublicationStep(), sql.OrderByField(field, opts...))
	}
}
func newPublicationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PublicationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PublicationTable, PublicationColumn),
	)
}
