// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/projectrelationship"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProjectRelationshipCreate is the builder for creating a ProjectRelationship entity.
type ProjectRelationshipCreate struct {
	config
	mutation *ProjectRelationshipMutation
	hooks    []Hook
}

// SetSourceProjectID sets the "source_project_id" field.
func (prc *ProjectRelationshipCreate) SetSourceProjectID(u uuid.UUID) *ProjectRelationshipCreate {
	prc.mutation.SetSourceProjectID(u)
	return prc
}

// SetTargetProjectID sets the "target_project_id" field.
func (prc *ProjectRelationshipCreate) SetTargetProjectID(u uuid.UUID) *ProjectRelationshipCreate {
	prc.mutation.SetTargetProjectID(u)
	return prc
}

// SetRelationshipType sets the "relationship_type" field.
func (prc *ProjectRelationshipCreate) SetRelationshipType(s string) *ProjectRelationshipCreate {
	prc.mutation.SetRelationshipType(s)
	return prc
}

// SetCreatedAt sets the "created_at" field.
func (prc *ProjectRelationshipCreate) SetCreatedAt(t time.Time) *ProjectRelationshipCreate {
	prc.mutation.SetCreatedAt(t)
	return prc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (prc *ProjectRelationshipCreate) SetNillableCreatedAt(t *time.Time) *ProjectRelationshipCreate {
	if t != nil {
		prc.SetCreatedAt(*t)
	}
	return prc
}

// SetID sets the "id" field.
func (prc *ProjectRelationshipCreate) SetID(u uuid.UUID) *ProjectRelationshipCreate {
	prc.mutation.SetID(u)
	return prc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (prc *ProjectRelationshipCreate) SetNillableID(u *uuid.UUID) *ProjectRelationshipCreate {
	if u != nil {
		prc.SetID(*u)
	}
	return prc
}

// SetSourceProject sets the "source_project" edge to the Project entity.
func (prc *ProjectRelationshipCreate) SetSourceProject(p *Project) *ProjectRelationshipCreate {
	return prc.SetSourceProjectID(p.ID)
}

// SetTargetProject sets the "target_project" edge to the Project entity.
func (prc *ProjectRelationshipCreate) SetTargetProject(p *Project) *ProjectRelationshipCreate {
	return prc.SetTargetProjectID(p.ID)
}

// Mutation returns the ProjectRelationshipMutation object of the builder.
func (prc *ProjectRelationshipCreate) Mutation() *ProjectRelationshipMutation {
	return prc.mutation
}

// Save creates the ProjectRelationship in the database.
func (prc *ProjectRelationshipCreate) Save(ctx context.Context) (*ProjectRelationship, error) {
	prc.defaults()
	return withHooks(ctx, prc.sqlSave, prc.mutation, prc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (prc *ProjectRelationshipCreate) SaveX(ctx context.Context) *ProjectRelationship {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prc *ProjectRelationshipCreate) Exec(ctx context.Context) error {
	_, err := prc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prc *ProjectRelationshipCreate) ExecX(ctx context.Context) {
	if err := prc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prc *ProjectRelationshipCreate) defaults() {
	if _, ok := prc.mutation.CreatedAt(); !ok {
		v := projectrelationship.DefaultCreatedAt()
		prc.mutation.SetCreatedAt(v)
	}
	if _, ok := prc.mutation.ID(); !ok {
		v := projectrelationship.DefaultID()
		prc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prc *ProjectRelationshipCreate) check() error {
	if _, ok := prc.mutation.SourceProjectID(); !ok {
		return &ValidationError{Name: "source_project_id", err: errors.New(`ent: missing required field "ProjectRelationship.source_project_id"`)}
	}
	if _, ok := prc.mutation.TargetProjectID(); !ok {
		return &ValidationError{Name: "target_project_id", err: errors.New(`ent: missing required field "ProjectRelationship.target_project_id"`)}
	}
	if _, ok := prc.mutation.RelationshipType(); !ok {
		return &ValidationError{Name: "relationship_type", err: errors.New(`ent: missing required field "ProjectRelationship.relationship_type"`)}
	}
	if v, ok := prc.mutation.RelationshipType(); ok {
		if err := projectrelationship.RelationshipTypeValidator(v); err != nil {
			return &ValidationError{Name: "relationship_type", err: fmt.Errorf(`ent: validator failed for field "ProjectRelationship.relationship_type": %w`, err)}
		}
	}
	if _, ok := prc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProjectRelationship.created_at"`)}
	}
	if len(prc.mutation.SourceProjectIDs()) == 0 {
		return &ValidationError{Name: "source_project", err: errors.New(`ent: missing required edge "ProjectRelationship.source_project"`)}
	}
	if len(prc.mutation.TargetProjectIDs()) == 0 {
		return &ValidationError{Name: "target_project", err: errors.New(`ent: missing required edge "ProjectRelationship.target_project"`)}
	}
	return nil
}

func (prc *ProjectRelationshipCreate) sqlSave(ctx context.Context) (*ProjectRelationship, error) {
	if err := prc.check(); err != nil {
		return nil, err
	}
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	prc.mutation.id = &_node.ID
	prc.mutation.done = true
	return _node, nil
}

func (prc *ProjectRelationshipCreate) createSpec() (*ProjectRelationship, *sqlgraph.CreateSpec) {
	var (
		_node = &ProjectRelationship{config: prc.config}
		_spec = sqlgraph.NewCreateSpec(projectrelationship.Table, sqlgraph.NewFieldSpec(projectrelationship.FieldID, field.TypeUUID))
	)
	if id, ok := prc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := prc.mutation.RelationshipType(); ok {
		_spec.SetField(projectrelationship.FieldRelationshipType, field.TypeString, value)
		_node.RelationshipType = value
	}
	if value, ok := prc.mutation.CreatedAt(); ok {
		_spec.SetField(projectrelationship.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := prc.mutation.SourceProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectrelationship.SourceProjectTable,
			Columns: []string{projectrelationship.SourceProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SourceProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.TargetProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectrelationship.TargetProjectTable,
			Columns: []string{projectrelationship.TargetProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TargetProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProjectRelationshipCreateBulk is the builder for creating many ProjectRelationship entities in bulk.
type ProjectRelationshipCreateBulk struct {
	config
	err      error
	builders []*ProjectRelationshipCreate
}

// Save creates the ProjectRelationship entities in the database.
func (prcb *ProjectRelationshipCreateBulk) Save(ctx context.Context) ([]*ProjectRelationship, error) {
	if prcb.err != nil {
		return nil, prcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*ProjectRelationship, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectRelationshipMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *ProjectRelationshipCreateBulk) SaveX(ctx context.Context) []*ProjectRelationship {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prcb *ProjectRelationshipCreateBulk) Exec(ctx context.Context) error {
	_, err := prcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcb *ProjectRelationshipCreateBulk) ExecX(ctx context.Context) {
	if err := prcb.Exec(ctx); err != nil {
		panic(err)
	}
}
