// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/idea"
	"silan-backend/internal/ent/ideatranslation"
	"silan-backend/internal/ent/language"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// IdeaTranslation is the model entity for the IdeaTranslation schema.
type IdeaTranslation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// IdeaID holds the value of the "idea_id" field.
	IdeaID uuid.UUID `json:"idea_id,omitempty"`
	// LanguageCode holds the value of the "language_code" field.
	LanguageCode string `json:"language_code,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Abstract holds the value of the "abstract" field.
	Abstract string `json:"abstract,omitempty"`
	// Motivation holds the value of the "motivation" field.
	Motivation string `json:"motivation,omitempty"`
	// Methodology holds the value of the "methodology" field.
	Methodology string `json:"methodology,omitempty"`
	// ExpectedOutcome holds the value of the "expected_outcome" field.
	ExpectedOutcome string `json:"expected_outcome,omitempty"`
	// RequiredResources holds the value of the "required_resources" field.
	RequiredResources string `json:"required_resources,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IdeaTranslationQuery when eager-loading is set.
	Edges        IdeaTranslationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IdeaTranslationEdges holds the relations/edges for other nodes in the graph.
type IdeaTranslationEdges struct {
	// Idea holds the value of the idea edge.
	Idea *Idea `json:"idea,omitempty"`
	// Language holds the value of the language edge.
	Language *Language `json:"language,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// IdeaOrErr returns the Idea value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IdeaTranslationEdges) IdeaOrErr() (*Idea, error) {
	if e.Idea != nil {
		return e.Idea, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: idea.Label}
	}
	return nil, &NotLoadedError{edge: "idea"}
}

// LanguageOrErr returns the Language value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IdeaTranslationEdges) LanguageOrErr() (*Language, error) {
	if e.Language != nil {
		return e.Language, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: language.Label}
	}
	return nil, &NotLoadedError{edge: "language"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IdeaTranslation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ideatranslation.FieldLanguageCode, ideatranslation.FieldTitle, ideatranslation.FieldAbstract, ideatranslation.FieldMotivation, ideatranslation.FieldMethodology, ideatranslation.FieldExpectedOutcome, ideatranslation.FieldRequiredResources:
			values[i] = new(sql.NullString)
		case ideatranslation.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case ideatranslation.FieldID, ideatranslation.FieldIdeaID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IdeaTranslation fields.
func (it *IdeaTranslation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ideatranslation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				it.ID = *value
			}
		case ideatranslation.FieldIdeaID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field idea_id", values[i])
			} else if value != nil {
				it.IdeaID = *value
			}
		case ideatranslation.FieldLanguageCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language_code", values[i])
			} else if value.Valid {
				it.LanguageCode = value.String
			}
		case ideatranslation.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				it.Title = value.String
			}
		case ideatranslation.FieldAbstract:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field abstract", values[i])
			} else if value.Valid {
				it.Abstract = value.String
			}
		case ideatranslation.FieldMotivation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field motivation", values[i])
			} else if value.Valid {
				it.Motivation = value.String
			}
		case ideatranslation.FieldMethodology:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field methodology", values[i])
			} else if value.Valid {
				it.Methodology = value.String
			}
		case ideatranslation.FieldExpectedOutcome:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field expected_outcome", values[i])
			} else if value.Valid {
				it.ExpectedOutcome = value.String
			}
		case ideatranslation.FieldRequiredResources:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field required_resources", values[i])
			} else if value.Valid {
				it.RequiredResources = value.String
			}
		case ideatranslation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				it.CreatedAt = value.Time
			}
		default:
			it.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IdeaTranslation.
// This includes values selected through modifiers, order, etc.
func (it *IdeaTranslation) Value(name string) (ent.Value, error) {
	return it.selectValues.Get(name)
}

// QueryIdea queries the "idea" edge of the IdeaTranslation entity.
func (it *IdeaTranslation) QueryIdea() *IdeaQuery {
	return NewIdeaTranslationClient(it.config).QueryIdea(it)
}

// QueryLanguage queries the "language" edge of the IdeaTranslation entity.
func (it *IdeaTranslation) QueryLanguage() *LanguageQuery {
	return NewIdeaTranslationClient(it.config).QueryLanguage(it)
}

// Update returns a builder for updating this IdeaTranslation.
// Note that you need to call IdeaTranslation.Unwrap() before calling this method if this IdeaTranslation
// was returned from a transaction, and the transaction was committed or rolled back.
func (it *IdeaTranslation) Update() *IdeaTranslationUpdateOne {
	return NewIdeaTranslationClient(it.config).UpdateOne(it)
}

// Unwrap unwraps the IdeaTranslation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (it *IdeaTranslation) Unwrap() *IdeaTranslation {
	_tx, ok := it.config.driver.(*txDriver)
	if !ok {
		panic("ent: IdeaTranslation is not a transactional entity")
	}
	it.config.driver = _tx.drv
	return it
}

// String implements the fmt.Stringer.
func (it *IdeaTranslation) String() string {
	var builder strings.Builder
	builder.WriteString("IdeaTranslation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", it.ID))
	builder.WriteString("idea_id=")
	builder.WriteString(fmt.Sprintf("%v", it.IdeaID))
	builder.WriteString(", ")
	builder.WriteString("language_code=")
	builder.WriteString(it.LanguageCode)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(it.Title)
	builder.WriteString(", ")
	builder.WriteString("abstract=")
	builder.WriteString(it.Abstract)
	builder.WriteString(", ")
	builder.WriteString("motivation=")
	builder.WriteString(it.Motivation)
	builder.WriteString(", ")
	builder.WriteString("methodology=")
	builder.WriteString(it.Methodology)
	builder.WriteString(", ")
	builder.WriteString("expected_outcome=")
	builder.WriteString(it.ExpectedOutcome)
	builder.WriteString(", ")
	builder.WriteString("required_resources=")
	builder.WriteString(it.RequiredResources)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(it.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// IdeaTranslations is a parsable slice of IdeaTranslation.
type IdeaTranslations []*IdeaTranslation
