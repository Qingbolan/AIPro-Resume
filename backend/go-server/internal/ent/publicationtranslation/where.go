// Code generated by ent, DO NOT EDIT.

package publicationtranslation

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldLTE(FieldID, id))
}

// PublicationID applies equality check predicate on the "publication_id" field. It's identical to PublicationIDEQ.
func PublicationID(v uuid.UUID) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldEQ(FieldPublicationID, v))
}

// LanguageCode applies equality check predicate on the "language_code" field. It's identical to LanguageCodeEQ.
func LanguageCode(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldEQ(FieldLanguageCode, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldEQ(FieldTitle, v))
}

// JournalName applies equality check predicate on the "journal_name" field. It's identical to JournalNameEQ.
func JournalName(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldEQ(FieldJournalName, v))
}

// ConferenceName applies equality check predicate on the "conference_name" field. It's identical to ConferenceNameEQ.
func ConferenceName(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldEQ(FieldConferenceName, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldEQ(FieldCreatedAt, v))
}

// PublicationIDEQ applies the EQ predicate on the "publication_id" field.
func PublicationIDEQ(v uuid.UUID) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldEQ(FieldPublicationID, v))
}

// PublicationIDNEQ applies the NEQ predicate on the "publication_id" field.
func PublicationIDNEQ(v uuid.UUID) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldNEQ(FieldPublicationID, v))
}

// PublicationIDIn applies the In predicate on the "publication_id" field.
func PublicationIDIn(vs ...uuid.UUID) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldIn(FieldPublicationID, vs...))
}

// PublicationIDNotIn applies the NotIn predicate on the "publication_id" field.
func PublicationIDNotIn(vs ...uuid.UUID) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldNotIn(FieldPublicationID, vs...))
}

// LanguageCodeEQ applies the EQ predicate on the "language_code" field.
func LanguageCodeEQ(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldEQ(FieldLanguageCode, v))
}

// LanguageCodeNEQ applies the NEQ predicate on the "language_code" field.
func LanguageCodeNEQ(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldNEQ(FieldLanguageCode, v))
}

// LanguageCodeIn applies the In predicate on the "language_code" field.
func LanguageCodeIn(vs ...string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldIn(FieldLanguageCode, vs...))
}

// LanguageCodeNotIn applies the NotIn predicate on the "language_code" field.
func LanguageCodeNotIn(vs ...string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldNotIn(FieldLanguageCode, vs...))
}

// LanguageCodeGT applies the GT predicate on the "language_code" field.
func LanguageCodeGT(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldGT(FieldLanguageCode, v))
}

// LanguageCodeGTE applies the GTE predicate on the "language_code" field.
func LanguageCodeGTE(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldGTE(FieldLanguageCode, v))
}

// LanguageCodeLT applies the LT predicate on the "language_code" field.
func LanguageCodeLT(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldLT(FieldLanguageCode, v))
}

// LanguageCodeLTE applies the LTE predicate on the "language_code" field.
func LanguageCodeLTE(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldLTE(FieldLanguageCode, v))
}

// LanguageCodeContains applies the Contains predicate on the "language_code" field.
func LanguageCodeContains(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldContains(FieldLanguageCode, v))
}

// LanguageCodeHasPrefix applies the HasPrefix predicate on the "language_code" field.
func LanguageCodeHasPrefix(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldHasPrefix(FieldLanguageCode, v))
}

// LanguageCodeHasSuffix applies the HasSuffix predicate on the "language_code" field.
func LanguageCodeHasSuffix(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldHasSuffix(FieldLanguageCode, v))
}

// LanguageCodeEqualFold applies the EqualFold predicate on the "language_code" field.
func LanguageCodeEqualFold(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldEqualFold(FieldLanguageCode, v))
}

// LanguageCodeContainsFold applies the ContainsFold predicate on the "language_code" field.
func LanguageCodeContainsFold(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldContainsFold(FieldLanguageCode, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldContainsFold(FieldTitle, v))
}

// JournalNameEQ applies the EQ predicate on the "journal_name" field.
func JournalNameEQ(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldEQ(FieldJournalName, v))
}

// JournalNameNEQ applies the NEQ predicate on the "journal_name" field.
func JournalNameNEQ(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldNEQ(FieldJournalName, v))
}

// JournalNameIn applies the In predicate on the "journal_name" field.
func JournalNameIn(vs ...string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldIn(FieldJournalName, vs...))
}

// JournalNameNotIn applies the NotIn predicate on the "journal_name" field.
func JournalNameNotIn(vs ...string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldNotIn(FieldJournalName, vs...))
}

// JournalNameGT applies the GT predicate on the "journal_name" field.
func JournalNameGT(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldGT(FieldJournalName, v))
}

// JournalNameGTE applies the GTE predicate on the "journal_name" field.
func JournalNameGTE(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldGTE(FieldJournalName, v))
}

// JournalNameLT applies the LT predicate on the "journal_name" field.
func JournalNameLT(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldLT(FieldJournalName, v))
}

// JournalNameLTE applies the LTE predicate on the "journal_name" field.
func JournalNameLTE(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldLTE(FieldJournalName, v))
}

// JournalNameContains applies the Contains predicate on the "journal_name" field.
func JournalNameContains(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldContains(FieldJournalName, v))
}

// JournalNameHasPrefix applies the HasPrefix predicate on the "journal_name" field.
func JournalNameHasPrefix(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldHasPrefix(FieldJournalName, v))
}

// JournalNameHasSuffix applies the HasSuffix predicate on the "journal_name" field.
func JournalNameHasSuffix(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldHasSuffix(FieldJournalName, v))
}

// JournalNameIsNil applies the IsNil predicate on the "journal_name" field.
func JournalNameIsNil() predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldIsNull(FieldJournalName))
}

// JournalNameNotNil applies the NotNil predicate on the "journal_name" field.
func JournalNameNotNil() predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldNotNull(FieldJournalName))
}

// JournalNameEqualFold applies the EqualFold predicate on the "journal_name" field.
func JournalNameEqualFold(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldEqualFold(FieldJournalName, v))
}

// JournalNameContainsFold applies the ContainsFold predicate on the "journal_name" field.
func JournalNameContainsFold(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldContainsFold(FieldJournalName, v))
}

// ConferenceNameEQ applies the EQ predicate on the "conference_name" field.
func ConferenceNameEQ(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldEQ(FieldConferenceName, v))
}

// ConferenceNameNEQ applies the NEQ predicate on the "conference_name" field.
func ConferenceNameNEQ(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldNEQ(FieldConferenceName, v))
}

// ConferenceNameIn applies the In predicate on the "conference_name" field.
func ConferenceNameIn(vs ...string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldIn(FieldConferenceName, vs...))
}

// ConferenceNameNotIn applies the NotIn predicate on the "conference_name" field.
func ConferenceNameNotIn(vs ...string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldNotIn(FieldConferenceName, vs...))
}

// ConferenceNameGT applies the GT predicate on the "conference_name" field.
func ConferenceNameGT(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldGT(FieldConferenceName, v))
}

// ConferenceNameGTE applies the GTE predicate on the "conference_name" field.
func ConferenceNameGTE(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldGTE(FieldConferenceName, v))
}

// ConferenceNameLT applies the LT predicate on the "conference_name" field.
func ConferenceNameLT(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldLT(FieldConferenceName, v))
}

// ConferenceNameLTE applies the LTE predicate on the "conference_name" field.
func ConferenceNameLTE(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldLTE(FieldConferenceName, v))
}

// ConferenceNameContains applies the Contains predicate on the "conference_name" field.
func ConferenceNameContains(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldContains(FieldConferenceName, v))
}

// ConferenceNameHasPrefix applies the HasPrefix predicate on the "conference_name" field.
func ConferenceNameHasPrefix(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldHasPrefix(FieldConferenceName, v))
}

// ConferenceNameHasSuffix applies the HasSuffix predicate on the "conference_name" field.
func ConferenceNameHasSuffix(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldHasSuffix(FieldConferenceName, v))
}

// ConferenceNameIsNil applies the IsNil predicate on the "conference_name" field.
func ConferenceNameIsNil() predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldIsNull(FieldConferenceName))
}

// ConferenceNameNotNil applies the NotNil predicate on the "conference_name" field.
func ConferenceNameNotNil() predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldNotNull(FieldConferenceName))
}

// ConferenceNameEqualFold applies the EqualFold predicate on the "conference_name" field.
func ConferenceNameEqualFold(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldEqualFold(FieldConferenceName, v))
}

// ConferenceNameContainsFold applies the ContainsFold predicate on the "conference_name" field.
func ConferenceNameContainsFold(v string) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldContainsFold(FieldConferenceName, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.FieldLTE(FieldCreatedAt, v))
}

// HasPublication applies the HasEdge predicate on the "publication" edge.
func HasPublication() predicate.PublicationTranslation {
	return predicate.PublicationTranslation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PublicationTable, PublicationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPublicationWith applies the HasEdge predicate on the "publication" edge with a given conditions (other predicates).
func HasPublicationWith(preds ...predicate.Publication) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(func(s *sql.Selector) {
		step := newPublicationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLanguage applies the HasEdge predicate on the "language" edge.
func HasLanguage() predicate.PublicationTranslation {
	return predicate.PublicationTranslation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LanguageTable, LanguageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLanguageWith applies the HasEdge predicate on the "language" edge with a given conditions (other predicates).
func HasLanguageWith(preds ...predicate.Language) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(func(s *sql.Selector) {
		step := newLanguageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PublicationTranslation) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PublicationTranslation) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PublicationTranslation) predicate.PublicationTranslation {
	return predicate.PublicationTranslation(sql.NotPredicates(p))
}
