// Code generated by ent, DO NOT EDIT.

package publicationtranslation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the publicationtranslation type in the database.
	Label = "publication_translation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPublicationID holds the string denoting the publication_id field in the database.
	FieldPublicationID = "publication_id"
	// FieldLanguageCode holds the string denoting the language_code field in the database.
	FieldLanguageCode = "language_code"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldJournalName holds the string denoting the journal_name field in the database.
	FieldJournalName = "journal_name"
	// FieldConferenceName holds the string denoting the conference_name field in the database.
	FieldConferenceName = "conference_name"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgePublication holds the string denoting the publication edge name in mutations.
	EdgePublication = "publication"
	// EdgeLanguage holds the string denoting the language edge name in mutations.
	EdgeLanguage = "language"
	// LanguageFieldID holds the string denoting the ID field of the Language.
	LanguageFieldID = "code"
	// Table holds the table name of the publicationtranslation in the database.
	Table = "publication_translations"
	// PublicationTable is the table that holds the publication relation/edge.
	PublicationTable = "publication_translations"
	// PublicationInverseTable is the table name for the Publication entity.
	// It exists in this package in order to avoid circular dependency with the "publication" package.
	PublicationInverseTable = "publications"
	// PublicationColumn is the table column denoting the publication relation/edge.
	PublicationColumn = "publication_id"
	// LanguageTable is the table that holds the language relation/edge.
	LanguageTable = "publication_translations"
	// LanguageInverseTable is the table name for the Language entity.
	// It exists in this package in order to avoid circular dependency with the "language" package.
	LanguageInverseTable = "languages"
	// LanguageColumn is the table column denoting the language relation/edge.
	LanguageColumn = "language_code"
)

// Columns holds all SQL columns for publicationtranslation fields.
var Columns = []string{
	FieldID,
	FieldPublicationID,
	FieldLanguageCode,
	FieldTitle,
	FieldJournalName,
	FieldConferenceName,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// LanguageCodeValidator is a validator for the "language_code" field. It is called by the builders before save.
	LanguageCodeValidator func(string) error
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// JournalNameValidator is a validator for the "journal_name" field. It is called by the builders before save.
	JournalNameValidator func(string) error
	// ConferenceNameValidator is a validator for the "conference_name" field. It is called by the builders before save.
	ConferenceNameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the PublicationTranslation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPublicationID orders the results by the publication_id field.
func ByPublicationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublicationID, opts...).ToFunc()
}

// ByLanguageCode orders the results by the language_code field.
func ByLanguageCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguageCode, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByJournalName orders the results by the journal_name field.
func ByJournalName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJournalName, opts...).ToFunc()
}

// ByConferenceName orders the results by the conference_name field.
func ByConferenceName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConferenceName, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByPublicationField orders the results by publication field.
func ByPublicationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPublicationStep(), sql.OrderByField(field, opts...))
	}
}

// ByLanguageField orders the results by language field.
func ByLanguageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLanguageStep(), sql.OrderByField(field, opts...))
	}
}
func newPublicationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PublicationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PublicationTable, PublicationColumn),
	)
}
func newLanguageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LanguageInverseTable, LanguageFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LanguageTable, LanguageColumn),
	)
}
