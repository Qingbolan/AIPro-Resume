// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/personalinfo"
	"silan-backend/internal/ent/personalinfotranslation"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/sociallink"
	"silan-backend/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PersonalInfoUpdate is the builder for updating PersonalInfo entities.
type PersonalInfoUpdate struct {
	config
	hooks    []Hook
	mutation *PersonalInfoMutation
}

// Where appends a list predicates to the PersonalInfoUpdate builder.
func (piu *PersonalInfoUpdate) Where(ps ...predicate.PersonalInfo) *PersonalInfoUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetUserID sets the "user_id" field.
func (piu *PersonalInfoUpdate) SetUserID(u uuid.UUID) *PersonalInfoUpdate {
	piu.mutation.SetUserID(u)
	return piu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillableUserID(u *uuid.UUID) *PersonalInfoUpdate {
	if u != nil {
		piu.SetUserID(*u)
	}
	return piu
}

// SetFullName sets the "full_name" field.
func (piu *PersonalInfoUpdate) SetFullName(s string) *PersonalInfoUpdate {
	piu.mutation.SetFullName(s)
	return piu
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillableFullName(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetFullName(*s)
	}
	return piu
}

// SetTitle sets the "title" field.
func (piu *PersonalInfoUpdate) SetTitle(s string) *PersonalInfoUpdate {
	piu.mutation.SetTitle(s)
	return piu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillableTitle(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetTitle(*s)
	}
	return piu
}

// SetCurrentStatus sets the "current_status" field.
func (piu *PersonalInfoUpdate) SetCurrentStatus(s string) *PersonalInfoUpdate {
	piu.mutation.SetCurrentStatus(s)
	return piu
}

// SetNillableCurrentStatus sets the "current_status" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillableCurrentStatus(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetCurrentStatus(*s)
	}
	return piu
}

// ClearCurrentStatus clears the value of the "current_status" field.
func (piu *PersonalInfoUpdate) ClearCurrentStatus() *PersonalInfoUpdate {
	piu.mutation.ClearCurrentStatus()
	return piu
}

// SetPhone sets the "phone" field.
func (piu *PersonalInfoUpdate) SetPhone(s string) *PersonalInfoUpdate {
	piu.mutation.SetPhone(s)
	return piu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillablePhone(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetPhone(*s)
	}
	return piu
}

// ClearPhone clears the value of the "phone" field.
func (piu *PersonalInfoUpdate) ClearPhone() *PersonalInfoUpdate {
	piu.mutation.ClearPhone()
	return piu
}

// SetEmail sets the "email" field.
func (piu *PersonalInfoUpdate) SetEmail(s string) *PersonalInfoUpdate {
	piu.mutation.SetEmail(s)
	return piu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillableEmail(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetEmail(*s)
	}
	return piu
}

// ClearEmail clears the value of the "email" field.
func (piu *PersonalInfoUpdate) ClearEmail() *PersonalInfoUpdate {
	piu.mutation.ClearEmail()
	return piu
}

// SetLocation sets the "location" field.
func (piu *PersonalInfoUpdate) SetLocation(s string) *PersonalInfoUpdate {
	piu.mutation.SetLocation(s)
	return piu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillableLocation(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetLocation(*s)
	}
	return piu
}

// ClearLocation clears the value of the "location" field.
func (piu *PersonalInfoUpdate) ClearLocation() *PersonalInfoUpdate {
	piu.mutation.ClearLocation()
	return piu
}

// SetWebsite sets the "website" field.
func (piu *PersonalInfoUpdate) SetWebsite(s string) *PersonalInfoUpdate {
	piu.mutation.SetWebsite(s)
	return piu
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillableWebsite(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetWebsite(*s)
	}
	return piu
}

// ClearWebsite clears the value of the "website" field.
func (piu *PersonalInfoUpdate) ClearWebsite() *PersonalInfoUpdate {
	piu.mutation.ClearWebsite()
	return piu
}

// SetAvatarURL sets the "avatar_url" field.
func (piu *PersonalInfoUpdate) SetAvatarURL(s string) *PersonalInfoUpdate {
	piu.mutation.SetAvatarURL(s)
	return piu
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillableAvatarURL(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetAvatarURL(*s)
	}
	return piu
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (piu *PersonalInfoUpdate) ClearAvatarURL() *PersonalInfoUpdate {
	piu.mutation.ClearAvatarURL()
	return piu
}

// SetIsPrimary sets the "is_primary" field.
func (piu *PersonalInfoUpdate) SetIsPrimary(b bool) *PersonalInfoUpdate {
	piu.mutation.SetIsPrimary(b)
	return piu
}

// SetNillableIsPrimary sets the "is_primary" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillableIsPrimary(b *bool) *PersonalInfoUpdate {
	if b != nil {
		piu.SetIsPrimary(*b)
	}
	return piu
}

// SetUpdatedAt sets the "updated_at" field.
func (piu *PersonalInfoUpdate) SetUpdatedAt(t time.Time) *PersonalInfoUpdate {
	piu.mutation.SetUpdatedAt(t)
	return piu
}

// SetUser sets the "user" edge to the User entity.
func (piu *PersonalInfoUpdate) SetUser(u *User) *PersonalInfoUpdate {
	return piu.SetUserID(u.ID)
}

// AddTranslationIDs adds the "translations" edge to the PersonalInfoTranslation entity by IDs.
func (piu *PersonalInfoUpdate) AddTranslationIDs(ids ...uuid.UUID) *PersonalInfoUpdate {
	piu.mutation.AddTranslationIDs(ids...)
	return piu
}

// AddTranslations adds the "translations" edges to the PersonalInfoTranslation entity.
func (piu *PersonalInfoUpdate) AddTranslations(p ...*PersonalInfoTranslation) *PersonalInfoUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piu.AddTranslationIDs(ids...)
}

// AddSocialLinkIDs adds the "social_links" edge to the SocialLink entity by IDs.
func (piu *PersonalInfoUpdate) AddSocialLinkIDs(ids ...uuid.UUID) *PersonalInfoUpdate {
	piu.mutation.AddSocialLinkIDs(ids...)
	return piu
}

// AddSocialLinks adds the "social_links" edges to the SocialLink entity.
func (piu *PersonalInfoUpdate) AddSocialLinks(s ...*SocialLink) *PersonalInfoUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return piu.AddSocialLinkIDs(ids...)
}

// Mutation returns the PersonalInfoMutation object of the builder.
func (piu *PersonalInfoUpdate) Mutation() *PersonalInfoMutation {
	return piu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (piu *PersonalInfoUpdate) ClearUser() *PersonalInfoUpdate {
	piu.mutation.ClearUser()
	return piu
}

// ClearTranslations clears all "translations" edges to the PersonalInfoTranslation entity.
func (piu *PersonalInfoUpdate) ClearTranslations() *PersonalInfoUpdate {
	piu.mutation.ClearTranslations()
	return piu
}

// RemoveTranslationIDs removes the "translations" edge to PersonalInfoTranslation entities by IDs.
func (piu *PersonalInfoUpdate) RemoveTranslationIDs(ids ...uuid.UUID) *PersonalInfoUpdate {
	piu.mutation.RemoveTranslationIDs(ids...)
	return piu
}

// RemoveTranslations removes "translations" edges to PersonalInfoTranslation entities.
func (piu *PersonalInfoUpdate) RemoveTranslations(p ...*PersonalInfoTranslation) *PersonalInfoUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piu.RemoveTranslationIDs(ids...)
}

// ClearSocialLinks clears all "social_links" edges to the SocialLink entity.
func (piu *PersonalInfoUpdate) ClearSocialLinks() *PersonalInfoUpdate {
	piu.mutation.ClearSocialLinks()
	return piu
}

// RemoveSocialLinkIDs removes the "social_links" edge to SocialLink entities by IDs.
func (piu *PersonalInfoUpdate) RemoveSocialLinkIDs(ids ...uuid.UUID) *PersonalInfoUpdate {
	piu.mutation.RemoveSocialLinkIDs(ids...)
	return piu
}

// RemoveSocialLinks removes "social_links" edges to SocialLink entities.
func (piu *PersonalInfoUpdate) RemoveSocialLinks(s ...*SocialLink) *PersonalInfoUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return piu.RemoveSocialLinkIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *PersonalInfoUpdate) Save(ctx context.Context) (int, error) {
	piu.defaults()
	return withHooks(ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *PersonalInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *PersonalInfoUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *PersonalInfoUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (piu *PersonalInfoUpdate) defaults() {
	if _, ok := piu.mutation.UpdatedAt(); !ok {
		v := personalinfo.UpdateDefaultUpdatedAt()
		piu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piu *PersonalInfoUpdate) check() error {
	if v, ok := piu.mutation.FullName(); ok {
		if err := personalinfo.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.full_name": %w`, err)}
		}
	}
	if v, ok := piu.mutation.Title(); ok {
		if err := personalinfo.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.title": %w`, err)}
		}
	}
	if v, ok := piu.mutation.Phone(); ok {
		if err := personalinfo.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.phone": %w`, err)}
		}
	}
	if v, ok := piu.mutation.Email(); ok {
		if err := personalinfo.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.email": %w`, err)}
		}
	}
	if v, ok := piu.mutation.Location(); ok {
		if err := personalinfo.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.location": %w`, err)}
		}
	}
	if v, ok := piu.mutation.Website(); ok {
		if err := personalinfo.WebsiteValidator(v); err != nil {
			return &ValidationError{Name: "website", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.website": %w`, err)}
		}
	}
	if v, ok := piu.mutation.AvatarURL(); ok {
		if err := personalinfo.AvatarURLValidator(v); err != nil {
			return &ValidationError{Name: "avatar_url", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.avatar_url": %w`, err)}
		}
	}
	if piu.mutation.UserCleared() && len(piu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PersonalInfo.user"`)
	}
	return nil
}

func (piu *PersonalInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := piu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(personalinfo.Table, personalinfo.Columns, sqlgraph.NewFieldSpec(personalinfo.FieldID, field.TypeUUID))
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.FullName(); ok {
		_spec.SetField(personalinfo.FieldFullName, field.TypeString, value)
	}
	if value, ok := piu.mutation.Title(); ok {
		_spec.SetField(personalinfo.FieldTitle, field.TypeString, value)
	}
	if value, ok := piu.mutation.CurrentStatus(); ok {
		_spec.SetField(personalinfo.FieldCurrentStatus, field.TypeString, value)
	}
	if piu.mutation.CurrentStatusCleared() {
		_spec.ClearField(personalinfo.FieldCurrentStatus, field.TypeString)
	}
	if value, ok := piu.mutation.Phone(); ok {
		_spec.SetField(personalinfo.FieldPhone, field.TypeString, value)
	}
	if piu.mutation.PhoneCleared() {
		_spec.ClearField(personalinfo.FieldPhone, field.TypeString)
	}
	if value, ok := piu.mutation.Email(); ok {
		_spec.SetField(personalinfo.FieldEmail, field.TypeString, value)
	}
	if piu.mutation.EmailCleared() {
		_spec.ClearField(personalinfo.FieldEmail, field.TypeString)
	}
	if value, ok := piu.mutation.Location(); ok {
		_spec.SetField(personalinfo.FieldLocation, field.TypeString, value)
	}
	if piu.mutation.LocationCleared() {
		_spec.ClearField(personalinfo.FieldLocation, field.TypeString)
	}
	if value, ok := piu.mutation.Website(); ok {
		_spec.SetField(personalinfo.FieldWebsite, field.TypeString, value)
	}
	if piu.mutation.WebsiteCleared() {
		_spec.ClearField(personalinfo.FieldWebsite, field.TypeString)
	}
	if value, ok := piu.mutation.AvatarURL(); ok {
		_spec.SetField(personalinfo.FieldAvatarURL, field.TypeString, value)
	}
	if piu.mutation.AvatarURLCleared() {
		_spec.ClearField(personalinfo.FieldAvatarURL, field.TypeString)
	}
	if value, ok := piu.mutation.IsPrimary(); ok {
		_spec.SetField(personalinfo.FieldIsPrimary, field.TypeBool, value)
	}
	if value, ok := piu.mutation.UpdatedAt(); ok {
		_spec.SetField(personalinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if piu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personalinfo.UserTable,
			Columns: []string{personalinfo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personalinfo.UserTable,
			Columns: []string{personalinfo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piu.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personalinfo.TranslationsTable,
			Columns: []string{personalinfo.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalinfotranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !piu.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personalinfo.TranslationsTable,
			Columns: []string{personalinfo.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalinfotranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personalinfo.TranslationsTable,
			Columns: []string{personalinfo.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalinfotranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piu.mutation.SocialLinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personalinfo.SocialLinksTable,
			Columns: []string{personalinfo.SocialLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sociallink.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.RemovedSocialLinksIDs(); len(nodes) > 0 && !piu.mutation.SocialLinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personalinfo.SocialLinksTable,
			Columns: []string{personalinfo.SocialLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sociallink.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.SocialLinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personalinfo.SocialLinksTable,
			Columns: []string{personalinfo.SocialLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sociallink.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personalinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// PersonalInfoUpdateOne is the builder for updating a single PersonalInfo entity.
type PersonalInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PersonalInfoMutation
}

// SetUserID sets the "user_id" field.
func (piuo *PersonalInfoUpdateOne) SetUserID(u uuid.UUID) *PersonalInfoUpdateOne {
	piuo.mutation.SetUserID(u)
	return piuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillableUserID(u *uuid.UUID) *PersonalInfoUpdateOne {
	if u != nil {
		piuo.SetUserID(*u)
	}
	return piuo
}

// SetFullName sets the "full_name" field.
func (piuo *PersonalInfoUpdateOne) SetFullName(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetFullName(s)
	return piuo
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillableFullName(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetFullName(*s)
	}
	return piuo
}

// SetTitle sets the "title" field.
func (piuo *PersonalInfoUpdateOne) SetTitle(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetTitle(s)
	return piuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillableTitle(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetTitle(*s)
	}
	return piuo
}

// SetCurrentStatus sets the "current_status" field.
func (piuo *PersonalInfoUpdateOne) SetCurrentStatus(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetCurrentStatus(s)
	return piuo
}

// SetNillableCurrentStatus sets the "current_status" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillableCurrentStatus(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetCurrentStatus(*s)
	}
	return piuo
}

// ClearCurrentStatus clears the value of the "current_status" field.
func (piuo *PersonalInfoUpdateOne) ClearCurrentStatus() *PersonalInfoUpdateOne {
	piuo.mutation.ClearCurrentStatus()
	return piuo
}

// SetPhone sets the "phone" field.
func (piuo *PersonalInfoUpdateOne) SetPhone(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetPhone(s)
	return piuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillablePhone(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetPhone(*s)
	}
	return piuo
}

// ClearPhone clears the value of the "phone" field.
func (piuo *PersonalInfoUpdateOne) ClearPhone() *PersonalInfoUpdateOne {
	piuo.mutation.ClearPhone()
	return piuo
}

// SetEmail sets the "email" field.
func (piuo *PersonalInfoUpdateOne) SetEmail(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetEmail(s)
	return piuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillableEmail(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetEmail(*s)
	}
	return piuo
}

// ClearEmail clears the value of the "email" field.
func (piuo *PersonalInfoUpdateOne) ClearEmail() *PersonalInfoUpdateOne {
	piuo.mutation.ClearEmail()
	return piuo
}

// SetLocation sets the "location" field.
func (piuo *PersonalInfoUpdateOne) SetLocation(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetLocation(s)
	return piuo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillableLocation(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetLocation(*s)
	}
	return piuo
}

// ClearLocation clears the value of the "location" field.
func (piuo *PersonalInfoUpdateOne) ClearLocation() *PersonalInfoUpdateOne {
	piuo.mutation.ClearLocation()
	return piuo
}

// SetWebsite sets the "website" field.
func (piuo *PersonalInfoUpdateOne) SetWebsite(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetWebsite(s)
	return piuo
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillableWebsite(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetWebsite(*s)
	}
	return piuo
}

// ClearWebsite clears the value of the "website" field.
func (piuo *PersonalInfoUpdateOne) ClearWebsite() *PersonalInfoUpdateOne {
	piuo.mutation.ClearWebsite()
	return piuo
}

// SetAvatarURL sets the "avatar_url" field.
func (piuo *PersonalInfoUpdateOne) SetAvatarURL(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetAvatarURL(s)
	return piuo
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillableAvatarURL(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetAvatarURL(*s)
	}
	return piuo
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (piuo *PersonalInfoUpdateOne) ClearAvatarURL() *PersonalInfoUpdateOne {
	piuo.mutation.ClearAvatarURL()
	return piuo
}

// SetIsPrimary sets the "is_primary" field.
func (piuo *PersonalInfoUpdateOne) SetIsPrimary(b bool) *PersonalInfoUpdateOne {
	piuo.mutation.SetIsPrimary(b)
	return piuo
}

// SetNillableIsPrimary sets the "is_primary" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillableIsPrimary(b *bool) *PersonalInfoUpdateOne {
	if b != nil {
		piuo.SetIsPrimary(*b)
	}
	return piuo
}

// SetUpdatedAt sets the "updated_at" field.
func (piuo *PersonalInfoUpdateOne) SetUpdatedAt(t time.Time) *PersonalInfoUpdateOne {
	piuo.mutation.SetUpdatedAt(t)
	return piuo
}

// SetUser sets the "user" edge to the User entity.
func (piuo *PersonalInfoUpdateOne) SetUser(u *User) *PersonalInfoUpdateOne {
	return piuo.SetUserID(u.ID)
}

// AddTranslationIDs adds the "translations" edge to the PersonalInfoTranslation entity by IDs.
func (piuo *PersonalInfoUpdateOne) AddTranslationIDs(ids ...uuid.UUID) *PersonalInfoUpdateOne {
	piuo.mutation.AddTranslationIDs(ids...)
	return piuo
}

// AddTranslations adds the "translations" edges to the PersonalInfoTranslation entity.
func (piuo *PersonalInfoUpdateOne) AddTranslations(p ...*PersonalInfoTranslation) *PersonalInfoUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piuo.AddTranslationIDs(ids...)
}

// AddSocialLinkIDs adds the "social_links" edge to the SocialLink entity by IDs.
func (piuo *PersonalInfoUpdateOne) AddSocialLinkIDs(ids ...uuid.UUID) *PersonalInfoUpdateOne {
	piuo.mutation.AddSocialLinkIDs(ids...)
	return piuo
}

// AddSocialLinks adds the "social_links" edges to the SocialLink entity.
func (piuo *PersonalInfoUpdateOne) AddSocialLinks(s ...*SocialLink) *PersonalInfoUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return piuo.AddSocialLinkIDs(ids...)
}

// Mutation returns the PersonalInfoMutation object of the builder.
func (piuo *PersonalInfoUpdateOne) Mutation() *PersonalInfoMutation {
	return piuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (piuo *PersonalInfoUpdateOne) ClearUser() *PersonalInfoUpdateOne {
	piuo.mutation.ClearUser()
	return piuo
}

// ClearTranslations clears all "translations" edges to the PersonalInfoTranslation entity.
func (piuo *PersonalInfoUpdateOne) ClearTranslations() *PersonalInfoUpdateOne {
	piuo.mutation.ClearTranslations()
	return piuo
}

// RemoveTranslationIDs removes the "translations" edge to PersonalInfoTranslation entities by IDs.
func (piuo *PersonalInfoUpdateOne) RemoveTranslationIDs(ids ...uuid.UUID) *PersonalInfoUpdateOne {
	piuo.mutation.RemoveTranslationIDs(ids...)
	return piuo
}

// RemoveTranslations removes "translations" edges to PersonalInfoTranslation entities.
func (piuo *PersonalInfoUpdateOne) RemoveTranslations(p ...*PersonalInfoTranslation) *PersonalInfoUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piuo.RemoveTranslationIDs(ids...)
}

// ClearSocialLinks clears all "social_links" edges to the SocialLink entity.
func (piuo *PersonalInfoUpdateOne) ClearSocialLinks() *PersonalInfoUpdateOne {
	piuo.mutation.ClearSocialLinks()
	return piuo
}

// RemoveSocialLinkIDs removes the "social_links" edge to SocialLink entities by IDs.
func (piuo *PersonalInfoUpdateOne) RemoveSocialLinkIDs(ids ...uuid.UUID) *PersonalInfoUpdateOne {
	piuo.mutation.RemoveSocialLinkIDs(ids...)
	return piuo
}

// RemoveSocialLinks removes "social_links" edges to SocialLink entities.
func (piuo *PersonalInfoUpdateOne) RemoveSocialLinks(s ...*SocialLink) *PersonalInfoUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return piuo.RemoveSocialLinkIDs(ids...)
}

// Where appends a list predicates to the PersonalInfoUpdate builder.
func (piuo *PersonalInfoUpdateOne) Where(ps ...predicate.PersonalInfo) *PersonalInfoUpdateOne {
	piuo.mutation.Where(ps...)
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *PersonalInfoUpdateOne) Select(field string, fields ...string) *PersonalInfoUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated PersonalInfo entity.
func (piuo *PersonalInfoUpdateOne) Save(ctx context.Context) (*PersonalInfo, error) {
	piuo.defaults()
	return withHooks(ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *PersonalInfoUpdateOne) SaveX(ctx context.Context) *PersonalInfo {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *PersonalInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *PersonalInfoUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (piuo *PersonalInfoUpdateOne) defaults() {
	if _, ok := piuo.mutation.UpdatedAt(); !ok {
		v := personalinfo.UpdateDefaultUpdatedAt()
		piuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piuo *PersonalInfoUpdateOne) check() error {
	if v, ok := piuo.mutation.FullName(); ok {
		if err := personalinfo.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.full_name": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.Title(); ok {
		if err := personalinfo.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.title": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.Phone(); ok {
		if err := personalinfo.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.phone": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.Email(); ok {
		if err := personalinfo.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.email": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.Location(); ok {
		if err := personalinfo.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.location": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.Website(); ok {
		if err := personalinfo.WebsiteValidator(v); err != nil {
			return &ValidationError{Name: "website", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.website": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.AvatarURL(); ok {
		if err := personalinfo.AvatarURLValidator(v); err != nil {
			return &ValidationError{Name: "avatar_url", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.avatar_url": %w`, err)}
		}
	}
	if piuo.mutation.UserCleared() && len(piuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PersonalInfo.user"`)
	}
	return nil
}

func (piuo *PersonalInfoUpdateOne) sqlSave(ctx context.Context) (_node *PersonalInfo, err error) {
	if err := piuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(personalinfo.Table, personalinfo.Columns, sqlgraph.NewFieldSpec(personalinfo.FieldID, field.TypeUUID))
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PersonalInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, personalinfo.FieldID)
		for _, f := range fields {
			if !personalinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != personalinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.FullName(); ok {
		_spec.SetField(personalinfo.FieldFullName, field.TypeString, value)
	}
	if value, ok := piuo.mutation.Title(); ok {
		_spec.SetField(personalinfo.FieldTitle, field.TypeString, value)
	}
	if value, ok := piuo.mutation.CurrentStatus(); ok {
		_spec.SetField(personalinfo.FieldCurrentStatus, field.TypeString, value)
	}
	if piuo.mutation.CurrentStatusCleared() {
		_spec.ClearField(personalinfo.FieldCurrentStatus, field.TypeString)
	}
	if value, ok := piuo.mutation.Phone(); ok {
		_spec.SetField(personalinfo.FieldPhone, field.TypeString, value)
	}
	if piuo.mutation.PhoneCleared() {
		_spec.ClearField(personalinfo.FieldPhone, field.TypeString)
	}
	if value, ok := piuo.mutation.Email(); ok {
		_spec.SetField(personalinfo.FieldEmail, field.TypeString, value)
	}
	if piuo.mutation.EmailCleared() {
		_spec.ClearField(personalinfo.FieldEmail, field.TypeString)
	}
	if value, ok := piuo.mutation.Location(); ok {
		_spec.SetField(personalinfo.FieldLocation, field.TypeString, value)
	}
	if piuo.mutation.LocationCleared() {
		_spec.ClearField(personalinfo.FieldLocation, field.TypeString)
	}
	if value, ok := piuo.mutation.Website(); ok {
		_spec.SetField(personalinfo.FieldWebsite, field.TypeString, value)
	}
	if piuo.mutation.WebsiteCleared() {
		_spec.ClearField(personalinfo.FieldWebsite, field.TypeString)
	}
	if value, ok := piuo.mutation.AvatarURL(); ok {
		_spec.SetField(personalinfo.FieldAvatarURL, field.TypeString, value)
	}
	if piuo.mutation.AvatarURLCleared() {
		_spec.ClearField(personalinfo.FieldAvatarURL, field.TypeString)
	}
	if value, ok := piuo.mutation.IsPrimary(); ok {
		_spec.SetField(personalinfo.FieldIsPrimary, field.TypeBool, value)
	}
	if value, ok := piuo.mutation.UpdatedAt(); ok {
		_spec.SetField(personalinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if piuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personalinfo.UserTable,
			Columns: []string{personalinfo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personalinfo.UserTable,
			Columns: []string{personalinfo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piuo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personalinfo.TranslationsTable,
			Columns: []string{personalinfo.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalinfotranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !piuo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personalinfo.TranslationsTable,
			Columns: []string{personalinfo.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalinfotranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personalinfo.TranslationsTable,
			Columns: []string{personalinfo.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalinfotranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piuo.mutation.SocialLinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personalinfo.SocialLinksTable,
			Columns: []string{personalinfo.SocialLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sociallink.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.RemovedSocialLinksIDs(); len(nodes) > 0 && !piuo.mutation.SocialLinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personalinfo.SocialLinksTable,
			Columns: []string{personalinfo.SocialLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sociallink.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.SocialLinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personalinfo.SocialLinksTable,
			Columns: []string{personalinfo.SocialLinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sociallink.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PersonalInfo{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personalinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}
