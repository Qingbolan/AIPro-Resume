// Code generated by ent, DO NOT EDIT.

package personalinfo

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldUserID, v))
}

// FullName applies equality check predicate on the "full_name" field. It's identical to FullNameEQ.
func FullName(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldFullName, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldTitle, v))
}

// CurrentStatus applies equality check predicate on the "current_status" field. It's identical to CurrentStatusEQ.
func CurrentStatus(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldCurrentStatus, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldPhone, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldEmail, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldLocation, v))
}

// Website applies equality check predicate on the "website" field. It's identical to WebsiteEQ.
func Website(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldWebsite, v))
}

// AvatarURL applies equality check predicate on the "avatar_url" field. It's identical to AvatarURLEQ.
func AvatarURL(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldAvatarURL, v))
}

// IsPrimary applies equality check predicate on the "is_primary" field. It's identical to IsPrimaryEQ.
func IsPrimary(v bool) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldIsPrimary, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotIn(FieldUserID, vs...))
}

// FullNameEQ applies the EQ predicate on the "full_name" field.
func FullNameEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldFullName, v))
}

// FullNameNEQ applies the NEQ predicate on the "full_name" field.
func FullNameNEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNEQ(FieldFullName, v))
}

// FullNameIn applies the In predicate on the "full_name" field.
func FullNameIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIn(FieldFullName, vs...))
}

// FullNameNotIn applies the NotIn predicate on the "full_name" field.
func FullNameNotIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotIn(FieldFullName, vs...))
}

// FullNameGT applies the GT predicate on the "full_name" field.
func FullNameGT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGT(FieldFullName, v))
}

// FullNameGTE applies the GTE predicate on the "full_name" field.
func FullNameGTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGTE(FieldFullName, v))
}

// FullNameLT applies the LT predicate on the "full_name" field.
func FullNameLT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLT(FieldFullName, v))
}

// FullNameLTE applies the LTE predicate on the "full_name" field.
func FullNameLTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLTE(FieldFullName, v))
}

// FullNameContains applies the Contains predicate on the "full_name" field.
func FullNameContains(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContains(FieldFullName, v))
}

// FullNameHasPrefix applies the HasPrefix predicate on the "full_name" field.
func FullNameHasPrefix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasPrefix(FieldFullName, v))
}

// FullNameHasSuffix applies the HasSuffix predicate on the "full_name" field.
func FullNameHasSuffix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasSuffix(FieldFullName, v))
}

// FullNameEqualFold applies the EqualFold predicate on the "full_name" field.
func FullNameEqualFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEqualFold(FieldFullName, v))
}

// FullNameContainsFold applies the ContainsFold predicate on the "full_name" field.
func FullNameContainsFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContainsFold(FieldFullName, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContainsFold(FieldTitle, v))
}

// CurrentStatusEQ applies the EQ predicate on the "current_status" field.
func CurrentStatusEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldCurrentStatus, v))
}

// CurrentStatusNEQ applies the NEQ predicate on the "current_status" field.
func CurrentStatusNEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNEQ(FieldCurrentStatus, v))
}

// CurrentStatusIn applies the In predicate on the "current_status" field.
func CurrentStatusIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIn(FieldCurrentStatus, vs...))
}

// CurrentStatusNotIn applies the NotIn predicate on the "current_status" field.
func CurrentStatusNotIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotIn(FieldCurrentStatus, vs...))
}

// CurrentStatusGT applies the GT predicate on the "current_status" field.
func CurrentStatusGT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGT(FieldCurrentStatus, v))
}

// CurrentStatusGTE applies the GTE predicate on the "current_status" field.
func CurrentStatusGTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGTE(FieldCurrentStatus, v))
}

// CurrentStatusLT applies the LT predicate on the "current_status" field.
func CurrentStatusLT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLT(FieldCurrentStatus, v))
}

// CurrentStatusLTE applies the LTE predicate on the "current_status" field.
func CurrentStatusLTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLTE(FieldCurrentStatus, v))
}

// CurrentStatusContains applies the Contains predicate on the "current_status" field.
func CurrentStatusContains(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContains(FieldCurrentStatus, v))
}

// CurrentStatusHasPrefix applies the HasPrefix predicate on the "current_status" field.
func CurrentStatusHasPrefix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasPrefix(FieldCurrentStatus, v))
}

// CurrentStatusHasSuffix applies the HasSuffix predicate on the "current_status" field.
func CurrentStatusHasSuffix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasSuffix(FieldCurrentStatus, v))
}

// CurrentStatusIsNil applies the IsNil predicate on the "current_status" field.
func CurrentStatusIsNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIsNull(FieldCurrentStatus))
}

// CurrentStatusNotNil applies the NotNil predicate on the "current_status" field.
func CurrentStatusNotNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotNull(FieldCurrentStatus))
}

// CurrentStatusEqualFold applies the EqualFold predicate on the "current_status" field.
func CurrentStatusEqualFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEqualFold(FieldCurrentStatus, v))
}

// CurrentStatusContainsFold applies the ContainsFold predicate on the "current_status" field.
func CurrentStatusContainsFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContainsFold(FieldCurrentStatus, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneIsNil applies the IsNil predicate on the "phone" field.
func PhoneIsNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIsNull(FieldPhone))
}

// PhoneNotNil applies the NotNil predicate on the "phone" field.
func PhoneNotNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotNull(FieldPhone))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContainsFold(FieldPhone, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContainsFold(FieldEmail, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIsNull(FieldLocation))
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotNull(FieldLocation))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContainsFold(FieldLocation, v))
}

// WebsiteEQ applies the EQ predicate on the "website" field.
func WebsiteEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldWebsite, v))
}

// WebsiteNEQ applies the NEQ predicate on the "website" field.
func WebsiteNEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNEQ(FieldWebsite, v))
}

// WebsiteIn applies the In predicate on the "website" field.
func WebsiteIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIn(FieldWebsite, vs...))
}

// WebsiteNotIn applies the NotIn predicate on the "website" field.
func WebsiteNotIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotIn(FieldWebsite, vs...))
}

// WebsiteGT applies the GT predicate on the "website" field.
func WebsiteGT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGT(FieldWebsite, v))
}

// WebsiteGTE applies the GTE predicate on the "website" field.
func WebsiteGTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGTE(FieldWebsite, v))
}

// WebsiteLT applies the LT predicate on the "website" field.
func WebsiteLT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLT(FieldWebsite, v))
}

// WebsiteLTE applies the LTE predicate on the "website" field.
func WebsiteLTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLTE(FieldWebsite, v))
}

// WebsiteContains applies the Contains predicate on the "website" field.
func WebsiteContains(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContains(FieldWebsite, v))
}

// WebsiteHasPrefix applies the HasPrefix predicate on the "website" field.
func WebsiteHasPrefix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasPrefix(FieldWebsite, v))
}

// WebsiteHasSuffix applies the HasSuffix predicate on the "website" field.
func WebsiteHasSuffix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasSuffix(FieldWebsite, v))
}

// WebsiteIsNil applies the IsNil predicate on the "website" field.
func WebsiteIsNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIsNull(FieldWebsite))
}

// WebsiteNotNil applies the NotNil predicate on the "website" field.
func WebsiteNotNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotNull(FieldWebsite))
}

// WebsiteEqualFold applies the EqualFold predicate on the "website" field.
func WebsiteEqualFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEqualFold(FieldWebsite, v))
}

// WebsiteContainsFold applies the ContainsFold predicate on the "website" field.
func WebsiteContainsFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContainsFold(FieldWebsite, v))
}

// AvatarURLEQ applies the EQ predicate on the "avatar_url" field.
func AvatarURLEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldAvatarURL, v))
}

// AvatarURLNEQ applies the NEQ predicate on the "avatar_url" field.
func AvatarURLNEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNEQ(FieldAvatarURL, v))
}

// AvatarURLIn applies the In predicate on the "avatar_url" field.
func AvatarURLIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIn(FieldAvatarURL, vs...))
}

// AvatarURLNotIn applies the NotIn predicate on the "avatar_url" field.
func AvatarURLNotIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotIn(FieldAvatarURL, vs...))
}

// AvatarURLGT applies the GT predicate on the "avatar_url" field.
func AvatarURLGT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGT(FieldAvatarURL, v))
}

// AvatarURLGTE applies the GTE predicate on the "avatar_url" field.
func AvatarURLGTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGTE(FieldAvatarURL, v))
}

// AvatarURLLT applies the LT predicate on the "avatar_url" field.
func AvatarURLLT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLT(FieldAvatarURL, v))
}

// AvatarURLLTE applies the LTE predicate on the "avatar_url" field.
func AvatarURLLTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLTE(FieldAvatarURL, v))
}

// AvatarURLContains applies the Contains predicate on the "avatar_url" field.
func AvatarURLContains(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContains(FieldAvatarURL, v))
}

// AvatarURLHasPrefix applies the HasPrefix predicate on the "avatar_url" field.
func AvatarURLHasPrefix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasPrefix(FieldAvatarURL, v))
}

// AvatarURLHasSuffix applies the HasSuffix predicate on the "avatar_url" field.
func AvatarURLHasSuffix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasSuffix(FieldAvatarURL, v))
}

// AvatarURLIsNil applies the IsNil predicate on the "avatar_url" field.
func AvatarURLIsNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIsNull(FieldAvatarURL))
}

// AvatarURLNotNil applies the NotNil predicate on the "avatar_url" field.
func AvatarURLNotNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotNull(FieldAvatarURL))
}

// AvatarURLEqualFold applies the EqualFold predicate on the "avatar_url" field.
func AvatarURLEqualFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEqualFold(FieldAvatarURL, v))
}

// AvatarURLContainsFold applies the ContainsFold predicate on the "avatar_url" field.
func AvatarURLContainsFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContainsFold(FieldAvatarURL, v))
}

// IsPrimaryEQ applies the EQ predicate on the "is_primary" field.
func IsPrimaryEQ(v bool) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldIsPrimary, v))
}

// IsPrimaryNEQ applies the NEQ predicate on the "is_primary" field.
func IsPrimaryNEQ(v bool) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNEQ(FieldIsPrimary, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.PersonalInfo {
	return predicate.PersonalInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.PersonalInfo {
	return predicate.PersonalInfo(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTranslations applies the HasEdge predicate on the "translations" edge.
func HasTranslations() predicate.PersonalInfo {
	return predicate.PersonalInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TranslationsTable, TranslationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTranslationsWith applies the HasEdge predicate on the "translations" edge with a given conditions (other predicates).
func HasTranslationsWith(preds ...predicate.PersonalInfoTranslation) predicate.PersonalInfo {
	return predicate.PersonalInfo(func(s *sql.Selector) {
		step := newTranslationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSocialLinks applies the HasEdge predicate on the "social_links" edge.
func HasSocialLinks() predicate.PersonalInfo {
	return predicate.PersonalInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SocialLinksTable, SocialLinksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSocialLinksWith applies the HasEdge predicate on the "social_links" edge with a given conditions (other predicates).
func HasSocialLinksWith(preds ...predicate.SocialLink) predicate.PersonalInfo {
	return predicate.PersonalInfo(func(s *sql.Selector) {
		step := newSocialLinksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PersonalInfo) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PersonalInfo) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PersonalInfo) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.NotPredicates(p))
}
