// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/projectdetailtranslation"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectDetailTranslationDelete is the builder for deleting a ProjectDetailTranslation entity.
type ProjectDetailTranslationDelete struct {
	config
	hooks    []Hook
	mutation *ProjectDetailTranslationMutation
}

// Where appends a list predicates to the ProjectDetailTranslationDelete builder.
func (pdtd *ProjectDetailTranslationDelete) Where(ps ...predicate.ProjectDetailTranslation) *ProjectDetailTranslationDelete {
	pdtd.mutation.Where(ps...)
	return pdtd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pdtd *ProjectDetailTranslationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pdtd.sqlExec, pdtd.mutation, pdtd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pdtd *ProjectDetailTranslationDelete) ExecX(ctx context.Context) int {
	n, err := pdtd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pdtd *ProjectDetailTranslationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(projectdetailtranslation.Table, sqlgraph.NewFieldSpec(projectdetailtranslation.FieldID, field.TypeUUID))
	if ps := pdtd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pdtd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pdtd.mutation.done = true
	return affected, err
}

// ProjectDetailTranslationDeleteOne is the builder for deleting a single ProjectDetailTranslation entity.
type ProjectDetailTranslationDeleteOne struct {
	pdtd *ProjectDetailTranslationDelete
}

// Where appends a list predicates to the ProjectDetailTranslationDelete builder.
func (pdtdo *ProjectDetailTranslationDeleteOne) Where(ps ...predicate.ProjectDetailTranslation) *ProjectDetailTranslationDeleteOne {
	pdtdo.pdtd.mutation.Where(ps...)
	return pdtdo
}

// Exec executes the deletion query.
func (pdtdo *ProjectDetailTranslationDeleteOne) Exec(ctx context.Context) error {
	n, err := pdtdo.pdtd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{projectdetailtranslation.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pdtdo *ProjectDetailTranslationDeleteOne) ExecX(ctx context.Context) {
	if err := pdtdo.Exec(ctx); err != nil {
		panic(err)
	}
}
