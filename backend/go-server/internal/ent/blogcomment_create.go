// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/blogcomment"
	"silan-backend/internal/ent/blogpost"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BlogCommentCreate is the builder for creating a BlogComment entity.
type BlogCommentCreate struct {
	config
	mutation *BlogCommentMutation
	hooks    []Hook
}

// SetBlogPostID sets the "blog_post_id" field.
func (bcc *BlogCommentCreate) SetBlogPostID(u uuid.UUID) *BlogCommentCreate {
	bcc.mutation.SetBlogPostID(u)
	return bcc
}

// SetParentID sets the "parent_id" field.
func (bcc *BlogCommentCreate) SetParentID(u uuid.UUID) *BlogCommentCreate {
	bcc.mutation.SetParentID(u)
	return bcc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (bcc *BlogCommentCreate) SetNillableParentID(u *uuid.UUID) *BlogCommentCreate {
	if u != nil {
		bcc.SetParentID(*u)
	}
	return bcc
}

// SetAuthorName sets the "author_name" field.
func (bcc *BlogCommentCreate) SetAuthorName(s string) *BlogCommentCreate {
	bcc.mutation.SetAuthorName(s)
	return bcc
}

// SetAuthorEmail sets the "author_email" field.
func (bcc *BlogCommentCreate) SetAuthorEmail(s string) *BlogCommentCreate {
	bcc.mutation.SetAuthorEmail(s)
	return bcc
}

// SetAuthorWebsite sets the "author_website" field.
func (bcc *BlogCommentCreate) SetAuthorWebsite(s string) *BlogCommentCreate {
	bcc.mutation.SetAuthorWebsite(s)
	return bcc
}

// SetNillableAuthorWebsite sets the "author_website" field if the given value is not nil.
func (bcc *BlogCommentCreate) SetNillableAuthorWebsite(s *string) *BlogCommentCreate {
	if s != nil {
		bcc.SetAuthorWebsite(*s)
	}
	return bcc
}

// SetContent sets the "content" field.
func (bcc *BlogCommentCreate) SetContent(s string) *BlogCommentCreate {
	bcc.mutation.SetContent(s)
	return bcc
}

// SetIsApproved sets the "is_approved" field.
func (bcc *BlogCommentCreate) SetIsApproved(b bool) *BlogCommentCreate {
	bcc.mutation.SetIsApproved(b)
	return bcc
}

// SetNillableIsApproved sets the "is_approved" field if the given value is not nil.
func (bcc *BlogCommentCreate) SetNillableIsApproved(b *bool) *BlogCommentCreate {
	if b != nil {
		bcc.SetIsApproved(*b)
	}
	return bcc
}

// SetIPAddress sets the "ip_address" field.
func (bcc *BlogCommentCreate) SetIPAddress(s string) *BlogCommentCreate {
	bcc.mutation.SetIPAddress(s)
	return bcc
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (bcc *BlogCommentCreate) SetNillableIPAddress(s *string) *BlogCommentCreate {
	if s != nil {
		bcc.SetIPAddress(*s)
	}
	return bcc
}

// SetUserAgent sets the "user_agent" field.
func (bcc *BlogCommentCreate) SetUserAgent(s string) *BlogCommentCreate {
	bcc.mutation.SetUserAgent(s)
	return bcc
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (bcc *BlogCommentCreate) SetNillableUserAgent(s *string) *BlogCommentCreate {
	if s != nil {
		bcc.SetUserAgent(*s)
	}
	return bcc
}

// SetCreatedAt sets the "created_at" field.
func (bcc *BlogCommentCreate) SetCreatedAt(t time.Time) *BlogCommentCreate {
	bcc.mutation.SetCreatedAt(t)
	return bcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bcc *BlogCommentCreate) SetNillableCreatedAt(t *time.Time) *BlogCommentCreate {
	if t != nil {
		bcc.SetCreatedAt(*t)
	}
	return bcc
}

// SetUpdatedAt sets the "updated_at" field.
func (bcc *BlogCommentCreate) SetUpdatedAt(t time.Time) *BlogCommentCreate {
	bcc.mutation.SetUpdatedAt(t)
	return bcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bcc *BlogCommentCreate) SetNillableUpdatedAt(t *time.Time) *BlogCommentCreate {
	if t != nil {
		bcc.SetUpdatedAt(*t)
	}
	return bcc
}

// SetID sets the "id" field.
func (bcc *BlogCommentCreate) SetID(u uuid.UUID) *BlogCommentCreate {
	bcc.mutation.SetID(u)
	return bcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bcc *BlogCommentCreate) SetNillableID(u *uuid.UUID) *BlogCommentCreate {
	if u != nil {
		bcc.SetID(*u)
	}
	return bcc
}

// SetBlogPost sets the "blog_post" edge to the BlogPost entity.
func (bcc *BlogCommentCreate) SetBlogPost(b *BlogPost) *BlogCommentCreate {
	return bcc.SetBlogPostID(b.ID)
}

// SetParent sets the "parent" edge to the BlogComment entity.
func (bcc *BlogCommentCreate) SetParent(b *BlogComment) *BlogCommentCreate {
	return bcc.SetParentID(b.ID)
}

// AddReplyIDs adds the "replies" edge to the BlogComment entity by IDs.
func (bcc *BlogCommentCreate) AddReplyIDs(ids ...uuid.UUID) *BlogCommentCreate {
	bcc.mutation.AddReplyIDs(ids...)
	return bcc
}

// AddReplies adds the "replies" edges to the BlogComment entity.
func (bcc *BlogCommentCreate) AddReplies(b ...*BlogComment) *BlogCommentCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bcc.AddReplyIDs(ids...)
}

// Mutation returns the BlogCommentMutation object of the builder.
func (bcc *BlogCommentCreate) Mutation() *BlogCommentMutation {
	return bcc.mutation
}

// Save creates the BlogComment in the database.
func (bcc *BlogCommentCreate) Save(ctx context.Context) (*BlogComment, error) {
	bcc.defaults()
	return withHooks(ctx, bcc.sqlSave, bcc.mutation, bcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bcc *BlogCommentCreate) SaveX(ctx context.Context) *BlogComment {
	v, err := bcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcc *BlogCommentCreate) Exec(ctx context.Context) error {
	_, err := bcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcc *BlogCommentCreate) ExecX(ctx context.Context) {
	if err := bcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcc *BlogCommentCreate) defaults() {
	if _, ok := bcc.mutation.IsApproved(); !ok {
		v := blogcomment.DefaultIsApproved
		bcc.mutation.SetIsApproved(v)
	}
	if _, ok := bcc.mutation.CreatedAt(); !ok {
		v := blogcomment.DefaultCreatedAt()
		bcc.mutation.SetCreatedAt(v)
	}
	if _, ok := bcc.mutation.UpdatedAt(); !ok {
		v := blogcomment.DefaultUpdatedAt()
		bcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bcc.mutation.ID(); !ok {
		v := blogcomment.DefaultID()
		bcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcc *BlogCommentCreate) check() error {
	if _, ok := bcc.mutation.BlogPostID(); !ok {
		return &ValidationError{Name: "blog_post_id", err: errors.New(`ent: missing required field "BlogComment.blog_post_id"`)}
	}
	if _, ok := bcc.mutation.AuthorName(); !ok {
		return &ValidationError{Name: "author_name", err: errors.New(`ent: missing required field "BlogComment.author_name"`)}
	}
	if v, ok := bcc.mutation.AuthorName(); ok {
		if err := blogcomment.AuthorNameValidator(v); err != nil {
			return &ValidationError{Name: "author_name", err: fmt.Errorf(`ent: validator failed for field "BlogComment.author_name": %w`, err)}
		}
	}
	if _, ok := bcc.mutation.AuthorEmail(); !ok {
		return &ValidationError{Name: "author_email", err: errors.New(`ent: missing required field "BlogComment.author_email"`)}
	}
	if v, ok := bcc.mutation.AuthorEmail(); ok {
		if err := blogcomment.AuthorEmailValidator(v); err != nil {
			return &ValidationError{Name: "author_email", err: fmt.Errorf(`ent: validator failed for field "BlogComment.author_email": %w`, err)}
		}
	}
	if v, ok := bcc.mutation.AuthorWebsite(); ok {
		if err := blogcomment.AuthorWebsiteValidator(v); err != nil {
			return &ValidationError{Name: "author_website", err: fmt.Errorf(`ent: validator failed for field "BlogComment.author_website": %w`, err)}
		}
	}
	if _, ok := bcc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "BlogComment.content"`)}
	}
	if v, ok := bcc.mutation.Content(); ok {
		if err := blogcomment.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "BlogComment.content": %w`, err)}
		}
	}
	if _, ok := bcc.mutation.IsApproved(); !ok {
		return &ValidationError{Name: "is_approved", err: errors.New(`ent: missing required field "BlogComment.is_approved"`)}
	}
	if v, ok := bcc.mutation.IPAddress(); ok {
		if err := blogcomment.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "BlogComment.ip_address": %w`, err)}
		}
	}
	if v, ok := bcc.mutation.UserAgent(); ok {
		if err := blogcomment.UserAgentValidator(v); err != nil {
			return &ValidationError{Name: "user_agent", err: fmt.Errorf(`ent: validator failed for field "BlogComment.user_agent": %w`, err)}
		}
	}
	if _, ok := bcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlogComment.created_at"`)}
	}
	if _, ok := bcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BlogComment.updated_at"`)}
	}
	if len(bcc.mutation.BlogPostIDs()) == 0 {
		return &ValidationError{Name: "blog_post", err: errors.New(`ent: missing required edge "BlogComment.blog_post"`)}
	}
	return nil
}

func (bcc *BlogCommentCreate) sqlSave(ctx context.Context) (*BlogComment, error) {
	if err := bcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bcc.mutation.id = &_node.ID
	bcc.mutation.done = true
	return _node, nil
}

func (bcc *BlogCommentCreate) createSpec() (*BlogComment, *sqlgraph.CreateSpec) {
	var (
		_node = &BlogComment{config: bcc.config}
		_spec = sqlgraph.NewCreateSpec(blogcomment.Table, sqlgraph.NewFieldSpec(blogcomment.FieldID, field.TypeUUID))
	)
	if id, ok := bcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bcc.mutation.AuthorName(); ok {
		_spec.SetField(blogcomment.FieldAuthorName, field.TypeString, value)
		_node.AuthorName = value
	}
	if value, ok := bcc.mutation.AuthorEmail(); ok {
		_spec.SetField(blogcomment.FieldAuthorEmail, field.TypeString, value)
		_node.AuthorEmail = value
	}
	if value, ok := bcc.mutation.AuthorWebsite(); ok {
		_spec.SetField(blogcomment.FieldAuthorWebsite, field.TypeString, value)
		_node.AuthorWebsite = value
	}
	if value, ok := bcc.mutation.Content(); ok {
		_spec.SetField(blogcomment.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := bcc.mutation.IsApproved(); ok {
		_spec.SetField(blogcomment.FieldIsApproved, field.TypeBool, value)
		_node.IsApproved = value
	}
	if value, ok := bcc.mutation.IPAddress(); ok {
		_spec.SetField(blogcomment.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := bcc.mutation.UserAgent(); ok {
		_spec.SetField(blogcomment.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := bcc.mutation.CreatedAt(); ok {
		_spec.SetField(blogcomment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bcc.mutation.UpdatedAt(); ok {
		_spec.SetField(blogcomment.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := bcc.mutation.BlogPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogcomment.BlogPostTable,
			Columns: []string{blogcomment.BlogPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BlogPostID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bcc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   blogcomment.ParentTable,
			Columns: []string{blogcomment.ParentColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bcc.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   blogcomment.RepliesTable,
			Columns: []string{blogcomment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BlogCommentCreateBulk is the builder for creating many BlogComment entities in bulk.
type BlogCommentCreateBulk struct {
	config
	err      error
	builders []*BlogCommentCreate
}

// Save creates the BlogComment entities in the database.
func (bccb *BlogCommentCreateBulk) Save(ctx context.Context) ([]*BlogComment, error) {
	if bccb.err != nil {
		return nil, bccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bccb.builders))
	nodes := make([]*BlogComment, len(bccb.builders))
	mutators := make([]Mutator, len(bccb.builders))
	for i := range bccb.builders {
		func(i int, root context.Context) {
			builder := bccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlogCommentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bccb *BlogCommentCreateBulk) SaveX(ctx context.Context) []*BlogComment {
	v, err := bccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bccb *BlogCommentCreateBulk) Exec(ctx context.Context) error {
	_, err := bccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bccb *BlogCommentCreateBulk) ExecX(ctx context.Context) {
	if err := bccb.Exec(ctx); err != nil {
		panic(err)
	}
}
