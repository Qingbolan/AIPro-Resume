// Code generated by ent, DO NOT EDIT.

package researchproject

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEQ(FieldUserID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEQ(FieldTitle, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEQ(FieldEndDate, v))
}

// IsOngoing applies equality check predicate on the "is_ongoing" field. It's identical to IsOngoingEQ.
func IsOngoing(v bool) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEQ(FieldIsOngoing, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEQ(FieldLocation, v))
}

// ResearchType applies equality check predicate on the "research_type" field. It's identical to ResearchTypeEQ.
func ResearchType(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEQ(FieldResearchType, v))
}

// FundingSource applies equality check predicate on the "funding_source" field. It's identical to FundingSourceEQ.
func FundingSource(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEQ(FieldFundingSource, v))
}

// FundingAmount applies equality check predicate on the "funding_amount" field. It's identical to FundingAmountEQ.
func FundingAmount(v float64) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEQ(FieldFundingAmount, v))
}

// SortOrder applies equality check predicate on the "sort_order" field. It's identical to SortOrderEQ.
func SortOrder(v int) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEQ(FieldSortOrder, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNotIn(FieldUserID, vs...))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldContainsFold(FieldTitle, v))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldLTE(FieldStartDate, v))
}

// StartDateIsNil applies the IsNil predicate on the "start_date" field.
func StartDateIsNil() predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldIsNull(FieldStartDate))
}

// StartDateNotNil applies the NotNil predicate on the "start_date" field.
func StartDateNotNil() predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNotNull(FieldStartDate))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldLTE(FieldEndDate, v))
}

// EndDateIsNil applies the IsNil predicate on the "end_date" field.
func EndDateIsNil() predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldIsNull(FieldEndDate))
}

// EndDateNotNil applies the NotNil predicate on the "end_date" field.
func EndDateNotNil() predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNotNull(FieldEndDate))
}

// IsOngoingEQ applies the EQ predicate on the "is_ongoing" field.
func IsOngoingEQ(v bool) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEQ(FieldIsOngoing, v))
}

// IsOngoingNEQ applies the NEQ predicate on the "is_ongoing" field.
func IsOngoingNEQ(v bool) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNEQ(FieldIsOngoing, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldIsNull(FieldLocation))
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNotNull(FieldLocation))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldContainsFold(FieldLocation, v))
}

// ResearchTypeEQ applies the EQ predicate on the "research_type" field.
func ResearchTypeEQ(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEQ(FieldResearchType, v))
}

// ResearchTypeNEQ applies the NEQ predicate on the "research_type" field.
func ResearchTypeNEQ(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNEQ(FieldResearchType, v))
}

// ResearchTypeIn applies the In predicate on the "research_type" field.
func ResearchTypeIn(vs ...string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldIn(FieldResearchType, vs...))
}

// ResearchTypeNotIn applies the NotIn predicate on the "research_type" field.
func ResearchTypeNotIn(vs ...string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNotIn(FieldResearchType, vs...))
}

// ResearchTypeGT applies the GT predicate on the "research_type" field.
func ResearchTypeGT(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldGT(FieldResearchType, v))
}

// ResearchTypeGTE applies the GTE predicate on the "research_type" field.
func ResearchTypeGTE(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldGTE(FieldResearchType, v))
}

// ResearchTypeLT applies the LT predicate on the "research_type" field.
func ResearchTypeLT(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldLT(FieldResearchType, v))
}

// ResearchTypeLTE applies the LTE predicate on the "research_type" field.
func ResearchTypeLTE(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldLTE(FieldResearchType, v))
}

// ResearchTypeContains applies the Contains predicate on the "research_type" field.
func ResearchTypeContains(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldContains(FieldResearchType, v))
}

// ResearchTypeHasPrefix applies the HasPrefix predicate on the "research_type" field.
func ResearchTypeHasPrefix(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldHasPrefix(FieldResearchType, v))
}

// ResearchTypeHasSuffix applies the HasSuffix predicate on the "research_type" field.
func ResearchTypeHasSuffix(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldHasSuffix(FieldResearchType, v))
}

// ResearchTypeIsNil applies the IsNil predicate on the "research_type" field.
func ResearchTypeIsNil() predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldIsNull(FieldResearchType))
}

// ResearchTypeNotNil applies the NotNil predicate on the "research_type" field.
func ResearchTypeNotNil() predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNotNull(FieldResearchType))
}

// ResearchTypeEqualFold applies the EqualFold predicate on the "research_type" field.
func ResearchTypeEqualFold(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEqualFold(FieldResearchType, v))
}

// ResearchTypeContainsFold applies the ContainsFold predicate on the "research_type" field.
func ResearchTypeContainsFold(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldContainsFold(FieldResearchType, v))
}

// FundingSourceEQ applies the EQ predicate on the "funding_source" field.
func FundingSourceEQ(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEQ(FieldFundingSource, v))
}

// FundingSourceNEQ applies the NEQ predicate on the "funding_source" field.
func FundingSourceNEQ(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNEQ(FieldFundingSource, v))
}

// FundingSourceIn applies the In predicate on the "funding_source" field.
func FundingSourceIn(vs ...string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldIn(FieldFundingSource, vs...))
}

// FundingSourceNotIn applies the NotIn predicate on the "funding_source" field.
func FundingSourceNotIn(vs ...string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNotIn(FieldFundingSource, vs...))
}

// FundingSourceGT applies the GT predicate on the "funding_source" field.
func FundingSourceGT(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldGT(FieldFundingSource, v))
}

// FundingSourceGTE applies the GTE predicate on the "funding_source" field.
func FundingSourceGTE(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldGTE(FieldFundingSource, v))
}

// FundingSourceLT applies the LT predicate on the "funding_source" field.
func FundingSourceLT(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldLT(FieldFundingSource, v))
}

// FundingSourceLTE applies the LTE predicate on the "funding_source" field.
func FundingSourceLTE(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldLTE(FieldFundingSource, v))
}

// FundingSourceContains applies the Contains predicate on the "funding_source" field.
func FundingSourceContains(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldContains(FieldFundingSource, v))
}

// FundingSourceHasPrefix applies the HasPrefix predicate on the "funding_source" field.
func FundingSourceHasPrefix(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldHasPrefix(FieldFundingSource, v))
}

// FundingSourceHasSuffix applies the HasSuffix predicate on the "funding_source" field.
func FundingSourceHasSuffix(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldHasSuffix(FieldFundingSource, v))
}

// FundingSourceIsNil applies the IsNil predicate on the "funding_source" field.
func FundingSourceIsNil() predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldIsNull(FieldFundingSource))
}

// FundingSourceNotNil applies the NotNil predicate on the "funding_source" field.
func FundingSourceNotNil() predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNotNull(FieldFundingSource))
}

// FundingSourceEqualFold applies the EqualFold predicate on the "funding_source" field.
func FundingSourceEqualFold(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEqualFold(FieldFundingSource, v))
}

// FundingSourceContainsFold applies the ContainsFold predicate on the "funding_source" field.
func FundingSourceContainsFold(v string) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldContainsFold(FieldFundingSource, v))
}

// FundingAmountEQ applies the EQ predicate on the "funding_amount" field.
func FundingAmountEQ(v float64) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEQ(FieldFundingAmount, v))
}

// FundingAmountNEQ applies the NEQ predicate on the "funding_amount" field.
func FundingAmountNEQ(v float64) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNEQ(FieldFundingAmount, v))
}

// FundingAmountIn applies the In predicate on the "funding_amount" field.
func FundingAmountIn(vs ...float64) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldIn(FieldFundingAmount, vs...))
}

// FundingAmountNotIn applies the NotIn predicate on the "funding_amount" field.
func FundingAmountNotIn(vs ...float64) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNotIn(FieldFundingAmount, vs...))
}

// FundingAmountGT applies the GT predicate on the "funding_amount" field.
func FundingAmountGT(v float64) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldGT(FieldFundingAmount, v))
}

// FundingAmountGTE applies the GTE predicate on the "funding_amount" field.
func FundingAmountGTE(v float64) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldGTE(FieldFundingAmount, v))
}

// FundingAmountLT applies the LT predicate on the "funding_amount" field.
func FundingAmountLT(v float64) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldLT(FieldFundingAmount, v))
}

// FundingAmountLTE applies the LTE predicate on the "funding_amount" field.
func FundingAmountLTE(v float64) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldLTE(FieldFundingAmount, v))
}

// FundingAmountIsNil applies the IsNil predicate on the "funding_amount" field.
func FundingAmountIsNil() predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldIsNull(FieldFundingAmount))
}

// FundingAmountNotNil applies the NotNil predicate on the "funding_amount" field.
func FundingAmountNotNil() predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNotNull(FieldFundingAmount))
}

// SortOrderEQ applies the EQ predicate on the "sort_order" field.
func SortOrderEQ(v int) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEQ(FieldSortOrder, v))
}

// SortOrderNEQ applies the NEQ predicate on the "sort_order" field.
func SortOrderNEQ(v int) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNEQ(FieldSortOrder, v))
}

// SortOrderIn applies the In predicate on the "sort_order" field.
func SortOrderIn(vs ...int) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldIn(FieldSortOrder, vs...))
}

// SortOrderNotIn applies the NotIn predicate on the "sort_order" field.
func SortOrderNotIn(vs ...int) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNotIn(FieldSortOrder, vs...))
}

// SortOrderGT applies the GT predicate on the "sort_order" field.
func SortOrderGT(v int) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldGT(FieldSortOrder, v))
}

// SortOrderGTE applies the GTE predicate on the "sort_order" field.
func SortOrderGTE(v int) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldGTE(FieldSortOrder, v))
}

// SortOrderLT applies the LT predicate on the "sort_order" field.
func SortOrderLT(v int) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldLT(FieldSortOrder, v))
}

// SortOrderLTE applies the LTE predicate on the "sort_order" field.
func SortOrderLTE(v int) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldLTE(FieldSortOrder, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ResearchProject {
	return predicate.ResearchProject(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.ResearchProject {
	return predicate.ResearchProject(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.ResearchProject {
	return predicate.ResearchProject(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTranslations applies the HasEdge predicate on the "translations" edge.
func HasTranslations() predicate.ResearchProject {
	return predicate.ResearchProject(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TranslationsTable, TranslationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTranslationsWith applies the HasEdge predicate on the "translations" edge with a given conditions (other predicates).
func HasTranslationsWith(preds ...predicate.ResearchProjectTranslation) predicate.ResearchProject {
	return predicate.ResearchProject(func(s *sql.Selector) {
		step := newTranslationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDetails applies the HasEdge predicate on the "details" edge.
func HasDetails() predicate.ResearchProject {
	return predicate.ResearchProject(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DetailsTable, DetailsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDetailsWith applies the HasEdge predicate on the "details" edge with a given conditions (other predicates).
func HasDetailsWith(preds ...predicate.ResearchProjectDetail) predicate.ResearchProject {
	return predicate.ResearchProject(func(s *sql.Selector) {
		step := newDetailsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ResearchProject) predicate.ResearchProject {
	return predicate.ResearchProject(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ResearchProject) predicate.ResearchProject {
	return predicate.ResearchProject(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ResearchProject) predicate.ResearchProject {
	return predicate.ResearchProject(sql.NotPredicates(p))
}
