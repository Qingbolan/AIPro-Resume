// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/blogcategory"
	"silan-backend/internal/ent/blogcomment"
	"silan-backend/internal/ent/blogpost"
	"silan-backend/internal/ent/blogposttranslation"
	"silan-backend/internal/ent/blogseries"
	"silan-backend/internal/ent/blogtag"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BlogPostUpdate is the builder for updating BlogPost entities.
type BlogPostUpdate struct {
	config
	hooks    []Hook
	mutation *BlogPostMutation
}

// Where appends a list predicates to the BlogPostUpdate builder.
func (bpu *BlogPostUpdate) Where(ps ...predicate.BlogPost) *BlogPostUpdate {
	bpu.mutation.Where(ps...)
	return bpu
}

// SetUserID sets the "user_id" field.
func (bpu *BlogPostUpdate) SetUserID(u uuid.UUID) *BlogPostUpdate {
	bpu.mutation.SetUserID(u)
	return bpu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (bpu *BlogPostUpdate) SetNillableUserID(u *uuid.UUID) *BlogPostUpdate {
	if u != nil {
		bpu.SetUserID(*u)
	}
	return bpu
}

// SetCategoryID sets the "category_id" field.
func (bpu *BlogPostUpdate) SetCategoryID(u uuid.UUID) *BlogPostUpdate {
	bpu.mutation.SetCategoryID(u)
	return bpu
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (bpu *BlogPostUpdate) SetNillableCategoryID(u *uuid.UUID) *BlogPostUpdate {
	if u != nil {
		bpu.SetCategoryID(*u)
	}
	return bpu
}

// ClearCategoryID clears the value of the "category_id" field.
func (bpu *BlogPostUpdate) ClearCategoryID() *BlogPostUpdate {
	bpu.mutation.ClearCategoryID()
	return bpu
}

// SetSeriesID sets the "series_id" field.
func (bpu *BlogPostUpdate) SetSeriesID(u uuid.UUID) *BlogPostUpdate {
	bpu.mutation.SetSeriesID(u)
	return bpu
}

// SetNillableSeriesID sets the "series_id" field if the given value is not nil.
func (bpu *BlogPostUpdate) SetNillableSeriesID(u *uuid.UUID) *BlogPostUpdate {
	if u != nil {
		bpu.SetSeriesID(*u)
	}
	return bpu
}

// ClearSeriesID clears the value of the "series_id" field.
func (bpu *BlogPostUpdate) ClearSeriesID() *BlogPostUpdate {
	bpu.mutation.ClearSeriesID()
	return bpu
}

// SetTitle sets the "title" field.
func (bpu *BlogPostUpdate) SetTitle(s string) *BlogPostUpdate {
	bpu.mutation.SetTitle(s)
	return bpu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (bpu *BlogPostUpdate) SetNillableTitle(s *string) *BlogPostUpdate {
	if s != nil {
		bpu.SetTitle(*s)
	}
	return bpu
}

// SetSlug sets the "slug" field.
func (bpu *BlogPostUpdate) SetSlug(s string) *BlogPostUpdate {
	bpu.mutation.SetSlug(s)
	return bpu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (bpu *BlogPostUpdate) SetNillableSlug(s *string) *BlogPostUpdate {
	if s != nil {
		bpu.SetSlug(*s)
	}
	return bpu
}

// SetExcerpt sets the "excerpt" field.
func (bpu *BlogPostUpdate) SetExcerpt(s string) *BlogPostUpdate {
	bpu.mutation.SetExcerpt(s)
	return bpu
}

// SetNillableExcerpt sets the "excerpt" field if the given value is not nil.
func (bpu *BlogPostUpdate) SetNillableExcerpt(s *string) *BlogPostUpdate {
	if s != nil {
		bpu.SetExcerpt(*s)
	}
	return bpu
}

// ClearExcerpt clears the value of the "excerpt" field.
func (bpu *BlogPostUpdate) ClearExcerpt() *BlogPostUpdate {
	bpu.mutation.ClearExcerpt()
	return bpu
}

// SetContent sets the "content" field.
func (bpu *BlogPostUpdate) SetContent(s string) *BlogPostUpdate {
	bpu.mutation.SetContent(s)
	return bpu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (bpu *BlogPostUpdate) SetNillableContent(s *string) *BlogPostUpdate {
	if s != nil {
		bpu.SetContent(*s)
	}
	return bpu
}

// SetContentType sets the "content_type" field.
func (bpu *BlogPostUpdate) SetContentType(bt blogpost.ContentType) *BlogPostUpdate {
	bpu.mutation.SetContentType(bt)
	return bpu
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (bpu *BlogPostUpdate) SetNillableContentType(bt *blogpost.ContentType) *BlogPostUpdate {
	if bt != nil {
		bpu.SetContentType(*bt)
	}
	return bpu
}

// SetStatus sets the "status" field.
func (bpu *BlogPostUpdate) SetStatus(b blogpost.Status) *BlogPostUpdate {
	bpu.mutation.SetStatus(b)
	return bpu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bpu *BlogPostUpdate) SetNillableStatus(b *blogpost.Status) *BlogPostUpdate {
	if b != nil {
		bpu.SetStatus(*b)
	}
	return bpu
}

// SetIsFeatured sets the "is_featured" field.
func (bpu *BlogPostUpdate) SetIsFeatured(b bool) *BlogPostUpdate {
	bpu.mutation.SetIsFeatured(b)
	return bpu
}

// SetNillableIsFeatured sets the "is_featured" field if the given value is not nil.
func (bpu *BlogPostUpdate) SetNillableIsFeatured(b *bool) *BlogPostUpdate {
	if b != nil {
		bpu.SetIsFeatured(*b)
	}
	return bpu
}

// SetFeaturedImageURL sets the "featured_image_url" field.
func (bpu *BlogPostUpdate) SetFeaturedImageURL(s string) *BlogPostUpdate {
	bpu.mutation.SetFeaturedImageURL(s)
	return bpu
}

// SetNillableFeaturedImageURL sets the "featured_image_url" field if the given value is not nil.
func (bpu *BlogPostUpdate) SetNillableFeaturedImageURL(s *string) *BlogPostUpdate {
	if s != nil {
		bpu.SetFeaturedImageURL(*s)
	}
	return bpu
}

// ClearFeaturedImageURL clears the value of the "featured_image_url" field.
func (bpu *BlogPostUpdate) ClearFeaturedImageURL() *BlogPostUpdate {
	bpu.mutation.ClearFeaturedImageURL()
	return bpu
}

// SetReadingTimeMinutes sets the "reading_time_minutes" field.
func (bpu *BlogPostUpdate) SetReadingTimeMinutes(i int) *BlogPostUpdate {
	bpu.mutation.ResetReadingTimeMinutes()
	bpu.mutation.SetReadingTimeMinutes(i)
	return bpu
}

// SetNillableReadingTimeMinutes sets the "reading_time_minutes" field if the given value is not nil.
func (bpu *BlogPostUpdate) SetNillableReadingTimeMinutes(i *int) *BlogPostUpdate {
	if i != nil {
		bpu.SetReadingTimeMinutes(*i)
	}
	return bpu
}

// AddReadingTimeMinutes adds i to the "reading_time_minutes" field.
func (bpu *BlogPostUpdate) AddReadingTimeMinutes(i int) *BlogPostUpdate {
	bpu.mutation.AddReadingTimeMinutes(i)
	return bpu
}

// ClearReadingTimeMinutes clears the value of the "reading_time_minutes" field.
func (bpu *BlogPostUpdate) ClearReadingTimeMinutes() *BlogPostUpdate {
	bpu.mutation.ClearReadingTimeMinutes()
	return bpu
}

// SetViewCount sets the "view_count" field.
func (bpu *BlogPostUpdate) SetViewCount(i int) *BlogPostUpdate {
	bpu.mutation.ResetViewCount()
	bpu.mutation.SetViewCount(i)
	return bpu
}

// SetNillableViewCount sets the "view_count" field if the given value is not nil.
func (bpu *BlogPostUpdate) SetNillableViewCount(i *int) *BlogPostUpdate {
	if i != nil {
		bpu.SetViewCount(*i)
	}
	return bpu
}

// AddViewCount adds i to the "view_count" field.
func (bpu *BlogPostUpdate) AddViewCount(i int) *BlogPostUpdate {
	bpu.mutation.AddViewCount(i)
	return bpu
}

// SetLikeCount sets the "like_count" field.
func (bpu *BlogPostUpdate) SetLikeCount(i int) *BlogPostUpdate {
	bpu.mutation.ResetLikeCount()
	bpu.mutation.SetLikeCount(i)
	return bpu
}

// SetNillableLikeCount sets the "like_count" field if the given value is not nil.
func (bpu *BlogPostUpdate) SetNillableLikeCount(i *int) *BlogPostUpdate {
	if i != nil {
		bpu.SetLikeCount(*i)
	}
	return bpu
}

// AddLikeCount adds i to the "like_count" field.
func (bpu *BlogPostUpdate) AddLikeCount(i int) *BlogPostUpdate {
	bpu.mutation.AddLikeCount(i)
	return bpu
}

// SetCommentCount sets the "comment_count" field.
func (bpu *BlogPostUpdate) SetCommentCount(i int) *BlogPostUpdate {
	bpu.mutation.ResetCommentCount()
	bpu.mutation.SetCommentCount(i)
	return bpu
}

// SetNillableCommentCount sets the "comment_count" field if the given value is not nil.
func (bpu *BlogPostUpdate) SetNillableCommentCount(i *int) *BlogPostUpdate {
	if i != nil {
		bpu.SetCommentCount(*i)
	}
	return bpu
}

// AddCommentCount adds i to the "comment_count" field.
func (bpu *BlogPostUpdate) AddCommentCount(i int) *BlogPostUpdate {
	bpu.mutation.AddCommentCount(i)
	return bpu
}

// SetPublishedAt sets the "published_at" field.
func (bpu *BlogPostUpdate) SetPublishedAt(t time.Time) *BlogPostUpdate {
	bpu.mutation.SetPublishedAt(t)
	return bpu
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (bpu *BlogPostUpdate) SetNillablePublishedAt(t *time.Time) *BlogPostUpdate {
	if t != nil {
		bpu.SetPublishedAt(*t)
	}
	return bpu
}

// ClearPublishedAt clears the value of the "published_at" field.
func (bpu *BlogPostUpdate) ClearPublishedAt() *BlogPostUpdate {
	bpu.mutation.ClearPublishedAt()
	return bpu
}

// SetSeriesOrder sets the "series_order" field.
func (bpu *BlogPostUpdate) SetSeriesOrder(i int) *BlogPostUpdate {
	bpu.mutation.ResetSeriesOrder()
	bpu.mutation.SetSeriesOrder(i)
	return bpu
}

// SetNillableSeriesOrder sets the "series_order" field if the given value is not nil.
func (bpu *BlogPostUpdate) SetNillableSeriesOrder(i *int) *BlogPostUpdate {
	if i != nil {
		bpu.SetSeriesOrder(*i)
	}
	return bpu
}

// AddSeriesOrder adds i to the "series_order" field.
func (bpu *BlogPostUpdate) AddSeriesOrder(i int) *BlogPostUpdate {
	bpu.mutation.AddSeriesOrder(i)
	return bpu
}

// ClearSeriesOrder clears the value of the "series_order" field.
func (bpu *BlogPostUpdate) ClearSeriesOrder() *BlogPostUpdate {
	bpu.mutation.ClearSeriesOrder()
	return bpu
}

// SetUpdatedAt sets the "updated_at" field.
func (bpu *BlogPostUpdate) SetUpdatedAt(t time.Time) *BlogPostUpdate {
	bpu.mutation.SetUpdatedAt(t)
	return bpu
}

// SetUser sets the "user" edge to the User entity.
func (bpu *BlogPostUpdate) SetUser(u *User) *BlogPostUpdate {
	return bpu.SetUserID(u.ID)
}

// SetCategory sets the "category" edge to the BlogCategory entity.
func (bpu *BlogPostUpdate) SetCategory(b *BlogCategory) *BlogPostUpdate {
	return bpu.SetCategoryID(b.ID)
}

// SetSeries sets the "series" edge to the BlogSeries entity.
func (bpu *BlogPostUpdate) SetSeries(b *BlogSeries) *BlogPostUpdate {
	return bpu.SetSeriesID(b.ID)
}

// AddTagIDs adds the "tags" edge to the BlogTag entity by IDs.
func (bpu *BlogPostUpdate) AddTagIDs(ids ...uuid.UUID) *BlogPostUpdate {
	bpu.mutation.AddTagIDs(ids...)
	return bpu
}

// AddTags adds the "tags" edges to the BlogTag entity.
func (bpu *BlogPostUpdate) AddTags(b ...*BlogTag) *BlogPostUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bpu.AddTagIDs(ids...)
}

// AddTranslationIDs adds the "translations" edge to the BlogPostTranslation entity by IDs.
func (bpu *BlogPostUpdate) AddTranslationIDs(ids ...uuid.UUID) *BlogPostUpdate {
	bpu.mutation.AddTranslationIDs(ids...)
	return bpu
}

// AddTranslations adds the "translations" edges to the BlogPostTranslation entity.
func (bpu *BlogPostUpdate) AddTranslations(b ...*BlogPostTranslation) *BlogPostUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bpu.AddTranslationIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the BlogComment entity by IDs.
func (bpu *BlogPostUpdate) AddCommentIDs(ids ...uuid.UUID) *BlogPostUpdate {
	bpu.mutation.AddCommentIDs(ids...)
	return bpu
}

// AddComments adds the "comments" edges to the BlogComment entity.
func (bpu *BlogPostUpdate) AddComments(b ...*BlogComment) *BlogPostUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bpu.AddCommentIDs(ids...)
}

// Mutation returns the BlogPostMutation object of the builder.
func (bpu *BlogPostUpdate) Mutation() *BlogPostMutation {
	return bpu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (bpu *BlogPostUpdate) ClearUser() *BlogPostUpdate {
	bpu.mutation.ClearUser()
	return bpu
}

// ClearCategory clears the "category" edge to the BlogCategory entity.
func (bpu *BlogPostUpdate) ClearCategory() *BlogPostUpdate {
	bpu.mutation.ClearCategory()
	return bpu
}

// ClearSeries clears the "series" edge to the BlogSeries entity.
func (bpu *BlogPostUpdate) ClearSeries() *BlogPostUpdate {
	bpu.mutation.ClearSeries()
	return bpu
}

// ClearTags clears all "tags" edges to the BlogTag entity.
func (bpu *BlogPostUpdate) ClearTags() *BlogPostUpdate {
	bpu.mutation.ClearTags()
	return bpu
}

// RemoveTagIDs removes the "tags" edge to BlogTag entities by IDs.
func (bpu *BlogPostUpdate) RemoveTagIDs(ids ...uuid.UUID) *BlogPostUpdate {
	bpu.mutation.RemoveTagIDs(ids...)
	return bpu
}

// RemoveTags removes "tags" edges to BlogTag entities.
func (bpu *BlogPostUpdate) RemoveTags(b ...*BlogTag) *BlogPostUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bpu.RemoveTagIDs(ids...)
}

// ClearTranslations clears all "translations" edges to the BlogPostTranslation entity.
func (bpu *BlogPostUpdate) ClearTranslations() *BlogPostUpdate {
	bpu.mutation.ClearTranslations()
	return bpu
}

// RemoveTranslationIDs removes the "translations" edge to BlogPostTranslation entities by IDs.
func (bpu *BlogPostUpdate) RemoveTranslationIDs(ids ...uuid.UUID) *BlogPostUpdate {
	bpu.mutation.RemoveTranslationIDs(ids...)
	return bpu
}

// RemoveTranslations removes "translations" edges to BlogPostTranslation entities.
func (bpu *BlogPostUpdate) RemoveTranslations(b ...*BlogPostTranslation) *BlogPostUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bpu.RemoveTranslationIDs(ids...)
}

// ClearComments clears all "comments" edges to the BlogComment entity.
func (bpu *BlogPostUpdate) ClearComments() *BlogPostUpdate {
	bpu.mutation.ClearComments()
	return bpu
}

// RemoveCommentIDs removes the "comments" edge to BlogComment entities by IDs.
func (bpu *BlogPostUpdate) RemoveCommentIDs(ids ...uuid.UUID) *BlogPostUpdate {
	bpu.mutation.RemoveCommentIDs(ids...)
	return bpu
}

// RemoveComments removes "comments" edges to BlogComment entities.
func (bpu *BlogPostUpdate) RemoveComments(b ...*BlogComment) *BlogPostUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bpu.RemoveCommentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bpu *BlogPostUpdate) Save(ctx context.Context) (int, error) {
	bpu.defaults()
	return withHooks(ctx, bpu.sqlSave, bpu.mutation, bpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bpu *BlogPostUpdate) SaveX(ctx context.Context) int {
	affected, err := bpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bpu *BlogPostUpdate) Exec(ctx context.Context) error {
	_, err := bpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpu *BlogPostUpdate) ExecX(ctx context.Context) {
	if err := bpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bpu *BlogPostUpdate) defaults() {
	if _, ok := bpu.mutation.UpdatedAt(); !ok {
		v := blogpost.UpdateDefaultUpdatedAt()
		bpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bpu *BlogPostUpdate) check() error {
	if v, ok := bpu.mutation.Title(); ok {
		if err := blogpost.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "BlogPost.title": %w`, err)}
		}
	}
	if v, ok := bpu.mutation.Slug(); ok {
		if err := blogpost.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "BlogPost.slug": %w`, err)}
		}
	}
	if v, ok := bpu.mutation.Content(); ok {
		if err := blogpost.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "BlogPost.content": %w`, err)}
		}
	}
	if v, ok := bpu.mutation.ContentType(); ok {
		if err := blogpost.ContentTypeValidator(v); err != nil {
			return &ValidationError{Name: "content_type", err: fmt.Errorf(`ent: validator failed for field "BlogPost.content_type": %w`, err)}
		}
	}
	if v, ok := bpu.mutation.Status(); ok {
		if err := blogpost.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "BlogPost.status": %w`, err)}
		}
	}
	if v, ok := bpu.mutation.FeaturedImageURL(); ok {
		if err := blogpost.FeaturedImageURLValidator(v); err != nil {
			return &ValidationError{Name: "featured_image_url", err: fmt.Errorf(`ent: validator failed for field "BlogPost.featured_image_url": %w`, err)}
		}
	}
	if bpu.mutation.UserCleared() && len(bpu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlogPost.user"`)
	}
	return nil
}

func (bpu *BlogPostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(blogpost.Table, blogpost.Columns, sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID))
	if ps := bpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bpu.mutation.Title(); ok {
		_spec.SetField(blogpost.FieldTitle, field.TypeString, value)
	}
	if value, ok := bpu.mutation.Slug(); ok {
		_spec.SetField(blogpost.FieldSlug, field.TypeString, value)
	}
	if value, ok := bpu.mutation.Excerpt(); ok {
		_spec.SetField(blogpost.FieldExcerpt, field.TypeString, value)
	}
	if bpu.mutation.ExcerptCleared() {
		_spec.ClearField(blogpost.FieldExcerpt, field.TypeString)
	}
	if value, ok := bpu.mutation.Content(); ok {
		_spec.SetField(blogpost.FieldContent, field.TypeString, value)
	}
	if value, ok := bpu.mutation.ContentType(); ok {
		_spec.SetField(blogpost.FieldContentType, field.TypeEnum, value)
	}
	if value, ok := bpu.mutation.Status(); ok {
		_spec.SetField(blogpost.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := bpu.mutation.IsFeatured(); ok {
		_spec.SetField(blogpost.FieldIsFeatured, field.TypeBool, value)
	}
	if value, ok := bpu.mutation.FeaturedImageURL(); ok {
		_spec.SetField(blogpost.FieldFeaturedImageURL, field.TypeString, value)
	}
	if bpu.mutation.FeaturedImageURLCleared() {
		_spec.ClearField(blogpost.FieldFeaturedImageURL, field.TypeString)
	}
	if value, ok := bpu.mutation.ReadingTimeMinutes(); ok {
		_spec.SetField(blogpost.FieldReadingTimeMinutes, field.TypeInt, value)
	}
	if value, ok := bpu.mutation.AddedReadingTimeMinutes(); ok {
		_spec.AddField(blogpost.FieldReadingTimeMinutes, field.TypeInt, value)
	}
	if bpu.mutation.ReadingTimeMinutesCleared() {
		_spec.ClearField(blogpost.FieldReadingTimeMinutes, field.TypeInt)
	}
	if value, ok := bpu.mutation.ViewCount(); ok {
		_spec.SetField(blogpost.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := bpu.mutation.AddedViewCount(); ok {
		_spec.AddField(blogpost.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := bpu.mutation.LikeCount(); ok {
		_spec.SetField(blogpost.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := bpu.mutation.AddedLikeCount(); ok {
		_spec.AddField(blogpost.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := bpu.mutation.CommentCount(); ok {
		_spec.SetField(blogpost.FieldCommentCount, field.TypeInt, value)
	}
	if value, ok := bpu.mutation.AddedCommentCount(); ok {
		_spec.AddField(blogpost.FieldCommentCount, field.TypeInt, value)
	}
	if value, ok := bpu.mutation.PublishedAt(); ok {
		_spec.SetField(blogpost.FieldPublishedAt, field.TypeTime, value)
	}
	if bpu.mutation.PublishedAtCleared() {
		_spec.ClearField(blogpost.FieldPublishedAt, field.TypeTime)
	}
	if value, ok := bpu.mutation.SeriesOrder(); ok {
		_spec.SetField(blogpost.FieldSeriesOrder, field.TypeInt, value)
	}
	if value, ok := bpu.mutation.AddedSeriesOrder(); ok {
		_spec.AddField(blogpost.FieldSeriesOrder, field.TypeInt, value)
	}
	if bpu.mutation.SeriesOrderCleared() {
		_spec.ClearField(blogpost.FieldSeriesOrder, field.TypeInt)
	}
	if value, ok := bpu.mutation.UpdatedAt(); ok {
		_spec.SetField(blogpost.FieldUpdatedAt, field.TypeTime, value)
	}
	if bpu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogpost.UserTable,
			Columns: []string{blogpost.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogpost.UserTable,
			Columns: []string{blogpost.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bpu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogpost.CategoryTable,
			Columns: []string{blogpost.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcategory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpu.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogpost.CategoryTable,
			Columns: []string{blogpost.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bpu.mutation.SeriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogpost.SeriesTable,
			Columns: []string{blogpost.SeriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogseries.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpu.mutation.SeriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogpost.SeriesTable,
			Columns: []string{blogpost.SeriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogseries.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bpu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   blogpost.TagsTable,
			Columns: blogpost.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogtag.FieldID, field.TypeUUID),
			},
		}
		createE := &BlogPostTagCreate{config: bpu.config, mutation: newBlogPostTagMutation(bpu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !bpu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   blogpost.TagsTable,
			Columns: blogpost.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogtag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &BlogPostTagCreate{config: bpu.config, mutation: newBlogPostTagMutation(bpu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   blogpost.TagsTable,
			Columns: blogpost.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogtag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &BlogPostTagCreate{config: bpu.config, mutation: newBlogPostTagMutation(bpu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bpu.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogpost.TranslationsTable,
			Columns: []string{blogpost.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogposttranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpu.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !bpu.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogpost.TranslationsTable,
			Columns: []string{blogpost.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogposttranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpu.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogpost.TranslationsTable,
			Columns: []string{blogpost.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogposttranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bpu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogpost.CommentsTable,
			Columns: []string{blogpost.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcomment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpu.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !bpu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogpost.CommentsTable,
			Columns: []string{blogpost.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogpost.CommentsTable,
			Columns: []string{blogpost.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blogpost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bpu.mutation.done = true
	return n, nil
}

// BlogPostUpdateOne is the builder for updating a single BlogPost entity.
type BlogPostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlogPostMutation
}

// SetUserID sets the "user_id" field.
func (bpuo *BlogPostUpdateOne) SetUserID(u uuid.UUID) *BlogPostUpdateOne {
	bpuo.mutation.SetUserID(u)
	return bpuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (bpuo *BlogPostUpdateOne) SetNillableUserID(u *uuid.UUID) *BlogPostUpdateOne {
	if u != nil {
		bpuo.SetUserID(*u)
	}
	return bpuo
}

// SetCategoryID sets the "category_id" field.
func (bpuo *BlogPostUpdateOne) SetCategoryID(u uuid.UUID) *BlogPostUpdateOne {
	bpuo.mutation.SetCategoryID(u)
	return bpuo
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (bpuo *BlogPostUpdateOne) SetNillableCategoryID(u *uuid.UUID) *BlogPostUpdateOne {
	if u != nil {
		bpuo.SetCategoryID(*u)
	}
	return bpuo
}

// ClearCategoryID clears the value of the "category_id" field.
func (bpuo *BlogPostUpdateOne) ClearCategoryID() *BlogPostUpdateOne {
	bpuo.mutation.ClearCategoryID()
	return bpuo
}

// SetSeriesID sets the "series_id" field.
func (bpuo *BlogPostUpdateOne) SetSeriesID(u uuid.UUID) *BlogPostUpdateOne {
	bpuo.mutation.SetSeriesID(u)
	return bpuo
}

// SetNillableSeriesID sets the "series_id" field if the given value is not nil.
func (bpuo *BlogPostUpdateOne) SetNillableSeriesID(u *uuid.UUID) *BlogPostUpdateOne {
	if u != nil {
		bpuo.SetSeriesID(*u)
	}
	return bpuo
}

// ClearSeriesID clears the value of the "series_id" field.
func (bpuo *BlogPostUpdateOne) ClearSeriesID() *BlogPostUpdateOne {
	bpuo.mutation.ClearSeriesID()
	return bpuo
}

// SetTitle sets the "title" field.
func (bpuo *BlogPostUpdateOne) SetTitle(s string) *BlogPostUpdateOne {
	bpuo.mutation.SetTitle(s)
	return bpuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (bpuo *BlogPostUpdateOne) SetNillableTitle(s *string) *BlogPostUpdateOne {
	if s != nil {
		bpuo.SetTitle(*s)
	}
	return bpuo
}

// SetSlug sets the "slug" field.
func (bpuo *BlogPostUpdateOne) SetSlug(s string) *BlogPostUpdateOne {
	bpuo.mutation.SetSlug(s)
	return bpuo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (bpuo *BlogPostUpdateOne) SetNillableSlug(s *string) *BlogPostUpdateOne {
	if s != nil {
		bpuo.SetSlug(*s)
	}
	return bpuo
}

// SetExcerpt sets the "excerpt" field.
func (bpuo *BlogPostUpdateOne) SetExcerpt(s string) *BlogPostUpdateOne {
	bpuo.mutation.SetExcerpt(s)
	return bpuo
}

// SetNillableExcerpt sets the "excerpt" field if the given value is not nil.
func (bpuo *BlogPostUpdateOne) SetNillableExcerpt(s *string) *BlogPostUpdateOne {
	if s != nil {
		bpuo.SetExcerpt(*s)
	}
	return bpuo
}

// ClearExcerpt clears the value of the "excerpt" field.
func (bpuo *BlogPostUpdateOne) ClearExcerpt() *BlogPostUpdateOne {
	bpuo.mutation.ClearExcerpt()
	return bpuo
}

// SetContent sets the "content" field.
func (bpuo *BlogPostUpdateOne) SetContent(s string) *BlogPostUpdateOne {
	bpuo.mutation.SetContent(s)
	return bpuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (bpuo *BlogPostUpdateOne) SetNillableContent(s *string) *BlogPostUpdateOne {
	if s != nil {
		bpuo.SetContent(*s)
	}
	return bpuo
}

// SetContentType sets the "content_type" field.
func (bpuo *BlogPostUpdateOne) SetContentType(bt blogpost.ContentType) *BlogPostUpdateOne {
	bpuo.mutation.SetContentType(bt)
	return bpuo
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (bpuo *BlogPostUpdateOne) SetNillableContentType(bt *blogpost.ContentType) *BlogPostUpdateOne {
	if bt != nil {
		bpuo.SetContentType(*bt)
	}
	return bpuo
}

// SetStatus sets the "status" field.
func (bpuo *BlogPostUpdateOne) SetStatus(b blogpost.Status) *BlogPostUpdateOne {
	bpuo.mutation.SetStatus(b)
	return bpuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bpuo *BlogPostUpdateOne) SetNillableStatus(b *blogpost.Status) *BlogPostUpdateOne {
	if b != nil {
		bpuo.SetStatus(*b)
	}
	return bpuo
}

// SetIsFeatured sets the "is_featured" field.
func (bpuo *BlogPostUpdateOne) SetIsFeatured(b bool) *BlogPostUpdateOne {
	bpuo.mutation.SetIsFeatured(b)
	return bpuo
}

// SetNillableIsFeatured sets the "is_featured" field if the given value is not nil.
func (bpuo *BlogPostUpdateOne) SetNillableIsFeatured(b *bool) *BlogPostUpdateOne {
	if b != nil {
		bpuo.SetIsFeatured(*b)
	}
	return bpuo
}

// SetFeaturedImageURL sets the "featured_image_url" field.
func (bpuo *BlogPostUpdateOne) SetFeaturedImageURL(s string) *BlogPostUpdateOne {
	bpuo.mutation.SetFeaturedImageURL(s)
	return bpuo
}

// SetNillableFeaturedImageURL sets the "featured_image_url" field if the given value is not nil.
func (bpuo *BlogPostUpdateOne) SetNillableFeaturedImageURL(s *string) *BlogPostUpdateOne {
	if s != nil {
		bpuo.SetFeaturedImageURL(*s)
	}
	return bpuo
}

// ClearFeaturedImageURL clears the value of the "featured_image_url" field.
func (bpuo *BlogPostUpdateOne) ClearFeaturedImageURL() *BlogPostUpdateOne {
	bpuo.mutation.ClearFeaturedImageURL()
	return bpuo
}

// SetReadingTimeMinutes sets the "reading_time_minutes" field.
func (bpuo *BlogPostUpdateOne) SetReadingTimeMinutes(i int) *BlogPostUpdateOne {
	bpuo.mutation.ResetReadingTimeMinutes()
	bpuo.mutation.SetReadingTimeMinutes(i)
	return bpuo
}

// SetNillableReadingTimeMinutes sets the "reading_time_minutes" field if the given value is not nil.
func (bpuo *BlogPostUpdateOne) SetNillableReadingTimeMinutes(i *int) *BlogPostUpdateOne {
	if i != nil {
		bpuo.SetReadingTimeMinutes(*i)
	}
	return bpuo
}

// AddReadingTimeMinutes adds i to the "reading_time_minutes" field.
func (bpuo *BlogPostUpdateOne) AddReadingTimeMinutes(i int) *BlogPostUpdateOne {
	bpuo.mutation.AddReadingTimeMinutes(i)
	return bpuo
}

// ClearReadingTimeMinutes clears the value of the "reading_time_minutes" field.
func (bpuo *BlogPostUpdateOne) ClearReadingTimeMinutes() *BlogPostUpdateOne {
	bpuo.mutation.ClearReadingTimeMinutes()
	return bpuo
}

// SetViewCount sets the "view_count" field.
func (bpuo *BlogPostUpdateOne) SetViewCount(i int) *BlogPostUpdateOne {
	bpuo.mutation.ResetViewCount()
	bpuo.mutation.SetViewCount(i)
	return bpuo
}

// SetNillableViewCount sets the "view_count" field if the given value is not nil.
func (bpuo *BlogPostUpdateOne) SetNillableViewCount(i *int) *BlogPostUpdateOne {
	if i != nil {
		bpuo.SetViewCount(*i)
	}
	return bpuo
}

// AddViewCount adds i to the "view_count" field.
func (bpuo *BlogPostUpdateOne) AddViewCount(i int) *BlogPostUpdateOne {
	bpuo.mutation.AddViewCount(i)
	return bpuo
}

// SetLikeCount sets the "like_count" field.
func (bpuo *BlogPostUpdateOne) SetLikeCount(i int) *BlogPostUpdateOne {
	bpuo.mutation.ResetLikeCount()
	bpuo.mutation.SetLikeCount(i)
	return bpuo
}

// SetNillableLikeCount sets the "like_count" field if the given value is not nil.
func (bpuo *BlogPostUpdateOne) SetNillableLikeCount(i *int) *BlogPostUpdateOne {
	if i != nil {
		bpuo.SetLikeCount(*i)
	}
	return bpuo
}

// AddLikeCount adds i to the "like_count" field.
func (bpuo *BlogPostUpdateOne) AddLikeCount(i int) *BlogPostUpdateOne {
	bpuo.mutation.AddLikeCount(i)
	return bpuo
}

// SetCommentCount sets the "comment_count" field.
func (bpuo *BlogPostUpdateOne) SetCommentCount(i int) *BlogPostUpdateOne {
	bpuo.mutation.ResetCommentCount()
	bpuo.mutation.SetCommentCount(i)
	return bpuo
}

// SetNillableCommentCount sets the "comment_count" field if the given value is not nil.
func (bpuo *BlogPostUpdateOne) SetNillableCommentCount(i *int) *BlogPostUpdateOne {
	if i != nil {
		bpuo.SetCommentCount(*i)
	}
	return bpuo
}

// AddCommentCount adds i to the "comment_count" field.
func (bpuo *BlogPostUpdateOne) AddCommentCount(i int) *BlogPostUpdateOne {
	bpuo.mutation.AddCommentCount(i)
	return bpuo
}

// SetPublishedAt sets the "published_at" field.
func (bpuo *BlogPostUpdateOne) SetPublishedAt(t time.Time) *BlogPostUpdateOne {
	bpuo.mutation.SetPublishedAt(t)
	return bpuo
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (bpuo *BlogPostUpdateOne) SetNillablePublishedAt(t *time.Time) *BlogPostUpdateOne {
	if t != nil {
		bpuo.SetPublishedAt(*t)
	}
	return bpuo
}

// ClearPublishedAt clears the value of the "published_at" field.
func (bpuo *BlogPostUpdateOne) ClearPublishedAt() *BlogPostUpdateOne {
	bpuo.mutation.ClearPublishedAt()
	return bpuo
}

// SetSeriesOrder sets the "series_order" field.
func (bpuo *BlogPostUpdateOne) SetSeriesOrder(i int) *BlogPostUpdateOne {
	bpuo.mutation.ResetSeriesOrder()
	bpuo.mutation.SetSeriesOrder(i)
	return bpuo
}

// SetNillableSeriesOrder sets the "series_order" field if the given value is not nil.
func (bpuo *BlogPostUpdateOne) SetNillableSeriesOrder(i *int) *BlogPostUpdateOne {
	if i != nil {
		bpuo.SetSeriesOrder(*i)
	}
	return bpuo
}

// AddSeriesOrder adds i to the "series_order" field.
func (bpuo *BlogPostUpdateOne) AddSeriesOrder(i int) *BlogPostUpdateOne {
	bpuo.mutation.AddSeriesOrder(i)
	return bpuo
}

// ClearSeriesOrder clears the value of the "series_order" field.
func (bpuo *BlogPostUpdateOne) ClearSeriesOrder() *BlogPostUpdateOne {
	bpuo.mutation.ClearSeriesOrder()
	return bpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (bpuo *BlogPostUpdateOne) SetUpdatedAt(t time.Time) *BlogPostUpdateOne {
	bpuo.mutation.SetUpdatedAt(t)
	return bpuo
}

// SetUser sets the "user" edge to the User entity.
func (bpuo *BlogPostUpdateOne) SetUser(u *User) *BlogPostUpdateOne {
	return bpuo.SetUserID(u.ID)
}

// SetCategory sets the "category" edge to the BlogCategory entity.
func (bpuo *BlogPostUpdateOne) SetCategory(b *BlogCategory) *BlogPostUpdateOne {
	return bpuo.SetCategoryID(b.ID)
}

// SetSeries sets the "series" edge to the BlogSeries entity.
func (bpuo *BlogPostUpdateOne) SetSeries(b *BlogSeries) *BlogPostUpdateOne {
	return bpuo.SetSeriesID(b.ID)
}

// AddTagIDs adds the "tags" edge to the BlogTag entity by IDs.
func (bpuo *BlogPostUpdateOne) AddTagIDs(ids ...uuid.UUID) *BlogPostUpdateOne {
	bpuo.mutation.AddTagIDs(ids...)
	return bpuo
}

// AddTags adds the "tags" edges to the BlogTag entity.
func (bpuo *BlogPostUpdateOne) AddTags(b ...*BlogTag) *BlogPostUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bpuo.AddTagIDs(ids...)
}

// AddTranslationIDs adds the "translations" edge to the BlogPostTranslation entity by IDs.
func (bpuo *BlogPostUpdateOne) AddTranslationIDs(ids ...uuid.UUID) *BlogPostUpdateOne {
	bpuo.mutation.AddTranslationIDs(ids...)
	return bpuo
}

// AddTranslations adds the "translations" edges to the BlogPostTranslation entity.
func (bpuo *BlogPostUpdateOne) AddTranslations(b ...*BlogPostTranslation) *BlogPostUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bpuo.AddTranslationIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the BlogComment entity by IDs.
func (bpuo *BlogPostUpdateOne) AddCommentIDs(ids ...uuid.UUID) *BlogPostUpdateOne {
	bpuo.mutation.AddCommentIDs(ids...)
	return bpuo
}

// AddComments adds the "comments" edges to the BlogComment entity.
func (bpuo *BlogPostUpdateOne) AddComments(b ...*BlogComment) *BlogPostUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bpuo.AddCommentIDs(ids...)
}

// Mutation returns the BlogPostMutation object of the builder.
func (bpuo *BlogPostUpdateOne) Mutation() *BlogPostMutation {
	return bpuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (bpuo *BlogPostUpdateOne) ClearUser() *BlogPostUpdateOne {
	bpuo.mutation.ClearUser()
	return bpuo
}

// ClearCategory clears the "category" edge to the BlogCategory entity.
func (bpuo *BlogPostUpdateOne) ClearCategory() *BlogPostUpdateOne {
	bpuo.mutation.ClearCategory()
	return bpuo
}

// ClearSeries clears the "series" edge to the BlogSeries entity.
func (bpuo *BlogPostUpdateOne) ClearSeries() *BlogPostUpdateOne {
	bpuo.mutation.ClearSeries()
	return bpuo
}

// ClearTags clears all "tags" edges to the BlogTag entity.
func (bpuo *BlogPostUpdateOne) ClearTags() *BlogPostUpdateOne {
	bpuo.mutation.ClearTags()
	return bpuo
}

// RemoveTagIDs removes the "tags" edge to BlogTag entities by IDs.
func (bpuo *BlogPostUpdateOne) RemoveTagIDs(ids ...uuid.UUID) *BlogPostUpdateOne {
	bpuo.mutation.RemoveTagIDs(ids...)
	return bpuo
}

// RemoveTags removes "tags" edges to BlogTag entities.
func (bpuo *BlogPostUpdateOne) RemoveTags(b ...*BlogTag) *BlogPostUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bpuo.RemoveTagIDs(ids...)
}

// ClearTranslations clears all "translations" edges to the BlogPostTranslation entity.
func (bpuo *BlogPostUpdateOne) ClearTranslations() *BlogPostUpdateOne {
	bpuo.mutation.ClearTranslations()
	return bpuo
}

// RemoveTranslationIDs removes the "translations" edge to BlogPostTranslation entities by IDs.
func (bpuo *BlogPostUpdateOne) RemoveTranslationIDs(ids ...uuid.UUID) *BlogPostUpdateOne {
	bpuo.mutation.RemoveTranslationIDs(ids...)
	return bpuo
}

// RemoveTranslations removes "translations" edges to BlogPostTranslation entities.
func (bpuo *BlogPostUpdateOne) RemoveTranslations(b ...*BlogPostTranslation) *BlogPostUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bpuo.RemoveTranslationIDs(ids...)
}

// ClearComments clears all "comments" edges to the BlogComment entity.
func (bpuo *BlogPostUpdateOne) ClearComments() *BlogPostUpdateOne {
	bpuo.mutation.ClearComments()
	return bpuo
}

// RemoveCommentIDs removes the "comments" edge to BlogComment entities by IDs.
func (bpuo *BlogPostUpdateOne) RemoveCommentIDs(ids ...uuid.UUID) *BlogPostUpdateOne {
	bpuo.mutation.RemoveCommentIDs(ids...)
	return bpuo
}

// RemoveComments removes "comments" edges to BlogComment entities.
func (bpuo *BlogPostUpdateOne) RemoveComments(b ...*BlogComment) *BlogPostUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bpuo.RemoveCommentIDs(ids...)
}

// Where appends a list predicates to the BlogPostUpdate builder.
func (bpuo *BlogPostUpdateOne) Where(ps ...predicate.BlogPost) *BlogPostUpdateOne {
	bpuo.mutation.Where(ps...)
	return bpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bpuo *BlogPostUpdateOne) Select(field string, fields ...string) *BlogPostUpdateOne {
	bpuo.fields = append([]string{field}, fields...)
	return bpuo
}

// Save executes the query and returns the updated BlogPost entity.
func (bpuo *BlogPostUpdateOne) Save(ctx context.Context) (*BlogPost, error) {
	bpuo.defaults()
	return withHooks(ctx, bpuo.sqlSave, bpuo.mutation, bpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bpuo *BlogPostUpdateOne) SaveX(ctx context.Context) *BlogPost {
	node, err := bpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bpuo *BlogPostUpdateOne) Exec(ctx context.Context) error {
	_, err := bpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bpuo *BlogPostUpdateOne) ExecX(ctx context.Context) {
	if err := bpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bpuo *BlogPostUpdateOne) defaults() {
	if _, ok := bpuo.mutation.UpdatedAt(); !ok {
		v := blogpost.UpdateDefaultUpdatedAt()
		bpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bpuo *BlogPostUpdateOne) check() error {
	if v, ok := bpuo.mutation.Title(); ok {
		if err := blogpost.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "BlogPost.title": %w`, err)}
		}
	}
	if v, ok := bpuo.mutation.Slug(); ok {
		if err := blogpost.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "BlogPost.slug": %w`, err)}
		}
	}
	if v, ok := bpuo.mutation.Content(); ok {
		if err := blogpost.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "BlogPost.content": %w`, err)}
		}
	}
	if v, ok := bpuo.mutation.ContentType(); ok {
		if err := blogpost.ContentTypeValidator(v); err != nil {
			return &ValidationError{Name: "content_type", err: fmt.Errorf(`ent: validator failed for field "BlogPost.content_type": %w`, err)}
		}
	}
	if v, ok := bpuo.mutation.Status(); ok {
		if err := blogpost.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "BlogPost.status": %w`, err)}
		}
	}
	if v, ok := bpuo.mutation.FeaturedImageURL(); ok {
		if err := blogpost.FeaturedImageURLValidator(v); err != nil {
			return &ValidationError{Name: "featured_image_url", err: fmt.Errorf(`ent: validator failed for field "BlogPost.featured_image_url": %w`, err)}
		}
	}
	if bpuo.mutation.UserCleared() && len(bpuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlogPost.user"`)
	}
	return nil
}

func (bpuo *BlogPostUpdateOne) sqlSave(ctx context.Context) (_node *BlogPost, err error) {
	if err := bpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blogpost.Table, blogpost.Columns, sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID))
	id, ok := bpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlogPost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blogpost.FieldID)
		for _, f := range fields {
			if !blogpost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blogpost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bpuo.mutation.Title(); ok {
		_spec.SetField(blogpost.FieldTitle, field.TypeString, value)
	}
	if value, ok := bpuo.mutation.Slug(); ok {
		_spec.SetField(blogpost.FieldSlug, field.TypeString, value)
	}
	if value, ok := bpuo.mutation.Excerpt(); ok {
		_spec.SetField(blogpost.FieldExcerpt, field.TypeString, value)
	}
	if bpuo.mutation.ExcerptCleared() {
		_spec.ClearField(blogpost.FieldExcerpt, field.TypeString)
	}
	if value, ok := bpuo.mutation.Content(); ok {
		_spec.SetField(blogpost.FieldContent, field.TypeString, value)
	}
	if value, ok := bpuo.mutation.ContentType(); ok {
		_spec.SetField(blogpost.FieldContentType, field.TypeEnum, value)
	}
	if value, ok := bpuo.mutation.Status(); ok {
		_spec.SetField(blogpost.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := bpuo.mutation.IsFeatured(); ok {
		_spec.SetField(blogpost.FieldIsFeatured, field.TypeBool, value)
	}
	if value, ok := bpuo.mutation.FeaturedImageURL(); ok {
		_spec.SetField(blogpost.FieldFeaturedImageURL, field.TypeString, value)
	}
	if bpuo.mutation.FeaturedImageURLCleared() {
		_spec.ClearField(blogpost.FieldFeaturedImageURL, field.TypeString)
	}
	if value, ok := bpuo.mutation.ReadingTimeMinutes(); ok {
		_spec.SetField(blogpost.FieldReadingTimeMinutes, field.TypeInt, value)
	}
	if value, ok := bpuo.mutation.AddedReadingTimeMinutes(); ok {
		_spec.AddField(blogpost.FieldReadingTimeMinutes, field.TypeInt, value)
	}
	if bpuo.mutation.ReadingTimeMinutesCleared() {
		_spec.ClearField(blogpost.FieldReadingTimeMinutes, field.TypeInt)
	}
	if value, ok := bpuo.mutation.ViewCount(); ok {
		_spec.SetField(blogpost.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := bpuo.mutation.AddedViewCount(); ok {
		_spec.AddField(blogpost.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := bpuo.mutation.LikeCount(); ok {
		_spec.SetField(blogpost.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := bpuo.mutation.AddedLikeCount(); ok {
		_spec.AddField(blogpost.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := bpuo.mutation.CommentCount(); ok {
		_spec.SetField(blogpost.FieldCommentCount, field.TypeInt, value)
	}
	if value, ok := bpuo.mutation.AddedCommentCount(); ok {
		_spec.AddField(blogpost.FieldCommentCount, field.TypeInt, value)
	}
	if value, ok := bpuo.mutation.PublishedAt(); ok {
		_spec.SetField(blogpost.FieldPublishedAt, field.TypeTime, value)
	}
	if bpuo.mutation.PublishedAtCleared() {
		_spec.ClearField(blogpost.FieldPublishedAt, field.TypeTime)
	}
	if value, ok := bpuo.mutation.SeriesOrder(); ok {
		_spec.SetField(blogpost.FieldSeriesOrder, field.TypeInt, value)
	}
	if value, ok := bpuo.mutation.AddedSeriesOrder(); ok {
		_spec.AddField(blogpost.FieldSeriesOrder, field.TypeInt, value)
	}
	if bpuo.mutation.SeriesOrderCleared() {
		_spec.ClearField(blogpost.FieldSeriesOrder, field.TypeInt)
	}
	if value, ok := bpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(blogpost.FieldUpdatedAt, field.TypeTime, value)
	}
	if bpuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogpost.UserTable,
			Columns: []string{blogpost.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogpost.UserTable,
			Columns: []string{blogpost.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bpuo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogpost.CategoryTable,
			Columns: []string{blogpost.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcategory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpuo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogpost.CategoryTable,
			Columns: []string{blogpost.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bpuo.mutation.SeriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogpost.SeriesTable,
			Columns: []string{blogpost.SeriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogseries.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpuo.mutation.SeriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogpost.SeriesTable,
			Columns: []string{blogpost.SeriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogseries.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bpuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   blogpost.TagsTable,
			Columns: blogpost.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogtag.FieldID, field.TypeUUID),
			},
		}
		createE := &BlogPostTagCreate{config: bpuo.config, mutation: newBlogPostTagMutation(bpuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpuo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !bpuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   blogpost.TagsTable,
			Columns: blogpost.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogtag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &BlogPostTagCreate{config: bpuo.config, mutation: newBlogPostTagMutation(bpuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpuo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   blogpost.TagsTable,
			Columns: blogpost.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogtag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &BlogPostTagCreate{config: bpuo.config, mutation: newBlogPostTagMutation(bpuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bpuo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogpost.TranslationsTable,
			Columns: []string{blogpost.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogposttranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpuo.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !bpuo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogpost.TranslationsTable,
			Columns: []string{blogpost.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogposttranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpuo.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogpost.TranslationsTable,
			Columns: []string{blogpost.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogposttranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bpuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogpost.CommentsTable,
			Columns: []string{blogpost.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcomment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpuo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !bpuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogpost.CommentsTable,
			Columns: []string{blogpost.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bpuo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogpost.CommentsTable,
			Columns: []string{blogpost.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcomment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BlogPost{config: bpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blogpost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bpuo.mutation.done = true
	return _node, nil
}
