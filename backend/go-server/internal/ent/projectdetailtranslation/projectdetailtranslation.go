// Code generated by ent, DO NOT EDIT.

package projectdetailtranslation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the projectdetailtranslation type in the database.
	Label = "project_detail_translation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProjectDetailID holds the string denoting the project_detail_id field in the database.
	FieldProjectDetailID = "project_detail_id"
	// FieldLanguageCode holds the string denoting the language_code field in the database.
	FieldLanguageCode = "language_code"
	// FieldDetailedDescription holds the string denoting the detailed_description field in the database.
	FieldDetailedDescription = "detailed_description"
	// FieldGoals holds the string denoting the goals field in the database.
	FieldGoals = "goals"
	// FieldChallenges holds the string denoting the challenges field in the database.
	FieldChallenges = "challenges"
	// FieldSolutions holds the string denoting the solutions field in the database.
	FieldSolutions = "solutions"
	// FieldLessonsLearned holds the string denoting the lessons_learned field in the database.
	FieldLessonsLearned = "lessons_learned"
	// FieldFutureEnhancements holds the string denoting the future_enhancements field in the database.
	FieldFutureEnhancements = "future_enhancements"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeProjectDetail holds the string denoting the project_detail edge name in mutations.
	EdgeProjectDetail = "project_detail"
	// EdgeLanguage holds the string denoting the language edge name in mutations.
	EdgeLanguage = "language"
	// LanguageFieldID holds the string denoting the ID field of the Language.
	LanguageFieldID = "code"
	// Table holds the table name of the projectdetailtranslation in the database.
	Table = "project_detail_translations"
	// ProjectDetailTable is the table that holds the project_detail relation/edge.
	ProjectDetailTable = "project_detail_translations"
	// ProjectDetailInverseTable is the table name for the ProjectDetail entity.
	// It exists in this package in order to avoid circular dependency with the "projectdetail" package.
	ProjectDetailInverseTable = "project_details"
	// ProjectDetailColumn is the table column denoting the project_detail relation/edge.
	ProjectDetailColumn = "project_detail_id"
	// LanguageTable is the table that holds the language relation/edge.
	LanguageTable = "project_detail_translations"
	// LanguageInverseTable is the table name for the Language entity.
	// It exists in this package in order to avoid circular dependency with the "language" package.
	LanguageInverseTable = "languages"
	// LanguageColumn is the table column denoting the language relation/edge.
	LanguageColumn = "language_code"
)

// Columns holds all SQL columns for projectdetailtranslation fields.
var Columns = []string{
	FieldID,
	FieldProjectDetailID,
	FieldLanguageCode,
	FieldDetailedDescription,
	FieldGoals,
	FieldChallenges,
	FieldSolutions,
	FieldLessonsLearned,
	FieldFutureEnhancements,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// LanguageCodeValidator is a validator for the "language_code" field. It is called by the builders before save.
	LanguageCodeValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ProjectDetailTranslation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByProjectDetailID orders the results by the project_detail_id field.
func ByProjectDetailID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectDetailID, opts...).ToFunc()
}

// ByLanguageCode orders the results by the language_code field.
func ByLanguageCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguageCode, opts...).ToFunc()
}

// ByDetailedDescription orders the results by the detailed_description field.
func ByDetailedDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDetailedDescription, opts...).ToFunc()
}

// ByGoals orders the results by the goals field.
func ByGoals(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoals, opts...).ToFunc()
}

// ByChallenges orders the results by the challenges field.
func ByChallenges(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChallenges, opts...).ToFunc()
}

// BySolutions orders the results by the solutions field.
func BySolutions(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSolutions, opts...).ToFunc()
}

// ByLessonsLearned orders the results by the lessons_learned field.
func ByLessonsLearned(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLessonsLearned, opts...).ToFunc()
}

// ByFutureEnhancements orders the results by the future_enhancements field.
func ByFutureEnhancements(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFutureEnhancements, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByProjectDetailField orders the results by project_detail field.
func ByProjectDetailField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectDetailStep(), sql.OrderByField(field, opts...))
	}
}

// ByLanguageField orders the results by language field.
func ByLanguageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLanguageStep(), sql.OrderByField(field, opts...))
	}
}
func newProjectDetailStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectDetailInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProjectDetailTable, ProjectDetailColumn),
	)
}
func newLanguageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LanguageInverseTable, LanguageFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LanguageTable, LanguageColumn),
	)
}
