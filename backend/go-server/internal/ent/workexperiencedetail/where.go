// Code generated by ent, DO NOT EDIT.

package workexperiencedetail

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldLTE(FieldID, id))
}

// WorkExperienceID applies equality check predicate on the "work_experience_id" field. It's identical to WorkExperienceIDEQ.
func WorkExperienceID(v uuid.UUID) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldEQ(FieldWorkExperienceID, v))
}

// DetailText applies equality check predicate on the "detail_text" field. It's identical to DetailTextEQ.
func DetailText(v string) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldEQ(FieldDetailText, v))
}

// SortOrder applies equality check predicate on the "sort_order" field. It's identical to SortOrderEQ.
func SortOrder(v int) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldEQ(FieldSortOrder, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldEQ(FieldUpdatedAt, v))
}

// WorkExperienceIDEQ applies the EQ predicate on the "work_experience_id" field.
func WorkExperienceIDEQ(v uuid.UUID) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldEQ(FieldWorkExperienceID, v))
}

// WorkExperienceIDNEQ applies the NEQ predicate on the "work_experience_id" field.
func WorkExperienceIDNEQ(v uuid.UUID) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldNEQ(FieldWorkExperienceID, v))
}

// WorkExperienceIDIn applies the In predicate on the "work_experience_id" field.
func WorkExperienceIDIn(vs ...uuid.UUID) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldIn(FieldWorkExperienceID, vs...))
}

// WorkExperienceIDNotIn applies the NotIn predicate on the "work_experience_id" field.
func WorkExperienceIDNotIn(vs ...uuid.UUID) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldNotIn(FieldWorkExperienceID, vs...))
}

// DetailTextEQ applies the EQ predicate on the "detail_text" field.
func DetailTextEQ(v string) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldEQ(FieldDetailText, v))
}

// DetailTextNEQ applies the NEQ predicate on the "detail_text" field.
func DetailTextNEQ(v string) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldNEQ(FieldDetailText, v))
}

// DetailTextIn applies the In predicate on the "detail_text" field.
func DetailTextIn(vs ...string) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldIn(FieldDetailText, vs...))
}

// DetailTextNotIn applies the NotIn predicate on the "detail_text" field.
func DetailTextNotIn(vs ...string) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldNotIn(FieldDetailText, vs...))
}

// DetailTextGT applies the GT predicate on the "detail_text" field.
func DetailTextGT(v string) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldGT(FieldDetailText, v))
}

// DetailTextGTE applies the GTE predicate on the "detail_text" field.
func DetailTextGTE(v string) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldGTE(FieldDetailText, v))
}

// DetailTextLT applies the LT predicate on the "detail_text" field.
func DetailTextLT(v string) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldLT(FieldDetailText, v))
}

// DetailTextLTE applies the LTE predicate on the "detail_text" field.
func DetailTextLTE(v string) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldLTE(FieldDetailText, v))
}

// DetailTextContains applies the Contains predicate on the "detail_text" field.
func DetailTextContains(v string) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldContains(FieldDetailText, v))
}

// DetailTextHasPrefix applies the HasPrefix predicate on the "detail_text" field.
func DetailTextHasPrefix(v string) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldHasPrefix(FieldDetailText, v))
}

// DetailTextHasSuffix applies the HasSuffix predicate on the "detail_text" field.
func DetailTextHasSuffix(v string) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldHasSuffix(FieldDetailText, v))
}

// DetailTextEqualFold applies the EqualFold predicate on the "detail_text" field.
func DetailTextEqualFold(v string) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldEqualFold(FieldDetailText, v))
}

// DetailTextContainsFold applies the ContainsFold predicate on the "detail_text" field.
func DetailTextContainsFold(v string) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldContainsFold(FieldDetailText, v))
}

// SortOrderEQ applies the EQ predicate on the "sort_order" field.
func SortOrderEQ(v int) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldEQ(FieldSortOrder, v))
}

// SortOrderNEQ applies the NEQ predicate on the "sort_order" field.
func SortOrderNEQ(v int) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldNEQ(FieldSortOrder, v))
}

// SortOrderIn applies the In predicate on the "sort_order" field.
func SortOrderIn(vs ...int) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldIn(FieldSortOrder, vs...))
}

// SortOrderNotIn applies the NotIn predicate on the "sort_order" field.
func SortOrderNotIn(vs ...int) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldNotIn(FieldSortOrder, vs...))
}

// SortOrderGT applies the GT predicate on the "sort_order" field.
func SortOrderGT(v int) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldGT(FieldSortOrder, v))
}

// SortOrderGTE applies the GTE predicate on the "sort_order" field.
func SortOrderGTE(v int) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldGTE(FieldSortOrder, v))
}

// SortOrderLT applies the LT predicate on the "sort_order" field.
func SortOrderLT(v int) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldLT(FieldSortOrder, v))
}

// SortOrderLTE applies the LTE predicate on the "sort_order" field.
func SortOrderLTE(v int) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldLTE(FieldSortOrder, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasWorkExperience applies the HasEdge predicate on the "work_experience" edge.
func HasWorkExperience() predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkExperienceTable, WorkExperienceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkExperienceWith applies the HasEdge predicate on the "work_experience" edge with a given conditions (other predicates).
func HasWorkExperienceWith(preds ...predicate.WorkExperience) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(func(s *sql.Selector) {
		step := newWorkExperienceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTranslations applies the HasEdge predicate on the "translations" edge.
func HasTranslations() predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TranslationsTable, TranslationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTranslationsWith applies the HasEdge predicate on the "translations" edge with a given conditions (other predicates).
func HasTranslationsWith(preds ...predicate.WorkExperienceDetailTranslation) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(func(s *sql.Selector) {
		step := newTranslationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkExperienceDetail) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkExperienceDetail) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkExperienceDetail) predicate.WorkExperienceDetail {
	return predicate.WorkExperienceDetail(sql.NotPredicates(p))
}
