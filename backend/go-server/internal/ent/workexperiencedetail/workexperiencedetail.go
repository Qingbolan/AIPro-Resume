// Code generated by ent, DO NOT EDIT.

package workexperiencedetail

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the workexperiencedetail type in the database.
	Label = "work_experience_detail"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldWorkExperienceID holds the string denoting the work_experience_id field in the database.
	FieldWorkExperienceID = "work_experience_id"
	// FieldDetailText holds the string denoting the detail_text field in the database.
	FieldDetailText = "detail_text"
	// FieldSortOrder holds the string denoting the sort_order field in the database.
	FieldSortOrder = "sort_order"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeWorkExperience holds the string denoting the work_experience edge name in mutations.
	EdgeWorkExperience = "work_experience"
	// EdgeTranslations holds the string denoting the translations edge name in mutations.
	EdgeTranslations = "translations"
	// Table holds the table name of the workexperiencedetail in the database.
	Table = "work_experience_details"
	// WorkExperienceTable is the table that holds the work_experience relation/edge.
	WorkExperienceTable = "work_experience_details"
	// WorkExperienceInverseTable is the table name for the WorkExperience entity.
	// It exists in this package in order to avoid circular dependency with the "workexperience" package.
	WorkExperienceInverseTable = "work_experience"
	// WorkExperienceColumn is the table column denoting the work_experience relation/edge.
	WorkExperienceColumn = "work_experience_id"
	// TranslationsTable is the table that holds the translations relation/edge.
	TranslationsTable = "work_experience_detail_translations"
	// TranslationsInverseTable is the table name for the WorkExperienceDetailTranslation entity.
	// It exists in this package in order to avoid circular dependency with the "workexperiencedetailtranslation" package.
	TranslationsInverseTable = "work_experience_detail_translations"
	// TranslationsColumn is the table column denoting the translations relation/edge.
	TranslationsColumn = "work_experience_detail_id"
)

// Columns holds all SQL columns for workexperiencedetail fields.
var Columns = []string{
	FieldID,
	FieldWorkExperienceID,
	FieldDetailText,
	FieldSortOrder,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DetailTextValidator is a validator for the "detail_text" field. It is called by the builders before save.
	DetailTextValidator func(string) error
	// DefaultSortOrder holds the default value on creation for the "sort_order" field.
	DefaultSortOrder int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the WorkExperienceDetail queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByWorkExperienceID orders the results by the work_experience_id field.
func ByWorkExperienceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkExperienceID, opts...).ToFunc()
}

// ByDetailText orders the results by the detail_text field.
func ByDetailText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDetailText, opts...).ToFunc()
}

// BySortOrder orders the results by the sort_order field.
func BySortOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSortOrder, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByWorkExperienceField orders the results by work_experience field.
func ByWorkExperienceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkExperienceStep(), sql.OrderByField(field, opts...))
	}
}

// ByTranslationsCount orders the results by translations count.
func ByTranslationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTranslationsStep(), opts...)
	}
}

// ByTranslations orders the results by translations terms.
func ByTranslations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTranslationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newWorkExperienceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkExperienceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WorkExperienceTable, WorkExperienceColumn),
	)
}
func newTranslationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TranslationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TranslationsTable, TranslationsColumn),
	)
}
