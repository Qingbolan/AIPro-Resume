// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/researchprojectdetailtranslation"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ResearchProjectDetailTranslationDelete is the builder for deleting a ResearchProjectDetailTranslation entity.
type ResearchProjectDetailTranslationDelete struct {
	config
	hooks    []Hook
	mutation *ResearchProjectDetailTranslationMutation
}

// Where appends a list predicates to the ResearchProjectDetailTranslationDelete builder.
func (rpdtd *ResearchProjectDetailTranslationDelete) Where(ps ...predicate.ResearchProjectDetailTranslation) *ResearchProjectDetailTranslationDelete {
	rpdtd.mutation.Where(ps...)
	return rpdtd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rpdtd *ResearchProjectDetailTranslationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rpdtd.sqlExec, rpdtd.mutation, rpdtd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rpdtd *ResearchProjectDetailTranslationDelete) ExecX(ctx context.Context) int {
	n, err := rpdtd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rpdtd *ResearchProjectDetailTranslationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(researchprojectdetailtranslation.Table, sqlgraph.NewFieldSpec(researchprojectdetailtranslation.FieldID, field.TypeUUID))
	if ps := rpdtd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rpdtd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rpdtd.mutation.done = true
	return affected, err
}

// ResearchProjectDetailTranslationDeleteOne is the builder for deleting a single ResearchProjectDetailTranslation entity.
type ResearchProjectDetailTranslationDeleteOne struct {
	rpdtd *ResearchProjectDetailTranslationDelete
}

// Where appends a list predicates to the ResearchProjectDetailTranslationDelete builder.
func (rpdtdo *ResearchProjectDetailTranslationDeleteOne) Where(ps ...predicate.ResearchProjectDetailTranslation) *ResearchProjectDetailTranslationDeleteOne {
	rpdtdo.rpdtd.mutation.Where(ps...)
	return rpdtdo
}

// Exec executes the deletion query.
func (rpdtdo *ResearchProjectDetailTranslationDeleteOne) Exec(ctx context.Context) error {
	n, err := rpdtdo.rpdtd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{researchprojectdetailtranslation.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rpdtdo *ResearchProjectDetailTranslationDeleteOne) ExecX(ctx context.Context) {
	if err := rpdtdo.Exec(ctx); err != nil {
		panic(err)
	}
}
