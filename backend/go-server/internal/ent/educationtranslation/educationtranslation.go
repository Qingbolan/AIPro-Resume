// Code generated by ent, DO NOT EDIT.

package educationtranslation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the educationtranslation type in the database.
	Label = "education_translation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEducationID holds the string denoting the education_id field in the database.
	FieldEducationID = "education_id"
	// FieldLanguageCode holds the string denoting the language_code field in the database.
	FieldLanguageCode = "language_code"
	// FieldInstitution holds the string denoting the institution field in the database.
	FieldInstitution = "institution"
	// FieldDegree holds the string denoting the degree field in the database.
	FieldDegree = "degree"
	// FieldFieldOfStudy holds the string denoting the field_of_study field in the database.
	FieldFieldOfStudy = "field_of_study"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeEducation holds the string denoting the education edge name in mutations.
	EdgeEducation = "education"
	// EdgeLanguage holds the string denoting the language edge name in mutations.
	EdgeLanguage = "language"
	// LanguageFieldID holds the string denoting the ID field of the Language.
	LanguageFieldID = "code"
	// Table holds the table name of the educationtranslation in the database.
	Table = "education_translations"
	// EducationTable is the table that holds the education relation/edge.
	EducationTable = "education_translations"
	// EducationInverseTable is the table name for the Education entity.
	// It exists in this package in order to avoid circular dependency with the "education" package.
	EducationInverseTable = "education"
	// EducationColumn is the table column denoting the education relation/edge.
	EducationColumn = "education_id"
	// LanguageTable is the table that holds the language relation/edge.
	LanguageTable = "education_translations"
	// LanguageInverseTable is the table name for the Language entity.
	// It exists in this package in order to avoid circular dependency with the "language" package.
	LanguageInverseTable = "languages"
	// LanguageColumn is the table column denoting the language relation/edge.
	LanguageColumn = "language_code"
)

// Columns holds all SQL columns for educationtranslation fields.
var Columns = []string{
	FieldID,
	FieldEducationID,
	FieldLanguageCode,
	FieldInstitution,
	FieldDegree,
	FieldFieldOfStudy,
	FieldLocation,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// LanguageCodeValidator is a validator for the "language_code" field. It is called by the builders before save.
	LanguageCodeValidator func(string) error
	// InstitutionValidator is a validator for the "institution" field. It is called by the builders before save.
	InstitutionValidator func(string) error
	// DegreeValidator is a validator for the "degree" field. It is called by the builders before save.
	DegreeValidator func(string) error
	// FieldOfStudyValidator is a validator for the "field_of_study" field. It is called by the builders before save.
	FieldOfStudyValidator func(string) error
	// LocationValidator is a validator for the "location" field. It is called by the builders before save.
	LocationValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the EducationTranslation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEducationID orders the results by the education_id field.
func ByEducationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEducationID, opts...).ToFunc()
}

// ByLanguageCode orders the results by the language_code field.
func ByLanguageCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguageCode, opts...).ToFunc()
}

// ByInstitution orders the results by the institution field.
func ByInstitution(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstitution, opts...).ToFunc()
}

// ByDegree orders the results by the degree field.
func ByDegree(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDegree, opts...).ToFunc()
}

// ByFieldOfStudy orders the results by the field_of_study field.
func ByFieldOfStudy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFieldOfStudy, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByEducationField orders the results by education field.
func ByEducationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEducationStep(), sql.OrderByField(field, opts...))
	}
}

// ByLanguageField orders the results by language field.
func ByLanguageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLanguageStep(), sql.OrderByField(field, opts...))
	}
}
func newEducationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EducationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EducationTable, EducationColumn),
	)
}
func newLanguageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LanguageInverseTable, LanguageFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LanguageTable, LanguageColumn),
	)
}
