// Code generated by ent, DO NOT EDIT.

package educationtranslation

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldLTE(FieldID, id))
}

// EducationID applies equality check predicate on the "education_id" field. It's identical to EducationIDEQ.
func EducationID(v uuid.UUID) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldEQ(FieldEducationID, v))
}

// LanguageCode applies equality check predicate on the "language_code" field. It's identical to LanguageCodeEQ.
func LanguageCode(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldEQ(FieldLanguageCode, v))
}

// Institution applies equality check predicate on the "institution" field. It's identical to InstitutionEQ.
func Institution(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldEQ(FieldInstitution, v))
}

// Degree applies equality check predicate on the "degree" field. It's identical to DegreeEQ.
func Degree(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldEQ(FieldDegree, v))
}

// FieldOfStudy applies equality check predicate on the "field_of_study" field. It's identical to FieldOfStudyEQ.
func FieldOfStudy(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldEQ(FieldFieldOfStudy, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldEQ(FieldLocation, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldEQ(FieldCreatedAt, v))
}

// EducationIDEQ applies the EQ predicate on the "education_id" field.
func EducationIDEQ(v uuid.UUID) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldEQ(FieldEducationID, v))
}

// EducationIDNEQ applies the NEQ predicate on the "education_id" field.
func EducationIDNEQ(v uuid.UUID) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldNEQ(FieldEducationID, v))
}

// EducationIDIn applies the In predicate on the "education_id" field.
func EducationIDIn(vs ...uuid.UUID) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldIn(FieldEducationID, vs...))
}

// EducationIDNotIn applies the NotIn predicate on the "education_id" field.
func EducationIDNotIn(vs ...uuid.UUID) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldNotIn(FieldEducationID, vs...))
}

// LanguageCodeEQ applies the EQ predicate on the "language_code" field.
func LanguageCodeEQ(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldEQ(FieldLanguageCode, v))
}

// LanguageCodeNEQ applies the NEQ predicate on the "language_code" field.
func LanguageCodeNEQ(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldNEQ(FieldLanguageCode, v))
}

// LanguageCodeIn applies the In predicate on the "language_code" field.
func LanguageCodeIn(vs ...string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldIn(FieldLanguageCode, vs...))
}

// LanguageCodeNotIn applies the NotIn predicate on the "language_code" field.
func LanguageCodeNotIn(vs ...string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldNotIn(FieldLanguageCode, vs...))
}

// LanguageCodeGT applies the GT predicate on the "language_code" field.
func LanguageCodeGT(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldGT(FieldLanguageCode, v))
}

// LanguageCodeGTE applies the GTE predicate on the "language_code" field.
func LanguageCodeGTE(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldGTE(FieldLanguageCode, v))
}

// LanguageCodeLT applies the LT predicate on the "language_code" field.
func LanguageCodeLT(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldLT(FieldLanguageCode, v))
}

// LanguageCodeLTE applies the LTE predicate on the "language_code" field.
func LanguageCodeLTE(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldLTE(FieldLanguageCode, v))
}

// LanguageCodeContains applies the Contains predicate on the "language_code" field.
func LanguageCodeContains(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldContains(FieldLanguageCode, v))
}

// LanguageCodeHasPrefix applies the HasPrefix predicate on the "language_code" field.
func LanguageCodeHasPrefix(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldHasPrefix(FieldLanguageCode, v))
}

// LanguageCodeHasSuffix applies the HasSuffix predicate on the "language_code" field.
func LanguageCodeHasSuffix(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldHasSuffix(FieldLanguageCode, v))
}

// LanguageCodeEqualFold applies the EqualFold predicate on the "language_code" field.
func LanguageCodeEqualFold(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldEqualFold(FieldLanguageCode, v))
}

// LanguageCodeContainsFold applies the ContainsFold predicate on the "language_code" field.
func LanguageCodeContainsFold(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldContainsFold(FieldLanguageCode, v))
}

// InstitutionEQ applies the EQ predicate on the "institution" field.
func InstitutionEQ(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldEQ(FieldInstitution, v))
}

// InstitutionNEQ applies the NEQ predicate on the "institution" field.
func InstitutionNEQ(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldNEQ(FieldInstitution, v))
}

// InstitutionIn applies the In predicate on the "institution" field.
func InstitutionIn(vs ...string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldIn(FieldInstitution, vs...))
}

// InstitutionNotIn applies the NotIn predicate on the "institution" field.
func InstitutionNotIn(vs ...string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldNotIn(FieldInstitution, vs...))
}

// InstitutionGT applies the GT predicate on the "institution" field.
func InstitutionGT(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldGT(FieldInstitution, v))
}

// InstitutionGTE applies the GTE predicate on the "institution" field.
func InstitutionGTE(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldGTE(FieldInstitution, v))
}

// InstitutionLT applies the LT predicate on the "institution" field.
func InstitutionLT(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldLT(FieldInstitution, v))
}

// InstitutionLTE applies the LTE predicate on the "institution" field.
func InstitutionLTE(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldLTE(FieldInstitution, v))
}

// InstitutionContains applies the Contains predicate on the "institution" field.
func InstitutionContains(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldContains(FieldInstitution, v))
}

// InstitutionHasPrefix applies the HasPrefix predicate on the "institution" field.
func InstitutionHasPrefix(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldHasPrefix(FieldInstitution, v))
}

// InstitutionHasSuffix applies the HasSuffix predicate on the "institution" field.
func InstitutionHasSuffix(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldHasSuffix(FieldInstitution, v))
}

// InstitutionIsNil applies the IsNil predicate on the "institution" field.
func InstitutionIsNil() predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldIsNull(FieldInstitution))
}

// InstitutionNotNil applies the NotNil predicate on the "institution" field.
func InstitutionNotNil() predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldNotNull(FieldInstitution))
}

// InstitutionEqualFold applies the EqualFold predicate on the "institution" field.
func InstitutionEqualFold(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldEqualFold(FieldInstitution, v))
}

// InstitutionContainsFold applies the ContainsFold predicate on the "institution" field.
func InstitutionContainsFold(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldContainsFold(FieldInstitution, v))
}

// DegreeEQ applies the EQ predicate on the "degree" field.
func DegreeEQ(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldEQ(FieldDegree, v))
}

// DegreeNEQ applies the NEQ predicate on the "degree" field.
func DegreeNEQ(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldNEQ(FieldDegree, v))
}

// DegreeIn applies the In predicate on the "degree" field.
func DegreeIn(vs ...string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldIn(FieldDegree, vs...))
}

// DegreeNotIn applies the NotIn predicate on the "degree" field.
func DegreeNotIn(vs ...string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldNotIn(FieldDegree, vs...))
}

// DegreeGT applies the GT predicate on the "degree" field.
func DegreeGT(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldGT(FieldDegree, v))
}

// DegreeGTE applies the GTE predicate on the "degree" field.
func DegreeGTE(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldGTE(FieldDegree, v))
}

// DegreeLT applies the LT predicate on the "degree" field.
func DegreeLT(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldLT(FieldDegree, v))
}

// DegreeLTE applies the LTE predicate on the "degree" field.
func DegreeLTE(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldLTE(FieldDegree, v))
}

// DegreeContains applies the Contains predicate on the "degree" field.
func DegreeContains(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldContains(FieldDegree, v))
}

// DegreeHasPrefix applies the HasPrefix predicate on the "degree" field.
func DegreeHasPrefix(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldHasPrefix(FieldDegree, v))
}

// DegreeHasSuffix applies the HasSuffix predicate on the "degree" field.
func DegreeHasSuffix(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldHasSuffix(FieldDegree, v))
}

// DegreeIsNil applies the IsNil predicate on the "degree" field.
func DegreeIsNil() predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldIsNull(FieldDegree))
}

// DegreeNotNil applies the NotNil predicate on the "degree" field.
func DegreeNotNil() predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldNotNull(FieldDegree))
}

// DegreeEqualFold applies the EqualFold predicate on the "degree" field.
func DegreeEqualFold(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldEqualFold(FieldDegree, v))
}

// DegreeContainsFold applies the ContainsFold predicate on the "degree" field.
func DegreeContainsFold(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldContainsFold(FieldDegree, v))
}

// FieldOfStudyEQ applies the EQ predicate on the "field_of_study" field.
func FieldOfStudyEQ(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldEQ(FieldFieldOfStudy, v))
}

// FieldOfStudyNEQ applies the NEQ predicate on the "field_of_study" field.
func FieldOfStudyNEQ(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldNEQ(FieldFieldOfStudy, v))
}

// FieldOfStudyIn applies the In predicate on the "field_of_study" field.
func FieldOfStudyIn(vs ...string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldIn(FieldFieldOfStudy, vs...))
}

// FieldOfStudyNotIn applies the NotIn predicate on the "field_of_study" field.
func FieldOfStudyNotIn(vs ...string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldNotIn(FieldFieldOfStudy, vs...))
}

// FieldOfStudyGT applies the GT predicate on the "field_of_study" field.
func FieldOfStudyGT(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldGT(FieldFieldOfStudy, v))
}

// FieldOfStudyGTE applies the GTE predicate on the "field_of_study" field.
func FieldOfStudyGTE(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldGTE(FieldFieldOfStudy, v))
}

// FieldOfStudyLT applies the LT predicate on the "field_of_study" field.
func FieldOfStudyLT(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldLT(FieldFieldOfStudy, v))
}

// FieldOfStudyLTE applies the LTE predicate on the "field_of_study" field.
func FieldOfStudyLTE(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldLTE(FieldFieldOfStudy, v))
}

// FieldOfStudyContains applies the Contains predicate on the "field_of_study" field.
func FieldOfStudyContains(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldContains(FieldFieldOfStudy, v))
}

// FieldOfStudyHasPrefix applies the HasPrefix predicate on the "field_of_study" field.
func FieldOfStudyHasPrefix(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldHasPrefix(FieldFieldOfStudy, v))
}

// FieldOfStudyHasSuffix applies the HasSuffix predicate on the "field_of_study" field.
func FieldOfStudyHasSuffix(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldHasSuffix(FieldFieldOfStudy, v))
}

// FieldOfStudyIsNil applies the IsNil predicate on the "field_of_study" field.
func FieldOfStudyIsNil() predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldIsNull(FieldFieldOfStudy))
}

// FieldOfStudyNotNil applies the NotNil predicate on the "field_of_study" field.
func FieldOfStudyNotNil() predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldNotNull(FieldFieldOfStudy))
}

// FieldOfStudyEqualFold applies the EqualFold predicate on the "field_of_study" field.
func FieldOfStudyEqualFold(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldEqualFold(FieldFieldOfStudy, v))
}

// FieldOfStudyContainsFold applies the ContainsFold predicate on the "field_of_study" field.
func FieldOfStudyContainsFold(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldContainsFold(FieldFieldOfStudy, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldIsNull(FieldLocation))
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldNotNull(FieldLocation))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldContainsFold(FieldLocation, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.FieldLTE(FieldCreatedAt, v))
}

// HasEducation applies the HasEdge predicate on the "education" edge.
func HasEducation() predicate.EducationTranslation {
	return predicate.EducationTranslation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EducationTable, EducationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEducationWith applies the HasEdge predicate on the "education" edge with a given conditions (other predicates).
func HasEducationWith(preds ...predicate.Education) predicate.EducationTranslation {
	return predicate.EducationTranslation(func(s *sql.Selector) {
		step := newEducationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLanguage applies the HasEdge predicate on the "language" edge.
func HasLanguage() predicate.EducationTranslation {
	return predicate.EducationTranslation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LanguageTable, LanguageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLanguageWith applies the HasEdge predicate on the "language" edge with a given conditions (other predicates).
func HasLanguageWith(preds ...predicate.Language) predicate.EducationTranslation {
	return predicate.EducationTranslation(func(s *sql.Selector) {
		step := newLanguageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EducationTranslation) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EducationTranslation) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EducationTranslation) predicate.EducationTranslation {
	return predicate.EducationTranslation(sql.NotPredicates(p))
}
