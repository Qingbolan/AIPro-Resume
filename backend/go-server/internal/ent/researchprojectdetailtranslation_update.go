// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/researchprojectdetail"
	"silan-backend/internal/ent/researchprojectdetailtranslation"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ResearchProjectDetailTranslationUpdate is the builder for updating ResearchProjectDetailTranslation entities.
type ResearchProjectDetailTranslationUpdate struct {
	config
	hooks    []Hook
	mutation *ResearchProjectDetailTranslationMutation
}

// Where appends a list predicates to the ResearchProjectDetailTranslationUpdate builder.
func (rpdtu *ResearchProjectDetailTranslationUpdate) Where(ps ...predicate.ResearchProjectDetailTranslation) *ResearchProjectDetailTranslationUpdate {
	rpdtu.mutation.Where(ps...)
	return rpdtu
}

// SetResearchProjectDetailID sets the "research_project_detail_id" field.
func (rpdtu *ResearchProjectDetailTranslationUpdate) SetResearchProjectDetailID(u uuid.UUID) *ResearchProjectDetailTranslationUpdate {
	rpdtu.mutation.SetResearchProjectDetailID(u)
	return rpdtu
}

// SetNillableResearchProjectDetailID sets the "research_project_detail_id" field if the given value is not nil.
func (rpdtu *ResearchProjectDetailTranslationUpdate) SetNillableResearchProjectDetailID(u *uuid.UUID) *ResearchProjectDetailTranslationUpdate {
	if u != nil {
		rpdtu.SetResearchProjectDetailID(*u)
	}
	return rpdtu
}

// SetLanguageCode sets the "language_code" field.
func (rpdtu *ResearchProjectDetailTranslationUpdate) SetLanguageCode(s string) *ResearchProjectDetailTranslationUpdate {
	rpdtu.mutation.SetLanguageCode(s)
	return rpdtu
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (rpdtu *ResearchProjectDetailTranslationUpdate) SetNillableLanguageCode(s *string) *ResearchProjectDetailTranslationUpdate {
	if s != nil {
		rpdtu.SetLanguageCode(*s)
	}
	return rpdtu
}

// SetDetailText sets the "detail_text" field.
func (rpdtu *ResearchProjectDetailTranslationUpdate) SetDetailText(s string) *ResearchProjectDetailTranslationUpdate {
	rpdtu.mutation.SetDetailText(s)
	return rpdtu
}

// SetNillableDetailText sets the "detail_text" field if the given value is not nil.
func (rpdtu *ResearchProjectDetailTranslationUpdate) SetNillableDetailText(s *string) *ResearchProjectDetailTranslationUpdate {
	if s != nil {
		rpdtu.SetDetailText(*s)
	}
	return rpdtu
}

// SetUpdatedAt sets the "updated_at" field.
func (rpdtu *ResearchProjectDetailTranslationUpdate) SetUpdatedAt(t time.Time) *ResearchProjectDetailTranslationUpdate {
	rpdtu.mutation.SetUpdatedAt(t)
	return rpdtu
}

// SetResearchProjectDetail sets the "research_project_detail" edge to the ResearchProjectDetail entity.
func (rpdtu *ResearchProjectDetailTranslationUpdate) SetResearchProjectDetail(r *ResearchProjectDetail) *ResearchProjectDetailTranslationUpdate {
	return rpdtu.SetResearchProjectDetailID(r.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (rpdtu *ResearchProjectDetailTranslationUpdate) SetLanguageID(id string) *ResearchProjectDetailTranslationUpdate {
	rpdtu.mutation.SetLanguageID(id)
	return rpdtu
}

// SetLanguage sets the "language" edge to the Language entity.
func (rpdtu *ResearchProjectDetailTranslationUpdate) SetLanguage(l *Language) *ResearchProjectDetailTranslationUpdate {
	return rpdtu.SetLanguageID(l.ID)
}

// Mutation returns the ResearchProjectDetailTranslationMutation object of the builder.
func (rpdtu *ResearchProjectDetailTranslationUpdate) Mutation() *ResearchProjectDetailTranslationMutation {
	return rpdtu.mutation
}

// ClearResearchProjectDetail clears the "research_project_detail" edge to the ResearchProjectDetail entity.
func (rpdtu *ResearchProjectDetailTranslationUpdate) ClearResearchProjectDetail() *ResearchProjectDetailTranslationUpdate {
	rpdtu.mutation.ClearResearchProjectDetail()
	return rpdtu
}

// ClearLanguage clears the "language" edge to the Language entity.
func (rpdtu *ResearchProjectDetailTranslationUpdate) ClearLanguage() *ResearchProjectDetailTranslationUpdate {
	rpdtu.mutation.ClearLanguage()
	return rpdtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rpdtu *ResearchProjectDetailTranslationUpdate) Save(ctx context.Context) (int, error) {
	rpdtu.defaults()
	return withHooks(ctx, rpdtu.sqlSave, rpdtu.mutation, rpdtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpdtu *ResearchProjectDetailTranslationUpdate) SaveX(ctx context.Context) int {
	affected, err := rpdtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpdtu *ResearchProjectDetailTranslationUpdate) Exec(ctx context.Context) error {
	_, err := rpdtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpdtu *ResearchProjectDetailTranslationUpdate) ExecX(ctx context.Context) {
	if err := rpdtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpdtu *ResearchProjectDetailTranslationUpdate) defaults() {
	if _, ok := rpdtu.mutation.UpdatedAt(); !ok {
		v := researchprojectdetailtranslation.UpdateDefaultUpdatedAt()
		rpdtu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpdtu *ResearchProjectDetailTranslationUpdate) check() error {
	if v, ok := rpdtu.mutation.LanguageCode(); ok {
		if err := researchprojectdetailtranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "ResearchProjectDetailTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := rpdtu.mutation.DetailText(); ok {
		if err := researchprojectdetailtranslation.DetailTextValidator(v); err != nil {
			return &ValidationError{Name: "detail_text", err: fmt.Errorf(`ent: validator failed for field "ResearchProjectDetailTranslation.detail_text": %w`, err)}
		}
	}
	if rpdtu.mutation.ResearchProjectDetailCleared() && len(rpdtu.mutation.ResearchProjectDetailIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ResearchProjectDetailTranslation.research_project_detail"`)
	}
	if rpdtu.mutation.LanguageCleared() && len(rpdtu.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ResearchProjectDetailTranslation.language"`)
	}
	return nil
}

func (rpdtu *ResearchProjectDetailTranslationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rpdtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(researchprojectdetailtranslation.Table, researchprojectdetailtranslation.Columns, sqlgraph.NewFieldSpec(researchprojectdetailtranslation.FieldID, field.TypeUUID))
	if ps := rpdtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpdtu.mutation.DetailText(); ok {
		_spec.SetField(researchprojectdetailtranslation.FieldDetailText, field.TypeString, value)
	}
	if value, ok := rpdtu.mutation.UpdatedAt(); ok {
		_spec.SetField(researchprojectdetailtranslation.FieldUpdatedAt, field.TypeTime, value)
	}
	if rpdtu.mutation.ResearchProjectDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   researchprojectdetailtranslation.ResearchProjectDetailTable,
			Columns: []string{researchprojectdetailtranslation.ResearchProjectDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojectdetail.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpdtu.mutation.ResearchProjectDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   researchprojectdetailtranslation.ResearchProjectDetailTable,
			Columns: []string{researchprojectdetailtranslation.ResearchProjectDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojectdetail.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpdtu.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   researchprojectdetailtranslation.LanguageTable,
			Columns: []string{researchprojectdetailtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpdtu.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   researchprojectdetailtranslation.LanguageTable,
			Columns: []string{researchprojectdetailtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rpdtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{researchprojectdetailtranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rpdtu.mutation.done = true
	return n, nil
}

// ResearchProjectDetailTranslationUpdateOne is the builder for updating a single ResearchProjectDetailTranslation entity.
type ResearchProjectDetailTranslationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ResearchProjectDetailTranslationMutation
}

// SetResearchProjectDetailID sets the "research_project_detail_id" field.
func (rpdtuo *ResearchProjectDetailTranslationUpdateOne) SetResearchProjectDetailID(u uuid.UUID) *ResearchProjectDetailTranslationUpdateOne {
	rpdtuo.mutation.SetResearchProjectDetailID(u)
	return rpdtuo
}

// SetNillableResearchProjectDetailID sets the "research_project_detail_id" field if the given value is not nil.
func (rpdtuo *ResearchProjectDetailTranslationUpdateOne) SetNillableResearchProjectDetailID(u *uuid.UUID) *ResearchProjectDetailTranslationUpdateOne {
	if u != nil {
		rpdtuo.SetResearchProjectDetailID(*u)
	}
	return rpdtuo
}

// SetLanguageCode sets the "language_code" field.
func (rpdtuo *ResearchProjectDetailTranslationUpdateOne) SetLanguageCode(s string) *ResearchProjectDetailTranslationUpdateOne {
	rpdtuo.mutation.SetLanguageCode(s)
	return rpdtuo
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (rpdtuo *ResearchProjectDetailTranslationUpdateOne) SetNillableLanguageCode(s *string) *ResearchProjectDetailTranslationUpdateOne {
	if s != nil {
		rpdtuo.SetLanguageCode(*s)
	}
	return rpdtuo
}

// SetDetailText sets the "detail_text" field.
func (rpdtuo *ResearchProjectDetailTranslationUpdateOne) SetDetailText(s string) *ResearchProjectDetailTranslationUpdateOne {
	rpdtuo.mutation.SetDetailText(s)
	return rpdtuo
}

// SetNillableDetailText sets the "detail_text" field if the given value is not nil.
func (rpdtuo *ResearchProjectDetailTranslationUpdateOne) SetNillableDetailText(s *string) *ResearchProjectDetailTranslationUpdateOne {
	if s != nil {
		rpdtuo.SetDetailText(*s)
	}
	return rpdtuo
}

// SetUpdatedAt sets the "updated_at" field.
func (rpdtuo *ResearchProjectDetailTranslationUpdateOne) SetUpdatedAt(t time.Time) *ResearchProjectDetailTranslationUpdateOne {
	rpdtuo.mutation.SetUpdatedAt(t)
	return rpdtuo
}

// SetResearchProjectDetail sets the "research_project_detail" edge to the ResearchProjectDetail entity.
func (rpdtuo *ResearchProjectDetailTranslationUpdateOne) SetResearchProjectDetail(r *ResearchProjectDetail) *ResearchProjectDetailTranslationUpdateOne {
	return rpdtuo.SetResearchProjectDetailID(r.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (rpdtuo *ResearchProjectDetailTranslationUpdateOne) SetLanguageID(id string) *ResearchProjectDetailTranslationUpdateOne {
	rpdtuo.mutation.SetLanguageID(id)
	return rpdtuo
}

// SetLanguage sets the "language" edge to the Language entity.
func (rpdtuo *ResearchProjectDetailTranslationUpdateOne) SetLanguage(l *Language) *ResearchProjectDetailTranslationUpdateOne {
	return rpdtuo.SetLanguageID(l.ID)
}

// Mutation returns the ResearchProjectDetailTranslationMutation object of the builder.
func (rpdtuo *ResearchProjectDetailTranslationUpdateOne) Mutation() *ResearchProjectDetailTranslationMutation {
	return rpdtuo.mutation
}

// ClearResearchProjectDetail clears the "research_project_detail" edge to the ResearchProjectDetail entity.
func (rpdtuo *ResearchProjectDetailTranslationUpdateOne) ClearResearchProjectDetail() *ResearchProjectDetailTranslationUpdateOne {
	rpdtuo.mutation.ClearResearchProjectDetail()
	return rpdtuo
}

// ClearLanguage clears the "language" edge to the Language entity.
func (rpdtuo *ResearchProjectDetailTranslationUpdateOne) ClearLanguage() *ResearchProjectDetailTranslationUpdateOne {
	rpdtuo.mutation.ClearLanguage()
	return rpdtuo
}

// Where appends a list predicates to the ResearchProjectDetailTranslationUpdate builder.
func (rpdtuo *ResearchProjectDetailTranslationUpdateOne) Where(ps ...predicate.ResearchProjectDetailTranslation) *ResearchProjectDetailTranslationUpdateOne {
	rpdtuo.mutation.Where(ps...)
	return rpdtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rpdtuo *ResearchProjectDetailTranslationUpdateOne) Select(field string, fields ...string) *ResearchProjectDetailTranslationUpdateOne {
	rpdtuo.fields = append([]string{field}, fields...)
	return rpdtuo
}

// Save executes the query and returns the updated ResearchProjectDetailTranslation entity.
func (rpdtuo *ResearchProjectDetailTranslationUpdateOne) Save(ctx context.Context) (*ResearchProjectDetailTranslation, error) {
	rpdtuo.defaults()
	return withHooks(ctx, rpdtuo.sqlSave, rpdtuo.mutation, rpdtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpdtuo *ResearchProjectDetailTranslationUpdateOne) SaveX(ctx context.Context) *ResearchProjectDetailTranslation {
	node, err := rpdtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rpdtuo *ResearchProjectDetailTranslationUpdateOne) Exec(ctx context.Context) error {
	_, err := rpdtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpdtuo *ResearchProjectDetailTranslationUpdateOne) ExecX(ctx context.Context) {
	if err := rpdtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpdtuo *ResearchProjectDetailTranslationUpdateOne) defaults() {
	if _, ok := rpdtuo.mutation.UpdatedAt(); !ok {
		v := researchprojectdetailtranslation.UpdateDefaultUpdatedAt()
		rpdtuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpdtuo *ResearchProjectDetailTranslationUpdateOne) check() error {
	if v, ok := rpdtuo.mutation.LanguageCode(); ok {
		if err := researchprojectdetailtranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "ResearchProjectDetailTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := rpdtuo.mutation.DetailText(); ok {
		if err := researchprojectdetailtranslation.DetailTextValidator(v); err != nil {
			return &ValidationError{Name: "detail_text", err: fmt.Errorf(`ent: validator failed for field "ResearchProjectDetailTranslation.detail_text": %w`, err)}
		}
	}
	if rpdtuo.mutation.ResearchProjectDetailCleared() && len(rpdtuo.mutation.ResearchProjectDetailIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ResearchProjectDetailTranslation.research_project_detail"`)
	}
	if rpdtuo.mutation.LanguageCleared() && len(rpdtuo.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ResearchProjectDetailTranslation.language"`)
	}
	return nil
}

func (rpdtuo *ResearchProjectDetailTranslationUpdateOne) sqlSave(ctx context.Context) (_node *ResearchProjectDetailTranslation, err error) {
	if err := rpdtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(researchprojectdetailtranslation.Table, researchprojectdetailtranslation.Columns, sqlgraph.NewFieldSpec(researchprojectdetailtranslation.FieldID, field.TypeUUID))
	id, ok := rpdtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ResearchProjectDetailTranslation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rpdtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, researchprojectdetailtranslation.FieldID)
		for _, f := range fields {
			if !researchprojectdetailtranslation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != researchprojectdetailtranslation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rpdtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpdtuo.mutation.DetailText(); ok {
		_spec.SetField(researchprojectdetailtranslation.FieldDetailText, field.TypeString, value)
	}
	if value, ok := rpdtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(researchprojectdetailtranslation.FieldUpdatedAt, field.TypeTime, value)
	}
	if rpdtuo.mutation.ResearchProjectDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   researchprojectdetailtranslation.ResearchProjectDetailTable,
			Columns: []string{researchprojectdetailtranslation.ResearchProjectDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojectdetail.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpdtuo.mutation.ResearchProjectDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   researchprojectdetailtranslation.ResearchProjectDetailTable,
			Columns: []string{researchprojectdetailtranslation.ResearchProjectDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojectdetail.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpdtuo.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   researchprojectdetailtranslation.LanguageTable,
			Columns: []string{researchprojectdetailtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpdtuo.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   researchprojectdetailtranslation.LanguageTable,
			Columns: []string{researchprojectdetailtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ResearchProjectDetailTranslation{config: rpdtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rpdtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{researchprojectdetailtranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rpdtuo.mutation.done = true
	return _node, nil
}
