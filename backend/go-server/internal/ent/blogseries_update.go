// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/blogpost"
	"silan-backend/internal/ent/blogseries"
	"silan-backend/internal/ent/blogseriestranslation"
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BlogSeriesUpdate is the builder for updating BlogSeries entities.
type BlogSeriesUpdate struct {
	config
	hooks    []Hook
	mutation *BlogSeriesMutation
}

// Where appends a list predicates to the BlogSeriesUpdate builder.
func (bsu *BlogSeriesUpdate) Where(ps ...predicate.BlogSeries) *BlogSeriesUpdate {
	bsu.mutation.Where(ps...)
	return bsu
}

// SetTitle sets the "title" field.
func (bsu *BlogSeriesUpdate) SetTitle(s string) *BlogSeriesUpdate {
	bsu.mutation.SetTitle(s)
	return bsu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (bsu *BlogSeriesUpdate) SetNillableTitle(s *string) *BlogSeriesUpdate {
	if s != nil {
		bsu.SetTitle(*s)
	}
	return bsu
}

// SetSlug sets the "slug" field.
func (bsu *BlogSeriesUpdate) SetSlug(s string) *BlogSeriesUpdate {
	bsu.mutation.SetSlug(s)
	return bsu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (bsu *BlogSeriesUpdate) SetNillableSlug(s *string) *BlogSeriesUpdate {
	if s != nil {
		bsu.SetSlug(*s)
	}
	return bsu
}

// SetDescription sets the "description" field.
func (bsu *BlogSeriesUpdate) SetDescription(s string) *BlogSeriesUpdate {
	bsu.mutation.SetDescription(s)
	return bsu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bsu *BlogSeriesUpdate) SetNillableDescription(s *string) *BlogSeriesUpdate {
	if s != nil {
		bsu.SetDescription(*s)
	}
	return bsu
}

// ClearDescription clears the value of the "description" field.
func (bsu *BlogSeriesUpdate) ClearDescription() *BlogSeriesUpdate {
	bsu.mutation.ClearDescription()
	return bsu
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (bsu *BlogSeriesUpdate) SetThumbnailURL(s string) *BlogSeriesUpdate {
	bsu.mutation.SetThumbnailURL(s)
	return bsu
}

// SetNillableThumbnailURL sets the "thumbnail_url" field if the given value is not nil.
func (bsu *BlogSeriesUpdate) SetNillableThumbnailURL(s *string) *BlogSeriesUpdate {
	if s != nil {
		bsu.SetThumbnailURL(*s)
	}
	return bsu
}

// ClearThumbnailURL clears the value of the "thumbnail_url" field.
func (bsu *BlogSeriesUpdate) ClearThumbnailURL() *BlogSeriesUpdate {
	bsu.mutation.ClearThumbnailURL()
	return bsu
}

// SetStatus sets the "status" field.
func (bsu *BlogSeriesUpdate) SetStatus(s string) *BlogSeriesUpdate {
	bsu.mutation.SetStatus(s)
	return bsu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bsu *BlogSeriesUpdate) SetNillableStatus(s *string) *BlogSeriesUpdate {
	if s != nil {
		bsu.SetStatus(*s)
	}
	return bsu
}

// SetEpisodeCount sets the "episode_count" field.
func (bsu *BlogSeriesUpdate) SetEpisodeCount(i int) *BlogSeriesUpdate {
	bsu.mutation.ResetEpisodeCount()
	bsu.mutation.SetEpisodeCount(i)
	return bsu
}

// SetNillableEpisodeCount sets the "episode_count" field if the given value is not nil.
func (bsu *BlogSeriesUpdate) SetNillableEpisodeCount(i *int) *BlogSeriesUpdate {
	if i != nil {
		bsu.SetEpisodeCount(*i)
	}
	return bsu
}

// AddEpisodeCount adds i to the "episode_count" field.
func (bsu *BlogSeriesUpdate) AddEpisodeCount(i int) *BlogSeriesUpdate {
	bsu.mutation.AddEpisodeCount(i)
	return bsu
}

// SetUpdatedAt sets the "updated_at" field.
func (bsu *BlogSeriesUpdate) SetUpdatedAt(t time.Time) *BlogSeriesUpdate {
	bsu.mutation.SetUpdatedAt(t)
	return bsu
}

// AddBlogPostIDs adds the "blog_posts" edge to the BlogPost entity by IDs.
func (bsu *BlogSeriesUpdate) AddBlogPostIDs(ids ...uuid.UUID) *BlogSeriesUpdate {
	bsu.mutation.AddBlogPostIDs(ids...)
	return bsu
}

// AddBlogPosts adds the "blog_posts" edges to the BlogPost entity.
func (bsu *BlogSeriesUpdate) AddBlogPosts(b ...*BlogPost) *BlogSeriesUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bsu.AddBlogPostIDs(ids...)
}

// AddTranslationIDs adds the "translations" edge to the BlogSeriesTranslation entity by IDs.
func (bsu *BlogSeriesUpdate) AddTranslationIDs(ids ...uuid.UUID) *BlogSeriesUpdate {
	bsu.mutation.AddTranslationIDs(ids...)
	return bsu
}

// AddTranslations adds the "translations" edges to the BlogSeriesTranslation entity.
func (bsu *BlogSeriesUpdate) AddTranslations(b ...*BlogSeriesTranslation) *BlogSeriesUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bsu.AddTranslationIDs(ids...)
}

// Mutation returns the BlogSeriesMutation object of the builder.
func (bsu *BlogSeriesUpdate) Mutation() *BlogSeriesMutation {
	return bsu.mutation
}

// ClearBlogPosts clears all "blog_posts" edges to the BlogPost entity.
func (bsu *BlogSeriesUpdate) ClearBlogPosts() *BlogSeriesUpdate {
	bsu.mutation.ClearBlogPosts()
	return bsu
}

// RemoveBlogPostIDs removes the "blog_posts" edge to BlogPost entities by IDs.
func (bsu *BlogSeriesUpdate) RemoveBlogPostIDs(ids ...uuid.UUID) *BlogSeriesUpdate {
	bsu.mutation.RemoveBlogPostIDs(ids...)
	return bsu
}

// RemoveBlogPosts removes "blog_posts" edges to BlogPost entities.
func (bsu *BlogSeriesUpdate) RemoveBlogPosts(b ...*BlogPost) *BlogSeriesUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bsu.RemoveBlogPostIDs(ids...)
}

// ClearTranslations clears all "translations" edges to the BlogSeriesTranslation entity.
func (bsu *BlogSeriesUpdate) ClearTranslations() *BlogSeriesUpdate {
	bsu.mutation.ClearTranslations()
	return bsu
}

// RemoveTranslationIDs removes the "translations" edge to BlogSeriesTranslation entities by IDs.
func (bsu *BlogSeriesUpdate) RemoveTranslationIDs(ids ...uuid.UUID) *BlogSeriesUpdate {
	bsu.mutation.RemoveTranslationIDs(ids...)
	return bsu
}

// RemoveTranslations removes "translations" edges to BlogSeriesTranslation entities.
func (bsu *BlogSeriesUpdate) RemoveTranslations(b ...*BlogSeriesTranslation) *BlogSeriesUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bsu.RemoveTranslationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bsu *BlogSeriesUpdate) Save(ctx context.Context) (int, error) {
	bsu.defaults()
	return withHooks(ctx, bsu.sqlSave, bsu.mutation, bsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bsu *BlogSeriesUpdate) SaveX(ctx context.Context) int {
	affected, err := bsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bsu *BlogSeriesUpdate) Exec(ctx context.Context) error {
	_, err := bsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsu *BlogSeriesUpdate) ExecX(ctx context.Context) {
	if err := bsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bsu *BlogSeriesUpdate) defaults() {
	if _, ok := bsu.mutation.UpdatedAt(); !ok {
		v := blogseries.UpdateDefaultUpdatedAt()
		bsu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bsu *BlogSeriesUpdate) check() error {
	if v, ok := bsu.mutation.Title(); ok {
		if err := blogseries.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "BlogSeries.title": %w`, err)}
		}
	}
	if v, ok := bsu.mutation.Slug(); ok {
		if err := blogseries.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "BlogSeries.slug": %w`, err)}
		}
	}
	if v, ok := bsu.mutation.ThumbnailURL(); ok {
		if err := blogseries.ThumbnailURLValidator(v); err != nil {
			return &ValidationError{Name: "thumbnail_url", err: fmt.Errorf(`ent: validator failed for field "BlogSeries.thumbnail_url": %w`, err)}
		}
	}
	if v, ok := bsu.mutation.Status(); ok {
		if err := blogseries.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "BlogSeries.status": %w`, err)}
		}
	}
	return nil
}

func (bsu *BlogSeriesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(blogseries.Table, blogseries.Columns, sqlgraph.NewFieldSpec(blogseries.FieldID, field.TypeUUID))
	if ps := bsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bsu.mutation.Title(); ok {
		_spec.SetField(blogseries.FieldTitle, field.TypeString, value)
	}
	if value, ok := bsu.mutation.Slug(); ok {
		_spec.SetField(blogseries.FieldSlug, field.TypeString, value)
	}
	if value, ok := bsu.mutation.Description(); ok {
		_spec.SetField(blogseries.FieldDescription, field.TypeString, value)
	}
	if bsu.mutation.DescriptionCleared() {
		_spec.ClearField(blogseries.FieldDescription, field.TypeString)
	}
	if value, ok := bsu.mutation.ThumbnailURL(); ok {
		_spec.SetField(blogseries.FieldThumbnailURL, field.TypeString, value)
	}
	if bsu.mutation.ThumbnailURLCleared() {
		_spec.ClearField(blogseries.FieldThumbnailURL, field.TypeString)
	}
	if value, ok := bsu.mutation.Status(); ok {
		_spec.SetField(blogseries.FieldStatus, field.TypeString, value)
	}
	if value, ok := bsu.mutation.EpisodeCount(); ok {
		_spec.SetField(blogseries.FieldEpisodeCount, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.AddedEpisodeCount(); ok {
		_spec.AddField(blogseries.FieldEpisodeCount, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.UpdatedAt(); ok {
		_spec.SetField(blogseries.FieldUpdatedAt, field.TypeTime, value)
	}
	if bsu.mutation.BlogPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogseries.BlogPostsTable,
			Columns: []string{blogseries.BlogPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bsu.mutation.RemovedBlogPostsIDs(); len(nodes) > 0 && !bsu.mutation.BlogPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogseries.BlogPostsTable,
			Columns: []string{blogseries.BlogPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bsu.mutation.BlogPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogseries.BlogPostsTable,
			Columns: []string{blogseries.BlogPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bsu.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogseries.TranslationsTable,
			Columns: []string{blogseries.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogseriestranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bsu.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !bsu.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogseries.TranslationsTable,
			Columns: []string{blogseries.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogseriestranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bsu.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogseries.TranslationsTable,
			Columns: []string{blogseries.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogseriestranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blogseries.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bsu.mutation.done = true
	return n, nil
}

// BlogSeriesUpdateOne is the builder for updating a single BlogSeries entity.
type BlogSeriesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlogSeriesMutation
}

// SetTitle sets the "title" field.
func (bsuo *BlogSeriesUpdateOne) SetTitle(s string) *BlogSeriesUpdateOne {
	bsuo.mutation.SetTitle(s)
	return bsuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (bsuo *BlogSeriesUpdateOne) SetNillableTitle(s *string) *BlogSeriesUpdateOne {
	if s != nil {
		bsuo.SetTitle(*s)
	}
	return bsuo
}

// SetSlug sets the "slug" field.
func (bsuo *BlogSeriesUpdateOne) SetSlug(s string) *BlogSeriesUpdateOne {
	bsuo.mutation.SetSlug(s)
	return bsuo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (bsuo *BlogSeriesUpdateOne) SetNillableSlug(s *string) *BlogSeriesUpdateOne {
	if s != nil {
		bsuo.SetSlug(*s)
	}
	return bsuo
}

// SetDescription sets the "description" field.
func (bsuo *BlogSeriesUpdateOne) SetDescription(s string) *BlogSeriesUpdateOne {
	bsuo.mutation.SetDescription(s)
	return bsuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bsuo *BlogSeriesUpdateOne) SetNillableDescription(s *string) *BlogSeriesUpdateOne {
	if s != nil {
		bsuo.SetDescription(*s)
	}
	return bsuo
}

// ClearDescription clears the value of the "description" field.
func (bsuo *BlogSeriesUpdateOne) ClearDescription() *BlogSeriesUpdateOne {
	bsuo.mutation.ClearDescription()
	return bsuo
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (bsuo *BlogSeriesUpdateOne) SetThumbnailURL(s string) *BlogSeriesUpdateOne {
	bsuo.mutation.SetThumbnailURL(s)
	return bsuo
}

// SetNillableThumbnailURL sets the "thumbnail_url" field if the given value is not nil.
func (bsuo *BlogSeriesUpdateOne) SetNillableThumbnailURL(s *string) *BlogSeriesUpdateOne {
	if s != nil {
		bsuo.SetThumbnailURL(*s)
	}
	return bsuo
}

// ClearThumbnailURL clears the value of the "thumbnail_url" field.
func (bsuo *BlogSeriesUpdateOne) ClearThumbnailURL() *BlogSeriesUpdateOne {
	bsuo.mutation.ClearThumbnailURL()
	return bsuo
}

// SetStatus sets the "status" field.
func (bsuo *BlogSeriesUpdateOne) SetStatus(s string) *BlogSeriesUpdateOne {
	bsuo.mutation.SetStatus(s)
	return bsuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bsuo *BlogSeriesUpdateOne) SetNillableStatus(s *string) *BlogSeriesUpdateOne {
	if s != nil {
		bsuo.SetStatus(*s)
	}
	return bsuo
}

// SetEpisodeCount sets the "episode_count" field.
func (bsuo *BlogSeriesUpdateOne) SetEpisodeCount(i int) *BlogSeriesUpdateOne {
	bsuo.mutation.ResetEpisodeCount()
	bsuo.mutation.SetEpisodeCount(i)
	return bsuo
}

// SetNillableEpisodeCount sets the "episode_count" field if the given value is not nil.
func (bsuo *BlogSeriesUpdateOne) SetNillableEpisodeCount(i *int) *BlogSeriesUpdateOne {
	if i != nil {
		bsuo.SetEpisodeCount(*i)
	}
	return bsuo
}

// AddEpisodeCount adds i to the "episode_count" field.
func (bsuo *BlogSeriesUpdateOne) AddEpisodeCount(i int) *BlogSeriesUpdateOne {
	bsuo.mutation.AddEpisodeCount(i)
	return bsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (bsuo *BlogSeriesUpdateOne) SetUpdatedAt(t time.Time) *BlogSeriesUpdateOne {
	bsuo.mutation.SetUpdatedAt(t)
	return bsuo
}

// AddBlogPostIDs adds the "blog_posts" edge to the BlogPost entity by IDs.
func (bsuo *BlogSeriesUpdateOne) AddBlogPostIDs(ids ...uuid.UUID) *BlogSeriesUpdateOne {
	bsuo.mutation.AddBlogPostIDs(ids...)
	return bsuo
}

// AddBlogPosts adds the "blog_posts" edges to the BlogPost entity.
func (bsuo *BlogSeriesUpdateOne) AddBlogPosts(b ...*BlogPost) *BlogSeriesUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bsuo.AddBlogPostIDs(ids...)
}

// AddTranslationIDs adds the "translations" edge to the BlogSeriesTranslation entity by IDs.
func (bsuo *BlogSeriesUpdateOne) AddTranslationIDs(ids ...uuid.UUID) *BlogSeriesUpdateOne {
	bsuo.mutation.AddTranslationIDs(ids...)
	return bsuo
}

// AddTranslations adds the "translations" edges to the BlogSeriesTranslation entity.
func (bsuo *BlogSeriesUpdateOne) AddTranslations(b ...*BlogSeriesTranslation) *BlogSeriesUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bsuo.AddTranslationIDs(ids...)
}

// Mutation returns the BlogSeriesMutation object of the builder.
func (bsuo *BlogSeriesUpdateOne) Mutation() *BlogSeriesMutation {
	return bsuo.mutation
}

// ClearBlogPosts clears all "blog_posts" edges to the BlogPost entity.
func (bsuo *BlogSeriesUpdateOne) ClearBlogPosts() *BlogSeriesUpdateOne {
	bsuo.mutation.ClearBlogPosts()
	return bsuo
}

// RemoveBlogPostIDs removes the "blog_posts" edge to BlogPost entities by IDs.
func (bsuo *BlogSeriesUpdateOne) RemoveBlogPostIDs(ids ...uuid.UUID) *BlogSeriesUpdateOne {
	bsuo.mutation.RemoveBlogPostIDs(ids...)
	return bsuo
}

// RemoveBlogPosts removes "blog_posts" edges to BlogPost entities.
func (bsuo *BlogSeriesUpdateOne) RemoveBlogPosts(b ...*BlogPost) *BlogSeriesUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bsuo.RemoveBlogPostIDs(ids...)
}

// ClearTranslations clears all "translations" edges to the BlogSeriesTranslation entity.
func (bsuo *BlogSeriesUpdateOne) ClearTranslations() *BlogSeriesUpdateOne {
	bsuo.mutation.ClearTranslations()
	return bsuo
}

// RemoveTranslationIDs removes the "translations" edge to BlogSeriesTranslation entities by IDs.
func (bsuo *BlogSeriesUpdateOne) RemoveTranslationIDs(ids ...uuid.UUID) *BlogSeriesUpdateOne {
	bsuo.mutation.RemoveTranslationIDs(ids...)
	return bsuo
}

// RemoveTranslations removes "translations" edges to BlogSeriesTranslation entities.
func (bsuo *BlogSeriesUpdateOne) RemoveTranslations(b ...*BlogSeriesTranslation) *BlogSeriesUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bsuo.RemoveTranslationIDs(ids...)
}

// Where appends a list predicates to the BlogSeriesUpdate builder.
func (bsuo *BlogSeriesUpdateOne) Where(ps ...predicate.BlogSeries) *BlogSeriesUpdateOne {
	bsuo.mutation.Where(ps...)
	return bsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bsuo *BlogSeriesUpdateOne) Select(field string, fields ...string) *BlogSeriesUpdateOne {
	bsuo.fields = append([]string{field}, fields...)
	return bsuo
}

// Save executes the query and returns the updated BlogSeries entity.
func (bsuo *BlogSeriesUpdateOne) Save(ctx context.Context) (*BlogSeries, error) {
	bsuo.defaults()
	return withHooks(ctx, bsuo.sqlSave, bsuo.mutation, bsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bsuo *BlogSeriesUpdateOne) SaveX(ctx context.Context) *BlogSeries {
	node, err := bsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bsuo *BlogSeriesUpdateOne) Exec(ctx context.Context) error {
	_, err := bsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsuo *BlogSeriesUpdateOne) ExecX(ctx context.Context) {
	if err := bsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bsuo *BlogSeriesUpdateOne) defaults() {
	if _, ok := bsuo.mutation.UpdatedAt(); !ok {
		v := blogseries.UpdateDefaultUpdatedAt()
		bsuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bsuo *BlogSeriesUpdateOne) check() error {
	if v, ok := bsuo.mutation.Title(); ok {
		if err := blogseries.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "BlogSeries.title": %w`, err)}
		}
	}
	if v, ok := bsuo.mutation.Slug(); ok {
		if err := blogseries.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "BlogSeries.slug": %w`, err)}
		}
	}
	if v, ok := bsuo.mutation.ThumbnailURL(); ok {
		if err := blogseries.ThumbnailURLValidator(v); err != nil {
			return &ValidationError{Name: "thumbnail_url", err: fmt.Errorf(`ent: validator failed for field "BlogSeries.thumbnail_url": %w`, err)}
		}
	}
	if v, ok := bsuo.mutation.Status(); ok {
		if err := blogseries.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "BlogSeries.status": %w`, err)}
		}
	}
	return nil
}

func (bsuo *BlogSeriesUpdateOne) sqlSave(ctx context.Context) (_node *BlogSeries, err error) {
	if err := bsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blogseries.Table, blogseries.Columns, sqlgraph.NewFieldSpec(blogseries.FieldID, field.TypeUUID))
	id, ok := bsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlogSeries.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blogseries.FieldID)
		for _, f := range fields {
			if !blogseries.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blogseries.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bsuo.mutation.Title(); ok {
		_spec.SetField(blogseries.FieldTitle, field.TypeString, value)
	}
	if value, ok := bsuo.mutation.Slug(); ok {
		_spec.SetField(blogseries.FieldSlug, field.TypeString, value)
	}
	if value, ok := bsuo.mutation.Description(); ok {
		_spec.SetField(blogseries.FieldDescription, field.TypeString, value)
	}
	if bsuo.mutation.DescriptionCleared() {
		_spec.ClearField(blogseries.FieldDescription, field.TypeString)
	}
	if value, ok := bsuo.mutation.ThumbnailURL(); ok {
		_spec.SetField(blogseries.FieldThumbnailURL, field.TypeString, value)
	}
	if bsuo.mutation.ThumbnailURLCleared() {
		_spec.ClearField(blogseries.FieldThumbnailURL, field.TypeString)
	}
	if value, ok := bsuo.mutation.Status(); ok {
		_spec.SetField(blogseries.FieldStatus, field.TypeString, value)
	}
	if value, ok := bsuo.mutation.EpisodeCount(); ok {
		_spec.SetField(blogseries.FieldEpisodeCount, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.AddedEpisodeCount(); ok {
		_spec.AddField(blogseries.FieldEpisodeCount, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(blogseries.FieldUpdatedAt, field.TypeTime, value)
	}
	if bsuo.mutation.BlogPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogseries.BlogPostsTable,
			Columns: []string{blogseries.BlogPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bsuo.mutation.RemovedBlogPostsIDs(); len(nodes) > 0 && !bsuo.mutation.BlogPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogseries.BlogPostsTable,
			Columns: []string{blogseries.BlogPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bsuo.mutation.BlogPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogseries.BlogPostsTable,
			Columns: []string{blogseries.BlogPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bsuo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogseries.TranslationsTable,
			Columns: []string{blogseries.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogseriestranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bsuo.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !bsuo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogseries.TranslationsTable,
			Columns: []string{blogseries.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogseriestranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bsuo.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogseries.TranslationsTable,
			Columns: []string{blogseries.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogseriestranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BlogSeries{config: bsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blogseries.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bsuo.mutation.done = true
	return _node, nil
}
