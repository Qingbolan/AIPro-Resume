// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/publication"
	"silan-backend/internal/ent/publicationauthor"
	"silan-backend/internal/ent/publicationtranslation"
	"silan-backend/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PublicationCreate is the builder for creating a Publication entity.
type PublicationCreate struct {
	config
	mutation *PublicationMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (pc *PublicationCreate) SetUserID(u uuid.UUID) *PublicationCreate {
	pc.mutation.SetUserID(u)
	return pc
}

// SetTitle sets the "title" field.
func (pc *PublicationCreate) SetTitle(s string) *PublicationCreate {
	pc.mutation.SetTitle(s)
	return pc
}

// SetPublicationType sets the "publication_type" field.
func (pc *PublicationCreate) SetPublicationType(s string) *PublicationCreate {
	pc.mutation.SetPublicationType(s)
	return pc
}

// SetJournalName sets the "journal_name" field.
func (pc *PublicationCreate) SetJournalName(s string) *PublicationCreate {
	pc.mutation.SetJournalName(s)
	return pc
}

// SetNillableJournalName sets the "journal_name" field if the given value is not nil.
func (pc *PublicationCreate) SetNillableJournalName(s *string) *PublicationCreate {
	if s != nil {
		pc.SetJournalName(*s)
	}
	return pc
}

// SetConferenceName sets the "conference_name" field.
func (pc *PublicationCreate) SetConferenceName(s string) *PublicationCreate {
	pc.mutation.SetConferenceName(s)
	return pc
}

// SetNillableConferenceName sets the "conference_name" field if the given value is not nil.
func (pc *PublicationCreate) SetNillableConferenceName(s *string) *PublicationCreate {
	if s != nil {
		pc.SetConferenceName(*s)
	}
	return pc
}

// SetVolume sets the "volume" field.
func (pc *PublicationCreate) SetVolume(s string) *PublicationCreate {
	pc.mutation.SetVolume(s)
	return pc
}

// SetNillableVolume sets the "volume" field if the given value is not nil.
func (pc *PublicationCreate) SetNillableVolume(s *string) *PublicationCreate {
	if s != nil {
		pc.SetVolume(*s)
	}
	return pc
}

// SetIssue sets the "issue" field.
func (pc *PublicationCreate) SetIssue(s string) *PublicationCreate {
	pc.mutation.SetIssue(s)
	return pc
}

// SetNillableIssue sets the "issue" field if the given value is not nil.
func (pc *PublicationCreate) SetNillableIssue(s *string) *PublicationCreate {
	if s != nil {
		pc.SetIssue(*s)
	}
	return pc
}

// SetPages sets the "pages" field.
func (pc *PublicationCreate) SetPages(s string) *PublicationCreate {
	pc.mutation.SetPages(s)
	return pc
}

// SetNillablePages sets the "pages" field if the given value is not nil.
func (pc *PublicationCreate) SetNillablePages(s *string) *PublicationCreate {
	if s != nil {
		pc.SetPages(*s)
	}
	return pc
}

// SetPublicationDate sets the "publication_date" field.
func (pc *PublicationCreate) SetPublicationDate(t time.Time) *PublicationCreate {
	pc.mutation.SetPublicationDate(t)
	return pc
}

// SetNillablePublicationDate sets the "publication_date" field if the given value is not nil.
func (pc *PublicationCreate) SetNillablePublicationDate(t *time.Time) *PublicationCreate {
	if t != nil {
		pc.SetPublicationDate(*t)
	}
	return pc
}

// SetDoi sets the "doi" field.
func (pc *PublicationCreate) SetDoi(s string) *PublicationCreate {
	pc.mutation.SetDoi(s)
	return pc
}

// SetNillableDoi sets the "doi" field if the given value is not nil.
func (pc *PublicationCreate) SetNillableDoi(s *string) *PublicationCreate {
	if s != nil {
		pc.SetDoi(*s)
	}
	return pc
}

// SetIsbn sets the "isbn" field.
func (pc *PublicationCreate) SetIsbn(s string) *PublicationCreate {
	pc.mutation.SetIsbn(s)
	return pc
}

// SetNillableIsbn sets the "isbn" field if the given value is not nil.
func (pc *PublicationCreate) SetNillableIsbn(s *string) *PublicationCreate {
	if s != nil {
		pc.SetIsbn(*s)
	}
	return pc
}

// SetURL sets the "url" field.
func (pc *PublicationCreate) SetURL(s string) *PublicationCreate {
	pc.mutation.SetURL(s)
	return pc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (pc *PublicationCreate) SetNillableURL(s *string) *PublicationCreate {
	if s != nil {
		pc.SetURL(*s)
	}
	return pc
}

// SetPdfURL sets the "pdf_url" field.
func (pc *PublicationCreate) SetPdfURL(s string) *PublicationCreate {
	pc.mutation.SetPdfURL(s)
	return pc
}

// SetNillablePdfURL sets the "pdf_url" field if the given value is not nil.
func (pc *PublicationCreate) SetNillablePdfURL(s *string) *PublicationCreate {
	if s != nil {
		pc.SetPdfURL(*s)
	}
	return pc
}

// SetCitationCount sets the "citation_count" field.
func (pc *PublicationCreate) SetCitationCount(i int) *PublicationCreate {
	pc.mutation.SetCitationCount(i)
	return pc
}

// SetNillableCitationCount sets the "citation_count" field if the given value is not nil.
func (pc *PublicationCreate) SetNillableCitationCount(i *int) *PublicationCreate {
	if i != nil {
		pc.SetCitationCount(*i)
	}
	return pc
}

// SetIsPeerReviewed sets the "is_peer_reviewed" field.
func (pc *PublicationCreate) SetIsPeerReviewed(b bool) *PublicationCreate {
	pc.mutation.SetIsPeerReviewed(b)
	return pc
}

// SetNillableIsPeerReviewed sets the "is_peer_reviewed" field if the given value is not nil.
func (pc *PublicationCreate) SetNillableIsPeerReviewed(b *bool) *PublicationCreate {
	if b != nil {
		pc.SetIsPeerReviewed(*b)
	}
	return pc
}

// SetSortOrder sets the "sort_order" field.
func (pc *PublicationCreate) SetSortOrder(i int) *PublicationCreate {
	pc.mutation.SetSortOrder(i)
	return pc
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (pc *PublicationCreate) SetNillableSortOrder(i *int) *PublicationCreate {
	if i != nil {
		pc.SetSortOrder(*i)
	}
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PublicationCreate) SetCreatedAt(t time.Time) *PublicationCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PublicationCreate) SetNillableCreatedAt(t *time.Time) *PublicationCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PublicationCreate) SetUpdatedAt(t time.Time) *PublicationCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PublicationCreate) SetNillableUpdatedAt(t *time.Time) *PublicationCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PublicationCreate) SetID(u uuid.UUID) *PublicationCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PublicationCreate) SetNillableID(u *uuid.UUID) *PublicationCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// SetUser sets the "user" edge to the User entity.
func (pc *PublicationCreate) SetUser(u *User) *PublicationCreate {
	return pc.SetUserID(u.ID)
}

// AddTranslationIDs adds the "translations" edge to the PublicationTranslation entity by IDs.
func (pc *PublicationCreate) AddTranslationIDs(ids ...uuid.UUID) *PublicationCreate {
	pc.mutation.AddTranslationIDs(ids...)
	return pc
}

// AddTranslations adds the "translations" edges to the PublicationTranslation entity.
func (pc *PublicationCreate) AddTranslations(p ...*PublicationTranslation) *PublicationCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddTranslationIDs(ids...)
}

// AddAuthorIDs adds the "authors" edge to the PublicationAuthor entity by IDs.
func (pc *PublicationCreate) AddAuthorIDs(ids ...uuid.UUID) *PublicationCreate {
	pc.mutation.AddAuthorIDs(ids...)
	return pc
}

// AddAuthors adds the "authors" edges to the PublicationAuthor entity.
func (pc *PublicationCreate) AddAuthors(p ...*PublicationAuthor) *PublicationCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddAuthorIDs(ids...)
}

// Mutation returns the PublicationMutation object of the builder.
func (pc *PublicationCreate) Mutation() *PublicationMutation {
	return pc.mutation
}

// Save creates the Publication in the database.
func (pc *PublicationCreate) Save(ctx context.Context) (*Publication, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PublicationCreate) SaveX(ctx context.Context) *Publication {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PublicationCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PublicationCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PublicationCreate) defaults() {
	if _, ok := pc.mutation.CitationCount(); !ok {
		v := publication.DefaultCitationCount
		pc.mutation.SetCitationCount(v)
	}
	if _, ok := pc.mutation.IsPeerReviewed(); !ok {
		v := publication.DefaultIsPeerReviewed
		pc.mutation.SetIsPeerReviewed(v)
	}
	if _, ok := pc.mutation.SortOrder(); !ok {
		v := publication.DefaultSortOrder
		pc.mutation.SetSortOrder(v)
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := publication.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := publication.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := publication.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PublicationCreate) check() error {
	if _, ok := pc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Publication.user_id"`)}
	}
	if _, ok := pc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Publication.title"`)}
	}
	if v, ok := pc.mutation.Title(); ok {
		if err := publication.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Publication.title": %w`, err)}
		}
	}
	if _, ok := pc.mutation.PublicationType(); !ok {
		return &ValidationError{Name: "publication_type", err: errors.New(`ent: missing required field "Publication.publication_type"`)}
	}
	if v, ok := pc.mutation.PublicationType(); ok {
		if err := publication.PublicationTypeValidator(v); err != nil {
			return &ValidationError{Name: "publication_type", err: fmt.Errorf(`ent: validator failed for field "Publication.publication_type": %w`, err)}
		}
	}
	if v, ok := pc.mutation.JournalName(); ok {
		if err := publication.JournalNameValidator(v); err != nil {
			return &ValidationError{Name: "journal_name", err: fmt.Errorf(`ent: validator failed for field "Publication.journal_name": %w`, err)}
		}
	}
	if v, ok := pc.mutation.ConferenceName(); ok {
		if err := publication.ConferenceNameValidator(v); err != nil {
			return &ValidationError{Name: "conference_name", err: fmt.Errorf(`ent: validator failed for field "Publication.conference_name": %w`, err)}
		}
	}
	if v, ok := pc.mutation.Volume(); ok {
		if err := publication.VolumeValidator(v); err != nil {
			return &ValidationError{Name: "volume", err: fmt.Errorf(`ent: validator failed for field "Publication.volume": %w`, err)}
		}
	}
	if v, ok := pc.mutation.Issue(); ok {
		if err := publication.IssueValidator(v); err != nil {
			return &ValidationError{Name: "issue", err: fmt.Errorf(`ent: validator failed for field "Publication.issue": %w`, err)}
		}
	}
	if v, ok := pc.mutation.Pages(); ok {
		if err := publication.PagesValidator(v); err != nil {
			return &ValidationError{Name: "pages", err: fmt.Errorf(`ent: validator failed for field "Publication.pages": %w`, err)}
		}
	}
	if v, ok := pc.mutation.Doi(); ok {
		if err := publication.DoiValidator(v); err != nil {
			return &ValidationError{Name: "doi", err: fmt.Errorf(`ent: validator failed for field "Publication.doi": %w`, err)}
		}
	}
	if v, ok := pc.mutation.Isbn(); ok {
		if err := publication.IsbnValidator(v); err != nil {
			return &ValidationError{Name: "isbn", err: fmt.Errorf(`ent: validator failed for field "Publication.isbn": %w`, err)}
		}
	}
	if v, ok := pc.mutation.URL(); ok {
		if err := publication.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Publication.url": %w`, err)}
		}
	}
	if v, ok := pc.mutation.PdfURL(); ok {
		if err := publication.PdfURLValidator(v); err != nil {
			return &ValidationError{Name: "pdf_url", err: fmt.Errorf(`ent: validator failed for field "Publication.pdf_url": %w`, err)}
		}
	}
	if _, ok := pc.mutation.CitationCount(); !ok {
		return &ValidationError{Name: "citation_count", err: errors.New(`ent: missing required field "Publication.citation_count"`)}
	}
	if _, ok := pc.mutation.IsPeerReviewed(); !ok {
		return &ValidationError{Name: "is_peer_reviewed", err: errors.New(`ent: missing required field "Publication.is_peer_reviewed"`)}
	}
	if _, ok := pc.mutation.SortOrder(); !ok {
		return &ValidationError{Name: "sort_order", err: errors.New(`ent: missing required field "Publication.sort_order"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Publication.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Publication.updated_at"`)}
	}
	if len(pc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Publication.user"`)}
	}
	return nil
}

func (pc *PublicationCreate) sqlSave(ctx context.Context) (*Publication, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PublicationCreate) createSpec() (*Publication, *sqlgraph.CreateSpec) {
	var (
		_node = &Publication{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(publication.Table, sqlgraph.NewFieldSpec(publication.FieldID, field.TypeUUID))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.Title(); ok {
		_spec.SetField(publication.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := pc.mutation.PublicationType(); ok {
		_spec.SetField(publication.FieldPublicationType, field.TypeString, value)
		_node.PublicationType = value
	}
	if value, ok := pc.mutation.JournalName(); ok {
		_spec.SetField(publication.FieldJournalName, field.TypeString, value)
		_node.JournalName = value
	}
	if value, ok := pc.mutation.ConferenceName(); ok {
		_spec.SetField(publication.FieldConferenceName, field.TypeString, value)
		_node.ConferenceName = value
	}
	if value, ok := pc.mutation.Volume(); ok {
		_spec.SetField(publication.FieldVolume, field.TypeString, value)
		_node.Volume = value
	}
	if value, ok := pc.mutation.Issue(); ok {
		_spec.SetField(publication.FieldIssue, field.TypeString, value)
		_node.Issue = value
	}
	if value, ok := pc.mutation.Pages(); ok {
		_spec.SetField(publication.FieldPages, field.TypeString, value)
		_node.Pages = value
	}
	if value, ok := pc.mutation.PublicationDate(); ok {
		_spec.SetField(publication.FieldPublicationDate, field.TypeTime, value)
		_node.PublicationDate = value
	}
	if value, ok := pc.mutation.Doi(); ok {
		_spec.SetField(publication.FieldDoi, field.TypeString, value)
		_node.Doi = value
	}
	if value, ok := pc.mutation.Isbn(); ok {
		_spec.SetField(publication.FieldIsbn, field.TypeString, value)
		_node.Isbn = value
	}
	if value, ok := pc.mutation.URL(); ok {
		_spec.SetField(publication.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := pc.mutation.PdfURL(); ok {
		_spec.SetField(publication.FieldPdfURL, field.TypeString, value)
		_node.PdfURL = value
	}
	if value, ok := pc.mutation.CitationCount(); ok {
		_spec.SetField(publication.FieldCitationCount, field.TypeInt, value)
		_node.CitationCount = value
	}
	if value, ok := pc.mutation.IsPeerReviewed(); ok {
		_spec.SetField(publication.FieldIsPeerReviewed, field.TypeBool, value)
		_node.IsPeerReviewed = value
	}
	if value, ok := pc.mutation.SortOrder(); ok {
		_spec.SetField(publication.FieldSortOrder, field.TypeInt, value)
		_node.SortOrder = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(publication.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(publication.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   publication.UserTable,
			Columns: []string{publication.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   publication.TranslationsTable,
			Columns: []string{publication.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publicationtranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.AuthorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   publication.AuthorsTable,
			Columns: []string{publication.AuthorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publicationauthor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PublicationCreateBulk is the builder for creating many Publication entities in bulk.
type PublicationCreateBulk struct {
	config
	err      error
	builders []*PublicationCreate
}

// Save creates the Publication entities in the database.
func (pcb *PublicationCreateBulk) Save(ctx context.Context) ([]*Publication, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Publication, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PublicationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PublicationCreateBulk) SaveX(ctx context.Context) []*Publication {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PublicationCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PublicationCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
