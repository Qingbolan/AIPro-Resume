// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/blogpost"
	"silan-backend/internal/ent/blogposttranslation"
	"silan-backend/internal/ent/language"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// BlogPostTranslation is the model entity for the BlogPostTranslation schema.
type BlogPostTranslation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// BlogPostID holds the value of the "blog_post_id" field.
	BlogPostID uuid.UUID `json:"blog_post_id,omitempty"`
	// LanguageCode holds the value of the "language_code" field.
	LanguageCode string `json:"language_code,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Excerpt holds the value of the "excerpt" field.
	Excerpt string `json:"excerpt,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BlogPostTranslationQuery when eager-loading is set.
	Edges        BlogPostTranslationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BlogPostTranslationEdges holds the relations/edges for other nodes in the graph.
type BlogPostTranslationEdges struct {
	// BlogPost holds the value of the blog_post edge.
	BlogPost *BlogPost `json:"blog_post,omitempty"`
	// Language holds the value of the language edge.
	Language *Language `json:"language,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BlogPostOrErr returns the BlogPost value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlogPostTranslationEdges) BlogPostOrErr() (*BlogPost, error) {
	if e.BlogPost != nil {
		return e.BlogPost, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: blogpost.Label}
	}
	return nil, &NotLoadedError{edge: "blog_post"}
}

// LanguageOrErr returns the Language value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlogPostTranslationEdges) LanguageOrErr() (*Language, error) {
	if e.Language != nil {
		return e.Language, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: language.Label}
	}
	return nil, &NotLoadedError{edge: "language"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BlogPostTranslation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case blogposttranslation.FieldLanguageCode, blogposttranslation.FieldTitle, blogposttranslation.FieldExcerpt, blogposttranslation.FieldContent:
			values[i] = new(sql.NullString)
		case blogposttranslation.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case blogposttranslation.FieldID, blogposttranslation.FieldBlogPostID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BlogPostTranslation fields.
func (bpt *BlogPostTranslation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case blogposttranslation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				bpt.ID = *value
			}
		case blogposttranslation.FieldBlogPostID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field blog_post_id", values[i])
			} else if value != nil {
				bpt.BlogPostID = *value
			}
		case blogposttranslation.FieldLanguageCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language_code", values[i])
			} else if value.Valid {
				bpt.LanguageCode = value.String
			}
		case blogposttranslation.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				bpt.Title = value.String
			}
		case blogposttranslation.FieldExcerpt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field excerpt", values[i])
			} else if value.Valid {
				bpt.Excerpt = value.String
			}
		case blogposttranslation.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				bpt.Content = value.String
			}
		case blogposttranslation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bpt.CreatedAt = value.Time
			}
		default:
			bpt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BlogPostTranslation.
// This includes values selected through modifiers, order, etc.
func (bpt *BlogPostTranslation) Value(name string) (ent.Value, error) {
	return bpt.selectValues.Get(name)
}

// QueryBlogPost queries the "blog_post" edge of the BlogPostTranslation entity.
func (bpt *BlogPostTranslation) QueryBlogPost() *BlogPostQuery {
	return NewBlogPostTranslationClient(bpt.config).QueryBlogPost(bpt)
}

// QueryLanguage queries the "language" edge of the BlogPostTranslation entity.
func (bpt *BlogPostTranslation) QueryLanguage() *LanguageQuery {
	return NewBlogPostTranslationClient(bpt.config).QueryLanguage(bpt)
}

// Update returns a builder for updating this BlogPostTranslation.
// Note that you need to call BlogPostTranslation.Unwrap() before calling this method if this BlogPostTranslation
// was returned from a transaction, and the transaction was committed or rolled back.
func (bpt *BlogPostTranslation) Update() *BlogPostTranslationUpdateOne {
	return NewBlogPostTranslationClient(bpt.config).UpdateOne(bpt)
}

// Unwrap unwraps the BlogPostTranslation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bpt *BlogPostTranslation) Unwrap() *BlogPostTranslation {
	_tx, ok := bpt.config.driver.(*txDriver)
	if !ok {
		panic("ent: BlogPostTranslation is not a transactional entity")
	}
	bpt.config.driver = _tx.drv
	return bpt
}

// String implements the fmt.Stringer.
func (bpt *BlogPostTranslation) String() string {
	var builder strings.Builder
	builder.WriteString("BlogPostTranslation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bpt.ID))
	builder.WriteString("blog_post_id=")
	builder.WriteString(fmt.Sprintf("%v", bpt.BlogPostID))
	builder.WriteString(", ")
	builder.WriteString("language_code=")
	builder.WriteString(bpt.LanguageCode)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(bpt.Title)
	builder.WriteString(", ")
	builder.WriteString("excerpt=")
	builder.WriteString(bpt.Excerpt)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(bpt.Content)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(bpt.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BlogPostTranslations is a parsable slice of BlogPostTranslation.
type BlogPostTranslations []*BlogPostTranslation
