// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/researchproject"
	"silan-backend/internal/ent/researchprojectdetail"
	"silan-backend/internal/ent/researchprojecttranslation"
	"silan-backend/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ResearchProjectUpdate is the builder for updating ResearchProject entities.
type ResearchProjectUpdate struct {
	config
	hooks    []Hook
	mutation *ResearchProjectMutation
}

// Where appends a list predicates to the ResearchProjectUpdate builder.
func (rpu *ResearchProjectUpdate) Where(ps ...predicate.ResearchProject) *ResearchProjectUpdate {
	rpu.mutation.Where(ps...)
	return rpu
}

// SetUserID sets the "user_id" field.
func (rpu *ResearchProjectUpdate) SetUserID(u uuid.UUID) *ResearchProjectUpdate {
	rpu.mutation.SetUserID(u)
	return rpu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (rpu *ResearchProjectUpdate) SetNillableUserID(u *uuid.UUID) *ResearchProjectUpdate {
	if u != nil {
		rpu.SetUserID(*u)
	}
	return rpu
}

// SetTitle sets the "title" field.
func (rpu *ResearchProjectUpdate) SetTitle(s string) *ResearchProjectUpdate {
	rpu.mutation.SetTitle(s)
	return rpu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (rpu *ResearchProjectUpdate) SetNillableTitle(s *string) *ResearchProjectUpdate {
	if s != nil {
		rpu.SetTitle(*s)
	}
	return rpu
}

// SetStartDate sets the "start_date" field.
func (rpu *ResearchProjectUpdate) SetStartDate(t time.Time) *ResearchProjectUpdate {
	rpu.mutation.SetStartDate(t)
	return rpu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (rpu *ResearchProjectUpdate) SetNillableStartDate(t *time.Time) *ResearchProjectUpdate {
	if t != nil {
		rpu.SetStartDate(*t)
	}
	return rpu
}

// ClearStartDate clears the value of the "start_date" field.
func (rpu *ResearchProjectUpdate) ClearStartDate() *ResearchProjectUpdate {
	rpu.mutation.ClearStartDate()
	return rpu
}

// SetEndDate sets the "end_date" field.
func (rpu *ResearchProjectUpdate) SetEndDate(t time.Time) *ResearchProjectUpdate {
	rpu.mutation.SetEndDate(t)
	return rpu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (rpu *ResearchProjectUpdate) SetNillableEndDate(t *time.Time) *ResearchProjectUpdate {
	if t != nil {
		rpu.SetEndDate(*t)
	}
	return rpu
}

// ClearEndDate clears the value of the "end_date" field.
func (rpu *ResearchProjectUpdate) ClearEndDate() *ResearchProjectUpdate {
	rpu.mutation.ClearEndDate()
	return rpu
}

// SetIsOngoing sets the "is_ongoing" field.
func (rpu *ResearchProjectUpdate) SetIsOngoing(b bool) *ResearchProjectUpdate {
	rpu.mutation.SetIsOngoing(b)
	return rpu
}

// SetNillableIsOngoing sets the "is_ongoing" field if the given value is not nil.
func (rpu *ResearchProjectUpdate) SetNillableIsOngoing(b *bool) *ResearchProjectUpdate {
	if b != nil {
		rpu.SetIsOngoing(*b)
	}
	return rpu
}

// SetLocation sets the "location" field.
func (rpu *ResearchProjectUpdate) SetLocation(s string) *ResearchProjectUpdate {
	rpu.mutation.SetLocation(s)
	return rpu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (rpu *ResearchProjectUpdate) SetNillableLocation(s *string) *ResearchProjectUpdate {
	if s != nil {
		rpu.SetLocation(*s)
	}
	return rpu
}

// ClearLocation clears the value of the "location" field.
func (rpu *ResearchProjectUpdate) ClearLocation() *ResearchProjectUpdate {
	rpu.mutation.ClearLocation()
	return rpu
}

// SetResearchType sets the "research_type" field.
func (rpu *ResearchProjectUpdate) SetResearchType(s string) *ResearchProjectUpdate {
	rpu.mutation.SetResearchType(s)
	return rpu
}

// SetNillableResearchType sets the "research_type" field if the given value is not nil.
func (rpu *ResearchProjectUpdate) SetNillableResearchType(s *string) *ResearchProjectUpdate {
	if s != nil {
		rpu.SetResearchType(*s)
	}
	return rpu
}

// ClearResearchType clears the value of the "research_type" field.
func (rpu *ResearchProjectUpdate) ClearResearchType() *ResearchProjectUpdate {
	rpu.mutation.ClearResearchType()
	return rpu
}

// SetFundingSource sets the "funding_source" field.
func (rpu *ResearchProjectUpdate) SetFundingSource(s string) *ResearchProjectUpdate {
	rpu.mutation.SetFundingSource(s)
	return rpu
}

// SetNillableFundingSource sets the "funding_source" field if the given value is not nil.
func (rpu *ResearchProjectUpdate) SetNillableFundingSource(s *string) *ResearchProjectUpdate {
	if s != nil {
		rpu.SetFundingSource(*s)
	}
	return rpu
}

// ClearFundingSource clears the value of the "funding_source" field.
func (rpu *ResearchProjectUpdate) ClearFundingSource() *ResearchProjectUpdate {
	rpu.mutation.ClearFundingSource()
	return rpu
}

// SetFundingAmount sets the "funding_amount" field.
func (rpu *ResearchProjectUpdate) SetFundingAmount(f float64) *ResearchProjectUpdate {
	rpu.mutation.ResetFundingAmount()
	rpu.mutation.SetFundingAmount(f)
	return rpu
}

// SetNillableFundingAmount sets the "funding_amount" field if the given value is not nil.
func (rpu *ResearchProjectUpdate) SetNillableFundingAmount(f *float64) *ResearchProjectUpdate {
	if f != nil {
		rpu.SetFundingAmount(*f)
	}
	return rpu
}

// AddFundingAmount adds f to the "funding_amount" field.
func (rpu *ResearchProjectUpdate) AddFundingAmount(f float64) *ResearchProjectUpdate {
	rpu.mutation.AddFundingAmount(f)
	return rpu
}

// ClearFundingAmount clears the value of the "funding_amount" field.
func (rpu *ResearchProjectUpdate) ClearFundingAmount() *ResearchProjectUpdate {
	rpu.mutation.ClearFundingAmount()
	return rpu
}

// SetSortOrder sets the "sort_order" field.
func (rpu *ResearchProjectUpdate) SetSortOrder(i int) *ResearchProjectUpdate {
	rpu.mutation.ResetSortOrder()
	rpu.mutation.SetSortOrder(i)
	return rpu
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (rpu *ResearchProjectUpdate) SetNillableSortOrder(i *int) *ResearchProjectUpdate {
	if i != nil {
		rpu.SetSortOrder(*i)
	}
	return rpu
}

// AddSortOrder adds i to the "sort_order" field.
func (rpu *ResearchProjectUpdate) AddSortOrder(i int) *ResearchProjectUpdate {
	rpu.mutation.AddSortOrder(i)
	return rpu
}

// SetUpdatedAt sets the "updated_at" field.
func (rpu *ResearchProjectUpdate) SetUpdatedAt(t time.Time) *ResearchProjectUpdate {
	rpu.mutation.SetUpdatedAt(t)
	return rpu
}

// SetUser sets the "user" edge to the User entity.
func (rpu *ResearchProjectUpdate) SetUser(u *User) *ResearchProjectUpdate {
	return rpu.SetUserID(u.ID)
}

// AddTranslationIDs adds the "translations" edge to the ResearchProjectTranslation entity by IDs.
func (rpu *ResearchProjectUpdate) AddTranslationIDs(ids ...uuid.UUID) *ResearchProjectUpdate {
	rpu.mutation.AddTranslationIDs(ids...)
	return rpu
}

// AddTranslations adds the "translations" edges to the ResearchProjectTranslation entity.
func (rpu *ResearchProjectUpdate) AddTranslations(r ...*ResearchProjectTranslation) *ResearchProjectUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpu.AddTranslationIDs(ids...)
}

// AddDetailIDs adds the "details" edge to the ResearchProjectDetail entity by IDs.
func (rpu *ResearchProjectUpdate) AddDetailIDs(ids ...uuid.UUID) *ResearchProjectUpdate {
	rpu.mutation.AddDetailIDs(ids...)
	return rpu
}

// AddDetails adds the "details" edges to the ResearchProjectDetail entity.
func (rpu *ResearchProjectUpdate) AddDetails(r ...*ResearchProjectDetail) *ResearchProjectUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpu.AddDetailIDs(ids...)
}

// Mutation returns the ResearchProjectMutation object of the builder.
func (rpu *ResearchProjectUpdate) Mutation() *ResearchProjectMutation {
	return rpu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (rpu *ResearchProjectUpdate) ClearUser() *ResearchProjectUpdate {
	rpu.mutation.ClearUser()
	return rpu
}

// ClearTranslations clears all "translations" edges to the ResearchProjectTranslation entity.
func (rpu *ResearchProjectUpdate) ClearTranslations() *ResearchProjectUpdate {
	rpu.mutation.ClearTranslations()
	return rpu
}

// RemoveTranslationIDs removes the "translations" edge to ResearchProjectTranslation entities by IDs.
func (rpu *ResearchProjectUpdate) RemoveTranslationIDs(ids ...uuid.UUID) *ResearchProjectUpdate {
	rpu.mutation.RemoveTranslationIDs(ids...)
	return rpu
}

// RemoveTranslations removes "translations" edges to ResearchProjectTranslation entities.
func (rpu *ResearchProjectUpdate) RemoveTranslations(r ...*ResearchProjectTranslation) *ResearchProjectUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpu.RemoveTranslationIDs(ids...)
}

// ClearDetails clears all "details" edges to the ResearchProjectDetail entity.
func (rpu *ResearchProjectUpdate) ClearDetails() *ResearchProjectUpdate {
	rpu.mutation.ClearDetails()
	return rpu
}

// RemoveDetailIDs removes the "details" edge to ResearchProjectDetail entities by IDs.
func (rpu *ResearchProjectUpdate) RemoveDetailIDs(ids ...uuid.UUID) *ResearchProjectUpdate {
	rpu.mutation.RemoveDetailIDs(ids...)
	return rpu
}

// RemoveDetails removes "details" edges to ResearchProjectDetail entities.
func (rpu *ResearchProjectUpdate) RemoveDetails(r ...*ResearchProjectDetail) *ResearchProjectUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpu.RemoveDetailIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rpu *ResearchProjectUpdate) Save(ctx context.Context) (int, error) {
	rpu.defaults()
	return withHooks(ctx, rpu.sqlSave, rpu.mutation, rpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpu *ResearchProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := rpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpu *ResearchProjectUpdate) Exec(ctx context.Context) error {
	_, err := rpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpu *ResearchProjectUpdate) ExecX(ctx context.Context) {
	if err := rpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpu *ResearchProjectUpdate) defaults() {
	if _, ok := rpu.mutation.UpdatedAt(); !ok {
		v := researchproject.UpdateDefaultUpdatedAt()
		rpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpu *ResearchProjectUpdate) check() error {
	if v, ok := rpu.mutation.Title(); ok {
		if err := researchproject.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "ResearchProject.title": %w`, err)}
		}
	}
	if v, ok := rpu.mutation.Location(); ok {
		if err := researchproject.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "ResearchProject.location": %w`, err)}
		}
	}
	if v, ok := rpu.mutation.ResearchType(); ok {
		if err := researchproject.ResearchTypeValidator(v); err != nil {
			return &ValidationError{Name: "research_type", err: fmt.Errorf(`ent: validator failed for field "ResearchProject.research_type": %w`, err)}
		}
	}
	if v, ok := rpu.mutation.FundingSource(); ok {
		if err := researchproject.FundingSourceValidator(v); err != nil {
			return &ValidationError{Name: "funding_source", err: fmt.Errorf(`ent: validator failed for field "ResearchProject.funding_source": %w`, err)}
		}
	}
	if rpu.mutation.UserCleared() && len(rpu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ResearchProject.user"`)
	}
	return nil
}

func (rpu *ResearchProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(researchproject.Table, researchproject.Columns, sqlgraph.NewFieldSpec(researchproject.FieldID, field.TypeUUID))
	if ps := rpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpu.mutation.Title(); ok {
		_spec.SetField(researchproject.FieldTitle, field.TypeString, value)
	}
	if value, ok := rpu.mutation.StartDate(); ok {
		_spec.SetField(researchproject.FieldStartDate, field.TypeTime, value)
	}
	if rpu.mutation.StartDateCleared() {
		_spec.ClearField(researchproject.FieldStartDate, field.TypeTime)
	}
	if value, ok := rpu.mutation.EndDate(); ok {
		_spec.SetField(researchproject.FieldEndDate, field.TypeTime, value)
	}
	if rpu.mutation.EndDateCleared() {
		_spec.ClearField(researchproject.FieldEndDate, field.TypeTime)
	}
	if value, ok := rpu.mutation.IsOngoing(); ok {
		_spec.SetField(researchproject.FieldIsOngoing, field.TypeBool, value)
	}
	if value, ok := rpu.mutation.Location(); ok {
		_spec.SetField(researchproject.FieldLocation, field.TypeString, value)
	}
	if rpu.mutation.LocationCleared() {
		_spec.ClearField(researchproject.FieldLocation, field.TypeString)
	}
	if value, ok := rpu.mutation.ResearchType(); ok {
		_spec.SetField(researchproject.FieldResearchType, field.TypeString, value)
	}
	if rpu.mutation.ResearchTypeCleared() {
		_spec.ClearField(researchproject.FieldResearchType, field.TypeString)
	}
	if value, ok := rpu.mutation.FundingSource(); ok {
		_spec.SetField(researchproject.FieldFundingSource, field.TypeString, value)
	}
	if rpu.mutation.FundingSourceCleared() {
		_spec.ClearField(researchproject.FieldFundingSource, field.TypeString)
	}
	if value, ok := rpu.mutation.FundingAmount(); ok {
		_spec.SetField(researchproject.FieldFundingAmount, field.TypeFloat64, value)
	}
	if value, ok := rpu.mutation.AddedFundingAmount(); ok {
		_spec.AddField(researchproject.FieldFundingAmount, field.TypeFloat64, value)
	}
	if rpu.mutation.FundingAmountCleared() {
		_spec.ClearField(researchproject.FieldFundingAmount, field.TypeFloat64)
	}
	if value, ok := rpu.mutation.SortOrder(); ok {
		_spec.SetField(researchproject.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := rpu.mutation.AddedSortOrder(); ok {
		_spec.AddField(researchproject.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := rpu.mutation.UpdatedAt(); ok {
		_spec.SetField(researchproject.FieldUpdatedAt, field.TypeTime, value)
	}
	if rpu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   researchproject.UserTable,
			Columns: []string{researchproject.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   researchproject.UserTable,
			Columns: []string{researchproject.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpu.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   researchproject.TranslationsTable,
			Columns: []string{researchproject.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojecttranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !rpu.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   researchproject.TranslationsTable,
			Columns: []string{researchproject.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojecttranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   researchproject.TranslationsTable,
			Columns: []string{researchproject.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojecttranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpu.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   researchproject.DetailsTable,
			Columns: []string{researchproject.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojectdetail.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.RemovedDetailsIDs(); len(nodes) > 0 && !rpu.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   researchproject.DetailsTable,
			Columns: []string{researchproject.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojectdetail.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.DetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   researchproject.DetailsTable,
			Columns: []string{researchproject.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojectdetail.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{researchproject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rpu.mutation.done = true
	return n, nil
}

// ResearchProjectUpdateOne is the builder for updating a single ResearchProject entity.
type ResearchProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ResearchProjectMutation
}

// SetUserID sets the "user_id" field.
func (rpuo *ResearchProjectUpdateOne) SetUserID(u uuid.UUID) *ResearchProjectUpdateOne {
	rpuo.mutation.SetUserID(u)
	return rpuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (rpuo *ResearchProjectUpdateOne) SetNillableUserID(u *uuid.UUID) *ResearchProjectUpdateOne {
	if u != nil {
		rpuo.SetUserID(*u)
	}
	return rpuo
}

// SetTitle sets the "title" field.
func (rpuo *ResearchProjectUpdateOne) SetTitle(s string) *ResearchProjectUpdateOne {
	rpuo.mutation.SetTitle(s)
	return rpuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (rpuo *ResearchProjectUpdateOne) SetNillableTitle(s *string) *ResearchProjectUpdateOne {
	if s != nil {
		rpuo.SetTitle(*s)
	}
	return rpuo
}

// SetStartDate sets the "start_date" field.
func (rpuo *ResearchProjectUpdateOne) SetStartDate(t time.Time) *ResearchProjectUpdateOne {
	rpuo.mutation.SetStartDate(t)
	return rpuo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (rpuo *ResearchProjectUpdateOne) SetNillableStartDate(t *time.Time) *ResearchProjectUpdateOne {
	if t != nil {
		rpuo.SetStartDate(*t)
	}
	return rpuo
}

// ClearStartDate clears the value of the "start_date" field.
func (rpuo *ResearchProjectUpdateOne) ClearStartDate() *ResearchProjectUpdateOne {
	rpuo.mutation.ClearStartDate()
	return rpuo
}

// SetEndDate sets the "end_date" field.
func (rpuo *ResearchProjectUpdateOne) SetEndDate(t time.Time) *ResearchProjectUpdateOne {
	rpuo.mutation.SetEndDate(t)
	return rpuo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (rpuo *ResearchProjectUpdateOne) SetNillableEndDate(t *time.Time) *ResearchProjectUpdateOne {
	if t != nil {
		rpuo.SetEndDate(*t)
	}
	return rpuo
}

// ClearEndDate clears the value of the "end_date" field.
func (rpuo *ResearchProjectUpdateOne) ClearEndDate() *ResearchProjectUpdateOne {
	rpuo.mutation.ClearEndDate()
	return rpuo
}

// SetIsOngoing sets the "is_ongoing" field.
func (rpuo *ResearchProjectUpdateOne) SetIsOngoing(b bool) *ResearchProjectUpdateOne {
	rpuo.mutation.SetIsOngoing(b)
	return rpuo
}

// SetNillableIsOngoing sets the "is_ongoing" field if the given value is not nil.
func (rpuo *ResearchProjectUpdateOne) SetNillableIsOngoing(b *bool) *ResearchProjectUpdateOne {
	if b != nil {
		rpuo.SetIsOngoing(*b)
	}
	return rpuo
}

// SetLocation sets the "location" field.
func (rpuo *ResearchProjectUpdateOne) SetLocation(s string) *ResearchProjectUpdateOne {
	rpuo.mutation.SetLocation(s)
	return rpuo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (rpuo *ResearchProjectUpdateOne) SetNillableLocation(s *string) *ResearchProjectUpdateOne {
	if s != nil {
		rpuo.SetLocation(*s)
	}
	return rpuo
}

// ClearLocation clears the value of the "location" field.
func (rpuo *ResearchProjectUpdateOne) ClearLocation() *ResearchProjectUpdateOne {
	rpuo.mutation.ClearLocation()
	return rpuo
}

// SetResearchType sets the "research_type" field.
func (rpuo *ResearchProjectUpdateOne) SetResearchType(s string) *ResearchProjectUpdateOne {
	rpuo.mutation.SetResearchType(s)
	return rpuo
}

// SetNillableResearchType sets the "research_type" field if the given value is not nil.
func (rpuo *ResearchProjectUpdateOne) SetNillableResearchType(s *string) *ResearchProjectUpdateOne {
	if s != nil {
		rpuo.SetResearchType(*s)
	}
	return rpuo
}

// ClearResearchType clears the value of the "research_type" field.
func (rpuo *ResearchProjectUpdateOne) ClearResearchType() *ResearchProjectUpdateOne {
	rpuo.mutation.ClearResearchType()
	return rpuo
}

// SetFundingSource sets the "funding_source" field.
func (rpuo *ResearchProjectUpdateOne) SetFundingSource(s string) *ResearchProjectUpdateOne {
	rpuo.mutation.SetFundingSource(s)
	return rpuo
}

// SetNillableFundingSource sets the "funding_source" field if the given value is not nil.
func (rpuo *ResearchProjectUpdateOne) SetNillableFundingSource(s *string) *ResearchProjectUpdateOne {
	if s != nil {
		rpuo.SetFundingSource(*s)
	}
	return rpuo
}

// ClearFundingSource clears the value of the "funding_source" field.
func (rpuo *ResearchProjectUpdateOne) ClearFundingSource() *ResearchProjectUpdateOne {
	rpuo.mutation.ClearFundingSource()
	return rpuo
}

// SetFundingAmount sets the "funding_amount" field.
func (rpuo *ResearchProjectUpdateOne) SetFundingAmount(f float64) *ResearchProjectUpdateOne {
	rpuo.mutation.ResetFundingAmount()
	rpuo.mutation.SetFundingAmount(f)
	return rpuo
}

// SetNillableFundingAmount sets the "funding_amount" field if the given value is not nil.
func (rpuo *ResearchProjectUpdateOne) SetNillableFundingAmount(f *float64) *ResearchProjectUpdateOne {
	if f != nil {
		rpuo.SetFundingAmount(*f)
	}
	return rpuo
}

// AddFundingAmount adds f to the "funding_amount" field.
func (rpuo *ResearchProjectUpdateOne) AddFundingAmount(f float64) *ResearchProjectUpdateOne {
	rpuo.mutation.AddFundingAmount(f)
	return rpuo
}

// ClearFundingAmount clears the value of the "funding_amount" field.
func (rpuo *ResearchProjectUpdateOne) ClearFundingAmount() *ResearchProjectUpdateOne {
	rpuo.mutation.ClearFundingAmount()
	return rpuo
}

// SetSortOrder sets the "sort_order" field.
func (rpuo *ResearchProjectUpdateOne) SetSortOrder(i int) *ResearchProjectUpdateOne {
	rpuo.mutation.ResetSortOrder()
	rpuo.mutation.SetSortOrder(i)
	return rpuo
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (rpuo *ResearchProjectUpdateOne) SetNillableSortOrder(i *int) *ResearchProjectUpdateOne {
	if i != nil {
		rpuo.SetSortOrder(*i)
	}
	return rpuo
}

// AddSortOrder adds i to the "sort_order" field.
func (rpuo *ResearchProjectUpdateOne) AddSortOrder(i int) *ResearchProjectUpdateOne {
	rpuo.mutation.AddSortOrder(i)
	return rpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (rpuo *ResearchProjectUpdateOne) SetUpdatedAt(t time.Time) *ResearchProjectUpdateOne {
	rpuo.mutation.SetUpdatedAt(t)
	return rpuo
}

// SetUser sets the "user" edge to the User entity.
func (rpuo *ResearchProjectUpdateOne) SetUser(u *User) *ResearchProjectUpdateOne {
	return rpuo.SetUserID(u.ID)
}

// AddTranslationIDs adds the "translations" edge to the ResearchProjectTranslation entity by IDs.
func (rpuo *ResearchProjectUpdateOne) AddTranslationIDs(ids ...uuid.UUID) *ResearchProjectUpdateOne {
	rpuo.mutation.AddTranslationIDs(ids...)
	return rpuo
}

// AddTranslations adds the "translations" edges to the ResearchProjectTranslation entity.
func (rpuo *ResearchProjectUpdateOne) AddTranslations(r ...*ResearchProjectTranslation) *ResearchProjectUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpuo.AddTranslationIDs(ids...)
}

// AddDetailIDs adds the "details" edge to the ResearchProjectDetail entity by IDs.
func (rpuo *ResearchProjectUpdateOne) AddDetailIDs(ids ...uuid.UUID) *ResearchProjectUpdateOne {
	rpuo.mutation.AddDetailIDs(ids...)
	return rpuo
}

// AddDetails adds the "details" edges to the ResearchProjectDetail entity.
func (rpuo *ResearchProjectUpdateOne) AddDetails(r ...*ResearchProjectDetail) *ResearchProjectUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpuo.AddDetailIDs(ids...)
}

// Mutation returns the ResearchProjectMutation object of the builder.
func (rpuo *ResearchProjectUpdateOne) Mutation() *ResearchProjectMutation {
	return rpuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (rpuo *ResearchProjectUpdateOne) ClearUser() *ResearchProjectUpdateOne {
	rpuo.mutation.ClearUser()
	return rpuo
}

// ClearTranslations clears all "translations" edges to the ResearchProjectTranslation entity.
func (rpuo *ResearchProjectUpdateOne) ClearTranslations() *ResearchProjectUpdateOne {
	rpuo.mutation.ClearTranslations()
	return rpuo
}

// RemoveTranslationIDs removes the "translations" edge to ResearchProjectTranslation entities by IDs.
func (rpuo *ResearchProjectUpdateOne) RemoveTranslationIDs(ids ...uuid.UUID) *ResearchProjectUpdateOne {
	rpuo.mutation.RemoveTranslationIDs(ids...)
	return rpuo
}

// RemoveTranslations removes "translations" edges to ResearchProjectTranslation entities.
func (rpuo *ResearchProjectUpdateOne) RemoveTranslations(r ...*ResearchProjectTranslation) *ResearchProjectUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpuo.RemoveTranslationIDs(ids...)
}

// ClearDetails clears all "details" edges to the ResearchProjectDetail entity.
func (rpuo *ResearchProjectUpdateOne) ClearDetails() *ResearchProjectUpdateOne {
	rpuo.mutation.ClearDetails()
	return rpuo
}

// RemoveDetailIDs removes the "details" edge to ResearchProjectDetail entities by IDs.
func (rpuo *ResearchProjectUpdateOne) RemoveDetailIDs(ids ...uuid.UUID) *ResearchProjectUpdateOne {
	rpuo.mutation.RemoveDetailIDs(ids...)
	return rpuo
}

// RemoveDetails removes "details" edges to ResearchProjectDetail entities.
func (rpuo *ResearchProjectUpdateOne) RemoveDetails(r ...*ResearchProjectDetail) *ResearchProjectUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpuo.RemoveDetailIDs(ids...)
}

// Where appends a list predicates to the ResearchProjectUpdate builder.
func (rpuo *ResearchProjectUpdateOne) Where(ps ...predicate.ResearchProject) *ResearchProjectUpdateOne {
	rpuo.mutation.Where(ps...)
	return rpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rpuo *ResearchProjectUpdateOne) Select(field string, fields ...string) *ResearchProjectUpdateOne {
	rpuo.fields = append([]string{field}, fields...)
	return rpuo
}

// Save executes the query and returns the updated ResearchProject entity.
func (rpuo *ResearchProjectUpdateOne) Save(ctx context.Context) (*ResearchProject, error) {
	rpuo.defaults()
	return withHooks(ctx, rpuo.sqlSave, rpuo.mutation, rpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpuo *ResearchProjectUpdateOne) SaveX(ctx context.Context) *ResearchProject {
	node, err := rpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rpuo *ResearchProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := rpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpuo *ResearchProjectUpdateOne) ExecX(ctx context.Context) {
	if err := rpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpuo *ResearchProjectUpdateOne) defaults() {
	if _, ok := rpuo.mutation.UpdatedAt(); !ok {
		v := researchproject.UpdateDefaultUpdatedAt()
		rpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpuo *ResearchProjectUpdateOne) check() error {
	if v, ok := rpuo.mutation.Title(); ok {
		if err := researchproject.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "ResearchProject.title": %w`, err)}
		}
	}
	if v, ok := rpuo.mutation.Location(); ok {
		if err := researchproject.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "ResearchProject.location": %w`, err)}
		}
	}
	if v, ok := rpuo.mutation.ResearchType(); ok {
		if err := researchproject.ResearchTypeValidator(v); err != nil {
			return &ValidationError{Name: "research_type", err: fmt.Errorf(`ent: validator failed for field "ResearchProject.research_type": %w`, err)}
		}
	}
	if v, ok := rpuo.mutation.FundingSource(); ok {
		if err := researchproject.FundingSourceValidator(v); err != nil {
			return &ValidationError{Name: "funding_source", err: fmt.Errorf(`ent: validator failed for field "ResearchProject.funding_source": %w`, err)}
		}
	}
	if rpuo.mutation.UserCleared() && len(rpuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ResearchProject.user"`)
	}
	return nil
}

func (rpuo *ResearchProjectUpdateOne) sqlSave(ctx context.Context) (_node *ResearchProject, err error) {
	if err := rpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(researchproject.Table, researchproject.Columns, sqlgraph.NewFieldSpec(researchproject.FieldID, field.TypeUUID))
	id, ok := rpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ResearchProject.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, researchproject.FieldID)
		for _, f := range fields {
			if !researchproject.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != researchproject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpuo.mutation.Title(); ok {
		_spec.SetField(researchproject.FieldTitle, field.TypeString, value)
	}
	if value, ok := rpuo.mutation.StartDate(); ok {
		_spec.SetField(researchproject.FieldStartDate, field.TypeTime, value)
	}
	if rpuo.mutation.StartDateCleared() {
		_spec.ClearField(researchproject.FieldStartDate, field.TypeTime)
	}
	if value, ok := rpuo.mutation.EndDate(); ok {
		_spec.SetField(researchproject.FieldEndDate, field.TypeTime, value)
	}
	if rpuo.mutation.EndDateCleared() {
		_spec.ClearField(researchproject.FieldEndDate, field.TypeTime)
	}
	if value, ok := rpuo.mutation.IsOngoing(); ok {
		_spec.SetField(researchproject.FieldIsOngoing, field.TypeBool, value)
	}
	if value, ok := rpuo.mutation.Location(); ok {
		_spec.SetField(researchproject.FieldLocation, field.TypeString, value)
	}
	if rpuo.mutation.LocationCleared() {
		_spec.ClearField(researchproject.FieldLocation, field.TypeString)
	}
	if value, ok := rpuo.mutation.ResearchType(); ok {
		_spec.SetField(researchproject.FieldResearchType, field.TypeString, value)
	}
	if rpuo.mutation.ResearchTypeCleared() {
		_spec.ClearField(researchproject.FieldResearchType, field.TypeString)
	}
	if value, ok := rpuo.mutation.FundingSource(); ok {
		_spec.SetField(researchproject.FieldFundingSource, field.TypeString, value)
	}
	if rpuo.mutation.FundingSourceCleared() {
		_spec.ClearField(researchproject.FieldFundingSource, field.TypeString)
	}
	if value, ok := rpuo.mutation.FundingAmount(); ok {
		_spec.SetField(researchproject.FieldFundingAmount, field.TypeFloat64, value)
	}
	if value, ok := rpuo.mutation.AddedFundingAmount(); ok {
		_spec.AddField(researchproject.FieldFundingAmount, field.TypeFloat64, value)
	}
	if rpuo.mutation.FundingAmountCleared() {
		_spec.ClearField(researchproject.FieldFundingAmount, field.TypeFloat64)
	}
	if value, ok := rpuo.mutation.SortOrder(); ok {
		_spec.SetField(researchproject.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := rpuo.mutation.AddedSortOrder(); ok {
		_spec.AddField(researchproject.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := rpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(researchproject.FieldUpdatedAt, field.TypeTime, value)
	}
	if rpuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   researchproject.UserTable,
			Columns: []string{researchproject.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   researchproject.UserTable,
			Columns: []string{researchproject.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpuo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   researchproject.TranslationsTable,
			Columns: []string{researchproject.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojecttranslation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.RemovedTranslationsIDs(); len(nodes) > 0 && !rpuo.mutation.TranslationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   researchproject.TranslationsTable,
			Columns: []string{researchproject.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojecttranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.TranslationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   researchproject.TranslationsTable,
			Columns: []string{researchproject.TranslationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojecttranslation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpuo.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   researchproject.DetailsTable,
			Columns: []string{researchproject.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojectdetail.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.RemovedDetailsIDs(); len(nodes) > 0 && !rpuo.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   researchproject.DetailsTable,
			Columns: []string{researchproject.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojectdetail.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.DetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   researchproject.DetailsTable,
			Columns: []string{researchproject.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(researchprojectdetail.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ResearchProject{config: rpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{researchproject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rpuo.mutation.done = true
	return _node, nil
}
