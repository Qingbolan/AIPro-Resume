// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/education"
	"silan-backend/internal/ent/educationtranslation"
	"silan-backend/internal/ent/language"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// EducationTranslationCreate is the builder for creating a EducationTranslation entity.
type EducationTranslationCreate struct {
	config
	mutation *EducationTranslationMutation
	hooks    []Hook
}

// SetEducationID sets the "education_id" field.
func (etc *EducationTranslationCreate) SetEducationID(u uuid.UUID) *EducationTranslationCreate {
	etc.mutation.SetEducationID(u)
	return etc
}

// SetLanguageCode sets the "language_code" field.
func (etc *EducationTranslationCreate) SetLanguageCode(s string) *EducationTranslationCreate {
	etc.mutation.SetLanguageCode(s)
	return etc
}

// SetInstitution sets the "institution" field.
func (etc *EducationTranslationCreate) SetInstitution(s string) *EducationTranslationCreate {
	etc.mutation.SetInstitution(s)
	return etc
}

// SetNillableInstitution sets the "institution" field if the given value is not nil.
func (etc *EducationTranslationCreate) SetNillableInstitution(s *string) *EducationTranslationCreate {
	if s != nil {
		etc.SetInstitution(*s)
	}
	return etc
}

// SetDegree sets the "degree" field.
func (etc *EducationTranslationCreate) SetDegree(s string) *EducationTranslationCreate {
	etc.mutation.SetDegree(s)
	return etc
}

// SetNillableDegree sets the "degree" field if the given value is not nil.
func (etc *EducationTranslationCreate) SetNillableDegree(s *string) *EducationTranslationCreate {
	if s != nil {
		etc.SetDegree(*s)
	}
	return etc
}

// SetFieldOfStudy sets the "field_of_study" field.
func (etc *EducationTranslationCreate) SetFieldOfStudy(s string) *EducationTranslationCreate {
	etc.mutation.SetFieldOfStudy(s)
	return etc
}

// SetNillableFieldOfStudy sets the "field_of_study" field if the given value is not nil.
func (etc *EducationTranslationCreate) SetNillableFieldOfStudy(s *string) *EducationTranslationCreate {
	if s != nil {
		etc.SetFieldOfStudy(*s)
	}
	return etc
}

// SetLocation sets the "location" field.
func (etc *EducationTranslationCreate) SetLocation(s string) *EducationTranslationCreate {
	etc.mutation.SetLocation(s)
	return etc
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (etc *EducationTranslationCreate) SetNillableLocation(s *string) *EducationTranslationCreate {
	if s != nil {
		etc.SetLocation(*s)
	}
	return etc
}

// SetCreatedAt sets the "created_at" field.
func (etc *EducationTranslationCreate) SetCreatedAt(t time.Time) *EducationTranslationCreate {
	etc.mutation.SetCreatedAt(t)
	return etc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (etc *EducationTranslationCreate) SetNillableCreatedAt(t *time.Time) *EducationTranslationCreate {
	if t != nil {
		etc.SetCreatedAt(*t)
	}
	return etc
}

// SetID sets the "id" field.
func (etc *EducationTranslationCreate) SetID(u uuid.UUID) *EducationTranslationCreate {
	etc.mutation.SetID(u)
	return etc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (etc *EducationTranslationCreate) SetNillableID(u *uuid.UUID) *EducationTranslationCreate {
	if u != nil {
		etc.SetID(*u)
	}
	return etc
}

// SetEducation sets the "education" edge to the Education entity.
func (etc *EducationTranslationCreate) SetEducation(e *Education) *EducationTranslationCreate {
	return etc.SetEducationID(e.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (etc *EducationTranslationCreate) SetLanguageID(id string) *EducationTranslationCreate {
	etc.mutation.SetLanguageID(id)
	return etc
}

// SetLanguage sets the "language" edge to the Language entity.
func (etc *EducationTranslationCreate) SetLanguage(l *Language) *EducationTranslationCreate {
	return etc.SetLanguageID(l.ID)
}

// Mutation returns the EducationTranslationMutation object of the builder.
func (etc *EducationTranslationCreate) Mutation() *EducationTranslationMutation {
	return etc.mutation
}

// Save creates the EducationTranslation in the database.
func (etc *EducationTranslationCreate) Save(ctx context.Context) (*EducationTranslation, error) {
	etc.defaults()
	return withHooks(ctx, etc.sqlSave, etc.mutation, etc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (etc *EducationTranslationCreate) SaveX(ctx context.Context) *EducationTranslation {
	v, err := etc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (etc *EducationTranslationCreate) Exec(ctx context.Context) error {
	_, err := etc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etc *EducationTranslationCreate) ExecX(ctx context.Context) {
	if err := etc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (etc *EducationTranslationCreate) defaults() {
	if _, ok := etc.mutation.CreatedAt(); !ok {
		v := educationtranslation.DefaultCreatedAt()
		etc.mutation.SetCreatedAt(v)
	}
	if _, ok := etc.mutation.ID(); !ok {
		v := educationtranslation.DefaultID()
		etc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (etc *EducationTranslationCreate) check() error {
	if _, ok := etc.mutation.EducationID(); !ok {
		return &ValidationError{Name: "education_id", err: errors.New(`ent: missing required field "EducationTranslation.education_id"`)}
	}
	if _, ok := etc.mutation.LanguageCode(); !ok {
		return &ValidationError{Name: "language_code", err: errors.New(`ent: missing required field "EducationTranslation.language_code"`)}
	}
	if v, ok := etc.mutation.LanguageCode(); ok {
		if err := educationtranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "EducationTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := etc.mutation.Institution(); ok {
		if err := educationtranslation.InstitutionValidator(v); err != nil {
			return &ValidationError{Name: "institution", err: fmt.Errorf(`ent: validator failed for field "EducationTranslation.institution": %w`, err)}
		}
	}
	if v, ok := etc.mutation.Degree(); ok {
		if err := educationtranslation.DegreeValidator(v); err != nil {
			return &ValidationError{Name: "degree", err: fmt.Errorf(`ent: validator failed for field "EducationTranslation.degree": %w`, err)}
		}
	}
	if v, ok := etc.mutation.FieldOfStudy(); ok {
		if err := educationtranslation.FieldOfStudyValidator(v); err != nil {
			return &ValidationError{Name: "field_of_study", err: fmt.Errorf(`ent: validator failed for field "EducationTranslation.field_of_study": %w`, err)}
		}
	}
	if v, ok := etc.mutation.Location(); ok {
		if err := educationtranslation.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "EducationTranslation.location": %w`, err)}
		}
	}
	if _, ok := etc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EducationTranslation.created_at"`)}
	}
	if len(etc.mutation.EducationIDs()) == 0 {
		return &ValidationError{Name: "education", err: errors.New(`ent: missing required edge "EducationTranslation.education"`)}
	}
	if len(etc.mutation.LanguageIDs()) == 0 {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required edge "EducationTranslation.language"`)}
	}
	return nil
}

func (etc *EducationTranslationCreate) sqlSave(ctx context.Context) (*EducationTranslation, error) {
	if err := etc.check(); err != nil {
		return nil, err
	}
	_node, _spec := etc.createSpec()
	if err := sqlgraph.CreateNode(ctx, etc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	etc.mutation.id = &_node.ID
	etc.mutation.done = true
	return _node, nil
}

func (etc *EducationTranslationCreate) createSpec() (*EducationTranslation, *sqlgraph.CreateSpec) {
	var (
		_node = &EducationTranslation{config: etc.config}
		_spec = sqlgraph.NewCreateSpec(educationtranslation.Table, sqlgraph.NewFieldSpec(educationtranslation.FieldID, field.TypeUUID))
	)
	if id, ok := etc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := etc.mutation.Institution(); ok {
		_spec.SetField(educationtranslation.FieldInstitution, field.TypeString, value)
		_node.Institution = value
	}
	if value, ok := etc.mutation.Degree(); ok {
		_spec.SetField(educationtranslation.FieldDegree, field.TypeString, value)
		_node.Degree = value
	}
	if value, ok := etc.mutation.FieldOfStudy(); ok {
		_spec.SetField(educationtranslation.FieldFieldOfStudy, field.TypeString, value)
		_node.FieldOfStudy = value
	}
	if value, ok := etc.mutation.Location(); ok {
		_spec.SetField(educationtranslation.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := etc.mutation.CreatedAt(); ok {
		_spec.SetField(educationtranslation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := etc.mutation.EducationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   educationtranslation.EducationTable,
			Columns: []string{educationtranslation.EducationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EducationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := etc.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   educationtranslation.LanguageTable,
			Columns: []string{educationtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LanguageCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EducationTranslationCreateBulk is the builder for creating many EducationTranslation entities in bulk.
type EducationTranslationCreateBulk struct {
	config
	err      error
	builders []*EducationTranslationCreate
}

// Save creates the EducationTranslation entities in the database.
func (etcb *EducationTranslationCreateBulk) Save(ctx context.Context) ([]*EducationTranslation, error) {
	if etcb.err != nil {
		return nil, etcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(etcb.builders))
	nodes := make([]*EducationTranslation, len(etcb.builders))
	mutators := make([]Mutator, len(etcb.builders))
	for i := range etcb.builders {
		func(i int, root context.Context) {
			builder := etcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EducationTranslationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, etcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, etcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, etcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (etcb *EducationTranslationCreateBulk) SaveX(ctx context.Context) []*EducationTranslation {
	v, err := etcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (etcb *EducationTranslationCreateBulk) Exec(ctx context.Context) error {
	_, err := etcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etcb *EducationTranslationCreateBulk) ExecX(ctx context.Context) {
	if err := etcb.Exec(ctx); err != nil {
		panic(err)
	}
}
