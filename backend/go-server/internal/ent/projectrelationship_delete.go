// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/projectrelationship"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectRelationshipDelete is the builder for deleting a ProjectRelationship entity.
type ProjectRelationshipDelete struct {
	config
	hooks    []Hook
	mutation *ProjectRelationshipMutation
}

// Where appends a list predicates to the ProjectRelationshipDelete builder.
func (prd *ProjectRelationshipDelete) Where(ps ...predicate.ProjectRelationship) *ProjectRelationshipDelete {
	prd.mutation.Where(ps...)
	return prd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (prd *ProjectRelationshipDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, prd.sqlExec, prd.mutation, prd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (prd *ProjectRelationshipDelete) ExecX(ctx context.Context) int {
	n, err := prd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (prd *ProjectRelationshipDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(projectrelationship.Table, sqlgraph.NewFieldSpec(projectrelationship.FieldID, field.TypeUUID))
	if ps := prd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, prd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	prd.mutation.done = true
	return affected, err
}

// ProjectRelationshipDeleteOne is the builder for deleting a single ProjectRelationship entity.
type ProjectRelationshipDeleteOne struct {
	prd *ProjectRelationshipDelete
}

// Where appends a list predicates to the ProjectRelationshipDelete builder.
func (prdo *ProjectRelationshipDeleteOne) Where(ps ...predicate.ProjectRelationship) *ProjectRelationshipDeleteOne {
	prdo.prd.mutation.Where(ps...)
	return prdo
}

// Exec executes the deletion query.
func (prdo *ProjectRelationshipDeleteOne) Exec(ctx context.Context) error {
	n, err := prdo.prd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{projectrelationship.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (prdo *ProjectRelationshipDeleteOne) ExecX(ctx context.Context) {
	if err := prdo.Exec(ctx); err != nil {
		panic(err)
	}
}
