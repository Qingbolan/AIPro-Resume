// Code generated by ent, DO NOT EDIT.

package blogcategorytranslation

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldLTE(FieldID, id))
}

// BlogCategoryID applies equality check predicate on the "blog_category_id" field. It's identical to BlogCategoryIDEQ.
func BlogCategoryID(v uuid.UUID) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldEQ(FieldBlogCategoryID, v))
}

// LanguageCode applies equality check predicate on the "language_code" field. It's identical to LanguageCodeEQ.
func LanguageCode(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldEQ(FieldLanguageCode, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldEQ(FieldDescription, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldEQ(FieldCreatedAt, v))
}

// BlogCategoryIDEQ applies the EQ predicate on the "blog_category_id" field.
func BlogCategoryIDEQ(v uuid.UUID) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldEQ(FieldBlogCategoryID, v))
}

// BlogCategoryIDNEQ applies the NEQ predicate on the "blog_category_id" field.
func BlogCategoryIDNEQ(v uuid.UUID) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldNEQ(FieldBlogCategoryID, v))
}

// BlogCategoryIDIn applies the In predicate on the "blog_category_id" field.
func BlogCategoryIDIn(vs ...uuid.UUID) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldIn(FieldBlogCategoryID, vs...))
}

// BlogCategoryIDNotIn applies the NotIn predicate on the "blog_category_id" field.
func BlogCategoryIDNotIn(vs ...uuid.UUID) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldNotIn(FieldBlogCategoryID, vs...))
}

// LanguageCodeEQ applies the EQ predicate on the "language_code" field.
func LanguageCodeEQ(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldEQ(FieldLanguageCode, v))
}

// LanguageCodeNEQ applies the NEQ predicate on the "language_code" field.
func LanguageCodeNEQ(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldNEQ(FieldLanguageCode, v))
}

// LanguageCodeIn applies the In predicate on the "language_code" field.
func LanguageCodeIn(vs ...string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldIn(FieldLanguageCode, vs...))
}

// LanguageCodeNotIn applies the NotIn predicate on the "language_code" field.
func LanguageCodeNotIn(vs ...string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldNotIn(FieldLanguageCode, vs...))
}

// LanguageCodeGT applies the GT predicate on the "language_code" field.
func LanguageCodeGT(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldGT(FieldLanguageCode, v))
}

// LanguageCodeGTE applies the GTE predicate on the "language_code" field.
func LanguageCodeGTE(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldGTE(FieldLanguageCode, v))
}

// LanguageCodeLT applies the LT predicate on the "language_code" field.
func LanguageCodeLT(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldLT(FieldLanguageCode, v))
}

// LanguageCodeLTE applies the LTE predicate on the "language_code" field.
func LanguageCodeLTE(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldLTE(FieldLanguageCode, v))
}

// LanguageCodeContains applies the Contains predicate on the "language_code" field.
func LanguageCodeContains(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldContains(FieldLanguageCode, v))
}

// LanguageCodeHasPrefix applies the HasPrefix predicate on the "language_code" field.
func LanguageCodeHasPrefix(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldHasPrefix(FieldLanguageCode, v))
}

// LanguageCodeHasSuffix applies the HasSuffix predicate on the "language_code" field.
func LanguageCodeHasSuffix(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldHasSuffix(FieldLanguageCode, v))
}

// LanguageCodeEqualFold applies the EqualFold predicate on the "language_code" field.
func LanguageCodeEqualFold(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldEqualFold(FieldLanguageCode, v))
}

// LanguageCodeContainsFold applies the ContainsFold predicate on the "language_code" field.
func LanguageCodeContainsFold(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldContainsFold(FieldLanguageCode, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldContainsFold(FieldDescription, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.FieldLTE(FieldCreatedAt, v))
}

// HasBlogCategory applies the HasEdge predicate on the "blog_category" edge.
func HasBlogCategory() predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BlogCategoryTable, BlogCategoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlogCategoryWith applies the HasEdge predicate on the "blog_category" edge with a given conditions (other predicates).
func HasBlogCategoryWith(preds ...predicate.BlogCategory) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(func(s *sql.Selector) {
		step := newBlogCategoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLanguage applies the HasEdge predicate on the "language" edge.
func HasLanguage() predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LanguageTable, LanguageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLanguageWith applies the HasEdge predicate on the "language" edge with a given conditions (other predicates).
func HasLanguageWith(preds ...predicate.Language) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(func(s *sql.Selector) {
		step := newLanguageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BlogCategoryTranslation) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BlogCategoryTranslation) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BlogCategoryTranslation) predicate.BlogCategoryTranslation {
	return predicate.BlogCategoryTranslation(sql.NotPredicates(p))
}
