// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/researchprojecttranslation"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ResearchProjectTranslationDelete is the builder for deleting a ResearchProjectTranslation entity.
type ResearchProjectTranslationDelete struct {
	config
	hooks    []Hook
	mutation *ResearchProjectTranslationMutation
}

// Where appends a list predicates to the ResearchProjectTranslationDelete builder.
func (rptd *ResearchProjectTranslationDelete) Where(ps ...predicate.ResearchProjectTranslation) *ResearchProjectTranslationDelete {
	rptd.mutation.Where(ps...)
	return rptd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rptd *ResearchProjectTranslationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rptd.sqlExec, rptd.mutation, rptd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rptd *ResearchProjectTranslationDelete) ExecX(ctx context.Context) int {
	n, err := rptd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rptd *ResearchProjectTranslationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(researchprojecttranslation.Table, sqlgraph.NewFieldSpec(researchprojecttranslation.FieldID, field.TypeUUID))
	if ps := rptd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rptd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rptd.mutation.done = true
	return affected, err
}

// ResearchProjectTranslationDeleteOne is the builder for deleting a single ResearchProjectTranslation entity.
type ResearchProjectTranslationDeleteOne struct {
	rptd *ResearchProjectTranslationDelete
}

// Where appends a list predicates to the ResearchProjectTranslationDelete builder.
func (rptdo *ResearchProjectTranslationDeleteOne) Where(ps ...predicate.ResearchProjectTranslation) *ResearchProjectTranslationDeleteOne {
	rptdo.rptd.mutation.Where(ps...)
	return rptdo
}

// Exec executes the deletion query.
func (rptdo *ResearchProjectTranslationDeleteOne) Exec(ctx context.Context) error {
	n, err := rptdo.rptd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{researchprojecttranslation.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rptdo *ResearchProjectTranslationDeleteOne) ExecX(ctx context.Context) {
	if err := rptdo.Exec(ctx); err != nil {
		panic(err)
	}
}
