// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/researchproject"
	"silan-backend/internal/ent/researchprojecttranslation"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ResearchProjectTranslation is the model entity for the ResearchProjectTranslation schema.
type ResearchProjectTranslation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ResearchProjectID holds the value of the "research_project_id" field.
	ResearchProjectID uuid.UUID `json:"research_project_id,omitempty"`
	// LanguageCode holds the value of the "language_code" field.
	LanguageCode string `json:"language_code,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// ResearchType holds the value of the "research_type" field.
	ResearchType string `json:"research_type,omitempty"`
	// FundingSource holds the value of the "funding_source" field.
	FundingSource string `json:"funding_source,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResearchProjectTranslationQuery when eager-loading is set.
	Edges        ResearchProjectTranslationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ResearchProjectTranslationEdges holds the relations/edges for other nodes in the graph.
type ResearchProjectTranslationEdges struct {
	// ResearchProject holds the value of the research_project edge.
	ResearchProject *ResearchProject `json:"research_project,omitempty"`
	// Language holds the value of the language edge.
	Language *Language `json:"language,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ResearchProjectOrErr returns the ResearchProject value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResearchProjectTranslationEdges) ResearchProjectOrErr() (*ResearchProject, error) {
	if e.ResearchProject != nil {
		return e.ResearchProject, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: researchproject.Label}
	}
	return nil, &NotLoadedError{edge: "research_project"}
}

// LanguageOrErr returns the Language value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResearchProjectTranslationEdges) LanguageOrErr() (*Language, error) {
	if e.Language != nil {
		return e.Language, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: language.Label}
	}
	return nil, &NotLoadedError{edge: "language"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResearchProjectTranslation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case researchprojecttranslation.FieldLanguageCode, researchprojecttranslation.FieldTitle, researchprojecttranslation.FieldLocation, researchprojecttranslation.FieldResearchType, researchprojecttranslation.FieldFundingSource:
			values[i] = new(sql.NullString)
		case researchprojecttranslation.FieldCreatedAt, researchprojecttranslation.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case researchprojecttranslation.FieldID, researchprojecttranslation.FieldResearchProjectID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResearchProjectTranslation fields.
func (rpt *ResearchProjectTranslation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case researchprojecttranslation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rpt.ID = *value
			}
		case researchprojecttranslation.FieldResearchProjectID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field research_project_id", values[i])
			} else if value != nil {
				rpt.ResearchProjectID = *value
			}
		case researchprojecttranslation.FieldLanguageCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language_code", values[i])
			} else if value.Valid {
				rpt.LanguageCode = value.String
			}
		case researchprojecttranslation.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				rpt.Title = value.String
			}
		case researchprojecttranslation.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				rpt.Location = value.String
			}
		case researchprojecttranslation.FieldResearchType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field research_type", values[i])
			} else if value.Valid {
				rpt.ResearchType = value.String
			}
		case researchprojecttranslation.FieldFundingSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field funding_source", values[i])
			} else if value.Valid {
				rpt.FundingSource = value.String
			}
		case researchprojecttranslation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rpt.CreatedAt = value.Time
			}
		case researchprojecttranslation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rpt.UpdatedAt = value.Time
			}
		default:
			rpt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ResearchProjectTranslation.
// This includes values selected through modifiers, order, etc.
func (rpt *ResearchProjectTranslation) Value(name string) (ent.Value, error) {
	return rpt.selectValues.Get(name)
}

// QueryResearchProject queries the "research_project" edge of the ResearchProjectTranslation entity.
func (rpt *ResearchProjectTranslation) QueryResearchProject() *ResearchProjectQuery {
	return NewResearchProjectTranslationClient(rpt.config).QueryResearchProject(rpt)
}

// QueryLanguage queries the "language" edge of the ResearchProjectTranslation entity.
func (rpt *ResearchProjectTranslation) QueryLanguage() *LanguageQuery {
	return NewResearchProjectTranslationClient(rpt.config).QueryLanguage(rpt)
}

// Update returns a builder for updating this ResearchProjectTranslation.
// Note that you need to call ResearchProjectTranslation.Unwrap() before calling this method if this ResearchProjectTranslation
// was returned from a transaction, and the transaction was committed or rolled back.
func (rpt *ResearchProjectTranslation) Update() *ResearchProjectTranslationUpdateOne {
	return NewResearchProjectTranslationClient(rpt.config).UpdateOne(rpt)
}

// Unwrap unwraps the ResearchProjectTranslation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rpt *ResearchProjectTranslation) Unwrap() *ResearchProjectTranslation {
	_tx, ok := rpt.config.driver.(*txDriver)
	if !ok {
		panic("ent: ResearchProjectTranslation is not a transactional entity")
	}
	rpt.config.driver = _tx.drv
	return rpt
}

// String implements the fmt.Stringer.
func (rpt *ResearchProjectTranslation) String() string {
	var builder strings.Builder
	builder.WriteString("ResearchProjectTranslation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rpt.ID))
	builder.WriteString("research_project_id=")
	builder.WriteString(fmt.Sprintf("%v", rpt.ResearchProjectID))
	builder.WriteString(", ")
	builder.WriteString("language_code=")
	builder.WriteString(rpt.LanguageCode)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(rpt.Title)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(rpt.Location)
	builder.WriteString(", ")
	builder.WriteString("research_type=")
	builder.WriteString(rpt.ResearchType)
	builder.WriteString(", ")
	builder.WriteString("funding_source=")
	builder.WriteString(rpt.FundingSource)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rpt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rpt.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ResearchProjectTranslations is a parsable slice of ResearchProjectTranslation.
type ResearchProjectTranslations []*ResearchProjectTranslation
