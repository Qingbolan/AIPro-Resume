// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"silan-backend/internal/ent/recentupdate"
	"silan-backend/internal/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// RecentUpdate is the model entity for the RecentUpdate schema.
type RecentUpdate struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Type holds the value of the "type" field.
	Type recentupdate.Type `json:"type,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags []string `json:"tags,omitempty"`
	// Status holds the value of the "status" field.
	Status recentupdate.Status `json:"status,omitempty"`
	// Priority holds the value of the "priority" field.
	Priority recentupdate.Priority `json:"priority,omitempty"`
	// ExternalID holds the value of the "external_id" field.
	ExternalID string `json:"external_id,omitempty"`
	// ImageURL holds the value of the "image_url" field.
	ImageURL string `json:"image_url,omitempty"`
	// VideoURL holds the value of the "video_url" field.
	VideoURL string `json:"video_url,omitempty"`
	// DocumentURL holds the value of the "document_url" field.
	DocumentURL string `json:"document_url,omitempty"`
	// Gallery holds the value of the "gallery" field.
	Gallery []string `json:"gallery,omitempty"`
	// Attachments holds the value of the "attachments" field.
	Attachments []map[string]interface{} `json:"attachments,omitempty"`
	// MediaMetadata holds the value of the "media_metadata" field.
	MediaMetadata map[string]interface{} `json:"media_metadata,omitempty"`
	// DemoURL holds the value of the "demo_url" field.
	DemoURL string `json:"demo_url,omitempty"`
	// GithubURL holds the value of the "github_url" field.
	GithubURL string `json:"github_url,omitempty"`
	// ExternalURL holds the value of the "external_url" field.
	ExternalURL string `json:"external_url,omitempty"`
	// SocialLinks holds the value of the "social_links" field.
	SocialLinks []map[string]interface{} `json:"social_links,omitempty"`
	// SortOrder holds the value of the "sort_order" field.
	SortOrder int `json:"sort_order,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RecentUpdateQuery when eager-loading is set.
	Edges        RecentUpdateEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RecentUpdateEdges holds the relations/edges for other nodes in the graph.
type RecentUpdateEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Translations holds the value of the translations edge.
	Translations []*RecentUpdateTranslation `json:"translations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecentUpdateEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// TranslationsOrErr returns the Translations value or an error if the edge
// was not loaded in eager-loading.
func (e RecentUpdateEdges) TranslationsOrErr() ([]*RecentUpdateTranslation, error) {
	if e.loadedTypes[1] {
		return e.Translations, nil
	}
	return nil, &NotLoadedError{edge: "translations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RecentUpdate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case recentupdate.FieldTags, recentupdate.FieldGallery, recentupdate.FieldAttachments, recentupdate.FieldMediaMetadata, recentupdate.FieldSocialLinks:
			values[i] = new([]byte)
		case recentupdate.FieldSortOrder:
			values[i] = new(sql.NullInt64)
		case recentupdate.FieldType, recentupdate.FieldTitle, recentupdate.FieldDescription, recentupdate.FieldStatus, recentupdate.FieldPriority, recentupdate.FieldExternalID, recentupdate.FieldImageURL, recentupdate.FieldVideoURL, recentupdate.FieldDocumentURL, recentupdate.FieldDemoURL, recentupdate.FieldGithubURL, recentupdate.FieldExternalURL:
			values[i] = new(sql.NullString)
		case recentupdate.FieldDate, recentupdate.FieldCreatedAt, recentupdate.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case recentupdate.FieldID, recentupdate.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RecentUpdate fields.
func (ru *RecentUpdate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case recentupdate.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ru.ID = *value
			}
		case recentupdate.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				ru.UserID = *value
			}
		case recentupdate.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ru.Type = recentupdate.Type(value.String)
			}
		case recentupdate.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ru.Title = value.String
			}
		case recentupdate.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ru.Description = value.String
			}
		case recentupdate.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				ru.Date = value.Time
			}
		case recentupdate.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ru.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case recentupdate.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ru.Status = recentupdate.Status(value.String)
			}
		case recentupdate.FieldPriority:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				ru.Priority = recentupdate.Priority(value.String)
			}
		case recentupdate.FieldExternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_id", values[i])
			} else if value.Valid {
				ru.ExternalID = value.String
			}
		case recentupdate.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				ru.ImageURL = value.String
			}
		case recentupdate.FieldVideoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field video_url", values[i])
			} else if value.Valid {
				ru.VideoURL = value.String
			}
		case recentupdate.FieldDocumentURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field document_url", values[i])
			} else if value.Valid {
				ru.DocumentURL = value.String
			}
		case recentupdate.FieldGallery:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field gallery", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ru.Gallery); err != nil {
					return fmt.Errorf("unmarshal field gallery: %w", err)
				}
			}
		case recentupdate.FieldAttachments:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field attachments", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ru.Attachments); err != nil {
					return fmt.Errorf("unmarshal field attachments: %w", err)
				}
			}
		case recentupdate.FieldMediaMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field media_metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ru.MediaMetadata); err != nil {
					return fmt.Errorf("unmarshal field media_metadata: %w", err)
				}
			}
		case recentupdate.FieldDemoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field demo_url", values[i])
			} else if value.Valid {
				ru.DemoURL = value.String
			}
		case recentupdate.FieldGithubURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field github_url", values[i])
			} else if value.Valid {
				ru.GithubURL = value.String
			}
		case recentupdate.FieldExternalURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_url", values[i])
			} else if value.Valid {
				ru.ExternalURL = value.String
			}
		case recentupdate.FieldSocialLinks:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field social_links", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ru.SocialLinks); err != nil {
					return fmt.Errorf("unmarshal field social_links: %w", err)
				}
			}
		case recentupdate.FieldSortOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_order", values[i])
			} else if value.Valid {
				ru.SortOrder = int(value.Int64)
			}
		case recentupdate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ru.CreatedAt = value.Time
			}
		case recentupdate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ru.UpdatedAt = value.Time
			}
		default:
			ru.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RecentUpdate.
// This includes values selected through modifiers, order, etc.
func (ru *RecentUpdate) Value(name string) (ent.Value, error) {
	return ru.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the RecentUpdate entity.
func (ru *RecentUpdate) QueryUser() *UserQuery {
	return NewRecentUpdateClient(ru.config).QueryUser(ru)
}

// QueryTranslations queries the "translations" edge of the RecentUpdate entity.
func (ru *RecentUpdate) QueryTranslations() *RecentUpdateTranslationQuery {
	return NewRecentUpdateClient(ru.config).QueryTranslations(ru)
}

// Update returns a builder for updating this RecentUpdate.
// Note that you need to call RecentUpdate.Unwrap() before calling this method if this RecentUpdate
// was returned from a transaction, and the transaction was committed or rolled back.
func (ru *RecentUpdate) Update() *RecentUpdateUpdateOne {
	return NewRecentUpdateClient(ru.config).UpdateOne(ru)
}

// Unwrap unwraps the RecentUpdate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ru *RecentUpdate) Unwrap() *RecentUpdate {
	_tx, ok := ru.config.driver.(*txDriver)
	if !ok {
		panic("ent: RecentUpdate is not a transactional entity")
	}
	ru.config.driver = _tx.drv
	return ru
}

// String implements the fmt.Stringer.
func (ru *RecentUpdate) String() string {
	var builder strings.Builder
	builder.WriteString("RecentUpdate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ru.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ru.UserID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", ru.Type))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(ru.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ru.Description)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(ru.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", ru.Tags))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ru.Status))
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(fmt.Sprintf("%v", ru.Priority))
	builder.WriteString(", ")
	builder.WriteString("external_id=")
	builder.WriteString(ru.ExternalID)
	builder.WriteString(", ")
	builder.WriteString("image_url=")
	builder.WriteString(ru.ImageURL)
	builder.WriteString(", ")
	builder.WriteString("video_url=")
	builder.WriteString(ru.VideoURL)
	builder.WriteString(", ")
	builder.WriteString("document_url=")
	builder.WriteString(ru.DocumentURL)
	builder.WriteString(", ")
	builder.WriteString("gallery=")
	builder.WriteString(fmt.Sprintf("%v", ru.Gallery))
	builder.WriteString(", ")
	builder.WriteString("attachments=")
	builder.WriteString(fmt.Sprintf("%v", ru.Attachments))
	builder.WriteString(", ")
	builder.WriteString("media_metadata=")
	builder.WriteString(fmt.Sprintf("%v", ru.MediaMetadata))
	builder.WriteString(", ")
	builder.WriteString("demo_url=")
	builder.WriteString(ru.DemoURL)
	builder.WriteString(", ")
	builder.WriteString("github_url=")
	builder.WriteString(ru.GithubURL)
	builder.WriteString(", ")
	builder.WriteString("external_url=")
	builder.WriteString(ru.ExternalURL)
	builder.WriteString(", ")
	builder.WriteString("social_links=")
	builder.WriteString(fmt.Sprintf("%v", ru.SocialLinks))
	builder.WriteString(", ")
	builder.WriteString("sort_order=")
	builder.WriteString(fmt.Sprintf("%v", ru.SortOrder))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ru.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ru.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// RecentUpdates is a parsable slice of RecentUpdate.
type RecentUpdates []*RecentUpdate
