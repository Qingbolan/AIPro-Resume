// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"silan-backend/internal/ent/idea"
	"silan-backend/internal/ent/ideatranslation"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/predicate"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// IdeaTranslationQuery is the builder for querying IdeaTranslation entities.
type IdeaTranslationQuery struct {
	config
	ctx          *QueryContext
	order        []ideatranslation.OrderOption
	inters       []Interceptor
	predicates   []predicate.IdeaTranslation
	withIdea     *IdeaQuery
	withLanguage *LanguageQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the IdeaTranslationQuery builder.
func (itq *IdeaTranslationQuery) Where(ps ...predicate.IdeaTranslation) *IdeaTranslationQuery {
	itq.predicates = append(itq.predicates, ps...)
	return itq
}

// Limit the number of records to be returned by this query.
func (itq *IdeaTranslationQuery) Limit(limit int) *IdeaTranslationQuery {
	itq.ctx.Limit = &limit
	return itq
}

// Offset to start from.
func (itq *IdeaTranslationQuery) Offset(offset int) *IdeaTranslationQuery {
	itq.ctx.Offset = &offset
	return itq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (itq *IdeaTranslationQuery) Unique(unique bool) *IdeaTranslationQuery {
	itq.ctx.Unique = &unique
	return itq
}

// Order specifies how the records should be ordered.
func (itq *IdeaTranslationQuery) Order(o ...ideatranslation.OrderOption) *IdeaTranslationQuery {
	itq.order = append(itq.order, o...)
	return itq
}

// QueryIdea chains the current query on the "idea" edge.
func (itq *IdeaTranslationQuery) QueryIdea() *IdeaQuery {
	query := (&IdeaClient{config: itq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := itq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := itq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ideatranslation.Table, ideatranslation.FieldID, selector),
			sqlgraph.To(idea.Table, idea.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ideatranslation.IdeaTable, ideatranslation.IdeaColumn),
		)
		fromU = sqlgraph.SetNeighbors(itq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLanguage chains the current query on the "language" edge.
func (itq *IdeaTranslationQuery) QueryLanguage() *LanguageQuery {
	query := (&LanguageClient{config: itq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := itq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := itq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ideatranslation.Table, ideatranslation.FieldID, selector),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ideatranslation.LanguageTable, ideatranslation.LanguageColumn),
		)
		fromU = sqlgraph.SetNeighbors(itq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first IdeaTranslation entity from the query.
// Returns a *NotFoundError when no IdeaTranslation was found.
func (itq *IdeaTranslationQuery) First(ctx context.Context) (*IdeaTranslation, error) {
	nodes, err := itq.Limit(1).All(setContextOp(ctx, itq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{ideatranslation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (itq *IdeaTranslationQuery) FirstX(ctx context.Context) *IdeaTranslation {
	node, err := itq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first IdeaTranslation ID from the query.
// Returns a *NotFoundError when no IdeaTranslation ID was found.
func (itq *IdeaTranslationQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = itq.Limit(1).IDs(setContextOp(ctx, itq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{ideatranslation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (itq *IdeaTranslationQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := itq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single IdeaTranslation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one IdeaTranslation entity is found.
// Returns a *NotFoundError when no IdeaTranslation entities are found.
func (itq *IdeaTranslationQuery) Only(ctx context.Context) (*IdeaTranslation, error) {
	nodes, err := itq.Limit(2).All(setContextOp(ctx, itq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{ideatranslation.Label}
	default:
		return nil, &NotSingularError{ideatranslation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (itq *IdeaTranslationQuery) OnlyX(ctx context.Context) *IdeaTranslation {
	node, err := itq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only IdeaTranslation ID in the query.
// Returns a *NotSingularError when more than one IdeaTranslation ID is found.
// Returns a *NotFoundError when no entities are found.
func (itq *IdeaTranslationQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = itq.Limit(2).IDs(setContextOp(ctx, itq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{ideatranslation.Label}
	default:
		err = &NotSingularError{ideatranslation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (itq *IdeaTranslationQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := itq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of IdeaTranslations.
func (itq *IdeaTranslationQuery) All(ctx context.Context) ([]*IdeaTranslation, error) {
	ctx = setContextOp(ctx, itq.ctx, ent.OpQueryAll)
	if err := itq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*IdeaTranslation, *IdeaTranslationQuery]()
	return withInterceptors[[]*IdeaTranslation](ctx, itq, qr, itq.inters)
}

// AllX is like All, but panics if an error occurs.
func (itq *IdeaTranslationQuery) AllX(ctx context.Context) []*IdeaTranslation {
	nodes, err := itq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of IdeaTranslation IDs.
func (itq *IdeaTranslationQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if itq.ctx.Unique == nil && itq.path != nil {
		itq.Unique(true)
	}
	ctx = setContextOp(ctx, itq.ctx, ent.OpQueryIDs)
	if err = itq.Select(ideatranslation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (itq *IdeaTranslationQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := itq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (itq *IdeaTranslationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, itq.ctx, ent.OpQueryCount)
	if err := itq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, itq, querierCount[*IdeaTranslationQuery](), itq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (itq *IdeaTranslationQuery) CountX(ctx context.Context) int {
	count, err := itq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (itq *IdeaTranslationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, itq.ctx, ent.OpQueryExist)
	switch _, err := itq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (itq *IdeaTranslationQuery) ExistX(ctx context.Context) bool {
	exist, err := itq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the IdeaTranslationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (itq *IdeaTranslationQuery) Clone() *IdeaTranslationQuery {
	if itq == nil {
		return nil
	}
	return &IdeaTranslationQuery{
		config:       itq.config,
		ctx:          itq.ctx.Clone(),
		order:        append([]ideatranslation.OrderOption{}, itq.order...),
		inters:       append([]Interceptor{}, itq.inters...),
		predicates:   append([]predicate.IdeaTranslation{}, itq.predicates...),
		withIdea:     itq.withIdea.Clone(),
		withLanguage: itq.withLanguage.Clone(),
		// clone intermediate query.
		sql:  itq.sql.Clone(),
		path: itq.path,
	}
}

// WithIdea tells the query-builder to eager-load the nodes that are connected to
// the "idea" edge. The optional arguments are used to configure the query builder of the edge.
func (itq *IdeaTranslationQuery) WithIdea(opts ...func(*IdeaQuery)) *IdeaTranslationQuery {
	query := (&IdeaClient{config: itq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	itq.withIdea = query
	return itq
}

// WithLanguage tells the query-builder to eager-load the nodes that are connected to
// the "language" edge. The optional arguments are used to configure the query builder of the edge.
func (itq *IdeaTranslationQuery) WithLanguage(opts ...func(*LanguageQuery)) *IdeaTranslationQuery {
	query := (&LanguageClient{config: itq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	itq.withLanguage = query
	return itq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		IdeaID uuid.UUID `json:"idea_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.IdeaTranslation.Query().
//		GroupBy(ideatranslation.FieldIdeaID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (itq *IdeaTranslationQuery) GroupBy(field string, fields ...string) *IdeaTranslationGroupBy {
	itq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &IdeaTranslationGroupBy{build: itq}
	grbuild.flds = &itq.ctx.Fields
	grbuild.label = ideatranslation.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		IdeaID uuid.UUID `json:"idea_id,omitempty"`
//	}
//
//	client.IdeaTranslation.Query().
//		Select(ideatranslation.FieldIdeaID).
//		Scan(ctx, &v)
func (itq *IdeaTranslationQuery) Select(fields ...string) *IdeaTranslationSelect {
	itq.ctx.Fields = append(itq.ctx.Fields, fields...)
	sbuild := &IdeaTranslationSelect{IdeaTranslationQuery: itq}
	sbuild.label = ideatranslation.Label
	sbuild.flds, sbuild.scan = &itq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a IdeaTranslationSelect configured with the given aggregations.
func (itq *IdeaTranslationQuery) Aggregate(fns ...AggregateFunc) *IdeaTranslationSelect {
	return itq.Select().Aggregate(fns...)
}

func (itq *IdeaTranslationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range itq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, itq); err != nil {
				return err
			}
		}
	}
	for _, f := range itq.ctx.Fields {
		if !ideatranslation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if itq.path != nil {
		prev, err := itq.path(ctx)
		if err != nil {
			return err
		}
		itq.sql = prev
	}
	return nil
}

func (itq *IdeaTranslationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*IdeaTranslation, error) {
	var (
		nodes       = []*IdeaTranslation{}
		_spec       = itq.querySpec()
		loadedTypes = [2]bool{
			itq.withIdea != nil,
			itq.withLanguage != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*IdeaTranslation).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &IdeaTranslation{config: itq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, itq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := itq.withIdea; query != nil {
		if err := itq.loadIdea(ctx, query, nodes, nil,
			func(n *IdeaTranslation, e *Idea) { n.Edges.Idea = e }); err != nil {
			return nil, err
		}
	}
	if query := itq.withLanguage; query != nil {
		if err := itq.loadLanguage(ctx, query, nodes, nil,
			func(n *IdeaTranslation, e *Language) { n.Edges.Language = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (itq *IdeaTranslationQuery) loadIdea(ctx context.Context, query *IdeaQuery, nodes []*IdeaTranslation, init func(*IdeaTranslation), assign func(*IdeaTranslation, *Idea)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*IdeaTranslation)
	for i := range nodes {
		fk := nodes[i].IdeaID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(idea.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "idea_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (itq *IdeaTranslationQuery) loadLanguage(ctx context.Context, query *LanguageQuery, nodes []*IdeaTranslation, init func(*IdeaTranslation), assign func(*IdeaTranslation, *Language)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*IdeaTranslation)
	for i := range nodes {
		fk := nodes[i].LanguageCode
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(language.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "language_code" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (itq *IdeaTranslationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := itq.querySpec()
	_spec.Node.Columns = itq.ctx.Fields
	if len(itq.ctx.Fields) > 0 {
		_spec.Unique = itq.ctx.Unique != nil && *itq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, itq.driver, _spec)
}

func (itq *IdeaTranslationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(ideatranslation.Table, ideatranslation.Columns, sqlgraph.NewFieldSpec(ideatranslation.FieldID, field.TypeUUID))
	_spec.From = itq.sql
	if unique := itq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if itq.path != nil {
		_spec.Unique = true
	}
	if fields := itq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ideatranslation.FieldID)
		for i := range fields {
			if fields[i] != ideatranslation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if itq.withIdea != nil {
			_spec.Node.AddColumnOnce(ideatranslation.FieldIdeaID)
		}
		if itq.withLanguage != nil {
			_spec.Node.AddColumnOnce(ideatranslation.FieldLanguageCode)
		}
	}
	if ps := itq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := itq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := itq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := itq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (itq *IdeaTranslationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(itq.driver.Dialect())
	t1 := builder.Table(ideatranslation.Table)
	columns := itq.ctx.Fields
	if len(columns) == 0 {
		columns = ideatranslation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if itq.sql != nil {
		selector = itq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if itq.ctx.Unique != nil && *itq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range itq.predicates {
		p(selector)
	}
	for _, p := range itq.order {
		p(selector)
	}
	if offset := itq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := itq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// IdeaTranslationGroupBy is the group-by builder for IdeaTranslation entities.
type IdeaTranslationGroupBy struct {
	selector
	build *IdeaTranslationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (itgb *IdeaTranslationGroupBy) Aggregate(fns ...AggregateFunc) *IdeaTranslationGroupBy {
	itgb.fns = append(itgb.fns, fns...)
	return itgb
}

// Scan applies the selector query and scans the result into the given value.
func (itgb *IdeaTranslationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, itgb.build.ctx, ent.OpQueryGroupBy)
	if err := itgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IdeaTranslationQuery, *IdeaTranslationGroupBy](ctx, itgb.build, itgb, itgb.build.inters, v)
}

func (itgb *IdeaTranslationGroupBy) sqlScan(ctx context.Context, root *IdeaTranslationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(itgb.fns))
	for _, fn := range itgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*itgb.flds)+len(itgb.fns))
		for _, f := range *itgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*itgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := itgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// IdeaTranslationSelect is the builder for selecting fields of IdeaTranslation entities.
type IdeaTranslationSelect struct {
	*IdeaTranslationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (its *IdeaTranslationSelect) Aggregate(fns ...AggregateFunc) *IdeaTranslationSelect {
	its.fns = append(its.fns, fns...)
	return its
}

// Scan applies the selector query and scans the result into the given value.
func (its *IdeaTranslationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, its.ctx, ent.OpQuerySelect)
	if err := its.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IdeaTranslationQuery, *IdeaTranslationSelect](ctx, its.IdeaTranslationQuery, its, its.inters, v)
}

func (its *IdeaTranslationSelect) sqlScan(ctx context.Context, root *IdeaTranslationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(its.fns))
	for _, fn := range its.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*its.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := its.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
