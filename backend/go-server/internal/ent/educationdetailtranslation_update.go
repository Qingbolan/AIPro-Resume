// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/educationdetail"
	"silan-backend/internal/ent/educationdetailtranslation"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// EducationDetailTranslationUpdate is the builder for updating EducationDetailTranslation entities.
type EducationDetailTranslationUpdate struct {
	config
	hooks    []Hook
	mutation *EducationDetailTranslationMutation
}

// Where appends a list predicates to the EducationDetailTranslationUpdate builder.
func (edtu *EducationDetailTranslationUpdate) Where(ps ...predicate.EducationDetailTranslation) *EducationDetailTranslationUpdate {
	edtu.mutation.Where(ps...)
	return edtu
}

// SetEducationDetailID sets the "education_detail_id" field.
func (edtu *EducationDetailTranslationUpdate) SetEducationDetailID(u uuid.UUID) *EducationDetailTranslationUpdate {
	edtu.mutation.SetEducationDetailID(u)
	return edtu
}

// SetNillableEducationDetailID sets the "education_detail_id" field if the given value is not nil.
func (edtu *EducationDetailTranslationUpdate) SetNillableEducationDetailID(u *uuid.UUID) *EducationDetailTranslationUpdate {
	if u != nil {
		edtu.SetEducationDetailID(*u)
	}
	return edtu
}

// SetLanguageCode sets the "language_code" field.
func (edtu *EducationDetailTranslationUpdate) SetLanguageCode(s string) *EducationDetailTranslationUpdate {
	edtu.mutation.SetLanguageCode(s)
	return edtu
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (edtu *EducationDetailTranslationUpdate) SetNillableLanguageCode(s *string) *EducationDetailTranslationUpdate {
	if s != nil {
		edtu.SetLanguageCode(*s)
	}
	return edtu
}

// SetDetailText sets the "detail_text" field.
func (edtu *EducationDetailTranslationUpdate) SetDetailText(s string) *EducationDetailTranslationUpdate {
	edtu.mutation.SetDetailText(s)
	return edtu
}

// SetNillableDetailText sets the "detail_text" field if the given value is not nil.
func (edtu *EducationDetailTranslationUpdate) SetNillableDetailText(s *string) *EducationDetailTranslationUpdate {
	if s != nil {
		edtu.SetDetailText(*s)
	}
	return edtu
}

// SetUpdatedAt sets the "updated_at" field.
func (edtu *EducationDetailTranslationUpdate) SetUpdatedAt(t time.Time) *EducationDetailTranslationUpdate {
	edtu.mutation.SetUpdatedAt(t)
	return edtu
}

// SetEducationDetail sets the "education_detail" edge to the EducationDetail entity.
func (edtu *EducationDetailTranslationUpdate) SetEducationDetail(e *EducationDetail) *EducationDetailTranslationUpdate {
	return edtu.SetEducationDetailID(e.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (edtu *EducationDetailTranslationUpdate) SetLanguageID(id string) *EducationDetailTranslationUpdate {
	edtu.mutation.SetLanguageID(id)
	return edtu
}

// SetLanguage sets the "language" edge to the Language entity.
func (edtu *EducationDetailTranslationUpdate) SetLanguage(l *Language) *EducationDetailTranslationUpdate {
	return edtu.SetLanguageID(l.ID)
}

// Mutation returns the EducationDetailTranslationMutation object of the builder.
func (edtu *EducationDetailTranslationUpdate) Mutation() *EducationDetailTranslationMutation {
	return edtu.mutation
}

// ClearEducationDetail clears the "education_detail" edge to the EducationDetail entity.
func (edtu *EducationDetailTranslationUpdate) ClearEducationDetail() *EducationDetailTranslationUpdate {
	edtu.mutation.ClearEducationDetail()
	return edtu
}

// ClearLanguage clears the "language" edge to the Language entity.
func (edtu *EducationDetailTranslationUpdate) ClearLanguage() *EducationDetailTranslationUpdate {
	edtu.mutation.ClearLanguage()
	return edtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (edtu *EducationDetailTranslationUpdate) Save(ctx context.Context) (int, error) {
	edtu.defaults()
	return withHooks(ctx, edtu.sqlSave, edtu.mutation, edtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (edtu *EducationDetailTranslationUpdate) SaveX(ctx context.Context) int {
	affected, err := edtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (edtu *EducationDetailTranslationUpdate) Exec(ctx context.Context) error {
	_, err := edtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (edtu *EducationDetailTranslationUpdate) ExecX(ctx context.Context) {
	if err := edtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (edtu *EducationDetailTranslationUpdate) defaults() {
	if _, ok := edtu.mutation.UpdatedAt(); !ok {
		v := educationdetailtranslation.UpdateDefaultUpdatedAt()
		edtu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (edtu *EducationDetailTranslationUpdate) check() error {
	if v, ok := edtu.mutation.LanguageCode(); ok {
		if err := educationdetailtranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "EducationDetailTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := edtu.mutation.DetailText(); ok {
		if err := educationdetailtranslation.DetailTextValidator(v); err != nil {
			return &ValidationError{Name: "detail_text", err: fmt.Errorf(`ent: validator failed for field "EducationDetailTranslation.detail_text": %w`, err)}
		}
	}
	if edtu.mutation.EducationDetailCleared() && len(edtu.mutation.EducationDetailIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EducationDetailTranslation.education_detail"`)
	}
	if edtu.mutation.LanguageCleared() && len(edtu.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EducationDetailTranslation.language"`)
	}
	return nil
}

func (edtu *EducationDetailTranslationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := edtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(educationdetailtranslation.Table, educationdetailtranslation.Columns, sqlgraph.NewFieldSpec(educationdetailtranslation.FieldID, field.TypeUUID))
	if ps := edtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := edtu.mutation.DetailText(); ok {
		_spec.SetField(educationdetailtranslation.FieldDetailText, field.TypeString, value)
	}
	if value, ok := edtu.mutation.UpdatedAt(); ok {
		_spec.SetField(educationdetailtranslation.FieldUpdatedAt, field.TypeTime, value)
	}
	if edtu.mutation.EducationDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   educationdetailtranslation.EducationDetailTable,
			Columns: []string{educationdetailtranslation.EducationDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationdetail.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := edtu.mutation.EducationDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   educationdetailtranslation.EducationDetailTable,
			Columns: []string{educationdetailtranslation.EducationDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationdetail.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if edtu.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   educationdetailtranslation.LanguageTable,
			Columns: []string{educationdetailtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := edtu.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   educationdetailtranslation.LanguageTable,
			Columns: []string{educationdetailtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, edtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{educationdetailtranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	edtu.mutation.done = true
	return n, nil
}

// EducationDetailTranslationUpdateOne is the builder for updating a single EducationDetailTranslation entity.
type EducationDetailTranslationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EducationDetailTranslationMutation
}

// SetEducationDetailID sets the "education_detail_id" field.
func (edtuo *EducationDetailTranslationUpdateOne) SetEducationDetailID(u uuid.UUID) *EducationDetailTranslationUpdateOne {
	edtuo.mutation.SetEducationDetailID(u)
	return edtuo
}

// SetNillableEducationDetailID sets the "education_detail_id" field if the given value is not nil.
func (edtuo *EducationDetailTranslationUpdateOne) SetNillableEducationDetailID(u *uuid.UUID) *EducationDetailTranslationUpdateOne {
	if u != nil {
		edtuo.SetEducationDetailID(*u)
	}
	return edtuo
}

// SetLanguageCode sets the "language_code" field.
func (edtuo *EducationDetailTranslationUpdateOne) SetLanguageCode(s string) *EducationDetailTranslationUpdateOne {
	edtuo.mutation.SetLanguageCode(s)
	return edtuo
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (edtuo *EducationDetailTranslationUpdateOne) SetNillableLanguageCode(s *string) *EducationDetailTranslationUpdateOne {
	if s != nil {
		edtuo.SetLanguageCode(*s)
	}
	return edtuo
}

// SetDetailText sets the "detail_text" field.
func (edtuo *EducationDetailTranslationUpdateOne) SetDetailText(s string) *EducationDetailTranslationUpdateOne {
	edtuo.mutation.SetDetailText(s)
	return edtuo
}

// SetNillableDetailText sets the "detail_text" field if the given value is not nil.
func (edtuo *EducationDetailTranslationUpdateOne) SetNillableDetailText(s *string) *EducationDetailTranslationUpdateOne {
	if s != nil {
		edtuo.SetDetailText(*s)
	}
	return edtuo
}

// SetUpdatedAt sets the "updated_at" field.
func (edtuo *EducationDetailTranslationUpdateOne) SetUpdatedAt(t time.Time) *EducationDetailTranslationUpdateOne {
	edtuo.mutation.SetUpdatedAt(t)
	return edtuo
}

// SetEducationDetail sets the "education_detail" edge to the EducationDetail entity.
func (edtuo *EducationDetailTranslationUpdateOne) SetEducationDetail(e *EducationDetail) *EducationDetailTranslationUpdateOne {
	return edtuo.SetEducationDetailID(e.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (edtuo *EducationDetailTranslationUpdateOne) SetLanguageID(id string) *EducationDetailTranslationUpdateOne {
	edtuo.mutation.SetLanguageID(id)
	return edtuo
}

// SetLanguage sets the "language" edge to the Language entity.
func (edtuo *EducationDetailTranslationUpdateOne) SetLanguage(l *Language) *EducationDetailTranslationUpdateOne {
	return edtuo.SetLanguageID(l.ID)
}

// Mutation returns the EducationDetailTranslationMutation object of the builder.
func (edtuo *EducationDetailTranslationUpdateOne) Mutation() *EducationDetailTranslationMutation {
	return edtuo.mutation
}

// ClearEducationDetail clears the "education_detail" edge to the EducationDetail entity.
func (edtuo *EducationDetailTranslationUpdateOne) ClearEducationDetail() *EducationDetailTranslationUpdateOne {
	edtuo.mutation.ClearEducationDetail()
	return edtuo
}

// ClearLanguage clears the "language" edge to the Language entity.
func (edtuo *EducationDetailTranslationUpdateOne) ClearLanguage() *EducationDetailTranslationUpdateOne {
	edtuo.mutation.ClearLanguage()
	return edtuo
}

// Where appends a list predicates to the EducationDetailTranslationUpdate builder.
func (edtuo *EducationDetailTranslationUpdateOne) Where(ps ...predicate.EducationDetailTranslation) *EducationDetailTranslationUpdateOne {
	edtuo.mutation.Where(ps...)
	return edtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (edtuo *EducationDetailTranslationUpdateOne) Select(field string, fields ...string) *EducationDetailTranslationUpdateOne {
	edtuo.fields = append([]string{field}, fields...)
	return edtuo
}

// Save executes the query and returns the updated EducationDetailTranslation entity.
func (edtuo *EducationDetailTranslationUpdateOne) Save(ctx context.Context) (*EducationDetailTranslation, error) {
	edtuo.defaults()
	return withHooks(ctx, edtuo.sqlSave, edtuo.mutation, edtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (edtuo *EducationDetailTranslationUpdateOne) SaveX(ctx context.Context) *EducationDetailTranslation {
	node, err := edtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (edtuo *EducationDetailTranslationUpdateOne) Exec(ctx context.Context) error {
	_, err := edtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (edtuo *EducationDetailTranslationUpdateOne) ExecX(ctx context.Context) {
	if err := edtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (edtuo *EducationDetailTranslationUpdateOne) defaults() {
	if _, ok := edtuo.mutation.UpdatedAt(); !ok {
		v := educationdetailtranslation.UpdateDefaultUpdatedAt()
		edtuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (edtuo *EducationDetailTranslationUpdateOne) check() error {
	if v, ok := edtuo.mutation.LanguageCode(); ok {
		if err := educationdetailtranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "EducationDetailTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := edtuo.mutation.DetailText(); ok {
		if err := educationdetailtranslation.DetailTextValidator(v); err != nil {
			return &ValidationError{Name: "detail_text", err: fmt.Errorf(`ent: validator failed for field "EducationDetailTranslation.detail_text": %w`, err)}
		}
	}
	if edtuo.mutation.EducationDetailCleared() && len(edtuo.mutation.EducationDetailIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EducationDetailTranslation.education_detail"`)
	}
	if edtuo.mutation.LanguageCleared() && len(edtuo.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EducationDetailTranslation.language"`)
	}
	return nil
}

func (edtuo *EducationDetailTranslationUpdateOne) sqlSave(ctx context.Context) (_node *EducationDetailTranslation, err error) {
	if err := edtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(educationdetailtranslation.Table, educationdetailtranslation.Columns, sqlgraph.NewFieldSpec(educationdetailtranslation.FieldID, field.TypeUUID))
	id, ok := edtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EducationDetailTranslation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := edtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, educationdetailtranslation.FieldID)
		for _, f := range fields {
			if !educationdetailtranslation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != educationdetailtranslation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := edtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := edtuo.mutation.DetailText(); ok {
		_spec.SetField(educationdetailtranslation.FieldDetailText, field.TypeString, value)
	}
	if value, ok := edtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(educationdetailtranslation.FieldUpdatedAt, field.TypeTime, value)
	}
	if edtuo.mutation.EducationDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   educationdetailtranslation.EducationDetailTable,
			Columns: []string{educationdetailtranslation.EducationDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationdetail.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := edtuo.mutation.EducationDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   educationdetailtranslation.EducationDetailTable,
			Columns: []string{educationdetailtranslation.EducationDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(educationdetail.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if edtuo.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   educationdetailtranslation.LanguageTable,
			Columns: []string{educationdetailtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := edtuo.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   educationdetailtranslation.LanguageTable,
			Columns: []string{educationdetailtranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EducationDetailTranslation{config: edtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, edtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{educationdetailtranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	edtuo.mutation.done = true
	return _node, nil
}
