// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/blogcategory"
	"silan-backend/internal/ent/blogcategorytranslation"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BlogCategoryTranslationUpdate is the builder for updating BlogCategoryTranslation entities.
type BlogCategoryTranslationUpdate struct {
	config
	hooks    []Hook
	mutation *BlogCategoryTranslationMutation
}

// Where appends a list predicates to the BlogCategoryTranslationUpdate builder.
func (bctu *BlogCategoryTranslationUpdate) Where(ps ...predicate.BlogCategoryTranslation) *BlogCategoryTranslationUpdate {
	bctu.mutation.Where(ps...)
	return bctu
}

// SetBlogCategoryID sets the "blog_category_id" field.
func (bctu *BlogCategoryTranslationUpdate) SetBlogCategoryID(u uuid.UUID) *BlogCategoryTranslationUpdate {
	bctu.mutation.SetBlogCategoryID(u)
	return bctu
}

// SetNillableBlogCategoryID sets the "blog_category_id" field if the given value is not nil.
func (bctu *BlogCategoryTranslationUpdate) SetNillableBlogCategoryID(u *uuid.UUID) *BlogCategoryTranslationUpdate {
	if u != nil {
		bctu.SetBlogCategoryID(*u)
	}
	return bctu
}

// SetLanguageCode sets the "language_code" field.
func (bctu *BlogCategoryTranslationUpdate) SetLanguageCode(s string) *BlogCategoryTranslationUpdate {
	bctu.mutation.SetLanguageCode(s)
	return bctu
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (bctu *BlogCategoryTranslationUpdate) SetNillableLanguageCode(s *string) *BlogCategoryTranslationUpdate {
	if s != nil {
		bctu.SetLanguageCode(*s)
	}
	return bctu
}

// SetName sets the "name" field.
func (bctu *BlogCategoryTranslationUpdate) SetName(s string) *BlogCategoryTranslationUpdate {
	bctu.mutation.SetName(s)
	return bctu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bctu *BlogCategoryTranslationUpdate) SetNillableName(s *string) *BlogCategoryTranslationUpdate {
	if s != nil {
		bctu.SetName(*s)
	}
	return bctu
}

// SetDescription sets the "description" field.
func (bctu *BlogCategoryTranslationUpdate) SetDescription(s string) *BlogCategoryTranslationUpdate {
	bctu.mutation.SetDescription(s)
	return bctu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bctu *BlogCategoryTranslationUpdate) SetNillableDescription(s *string) *BlogCategoryTranslationUpdate {
	if s != nil {
		bctu.SetDescription(*s)
	}
	return bctu
}

// ClearDescription clears the value of the "description" field.
func (bctu *BlogCategoryTranslationUpdate) ClearDescription() *BlogCategoryTranslationUpdate {
	bctu.mutation.ClearDescription()
	return bctu
}

// SetUpdatedAt sets the "updated_at" field.
func (bctu *BlogCategoryTranslationUpdate) SetUpdatedAt(t time.Time) *BlogCategoryTranslationUpdate {
	bctu.mutation.SetUpdatedAt(t)
	return bctu
}

// SetBlogCategory sets the "blog_category" edge to the BlogCategory entity.
func (bctu *BlogCategoryTranslationUpdate) SetBlogCategory(b *BlogCategory) *BlogCategoryTranslationUpdate {
	return bctu.SetBlogCategoryID(b.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (bctu *BlogCategoryTranslationUpdate) SetLanguageID(id string) *BlogCategoryTranslationUpdate {
	bctu.mutation.SetLanguageID(id)
	return bctu
}

// SetLanguage sets the "language" edge to the Language entity.
func (bctu *BlogCategoryTranslationUpdate) SetLanguage(l *Language) *BlogCategoryTranslationUpdate {
	return bctu.SetLanguageID(l.ID)
}

// Mutation returns the BlogCategoryTranslationMutation object of the builder.
func (bctu *BlogCategoryTranslationUpdate) Mutation() *BlogCategoryTranslationMutation {
	return bctu.mutation
}

// ClearBlogCategory clears the "blog_category" edge to the BlogCategory entity.
func (bctu *BlogCategoryTranslationUpdate) ClearBlogCategory() *BlogCategoryTranslationUpdate {
	bctu.mutation.ClearBlogCategory()
	return bctu
}

// ClearLanguage clears the "language" edge to the Language entity.
func (bctu *BlogCategoryTranslationUpdate) ClearLanguage() *BlogCategoryTranslationUpdate {
	bctu.mutation.ClearLanguage()
	return bctu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bctu *BlogCategoryTranslationUpdate) Save(ctx context.Context) (int, error) {
	bctu.defaults()
	return withHooks(ctx, bctu.sqlSave, bctu.mutation, bctu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bctu *BlogCategoryTranslationUpdate) SaveX(ctx context.Context) int {
	affected, err := bctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bctu *BlogCategoryTranslationUpdate) Exec(ctx context.Context) error {
	_, err := bctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bctu *BlogCategoryTranslationUpdate) ExecX(ctx context.Context) {
	if err := bctu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bctu *BlogCategoryTranslationUpdate) defaults() {
	if _, ok := bctu.mutation.UpdatedAt(); !ok {
		v := blogcategorytranslation.UpdateDefaultUpdatedAt()
		bctu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bctu *BlogCategoryTranslationUpdate) check() error {
	if v, ok := bctu.mutation.LanguageCode(); ok {
		if err := blogcategorytranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "BlogCategoryTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := bctu.mutation.Name(); ok {
		if err := blogcategorytranslation.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "BlogCategoryTranslation.name": %w`, err)}
		}
	}
	if bctu.mutation.BlogCategoryCleared() && len(bctu.mutation.BlogCategoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlogCategoryTranslation.blog_category"`)
	}
	if bctu.mutation.LanguageCleared() && len(bctu.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlogCategoryTranslation.language"`)
	}
	return nil
}

func (bctu *BlogCategoryTranslationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bctu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(blogcategorytranslation.Table, blogcategorytranslation.Columns, sqlgraph.NewFieldSpec(blogcategorytranslation.FieldID, field.TypeUUID))
	if ps := bctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bctu.mutation.Name(); ok {
		_spec.SetField(blogcategorytranslation.FieldName, field.TypeString, value)
	}
	if value, ok := bctu.mutation.Description(); ok {
		_spec.SetField(blogcategorytranslation.FieldDescription, field.TypeString, value)
	}
	if bctu.mutation.DescriptionCleared() {
		_spec.ClearField(blogcategorytranslation.FieldDescription, field.TypeString)
	}
	if value, ok := bctu.mutation.UpdatedAt(); ok {
		_spec.SetField(blogcategorytranslation.FieldUpdatedAt, field.TypeTime, value)
	}
	if bctu.mutation.BlogCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogcategorytranslation.BlogCategoryTable,
			Columns: []string{blogcategorytranslation.BlogCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcategory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bctu.mutation.BlogCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogcategorytranslation.BlogCategoryTable,
			Columns: []string{blogcategorytranslation.BlogCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bctu.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogcategorytranslation.LanguageTable,
			Columns: []string{blogcategorytranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bctu.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogcategorytranslation.LanguageTable,
			Columns: []string{blogcategorytranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blogcategorytranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bctu.mutation.done = true
	return n, nil
}

// BlogCategoryTranslationUpdateOne is the builder for updating a single BlogCategoryTranslation entity.
type BlogCategoryTranslationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlogCategoryTranslationMutation
}

// SetBlogCategoryID sets the "blog_category_id" field.
func (bctuo *BlogCategoryTranslationUpdateOne) SetBlogCategoryID(u uuid.UUID) *BlogCategoryTranslationUpdateOne {
	bctuo.mutation.SetBlogCategoryID(u)
	return bctuo
}

// SetNillableBlogCategoryID sets the "blog_category_id" field if the given value is not nil.
func (bctuo *BlogCategoryTranslationUpdateOne) SetNillableBlogCategoryID(u *uuid.UUID) *BlogCategoryTranslationUpdateOne {
	if u != nil {
		bctuo.SetBlogCategoryID(*u)
	}
	return bctuo
}

// SetLanguageCode sets the "language_code" field.
func (bctuo *BlogCategoryTranslationUpdateOne) SetLanguageCode(s string) *BlogCategoryTranslationUpdateOne {
	bctuo.mutation.SetLanguageCode(s)
	return bctuo
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (bctuo *BlogCategoryTranslationUpdateOne) SetNillableLanguageCode(s *string) *BlogCategoryTranslationUpdateOne {
	if s != nil {
		bctuo.SetLanguageCode(*s)
	}
	return bctuo
}

// SetName sets the "name" field.
func (bctuo *BlogCategoryTranslationUpdateOne) SetName(s string) *BlogCategoryTranslationUpdateOne {
	bctuo.mutation.SetName(s)
	return bctuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bctuo *BlogCategoryTranslationUpdateOne) SetNillableName(s *string) *BlogCategoryTranslationUpdateOne {
	if s != nil {
		bctuo.SetName(*s)
	}
	return bctuo
}

// SetDescription sets the "description" field.
func (bctuo *BlogCategoryTranslationUpdateOne) SetDescription(s string) *BlogCategoryTranslationUpdateOne {
	bctuo.mutation.SetDescription(s)
	return bctuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bctuo *BlogCategoryTranslationUpdateOne) SetNillableDescription(s *string) *BlogCategoryTranslationUpdateOne {
	if s != nil {
		bctuo.SetDescription(*s)
	}
	return bctuo
}

// ClearDescription clears the value of the "description" field.
func (bctuo *BlogCategoryTranslationUpdateOne) ClearDescription() *BlogCategoryTranslationUpdateOne {
	bctuo.mutation.ClearDescription()
	return bctuo
}

// SetUpdatedAt sets the "updated_at" field.
func (bctuo *BlogCategoryTranslationUpdateOne) SetUpdatedAt(t time.Time) *BlogCategoryTranslationUpdateOne {
	bctuo.mutation.SetUpdatedAt(t)
	return bctuo
}

// SetBlogCategory sets the "blog_category" edge to the BlogCategory entity.
func (bctuo *BlogCategoryTranslationUpdateOne) SetBlogCategory(b *BlogCategory) *BlogCategoryTranslationUpdateOne {
	return bctuo.SetBlogCategoryID(b.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (bctuo *BlogCategoryTranslationUpdateOne) SetLanguageID(id string) *BlogCategoryTranslationUpdateOne {
	bctuo.mutation.SetLanguageID(id)
	return bctuo
}

// SetLanguage sets the "language" edge to the Language entity.
func (bctuo *BlogCategoryTranslationUpdateOne) SetLanguage(l *Language) *BlogCategoryTranslationUpdateOne {
	return bctuo.SetLanguageID(l.ID)
}

// Mutation returns the BlogCategoryTranslationMutation object of the builder.
func (bctuo *BlogCategoryTranslationUpdateOne) Mutation() *BlogCategoryTranslationMutation {
	return bctuo.mutation
}

// ClearBlogCategory clears the "blog_category" edge to the BlogCategory entity.
func (bctuo *BlogCategoryTranslationUpdateOne) ClearBlogCategory() *BlogCategoryTranslationUpdateOne {
	bctuo.mutation.ClearBlogCategory()
	return bctuo
}

// ClearLanguage clears the "language" edge to the Language entity.
func (bctuo *BlogCategoryTranslationUpdateOne) ClearLanguage() *BlogCategoryTranslationUpdateOne {
	bctuo.mutation.ClearLanguage()
	return bctuo
}

// Where appends a list predicates to the BlogCategoryTranslationUpdate builder.
func (bctuo *BlogCategoryTranslationUpdateOne) Where(ps ...predicate.BlogCategoryTranslation) *BlogCategoryTranslationUpdateOne {
	bctuo.mutation.Where(ps...)
	return bctuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bctuo *BlogCategoryTranslationUpdateOne) Select(field string, fields ...string) *BlogCategoryTranslationUpdateOne {
	bctuo.fields = append([]string{field}, fields...)
	return bctuo
}

// Save executes the query and returns the updated BlogCategoryTranslation entity.
func (bctuo *BlogCategoryTranslationUpdateOne) Save(ctx context.Context) (*BlogCategoryTranslation, error) {
	bctuo.defaults()
	return withHooks(ctx, bctuo.sqlSave, bctuo.mutation, bctuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bctuo *BlogCategoryTranslationUpdateOne) SaveX(ctx context.Context) *BlogCategoryTranslation {
	node, err := bctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bctuo *BlogCategoryTranslationUpdateOne) Exec(ctx context.Context) error {
	_, err := bctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bctuo *BlogCategoryTranslationUpdateOne) ExecX(ctx context.Context) {
	if err := bctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bctuo *BlogCategoryTranslationUpdateOne) defaults() {
	if _, ok := bctuo.mutation.UpdatedAt(); !ok {
		v := blogcategorytranslation.UpdateDefaultUpdatedAt()
		bctuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bctuo *BlogCategoryTranslationUpdateOne) check() error {
	if v, ok := bctuo.mutation.LanguageCode(); ok {
		if err := blogcategorytranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "BlogCategoryTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := bctuo.mutation.Name(); ok {
		if err := blogcategorytranslation.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "BlogCategoryTranslation.name": %w`, err)}
		}
	}
	if bctuo.mutation.BlogCategoryCleared() && len(bctuo.mutation.BlogCategoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlogCategoryTranslation.blog_category"`)
	}
	if bctuo.mutation.LanguageCleared() && len(bctuo.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlogCategoryTranslation.language"`)
	}
	return nil
}

func (bctuo *BlogCategoryTranslationUpdateOne) sqlSave(ctx context.Context) (_node *BlogCategoryTranslation, err error) {
	if err := bctuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blogcategorytranslation.Table, blogcategorytranslation.Columns, sqlgraph.NewFieldSpec(blogcategorytranslation.FieldID, field.TypeUUID))
	id, ok := bctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlogCategoryTranslation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blogcategorytranslation.FieldID)
		for _, f := range fields {
			if !blogcategorytranslation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blogcategorytranslation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bctuo.mutation.Name(); ok {
		_spec.SetField(blogcategorytranslation.FieldName, field.TypeString, value)
	}
	if value, ok := bctuo.mutation.Description(); ok {
		_spec.SetField(blogcategorytranslation.FieldDescription, field.TypeString, value)
	}
	if bctuo.mutation.DescriptionCleared() {
		_spec.ClearField(blogcategorytranslation.FieldDescription, field.TypeString)
	}
	if value, ok := bctuo.mutation.UpdatedAt(); ok {
		_spec.SetField(blogcategorytranslation.FieldUpdatedAt, field.TypeTime, value)
	}
	if bctuo.mutation.BlogCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogcategorytranslation.BlogCategoryTable,
			Columns: []string{blogcategorytranslation.BlogCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcategory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bctuo.mutation.BlogCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogcategorytranslation.BlogCategoryTable,
			Columns: []string{blogcategorytranslation.BlogCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bctuo.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogcategorytranslation.LanguageTable,
			Columns: []string{blogcategorytranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bctuo.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blogcategorytranslation.LanguageTable,
			Columns: []string{blogcategorytranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BlogCategoryTranslation{config: bctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blogcategorytranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bctuo.mutation.done = true
	return _node, nil
}
