// Code generated by ent, DO NOT EDIT.

package researchprojecttranslation

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldLTE(FieldID, id))
}

// ResearchProjectID applies equality check predicate on the "research_project_id" field. It's identical to ResearchProjectIDEQ.
func ResearchProjectID(v uuid.UUID) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldEQ(FieldResearchProjectID, v))
}

// LanguageCode applies equality check predicate on the "language_code" field. It's identical to LanguageCodeEQ.
func LanguageCode(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldEQ(FieldLanguageCode, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldEQ(FieldTitle, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldEQ(FieldLocation, v))
}

// ResearchType applies equality check predicate on the "research_type" field. It's identical to ResearchTypeEQ.
func ResearchType(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldEQ(FieldResearchType, v))
}

// FundingSource applies equality check predicate on the "funding_source" field. It's identical to FundingSourceEQ.
func FundingSource(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldEQ(FieldFundingSource, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldEQ(FieldCreatedAt, v))
}

// ResearchProjectIDEQ applies the EQ predicate on the "research_project_id" field.
func ResearchProjectIDEQ(v uuid.UUID) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldEQ(FieldResearchProjectID, v))
}

// ResearchProjectIDNEQ applies the NEQ predicate on the "research_project_id" field.
func ResearchProjectIDNEQ(v uuid.UUID) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldNEQ(FieldResearchProjectID, v))
}

// ResearchProjectIDIn applies the In predicate on the "research_project_id" field.
func ResearchProjectIDIn(vs ...uuid.UUID) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldIn(FieldResearchProjectID, vs...))
}

// ResearchProjectIDNotIn applies the NotIn predicate on the "research_project_id" field.
func ResearchProjectIDNotIn(vs ...uuid.UUID) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldNotIn(FieldResearchProjectID, vs...))
}

// LanguageCodeEQ applies the EQ predicate on the "language_code" field.
func LanguageCodeEQ(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldEQ(FieldLanguageCode, v))
}

// LanguageCodeNEQ applies the NEQ predicate on the "language_code" field.
func LanguageCodeNEQ(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldNEQ(FieldLanguageCode, v))
}

// LanguageCodeIn applies the In predicate on the "language_code" field.
func LanguageCodeIn(vs ...string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldIn(FieldLanguageCode, vs...))
}

// LanguageCodeNotIn applies the NotIn predicate on the "language_code" field.
func LanguageCodeNotIn(vs ...string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldNotIn(FieldLanguageCode, vs...))
}

// LanguageCodeGT applies the GT predicate on the "language_code" field.
func LanguageCodeGT(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldGT(FieldLanguageCode, v))
}

// LanguageCodeGTE applies the GTE predicate on the "language_code" field.
func LanguageCodeGTE(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldGTE(FieldLanguageCode, v))
}

// LanguageCodeLT applies the LT predicate on the "language_code" field.
func LanguageCodeLT(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldLT(FieldLanguageCode, v))
}

// LanguageCodeLTE applies the LTE predicate on the "language_code" field.
func LanguageCodeLTE(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldLTE(FieldLanguageCode, v))
}

// LanguageCodeContains applies the Contains predicate on the "language_code" field.
func LanguageCodeContains(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldContains(FieldLanguageCode, v))
}

// LanguageCodeHasPrefix applies the HasPrefix predicate on the "language_code" field.
func LanguageCodeHasPrefix(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldHasPrefix(FieldLanguageCode, v))
}

// LanguageCodeHasSuffix applies the HasSuffix predicate on the "language_code" field.
func LanguageCodeHasSuffix(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldHasSuffix(FieldLanguageCode, v))
}

// LanguageCodeEqualFold applies the EqualFold predicate on the "language_code" field.
func LanguageCodeEqualFold(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldEqualFold(FieldLanguageCode, v))
}

// LanguageCodeContainsFold applies the ContainsFold predicate on the "language_code" field.
func LanguageCodeContainsFold(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldContainsFold(FieldLanguageCode, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldContainsFold(FieldTitle, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldIsNull(FieldLocation))
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldNotNull(FieldLocation))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldContainsFold(FieldLocation, v))
}

// ResearchTypeEQ applies the EQ predicate on the "research_type" field.
func ResearchTypeEQ(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldEQ(FieldResearchType, v))
}

// ResearchTypeNEQ applies the NEQ predicate on the "research_type" field.
func ResearchTypeNEQ(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldNEQ(FieldResearchType, v))
}

// ResearchTypeIn applies the In predicate on the "research_type" field.
func ResearchTypeIn(vs ...string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldIn(FieldResearchType, vs...))
}

// ResearchTypeNotIn applies the NotIn predicate on the "research_type" field.
func ResearchTypeNotIn(vs ...string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldNotIn(FieldResearchType, vs...))
}

// ResearchTypeGT applies the GT predicate on the "research_type" field.
func ResearchTypeGT(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldGT(FieldResearchType, v))
}

// ResearchTypeGTE applies the GTE predicate on the "research_type" field.
func ResearchTypeGTE(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldGTE(FieldResearchType, v))
}

// ResearchTypeLT applies the LT predicate on the "research_type" field.
func ResearchTypeLT(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldLT(FieldResearchType, v))
}

// ResearchTypeLTE applies the LTE predicate on the "research_type" field.
func ResearchTypeLTE(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldLTE(FieldResearchType, v))
}

// ResearchTypeContains applies the Contains predicate on the "research_type" field.
func ResearchTypeContains(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldContains(FieldResearchType, v))
}

// ResearchTypeHasPrefix applies the HasPrefix predicate on the "research_type" field.
func ResearchTypeHasPrefix(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldHasPrefix(FieldResearchType, v))
}

// ResearchTypeHasSuffix applies the HasSuffix predicate on the "research_type" field.
func ResearchTypeHasSuffix(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldHasSuffix(FieldResearchType, v))
}

// ResearchTypeIsNil applies the IsNil predicate on the "research_type" field.
func ResearchTypeIsNil() predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldIsNull(FieldResearchType))
}

// ResearchTypeNotNil applies the NotNil predicate on the "research_type" field.
func ResearchTypeNotNil() predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldNotNull(FieldResearchType))
}

// ResearchTypeEqualFold applies the EqualFold predicate on the "research_type" field.
func ResearchTypeEqualFold(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldEqualFold(FieldResearchType, v))
}

// ResearchTypeContainsFold applies the ContainsFold predicate on the "research_type" field.
func ResearchTypeContainsFold(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldContainsFold(FieldResearchType, v))
}

// FundingSourceEQ applies the EQ predicate on the "funding_source" field.
func FundingSourceEQ(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldEQ(FieldFundingSource, v))
}

// FundingSourceNEQ applies the NEQ predicate on the "funding_source" field.
func FundingSourceNEQ(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldNEQ(FieldFundingSource, v))
}

// FundingSourceIn applies the In predicate on the "funding_source" field.
func FundingSourceIn(vs ...string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldIn(FieldFundingSource, vs...))
}

// FundingSourceNotIn applies the NotIn predicate on the "funding_source" field.
func FundingSourceNotIn(vs ...string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldNotIn(FieldFundingSource, vs...))
}

// FundingSourceGT applies the GT predicate on the "funding_source" field.
func FundingSourceGT(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldGT(FieldFundingSource, v))
}

// FundingSourceGTE applies the GTE predicate on the "funding_source" field.
func FundingSourceGTE(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldGTE(FieldFundingSource, v))
}

// FundingSourceLT applies the LT predicate on the "funding_source" field.
func FundingSourceLT(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldLT(FieldFundingSource, v))
}

// FundingSourceLTE applies the LTE predicate on the "funding_source" field.
func FundingSourceLTE(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldLTE(FieldFundingSource, v))
}

// FundingSourceContains applies the Contains predicate on the "funding_source" field.
func FundingSourceContains(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldContains(FieldFundingSource, v))
}

// FundingSourceHasPrefix applies the HasPrefix predicate on the "funding_source" field.
func FundingSourceHasPrefix(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldHasPrefix(FieldFundingSource, v))
}

// FundingSourceHasSuffix applies the HasSuffix predicate on the "funding_source" field.
func FundingSourceHasSuffix(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldHasSuffix(FieldFundingSource, v))
}

// FundingSourceIsNil applies the IsNil predicate on the "funding_source" field.
func FundingSourceIsNil() predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldIsNull(FieldFundingSource))
}

// FundingSourceNotNil applies the NotNil predicate on the "funding_source" field.
func FundingSourceNotNil() predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldNotNull(FieldFundingSource))
}

// FundingSourceEqualFold applies the EqualFold predicate on the "funding_source" field.
func FundingSourceEqualFold(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldEqualFold(FieldFundingSource, v))
}

// FundingSourceContainsFold applies the ContainsFold predicate on the "funding_source" field.
func FundingSourceContainsFold(v string) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldContainsFold(FieldFundingSource, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.FieldLTE(FieldCreatedAt, v))
}

// HasResearchProject applies the HasEdge predicate on the "research_project" edge.
func HasResearchProject() predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ResearchProjectTable, ResearchProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResearchProjectWith applies the HasEdge predicate on the "research_project" edge with a given conditions (other predicates).
func HasResearchProjectWith(preds ...predicate.ResearchProject) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(func(s *sql.Selector) {
		step := newResearchProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLanguage applies the HasEdge predicate on the "language" edge.
func HasLanguage() predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LanguageTable, LanguageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLanguageWith applies the HasEdge predicate on the "language" edge with a given conditions (other predicates).
func HasLanguageWith(preds ...predicate.Language) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(func(s *sql.Selector) {
		step := newLanguageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ResearchProjectTranslation) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ResearchProjectTranslation) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ResearchProjectTranslation) predicate.ResearchProjectTranslation {
	return predicate.ResearchProjectTranslation(sql.NotPredicates(p))
}
