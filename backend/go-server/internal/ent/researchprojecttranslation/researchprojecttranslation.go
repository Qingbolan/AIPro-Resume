// Code generated by ent, DO NOT EDIT.

package researchprojecttranslation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the researchprojecttranslation type in the database.
	Label = "research_project_translation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResearchProjectID holds the string denoting the research_project_id field in the database.
	FieldResearchProjectID = "research_project_id"
	// FieldLanguageCode holds the string denoting the language_code field in the database.
	FieldLanguageCode = "language_code"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldResearchType holds the string denoting the research_type field in the database.
	FieldResearchType = "research_type"
	// FieldFundingSource holds the string denoting the funding_source field in the database.
	FieldFundingSource = "funding_source"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeResearchProject holds the string denoting the research_project edge name in mutations.
	EdgeResearchProject = "research_project"
	// EdgeLanguage holds the string denoting the language edge name in mutations.
	EdgeLanguage = "language"
	// LanguageFieldID holds the string denoting the ID field of the Language.
	LanguageFieldID = "code"
	// Table holds the table name of the researchprojecttranslation in the database.
	Table = "research_project_translations"
	// ResearchProjectTable is the table that holds the research_project relation/edge.
	ResearchProjectTable = "research_project_translations"
	// ResearchProjectInverseTable is the table name for the ResearchProject entity.
	// It exists in this package in order to avoid circular dependency with the "researchproject" package.
	ResearchProjectInverseTable = "research_projects"
	// ResearchProjectColumn is the table column denoting the research_project relation/edge.
	ResearchProjectColumn = "research_project_id"
	// LanguageTable is the table that holds the language relation/edge.
	LanguageTable = "research_project_translations"
	// LanguageInverseTable is the table name for the Language entity.
	// It exists in this package in order to avoid circular dependency with the "language" package.
	LanguageInverseTable = "languages"
	// LanguageColumn is the table column denoting the language relation/edge.
	LanguageColumn = "language_code"
)

// Columns holds all SQL columns for researchprojecttranslation fields.
var Columns = []string{
	FieldID,
	FieldResearchProjectID,
	FieldLanguageCode,
	FieldTitle,
	FieldLocation,
	FieldResearchType,
	FieldFundingSource,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// LanguageCodeValidator is a validator for the "language_code" field. It is called by the builders before save.
	LanguageCodeValidator func(string) error
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// LocationValidator is a validator for the "location" field. It is called by the builders before save.
	LocationValidator func(string) error
	// ResearchTypeValidator is a validator for the "research_type" field. It is called by the builders before save.
	ResearchTypeValidator func(string) error
	// FundingSourceValidator is a validator for the "funding_source" field. It is called by the builders before save.
	FundingSourceValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ResearchProjectTranslation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResearchProjectID orders the results by the research_project_id field.
func ByResearchProjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResearchProjectID, opts...).ToFunc()
}

// ByLanguageCode orders the results by the language_code field.
func ByLanguageCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguageCode, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByResearchType orders the results by the research_type field.
func ByResearchType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResearchType, opts...).ToFunc()
}

// ByFundingSource orders the results by the funding_source field.
func ByFundingSource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFundingSource, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByResearchProjectField orders the results by research_project field.
func ByResearchProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResearchProjectStep(), sql.OrderByField(field, opts...))
	}
}

// ByLanguageField orders the results by language field.
func ByLanguageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLanguageStep(), sql.OrderByField(field, opts...))
	}
}
func newResearchProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResearchProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ResearchProjectTable, ResearchProjectColumn),
	)
}
func newLanguageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LanguageInverseTable, LanguageFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LanguageTable, LanguageColumn),
	)
}
