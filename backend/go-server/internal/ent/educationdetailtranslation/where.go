// Code generated by ent, DO NOT EDIT.

package educationdetailtranslation

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldLTE(FieldID, id))
}

// EducationDetailID applies equality check predicate on the "education_detail_id" field. It's identical to EducationDetailIDEQ.
func EducationDetailID(v uuid.UUID) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldEQ(FieldEducationDetailID, v))
}

// LanguageCode applies equality check predicate on the "language_code" field. It's identical to LanguageCodeEQ.
func LanguageCode(v string) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldEQ(FieldLanguageCode, v))
}

// DetailText applies equality check predicate on the "detail_text" field. It's identical to DetailTextEQ.
func DetailText(v string) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldEQ(FieldDetailText, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldEQ(FieldCreatedAt, v))
}

// EducationDetailIDEQ applies the EQ predicate on the "education_detail_id" field.
func EducationDetailIDEQ(v uuid.UUID) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldEQ(FieldEducationDetailID, v))
}

// EducationDetailIDNEQ applies the NEQ predicate on the "education_detail_id" field.
func EducationDetailIDNEQ(v uuid.UUID) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldNEQ(FieldEducationDetailID, v))
}

// EducationDetailIDIn applies the In predicate on the "education_detail_id" field.
func EducationDetailIDIn(vs ...uuid.UUID) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldIn(FieldEducationDetailID, vs...))
}

// EducationDetailIDNotIn applies the NotIn predicate on the "education_detail_id" field.
func EducationDetailIDNotIn(vs ...uuid.UUID) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldNotIn(FieldEducationDetailID, vs...))
}

// LanguageCodeEQ applies the EQ predicate on the "language_code" field.
func LanguageCodeEQ(v string) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldEQ(FieldLanguageCode, v))
}

// LanguageCodeNEQ applies the NEQ predicate on the "language_code" field.
func LanguageCodeNEQ(v string) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldNEQ(FieldLanguageCode, v))
}

// LanguageCodeIn applies the In predicate on the "language_code" field.
func LanguageCodeIn(vs ...string) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldIn(FieldLanguageCode, vs...))
}

// LanguageCodeNotIn applies the NotIn predicate on the "language_code" field.
func LanguageCodeNotIn(vs ...string) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldNotIn(FieldLanguageCode, vs...))
}

// LanguageCodeGT applies the GT predicate on the "language_code" field.
func LanguageCodeGT(v string) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldGT(FieldLanguageCode, v))
}

// LanguageCodeGTE applies the GTE predicate on the "language_code" field.
func LanguageCodeGTE(v string) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldGTE(FieldLanguageCode, v))
}

// LanguageCodeLT applies the LT predicate on the "language_code" field.
func LanguageCodeLT(v string) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldLT(FieldLanguageCode, v))
}

// LanguageCodeLTE applies the LTE predicate on the "language_code" field.
func LanguageCodeLTE(v string) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldLTE(FieldLanguageCode, v))
}

// LanguageCodeContains applies the Contains predicate on the "language_code" field.
func LanguageCodeContains(v string) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldContains(FieldLanguageCode, v))
}

// LanguageCodeHasPrefix applies the HasPrefix predicate on the "language_code" field.
func LanguageCodeHasPrefix(v string) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldHasPrefix(FieldLanguageCode, v))
}

// LanguageCodeHasSuffix applies the HasSuffix predicate on the "language_code" field.
func LanguageCodeHasSuffix(v string) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldHasSuffix(FieldLanguageCode, v))
}

// LanguageCodeEqualFold applies the EqualFold predicate on the "language_code" field.
func LanguageCodeEqualFold(v string) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldEqualFold(FieldLanguageCode, v))
}

// LanguageCodeContainsFold applies the ContainsFold predicate on the "language_code" field.
func LanguageCodeContainsFold(v string) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldContainsFold(FieldLanguageCode, v))
}

// DetailTextEQ applies the EQ predicate on the "detail_text" field.
func DetailTextEQ(v string) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldEQ(FieldDetailText, v))
}

// DetailTextNEQ applies the NEQ predicate on the "detail_text" field.
func DetailTextNEQ(v string) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldNEQ(FieldDetailText, v))
}

// DetailTextIn applies the In predicate on the "detail_text" field.
func DetailTextIn(vs ...string) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldIn(FieldDetailText, vs...))
}

// DetailTextNotIn applies the NotIn predicate on the "detail_text" field.
func DetailTextNotIn(vs ...string) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldNotIn(FieldDetailText, vs...))
}

// DetailTextGT applies the GT predicate on the "detail_text" field.
func DetailTextGT(v string) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldGT(FieldDetailText, v))
}

// DetailTextGTE applies the GTE predicate on the "detail_text" field.
func DetailTextGTE(v string) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldGTE(FieldDetailText, v))
}

// DetailTextLT applies the LT predicate on the "detail_text" field.
func DetailTextLT(v string) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldLT(FieldDetailText, v))
}

// DetailTextLTE applies the LTE predicate on the "detail_text" field.
func DetailTextLTE(v string) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldLTE(FieldDetailText, v))
}

// DetailTextContains applies the Contains predicate on the "detail_text" field.
func DetailTextContains(v string) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldContains(FieldDetailText, v))
}

// DetailTextHasPrefix applies the HasPrefix predicate on the "detail_text" field.
func DetailTextHasPrefix(v string) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldHasPrefix(FieldDetailText, v))
}

// DetailTextHasSuffix applies the HasSuffix predicate on the "detail_text" field.
func DetailTextHasSuffix(v string) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldHasSuffix(FieldDetailText, v))
}

// DetailTextEqualFold applies the EqualFold predicate on the "detail_text" field.
func DetailTextEqualFold(v string) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldEqualFold(FieldDetailText, v))
}

// DetailTextContainsFold applies the ContainsFold predicate on the "detail_text" field.
func DetailTextContainsFold(v string) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldContainsFold(FieldDetailText, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.FieldLTE(FieldCreatedAt, v))
}

// HasEducationDetail applies the HasEdge predicate on the "education_detail" edge.
func HasEducationDetail() predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EducationDetailTable, EducationDetailColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEducationDetailWith applies the HasEdge predicate on the "education_detail" edge with a given conditions (other predicates).
func HasEducationDetailWith(preds ...predicate.EducationDetail) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(func(s *sql.Selector) {
		step := newEducationDetailStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLanguage applies the HasEdge predicate on the "language" edge.
func HasLanguage() predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LanguageTable, LanguageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLanguageWith applies the HasEdge predicate on the "language" edge with a given conditions (other predicates).
func HasLanguageWith(preds ...predicate.Language) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(func(s *sql.Selector) {
		step := newLanguageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EducationDetailTranslation) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EducationDetailTranslation) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EducationDetailTranslation) predicate.EducationDetailTranslation {
	return predicate.EducationDetailTranslation(sql.NotPredicates(p))
}
