// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/education"
	"silan-backend/internal/ent/educationdetail"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// EducationDetail is the model entity for the EducationDetail schema.
type EducationDetail struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// EducationID holds the value of the "education_id" field.
	EducationID uuid.UUID `json:"education_id,omitempty"`
	// DetailText holds the value of the "detail_text" field.
	DetailText string `json:"detail_text,omitempty"`
	// SortOrder holds the value of the "sort_order" field.
	SortOrder int `json:"sort_order,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EducationDetailQuery when eager-loading is set.
	Edges        EducationDetailEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EducationDetailEdges holds the relations/edges for other nodes in the graph.
type EducationDetailEdges struct {
	// Education holds the value of the education edge.
	Education *Education `json:"education,omitempty"`
	// Translations holds the value of the translations edge.
	Translations []*EducationDetailTranslation `json:"translations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EducationOrErr returns the Education value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EducationDetailEdges) EducationOrErr() (*Education, error) {
	if e.Education != nil {
		return e.Education, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: education.Label}
	}
	return nil, &NotLoadedError{edge: "education"}
}

// TranslationsOrErr returns the Translations value or an error if the edge
// was not loaded in eager-loading.
func (e EducationDetailEdges) TranslationsOrErr() ([]*EducationDetailTranslation, error) {
	if e.loadedTypes[1] {
		return e.Translations, nil
	}
	return nil, &NotLoadedError{edge: "translations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EducationDetail) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case educationdetail.FieldSortOrder:
			values[i] = new(sql.NullInt64)
		case educationdetail.FieldDetailText:
			values[i] = new(sql.NullString)
		case educationdetail.FieldCreatedAt, educationdetail.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case educationdetail.FieldID, educationdetail.FieldEducationID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EducationDetail fields.
func (ed *EducationDetail) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case educationdetail.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ed.ID = *value
			}
		case educationdetail.FieldEducationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field education_id", values[i])
			} else if value != nil {
				ed.EducationID = *value
			}
		case educationdetail.FieldDetailText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field detail_text", values[i])
			} else if value.Valid {
				ed.DetailText = value.String
			}
		case educationdetail.FieldSortOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_order", values[i])
			} else if value.Valid {
				ed.SortOrder = int(value.Int64)
			}
		case educationdetail.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ed.CreatedAt = value.Time
			}
		case educationdetail.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ed.UpdatedAt = value.Time
			}
		default:
			ed.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EducationDetail.
// This includes values selected through modifiers, order, etc.
func (ed *EducationDetail) Value(name string) (ent.Value, error) {
	return ed.selectValues.Get(name)
}

// QueryEducation queries the "education" edge of the EducationDetail entity.
func (ed *EducationDetail) QueryEducation() *EducationQuery {
	return NewEducationDetailClient(ed.config).QueryEducation(ed)
}

// QueryTranslations queries the "translations" edge of the EducationDetail entity.
func (ed *EducationDetail) QueryTranslations() *EducationDetailTranslationQuery {
	return NewEducationDetailClient(ed.config).QueryTranslations(ed)
}

// Update returns a builder for updating this EducationDetail.
// Note that you need to call EducationDetail.Unwrap() before calling this method if this EducationDetail
// was returned from a transaction, and the transaction was committed or rolled back.
func (ed *EducationDetail) Update() *EducationDetailUpdateOne {
	return NewEducationDetailClient(ed.config).UpdateOne(ed)
}

// Unwrap unwraps the EducationDetail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ed *EducationDetail) Unwrap() *EducationDetail {
	_tx, ok := ed.config.driver.(*txDriver)
	if !ok {
		panic("ent: EducationDetail is not a transactional entity")
	}
	ed.config.driver = _tx.drv
	return ed
}

// String implements the fmt.Stringer.
func (ed *EducationDetail) String() string {
	var builder strings.Builder
	builder.WriteString("EducationDetail(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ed.ID))
	builder.WriteString("education_id=")
	builder.WriteString(fmt.Sprintf("%v", ed.EducationID))
	builder.WriteString(", ")
	builder.WriteString("detail_text=")
	builder.WriteString(ed.DetailText)
	builder.WriteString(", ")
	builder.WriteString("sort_order=")
	builder.WriteString(fmt.Sprintf("%v", ed.SortOrder))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ed.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ed.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// EducationDetails is a parsable slice of EducationDetail.
type EducationDetails []*EducationDetail
