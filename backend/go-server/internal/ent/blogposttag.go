// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/blogpost"
	"silan-backend/internal/ent/blogposttag"
	"silan-backend/internal/ent/blogtag"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// BlogPostTag is the model entity for the BlogPostTag schema.
type BlogPostTag struct {
	config `json:"-"`
	// BlogPostID holds the value of the "blog_post_id" field.
	BlogPostID uuid.UUID `json:"blog_post_id,omitempty"`
	// BlogTagID holds the value of the "blog_tag_id" field.
	BlogTagID uuid.UUID `json:"blog_tag_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BlogPostTagQuery when eager-loading is set.
	Edges        BlogPostTagEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BlogPostTagEdges holds the relations/edges for other nodes in the graph.
type BlogPostTagEdges struct {
	// BlogPost holds the value of the blog_post edge.
	BlogPost *BlogPost `json:"blog_post,omitempty"`
	// BlogTag holds the value of the blog_tag edge.
	BlogTag *BlogTag `json:"blog_tag,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BlogPostOrErr returns the BlogPost value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlogPostTagEdges) BlogPostOrErr() (*BlogPost, error) {
	if e.BlogPost != nil {
		return e.BlogPost, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: blogpost.Label}
	}
	return nil, &NotLoadedError{edge: "blog_post"}
}

// BlogTagOrErr returns the BlogTag value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlogPostTagEdges) BlogTagOrErr() (*BlogTag, error) {
	if e.BlogTag != nil {
		return e.BlogTag, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: blogtag.Label}
	}
	return nil, &NotLoadedError{edge: "blog_tag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BlogPostTag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case blogposttag.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case blogposttag.FieldBlogPostID, blogposttag.FieldBlogTagID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BlogPostTag fields.
func (bpt *BlogPostTag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case blogposttag.FieldBlogPostID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field blog_post_id", values[i])
			} else if value != nil {
				bpt.BlogPostID = *value
			}
		case blogposttag.FieldBlogTagID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field blog_tag_id", values[i])
			} else if value != nil {
				bpt.BlogTagID = *value
			}
		case blogposttag.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bpt.CreatedAt = value.Time
			}
		default:
			bpt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BlogPostTag.
// This includes values selected through modifiers, order, etc.
func (bpt *BlogPostTag) Value(name string) (ent.Value, error) {
	return bpt.selectValues.Get(name)
}

// QueryBlogPost queries the "blog_post" edge of the BlogPostTag entity.
func (bpt *BlogPostTag) QueryBlogPost() *BlogPostQuery {
	return NewBlogPostTagClient(bpt.config).QueryBlogPost(bpt)
}

// QueryBlogTag queries the "blog_tag" edge of the BlogPostTag entity.
func (bpt *BlogPostTag) QueryBlogTag() *BlogTagQuery {
	return NewBlogPostTagClient(bpt.config).QueryBlogTag(bpt)
}

// Update returns a builder for updating this BlogPostTag.
// Note that you need to call BlogPostTag.Unwrap() before calling this method if this BlogPostTag
// was returned from a transaction, and the transaction was committed or rolled back.
func (bpt *BlogPostTag) Update() *BlogPostTagUpdateOne {
	return NewBlogPostTagClient(bpt.config).UpdateOne(bpt)
}

// Unwrap unwraps the BlogPostTag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bpt *BlogPostTag) Unwrap() *BlogPostTag {
	_tx, ok := bpt.config.driver.(*txDriver)
	if !ok {
		panic("ent: BlogPostTag is not a transactional entity")
	}
	bpt.config.driver = _tx.drv
	return bpt
}

// String implements the fmt.Stringer.
func (bpt *BlogPostTag) String() string {
	var builder strings.Builder
	builder.WriteString("BlogPostTag(")
	builder.WriteString("blog_post_id=")
	builder.WriteString(fmt.Sprintf("%v", bpt.BlogPostID))
	builder.WriteString(", ")
	builder.WriteString("blog_tag_id=")
	builder.WriteString(fmt.Sprintf("%v", bpt.BlogTagID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(bpt.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BlogPostTags is a parsable slice of BlogPostTag.
type BlogPostTags []*BlogPostTag
