// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/blogpost"
	"silan-backend/internal/ent/blogposttag"
	"silan-backend/internal/ent/blogtag"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BlogPostTagCreate is the builder for creating a BlogPostTag entity.
type BlogPostTagCreate struct {
	config
	mutation *BlogPostTagMutation
	hooks    []Hook
}

// SetBlogPostID sets the "blog_post_id" field.
func (bptc *BlogPostTagCreate) SetBlogPostID(u uuid.UUID) *BlogPostTagCreate {
	bptc.mutation.SetBlogPostID(u)
	return bptc
}

// SetBlogTagID sets the "blog_tag_id" field.
func (bptc *BlogPostTagCreate) SetBlogTagID(u uuid.UUID) *BlogPostTagCreate {
	bptc.mutation.SetBlogTagID(u)
	return bptc
}

// SetCreatedAt sets the "created_at" field.
func (bptc *BlogPostTagCreate) SetCreatedAt(t time.Time) *BlogPostTagCreate {
	bptc.mutation.SetCreatedAt(t)
	return bptc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bptc *BlogPostTagCreate) SetNillableCreatedAt(t *time.Time) *BlogPostTagCreate {
	if t != nil {
		bptc.SetCreatedAt(*t)
	}
	return bptc
}

// SetBlogPost sets the "blog_post" edge to the BlogPost entity.
func (bptc *BlogPostTagCreate) SetBlogPost(b *BlogPost) *BlogPostTagCreate {
	return bptc.SetBlogPostID(b.ID)
}

// SetBlogTag sets the "blog_tag" edge to the BlogTag entity.
func (bptc *BlogPostTagCreate) SetBlogTag(b *BlogTag) *BlogPostTagCreate {
	return bptc.SetBlogTagID(b.ID)
}

// Mutation returns the BlogPostTagMutation object of the builder.
func (bptc *BlogPostTagCreate) Mutation() *BlogPostTagMutation {
	return bptc.mutation
}

// Save creates the BlogPostTag in the database.
func (bptc *BlogPostTagCreate) Save(ctx context.Context) (*BlogPostTag, error) {
	bptc.defaults()
	return withHooks(ctx, bptc.sqlSave, bptc.mutation, bptc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bptc *BlogPostTagCreate) SaveX(ctx context.Context) *BlogPostTag {
	v, err := bptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bptc *BlogPostTagCreate) Exec(ctx context.Context) error {
	_, err := bptc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bptc *BlogPostTagCreate) ExecX(ctx context.Context) {
	if err := bptc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bptc *BlogPostTagCreate) defaults() {
	if _, ok := bptc.mutation.CreatedAt(); !ok {
		v := blogposttag.DefaultCreatedAt()
		bptc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bptc *BlogPostTagCreate) check() error {
	if _, ok := bptc.mutation.BlogPostID(); !ok {
		return &ValidationError{Name: "blog_post_id", err: errors.New(`ent: missing required field "BlogPostTag.blog_post_id"`)}
	}
	if _, ok := bptc.mutation.BlogTagID(); !ok {
		return &ValidationError{Name: "blog_tag_id", err: errors.New(`ent: missing required field "BlogPostTag.blog_tag_id"`)}
	}
	if _, ok := bptc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlogPostTag.created_at"`)}
	}
	if len(bptc.mutation.BlogPostIDs()) == 0 {
		return &ValidationError{Name: "blog_post", err: errors.New(`ent: missing required edge "BlogPostTag.blog_post"`)}
	}
	if len(bptc.mutation.BlogTagIDs()) == 0 {
		return &ValidationError{Name: "blog_tag", err: errors.New(`ent: missing required edge "BlogPostTag.blog_tag"`)}
	}
	return nil
}

func (bptc *BlogPostTagCreate) sqlSave(ctx context.Context) (*BlogPostTag, error) {
	if err := bptc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bptc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (bptc *BlogPostTagCreate) createSpec() (*BlogPostTag, *sqlgraph.CreateSpec) {
	var (
		_node = &BlogPostTag{config: bptc.config}
		_spec = sqlgraph.NewCreateSpec(blogposttag.Table, nil)
	)
	if value, ok := bptc.mutation.CreatedAt(); ok {
		_spec.SetField(blogposttag.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := bptc.mutation.BlogPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   blogposttag.BlogPostTable,
			Columns: []string{blogposttag.BlogPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BlogPostID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bptc.mutation.BlogTagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   blogposttag.BlogTagTable,
			Columns: []string{blogposttag.BlogTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogtag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BlogTagID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BlogPostTagCreateBulk is the builder for creating many BlogPostTag entities in bulk.
type BlogPostTagCreateBulk struct {
	config
	err      error
	builders []*BlogPostTagCreate
}

// Save creates the BlogPostTag entities in the database.
func (bptcb *BlogPostTagCreateBulk) Save(ctx context.Context) ([]*BlogPostTag, error) {
	if bptcb.err != nil {
		return nil, bptcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bptcb.builders))
	nodes := make([]*BlogPostTag, len(bptcb.builders))
	mutators := make([]Mutator, len(bptcb.builders))
	for i := range bptcb.builders {
		func(i int, root context.Context) {
			builder := bptcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlogPostTagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bptcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bptcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bptcb *BlogPostTagCreateBulk) SaveX(ctx context.Context) []*BlogPostTag {
	v, err := bptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bptcb *BlogPostTagCreateBulk) Exec(ctx context.Context) error {
	_, err := bptcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bptcb *BlogPostTagCreateBulk) ExecX(ctx context.Context) {
	if err := bptcb.Exec(ctx); err != nil {
		panic(err)
	}
}
