// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/recentupdate"
	"silan-backend/internal/ent/recentupdatetranslation"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// RecentUpdateTranslationUpdate is the builder for updating RecentUpdateTranslation entities.
type RecentUpdateTranslationUpdate struct {
	config
	hooks    []Hook
	mutation *RecentUpdateTranslationMutation
}

// Where appends a list predicates to the RecentUpdateTranslationUpdate builder.
func (rutu *RecentUpdateTranslationUpdate) Where(ps ...predicate.RecentUpdateTranslation) *RecentUpdateTranslationUpdate {
	rutu.mutation.Where(ps...)
	return rutu
}

// SetRecentUpdateID sets the "recent_update_id" field.
func (rutu *RecentUpdateTranslationUpdate) SetRecentUpdateID(u uuid.UUID) *RecentUpdateTranslationUpdate {
	rutu.mutation.SetRecentUpdateID(u)
	return rutu
}

// SetNillableRecentUpdateID sets the "recent_update_id" field if the given value is not nil.
func (rutu *RecentUpdateTranslationUpdate) SetNillableRecentUpdateID(u *uuid.UUID) *RecentUpdateTranslationUpdate {
	if u != nil {
		rutu.SetRecentUpdateID(*u)
	}
	return rutu
}

// SetLanguageCode sets the "language_code" field.
func (rutu *RecentUpdateTranslationUpdate) SetLanguageCode(s string) *RecentUpdateTranslationUpdate {
	rutu.mutation.SetLanguageCode(s)
	return rutu
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (rutu *RecentUpdateTranslationUpdate) SetNillableLanguageCode(s *string) *RecentUpdateTranslationUpdate {
	if s != nil {
		rutu.SetLanguageCode(*s)
	}
	return rutu
}

// SetTitle sets the "title" field.
func (rutu *RecentUpdateTranslationUpdate) SetTitle(s string) *RecentUpdateTranslationUpdate {
	rutu.mutation.SetTitle(s)
	return rutu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (rutu *RecentUpdateTranslationUpdate) SetNillableTitle(s *string) *RecentUpdateTranslationUpdate {
	if s != nil {
		rutu.SetTitle(*s)
	}
	return rutu
}

// SetDescription sets the "description" field.
func (rutu *RecentUpdateTranslationUpdate) SetDescription(s string) *RecentUpdateTranslationUpdate {
	rutu.mutation.SetDescription(s)
	return rutu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rutu *RecentUpdateTranslationUpdate) SetNillableDescription(s *string) *RecentUpdateTranslationUpdate {
	if s != nil {
		rutu.SetDescription(*s)
	}
	return rutu
}

// SetRecentUpdate sets the "recent_update" edge to the RecentUpdate entity.
func (rutu *RecentUpdateTranslationUpdate) SetRecentUpdate(r *RecentUpdate) *RecentUpdateTranslationUpdate {
	return rutu.SetRecentUpdateID(r.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (rutu *RecentUpdateTranslationUpdate) SetLanguageID(id string) *RecentUpdateTranslationUpdate {
	rutu.mutation.SetLanguageID(id)
	return rutu
}

// SetLanguage sets the "language" edge to the Language entity.
func (rutu *RecentUpdateTranslationUpdate) SetLanguage(l *Language) *RecentUpdateTranslationUpdate {
	return rutu.SetLanguageID(l.ID)
}

// Mutation returns the RecentUpdateTranslationMutation object of the builder.
func (rutu *RecentUpdateTranslationUpdate) Mutation() *RecentUpdateTranslationMutation {
	return rutu.mutation
}

// ClearRecentUpdate clears the "recent_update" edge to the RecentUpdate entity.
func (rutu *RecentUpdateTranslationUpdate) ClearRecentUpdate() *RecentUpdateTranslationUpdate {
	rutu.mutation.ClearRecentUpdate()
	return rutu
}

// ClearLanguage clears the "language" edge to the Language entity.
func (rutu *RecentUpdateTranslationUpdate) ClearLanguage() *RecentUpdateTranslationUpdate {
	rutu.mutation.ClearLanguage()
	return rutu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rutu *RecentUpdateTranslationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rutu.sqlSave, rutu.mutation, rutu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rutu *RecentUpdateTranslationUpdate) SaveX(ctx context.Context) int {
	affected, err := rutu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rutu *RecentUpdateTranslationUpdate) Exec(ctx context.Context) error {
	_, err := rutu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rutu *RecentUpdateTranslationUpdate) ExecX(ctx context.Context) {
	if err := rutu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rutu *RecentUpdateTranslationUpdate) check() error {
	if v, ok := rutu.mutation.LanguageCode(); ok {
		if err := recentupdatetranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "RecentUpdateTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := rutu.mutation.Title(); ok {
		if err := recentupdatetranslation.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "RecentUpdateTranslation.title": %w`, err)}
		}
	}
	if v, ok := rutu.mutation.Description(); ok {
		if err := recentupdatetranslation.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "RecentUpdateTranslation.description": %w`, err)}
		}
	}
	if rutu.mutation.RecentUpdateCleared() && len(rutu.mutation.RecentUpdateIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RecentUpdateTranslation.recent_update"`)
	}
	if rutu.mutation.LanguageCleared() && len(rutu.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RecentUpdateTranslation.language"`)
	}
	return nil
}

func (rutu *RecentUpdateTranslationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rutu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(recentupdatetranslation.Table, recentupdatetranslation.Columns, sqlgraph.NewFieldSpec(recentupdatetranslation.FieldID, field.TypeUUID))
	if ps := rutu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rutu.mutation.Title(); ok {
		_spec.SetField(recentupdatetranslation.FieldTitle, field.TypeString, value)
	}
	if value, ok := rutu.mutation.Description(); ok {
		_spec.SetField(recentupdatetranslation.FieldDescription, field.TypeString, value)
	}
	if rutu.mutation.RecentUpdateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recentupdatetranslation.RecentUpdateTable,
			Columns: []string{recentupdatetranslation.RecentUpdateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recentupdate.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rutu.mutation.RecentUpdateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recentupdatetranslation.RecentUpdateTable,
			Columns: []string{recentupdatetranslation.RecentUpdateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recentupdate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rutu.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recentupdatetranslation.LanguageTable,
			Columns: []string{recentupdatetranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rutu.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recentupdatetranslation.LanguageTable,
			Columns: []string{recentupdatetranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rutu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recentupdatetranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rutu.mutation.done = true
	return n, nil
}

// RecentUpdateTranslationUpdateOne is the builder for updating a single RecentUpdateTranslation entity.
type RecentUpdateTranslationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RecentUpdateTranslationMutation
}

// SetRecentUpdateID sets the "recent_update_id" field.
func (rutuo *RecentUpdateTranslationUpdateOne) SetRecentUpdateID(u uuid.UUID) *RecentUpdateTranslationUpdateOne {
	rutuo.mutation.SetRecentUpdateID(u)
	return rutuo
}

// SetNillableRecentUpdateID sets the "recent_update_id" field if the given value is not nil.
func (rutuo *RecentUpdateTranslationUpdateOne) SetNillableRecentUpdateID(u *uuid.UUID) *RecentUpdateTranslationUpdateOne {
	if u != nil {
		rutuo.SetRecentUpdateID(*u)
	}
	return rutuo
}

// SetLanguageCode sets the "language_code" field.
func (rutuo *RecentUpdateTranslationUpdateOne) SetLanguageCode(s string) *RecentUpdateTranslationUpdateOne {
	rutuo.mutation.SetLanguageCode(s)
	return rutuo
}

// SetNillableLanguageCode sets the "language_code" field if the given value is not nil.
func (rutuo *RecentUpdateTranslationUpdateOne) SetNillableLanguageCode(s *string) *RecentUpdateTranslationUpdateOne {
	if s != nil {
		rutuo.SetLanguageCode(*s)
	}
	return rutuo
}

// SetTitle sets the "title" field.
func (rutuo *RecentUpdateTranslationUpdateOne) SetTitle(s string) *RecentUpdateTranslationUpdateOne {
	rutuo.mutation.SetTitle(s)
	return rutuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (rutuo *RecentUpdateTranslationUpdateOne) SetNillableTitle(s *string) *RecentUpdateTranslationUpdateOne {
	if s != nil {
		rutuo.SetTitle(*s)
	}
	return rutuo
}

// SetDescription sets the "description" field.
func (rutuo *RecentUpdateTranslationUpdateOne) SetDescription(s string) *RecentUpdateTranslationUpdateOne {
	rutuo.mutation.SetDescription(s)
	return rutuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rutuo *RecentUpdateTranslationUpdateOne) SetNillableDescription(s *string) *RecentUpdateTranslationUpdateOne {
	if s != nil {
		rutuo.SetDescription(*s)
	}
	return rutuo
}

// SetRecentUpdate sets the "recent_update" edge to the RecentUpdate entity.
func (rutuo *RecentUpdateTranslationUpdateOne) SetRecentUpdate(r *RecentUpdate) *RecentUpdateTranslationUpdateOne {
	return rutuo.SetRecentUpdateID(r.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (rutuo *RecentUpdateTranslationUpdateOne) SetLanguageID(id string) *RecentUpdateTranslationUpdateOne {
	rutuo.mutation.SetLanguageID(id)
	return rutuo
}

// SetLanguage sets the "language" edge to the Language entity.
func (rutuo *RecentUpdateTranslationUpdateOne) SetLanguage(l *Language) *RecentUpdateTranslationUpdateOne {
	return rutuo.SetLanguageID(l.ID)
}

// Mutation returns the RecentUpdateTranslationMutation object of the builder.
func (rutuo *RecentUpdateTranslationUpdateOne) Mutation() *RecentUpdateTranslationMutation {
	return rutuo.mutation
}

// ClearRecentUpdate clears the "recent_update" edge to the RecentUpdate entity.
func (rutuo *RecentUpdateTranslationUpdateOne) ClearRecentUpdate() *RecentUpdateTranslationUpdateOne {
	rutuo.mutation.ClearRecentUpdate()
	return rutuo
}

// ClearLanguage clears the "language" edge to the Language entity.
func (rutuo *RecentUpdateTranslationUpdateOne) ClearLanguage() *RecentUpdateTranslationUpdateOne {
	rutuo.mutation.ClearLanguage()
	return rutuo
}

// Where appends a list predicates to the RecentUpdateTranslationUpdate builder.
func (rutuo *RecentUpdateTranslationUpdateOne) Where(ps ...predicate.RecentUpdateTranslation) *RecentUpdateTranslationUpdateOne {
	rutuo.mutation.Where(ps...)
	return rutuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rutuo *RecentUpdateTranslationUpdateOne) Select(field string, fields ...string) *RecentUpdateTranslationUpdateOne {
	rutuo.fields = append([]string{field}, fields...)
	return rutuo
}

// Save executes the query and returns the updated RecentUpdateTranslation entity.
func (rutuo *RecentUpdateTranslationUpdateOne) Save(ctx context.Context) (*RecentUpdateTranslation, error) {
	return withHooks(ctx, rutuo.sqlSave, rutuo.mutation, rutuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rutuo *RecentUpdateTranslationUpdateOne) SaveX(ctx context.Context) *RecentUpdateTranslation {
	node, err := rutuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rutuo *RecentUpdateTranslationUpdateOne) Exec(ctx context.Context) error {
	_, err := rutuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rutuo *RecentUpdateTranslationUpdateOne) ExecX(ctx context.Context) {
	if err := rutuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rutuo *RecentUpdateTranslationUpdateOne) check() error {
	if v, ok := rutuo.mutation.LanguageCode(); ok {
		if err := recentupdatetranslation.LanguageCodeValidator(v); err != nil {
			return &ValidationError{Name: "language_code", err: fmt.Errorf(`ent: validator failed for field "RecentUpdateTranslation.language_code": %w`, err)}
		}
	}
	if v, ok := rutuo.mutation.Title(); ok {
		if err := recentupdatetranslation.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "RecentUpdateTranslation.title": %w`, err)}
		}
	}
	if v, ok := rutuo.mutation.Description(); ok {
		if err := recentupdatetranslation.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "RecentUpdateTranslation.description": %w`, err)}
		}
	}
	if rutuo.mutation.RecentUpdateCleared() && len(rutuo.mutation.RecentUpdateIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RecentUpdateTranslation.recent_update"`)
	}
	if rutuo.mutation.LanguageCleared() && len(rutuo.mutation.LanguageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RecentUpdateTranslation.language"`)
	}
	return nil
}

func (rutuo *RecentUpdateTranslationUpdateOne) sqlSave(ctx context.Context) (_node *RecentUpdateTranslation, err error) {
	if err := rutuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(recentupdatetranslation.Table, recentupdatetranslation.Columns, sqlgraph.NewFieldSpec(recentupdatetranslation.FieldID, field.TypeUUID))
	id, ok := rutuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RecentUpdateTranslation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rutuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recentupdatetranslation.FieldID)
		for _, f := range fields {
			if !recentupdatetranslation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != recentupdatetranslation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rutuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rutuo.mutation.Title(); ok {
		_spec.SetField(recentupdatetranslation.FieldTitle, field.TypeString, value)
	}
	if value, ok := rutuo.mutation.Description(); ok {
		_spec.SetField(recentupdatetranslation.FieldDescription, field.TypeString, value)
	}
	if rutuo.mutation.RecentUpdateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recentupdatetranslation.RecentUpdateTable,
			Columns: []string{recentupdatetranslation.RecentUpdateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recentupdate.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rutuo.mutation.RecentUpdateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recentupdatetranslation.RecentUpdateTable,
			Columns: []string{recentupdatetranslation.RecentUpdateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recentupdate.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rutuo.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recentupdatetranslation.LanguageTable,
			Columns: []string{recentupdatetranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rutuo.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recentupdatetranslation.LanguageTable,
			Columns: []string{recentupdatetranslation.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RecentUpdateTranslation{config: rutuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rutuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recentupdatetranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rutuo.mutation.done = true
	return _node, nil
}
