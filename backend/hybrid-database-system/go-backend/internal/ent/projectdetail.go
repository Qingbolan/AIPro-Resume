// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/projectdetail"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ProjectDetail is the model entity for the ProjectDetail schema.
type ProjectDetail struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ProjectID holds the value of the "project_id" field.
	ProjectID uuid.UUID `json:"project_id,omitempty"`
	// FullDescription holds the value of the "full_description" field.
	FullDescription string `json:"full_description,omitempty"`
	// Features holds the value of the "features" field.
	Features []string `json:"features,omitempty"`
	// KeyAchievements holds the value of the "key_achievements" field.
	KeyAchievements []string `json:"key_achievements,omitempty"`
	// ChallengesFaced holds the value of the "challenges_faced" field.
	ChallengesFaced []string `json:"challenges_faced,omitempty"`
	// LessonsLearned holds the value of the "lessons_learned" field.
	LessonsLearned []string `json:"lessons_learned,omitempty"`
	// TechnicalOverview holds the value of the "technical_overview" field.
	TechnicalOverview string `json:"technical_overview,omitempty"`
	// InstallationInstructions holds the value of the "installation_instructions" field.
	InstallationInstructions string `json:"installation_instructions,omitempty"`
	// UsageInstructions holds the value of the "usage_instructions" field.
	UsageInstructions string `json:"usage_instructions,omitempty"`
	// APIDocumentation holds the value of the "api_documentation" field.
	APIDocumentation string `json:"api_documentation,omitempty"`
	// DeploymentNotes holds the value of the "deployment_notes" field.
	DeploymentNotes string `json:"deployment_notes,omitempty"`
	// FutureEnhancements holds the value of the "future_enhancements" field.
	FutureEnhancements string `json:"future_enhancements,omitempty"`
	// TeamMembers holds the value of the "team_members" field.
	TeamMembers []string `json:"team_members,omitempty"`
	// ProjectDuration holds the value of the "project_duration" field.
	ProjectDuration string `json:"project_duration,omitempty"`
	// TargetAudience holds the value of the "target_audience" field.
	TargetAudience string `json:"target_audience,omitempty"`
	// PerformanceMetrics holds the value of the "performance_metrics" field.
	PerformanceMetrics map[string]interface{} `json:"performance_metrics,omitempty"`
	// TestingApproach holds the value of the "testing_approach" field.
	TestingApproach map[string]interface{} `json:"testing_approach,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectDetailQuery when eager-loading is set.
	Edges          ProjectDetailEdges `json:"edges"`
	project_detail *uuid.UUID
	selectValues   sql.SelectValues
}

// ProjectDetailEdges holds the relations/edges for other nodes in the graph.
type ProjectDetailEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectDetailEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectDetail) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case projectdetail.FieldFeatures, projectdetail.FieldKeyAchievements, projectdetail.FieldChallengesFaced, projectdetail.FieldLessonsLearned, projectdetail.FieldTeamMembers, projectdetail.FieldPerformanceMetrics, projectdetail.FieldTestingApproach:
			values[i] = new([]byte)
		case projectdetail.FieldFullDescription, projectdetail.FieldTechnicalOverview, projectdetail.FieldInstallationInstructions, projectdetail.FieldUsageInstructions, projectdetail.FieldAPIDocumentation, projectdetail.FieldDeploymentNotes, projectdetail.FieldFutureEnhancements, projectdetail.FieldProjectDuration, projectdetail.FieldTargetAudience:
			values[i] = new(sql.NullString)
		case projectdetail.FieldCreatedAt, projectdetail.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case projectdetail.FieldID, projectdetail.FieldProjectID:
			values[i] = new(uuid.UUID)
		case projectdetail.ForeignKeys[0]: // project_detail
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectDetail fields.
func (pd *ProjectDetail) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projectdetail.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pd.ID = *value
			}
		case projectdetail.FieldProjectID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value != nil {
				pd.ProjectID = *value
			}
		case projectdetail.FieldFullDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field full_description", values[i])
			} else if value.Valid {
				pd.FullDescription = value.String
			}
		case projectdetail.FieldFeatures:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field features", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pd.Features); err != nil {
					return fmt.Errorf("unmarshal field features: %w", err)
				}
			}
		case projectdetail.FieldKeyAchievements:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field key_achievements", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pd.KeyAchievements); err != nil {
					return fmt.Errorf("unmarshal field key_achievements: %w", err)
				}
			}
		case projectdetail.FieldChallengesFaced:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field challenges_faced", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pd.ChallengesFaced); err != nil {
					return fmt.Errorf("unmarshal field challenges_faced: %w", err)
				}
			}
		case projectdetail.FieldLessonsLearned:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field lessons_learned", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pd.LessonsLearned); err != nil {
					return fmt.Errorf("unmarshal field lessons_learned: %w", err)
				}
			}
		case projectdetail.FieldTechnicalOverview:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field technical_overview", values[i])
			} else if value.Valid {
				pd.TechnicalOverview = value.String
			}
		case projectdetail.FieldInstallationInstructions:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field installation_instructions", values[i])
			} else if value.Valid {
				pd.InstallationInstructions = value.String
			}
		case projectdetail.FieldUsageInstructions:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field usage_instructions", values[i])
			} else if value.Valid {
				pd.UsageInstructions = value.String
			}
		case projectdetail.FieldAPIDocumentation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_documentation", values[i])
			} else if value.Valid {
				pd.APIDocumentation = value.String
			}
		case projectdetail.FieldDeploymentNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deployment_notes", values[i])
			} else if value.Valid {
				pd.DeploymentNotes = value.String
			}
		case projectdetail.FieldFutureEnhancements:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field future_enhancements", values[i])
			} else if value.Valid {
				pd.FutureEnhancements = value.String
			}
		case projectdetail.FieldTeamMembers:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field team_members", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pd.TeamMembers); err != nil {
					return fmt.Errorf("unmarshal field team_members: %w", err)
				}
			}
		case projectdetail.FieldProjectDuration:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_duration", values[i])
			} else if value.Valid {
				pd.ProjectDuration = value.String
			}
		case projectdetail.FieldTargetAudience:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target_audience", values[i])
			} else if value.Valid {
				pd.TargetAudience = value.String
			}
		case projectdetail.FieldPerformanceMetrics:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field performance_metrics", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pd.PerformanceMetrics); err != nil {
					return fmt.Errorf("unmarshal field performance_metrics: %w", err)
				}
			}
		case projectdetail.FieldTestingApproach:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field testing_approach", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pd.TestingApproach); err != nil {
					return fmt.Errorf("unmarshal field testing_approach: %w", err)
				}
			}
		case projectdetail.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pd.CreatedAt = value.Time
			}
		case projectdetail.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pd.UpdatedAt = value.Time
			}
		case projectdetail.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field project_detail", values[i])
			} else if value.Valid {
				pd.project_detail = new(uuid.UUID)
				*pd.project_detail = *value.S.(*uuid.UUID)
			}
		default:
			pd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProjectDetail.
// This includes values selected through modifiers, order, etc.
func (pd *ProjectDetail) Value(name string) (ent.Value, error) {
	return pd.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the ProjectDetail entity.
func (pd *ProjectDetail) QueryProject() *ProjectQuery {
	return NewProjectDetailClient(pd.config).QueryProject(pd)
}

// Update returns a builder for updating this ProjectDetail.
// Note that you need to call ProjectDetail.Unwrap() before calling this method if this ProjectDetail
// was returned from a transaction, and the transaction was committed or rolled back.
func (pd *ProjectDetail) Update() *ProjectDetailUpdateOne {
	return NewProjectDetailClient(pd.config).UpdateOne(pd)
}

// Unwrap unwraps the ProjectDetail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pd *ProjectDetail) Unwrap() *ProjectDetail {
	_tx, ok := pd.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProjectDetail is not a transactional entity")
	}
	pd.config.driver = _tx.drv
	return pd
}

// String implements the fmt.Stringer.
func (pd *ProjectDetail) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectDetail(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pd.ID))
	builder.WriteString("project_id=")
	builder.WriteString(fmt.Sprintf("%v", pd.ProjectID))
	builder.WriteString(", ")
	builder.WriteString("full_description=")
	builder.WriteString(pd.FullDescription)
	builder.WriteString(", ")
	builder.WriteString("features=")
	builder.WriteString(fmt.Sprintf("%v", pd.Features))
	builder.WriteString(", ")
	builder.WriteString("key_achievements=")
	builder.WriteString(fmt.Sprintf("%v", pd.KeyAchievements))
	builder.WriteString(", ")
	builder.WriteString("challenges_faced=")
	builder.WriteString(fmt.Sprintf("%v", pd.ChallengesFaced))
	builder.WriteString(", ")
	builder.WriteString("lessons_learned=")
	builder.WriteString(fmt.Sprintf("%v", pd.LessonsLearned))
	builder.WriteString(", ")
	builder.WriteString("technical_overview=")
	builder.WriteString(pd.TechnicalOverview)
	builder.WriteString(", ")
	builder.WriteString("installation_instructions=")
	builder.WriteString(pd.InstallationInstructions)
	builder.WriteString(", ")
	builder.WriteString("usage_instructions=")
	builder.WriteString(pd.UsageInstructions)
	builder.WriteString(", ")
	builder.WriteString("api_documentation=")
	builder.WriteString(pd.APIDocumentation)
	builder.WriteString(", ")
	builder.WriteString("deployment_notes=")
	builder.WriteString(pd.DeploymentNotes)
	builder.WriteString(", ")
	builder.WriteString("future_enhancements=")
	builder.WriteString(pd.FutureEnhancements)
	builder.WriteString(", ")
	builder.WriteString("team_members=")
	builder.WriteString(fmt.Sprintf("%v", pd.TeamMembers))
	builder.WriteString(", ")
	builder.WriteString("project_duration=")
	builder.WriteString(pd.ProjectDuration)
	builder.WriteString(", ")
	builder.WriteString("target_audience=")
	builder.WriteString(pd.TargetAudience)
	builder.WriteString(", ")
	builder.WriteString("performance_metrics=")
	builder.WriteString(fmt.Sprintf("%v", pd.PerformanceMetrics))
	builder.WriteString(", ")
	builder.WriteString("testing_approach=")
	builder.WriteString(fmt.Sprintf("%v", pd.TestingApproach))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pd.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProjectDetails is a parsable slice of ProjectDetail.
type ProjectDetails []*ProjectDetail
