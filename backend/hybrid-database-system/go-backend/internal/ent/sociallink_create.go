// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/sociallink"
	"silan-backend/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SocialLinkCreate is the builder for creating a SocialLink entity.
type SocialLinkCreate struct {
	config
	mutation *SocialLinkMutation
	hooks    []Hook
}

// SetPlatform sets the "platform" field.
func (slc *SocialLinkCreate) SetPlatform(s string) *SocialLinkCreate {
	slc.mutation.SetPlatform(s)
	return slc
}

// SetURL sets the "url" field.
func (slc *SocialLinkCreate) SetURL(s string) *SocialLinkCreate {
	slc.mutation.SetURL(s)
	return slc
}

// SetUsername sets the "username" field.
func (slc *SocialLinkCreate) SetUsername(s string) *SocialLinkCreate {
	slc.mutation.SetUsername(s)
	return slc
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (slc *SocialLinkCreate) SetNillableUsername(s *string) *SocialLinkCreate {
	if s != nil {
		slc.SetUsername(*s)
	}
	return slc
}

// SetDisplayName sets the "display_name" field.
func (slc *SocialLinkCreate) SetDisplayName(s string) *SocialLinkCreate {
	slc.mutation.SetDisplayName(s)
	return slc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (slc *SocialLinkCreate) SetNillableDisplayName(s *string) *SocialLinkCreate {
	if s != nil {
		slc.SetDisplayName(*s)
	}
	return slc
}

// SetIsPublic sets the "is_public" field.
func (slc *SocialLinkCreate) SetIsPublic(b bool) *SocialLinkCreate {
	slc.mutation.SetIsPublic(b)
	return slc
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (slc *SocialLinkCreate) SetNillableIsPublic(b *bool) *SocialLinkCreate {
	if b != nil {
		slc.SetIsPublic(*b)
	}
	return slc
}

// SetOrder sets the "order" field.
func (slc *SocialLinkCreate) SetOrder(i int) *SocialLinkCreate {
	slc.mutation.SetOrder(i)
	return slc
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (slc *SocialLinkCreate) SetNillableOrder(i *int) *SocialLinkCreate {
	if i != nil {
		slc.SetOrder(*i)
	}
	return slc
}

// SetCreatedAt sets the "created_at" field.
func (slc *SocialLinkCreate) SetCreatedAt(t time.Time) *SocialLinkCreate {
	slc.mutation.SetCreatedAt(t)
	return slc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (slc *SocialLinkCreate) SetNillableCreatedAt(t *time.Time) *SocialLinkCreate {
	if t != nil {
		slc.SetCreatedAt(*t)
	}
	return slc
}

// SetUpdatedAt sets the "updated_at" field.
func (slc *SocialLinkCreate) SetUpdatedAt(t time.Time) *SocialLinkCreate {
	slc.mutation.SetUpdatedAt(t)
	return slc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (slc *SocialLinkCreate) SetNillableUpdatedAt(t *time.Time) *SocialLinkCreate {
	if t != nil {
		slc.SetUpdatedAt(*t)
	}
	return slc
}

// SetID sets the "id" field.
func (slc *SocialLinkCreate) SetID(u uuid.UUID) *SocialLinkCreate {
	slc.mutation.SetID(u)
	return slc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (slc *SocialLinkCreate) SetNillableID(u *uuid.UUID) *SocialLinkCreate {
	if u != nil {
		slc.SetID(*u)
	}
	return slc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (slc *SocialLinkCreate) SetUserID(id uuid.UUID) *SocialLinkCreate {
	slc.mutation.SetUserID(id)
	return slc
}

// SetUser sets the "user" edge to the User entity.
func (slc *SocialLinkCreate) SetUser(u *User) *SocialLinkCreate {
	return slc.SetUserID(u.ID)
}

// Mutation returns the SocialLinkMutation object of the builder.
func (slc *SocialLinkCreate) Mutation() *SocialLinkMutation {
	return slc.mutation
}

// Save creates the SocialLink in the database.
func (slc *SocialLinkCreate) Save(ctx context.Context) (*SocialLink, error) {
	slc.defaults()
	return withHooks(ctx, slc.sqlSave, slc.mutation, slc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (slc *SocialLinkCreate) SaveX(ctx context.Context) *SocialLink {
	v, err := slc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (slc *SocialLinkCreate) Exec(ctx context.Context) error {
	_, err := slc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slc *SocialLinkCreate) ExecX(ctx context.Context) {
	if err := slc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (slc *SocialLinkCreate) defaults() {
	if _, ok := slc.mutation.IsPublic(); !ok {
		v := sociallink.DefaultIsPublic
		slc.mutation.SetIsPublic(v)
	}
	if _, ok := slc.mutation.Order(); !ok {
		v := sociallink.DefaultOrder
		slc.mutation.SetOrder(v)
	}
	if _, ok := slc.mutation.CreatedAt(); !ok {
		v := sociallink.DefaultCreatedAt()
		slc.mutation.SetCreatedAt(v)
	}
	if _, ok := slc.mutation.UpdatedAt(); !ok {
		v := sociallink.DefaultUpdatedAt()
		slc.mutation.SetUpdatedAt(v)
	}
	if _, ok := slc.mutation.ID(); !ok {
		v := sociallink.DefaultID()
		slc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (slc *SocialLinkCreate) check() error {
	if _, ok := slc.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`ent: missing required field "SocialLink.platform"`)}
	}
	if v, ok := slc.mutation.Platform(); ok {
		if err := sociallink.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "SocialLink.platform": %w`, err)}
		}
	}
	if _, ok := slc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "SocialLink.url"`)}
	}
	if v, ok := slc.mutation.URL(); ok {
		if err := sociallink.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "SocialLink.url": %w`, err)}
		}
	}
	if v, ok := slc.mutation.Username(); ok {
		if err := sociallink.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "SocialLink.username": %w`, err)}
		}
	}
	if v, ok := slc.mutation.DisplayName(); ok {
		if err := sociallink.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "SocialLink.display_name": %w`, err)}
		}
	}
	if _, ok := slc.mutation.IsPublic(); !ok {
		return &ValidationError{Name: "is_public", err: errors.New(`ent: missing required field "SocialLink.is_public"`)}
	}
	if _, ok := slc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "SocialLink.order"`)}
	}
	if _, ok := slc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SocialLink.created_at"`)}
	}
	if _, ok := slc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SocialLink.updated_at"`)}
	}
	if len(slc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "SocialLink.user"`)}
	}
	return nil
}

func (slc *SocialLinkCreate) sqlSave(ctx context.Context) (*SocialLink, error) {
	if err := slc.check(); err != nil {
		return nil, err
	}
	_node, _spec := slc.createSpec()
	if err := sqlgraph.CreateNode(ctx, slc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	slc.mutation.id = &_node.ID
	slc.mutation.done = true
	return _node, nil
}

func (slc *SocialLinkCreate) createSpec() (*SocialLink, *sqlgraph.CreateSpec) {
	var (
		_node = &SocialLink{config: slc.config}
		_spec = sqlgraph.NewCreateSpec(sociallink.Table, sqlgraph.NewFieldSpec(sociallink.FieldID, field.TypeUUID))
	)
	if id, ok := slc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := slc.mutation.Platform(); ok {
		_spec.SetField(sociallink.FieldPlatform, field.TypeString, value)
		_node.Platform = value
	}
	if value, ok := slc.mutation.URL(); ok {
		_spec.SetField(sociallink.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := slc.mutation.Username(); ok {
		_spec.SetField(sociallink.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := slc.mutation.DisplayName(); ok {
		_spec.SetField(sociallink.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := slc.mutation.IsPublic(); ok {
		_spec.SetField(sociallink.FieldIsPublic, field.TypeBool, value)
		_node.IsPublic = value
	}
	if value, ok := slc.mutation.Order(); ok {
		_spec.SetField(sociallink.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := slc.mutation.CreatedAt(); ok {
		_spec.SetField(sociallink.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := slc.mutation.UpdatedAt(); ok {
		_spec.SetField(sociallink.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := slc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sociallink.UserTable,
			Columns: []string{sociallink.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_social_links = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SocialLinkCreateBulk is the builder for creating many SocialLink entities in bulk.
type SocialLinkCreateBulk struct {
	config
	err      error
	builders []*SocialLinkCreate
}

// Save creates the SocialLink entities in the database.
func (slcb *SocialLinkCreateBulk) Save(ctx context.Context) ([]*SocialLink, error) {
	if slcb.err != nil {
		return nil, slcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(slcb.builders))
	nodes := make([]*SocialLink, len(slcb.builders))
	mutators := make([]Mutator, len(slcb.builders))
	for i := range slcb.builders {
		func(i int, root context.Context) {
			builder := slcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SocialLinkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, slcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, slcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, slcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (slcb *SocialLinkCreateBulk) SaveX(ctx context.Context) []*SocialLink {
	v, err := slcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (slcb *SocialLinkCreateBulk) Exec(ctx context.Context) error {
	_, err := slcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slcb *SocialLinkCreateBulk) ExecX(ctx context.Context) {
	if err := slcb.Exec(ctx); err != nil {
		panic(err)
	}
}
