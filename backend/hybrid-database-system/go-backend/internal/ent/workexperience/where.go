// Code generated by ent, DO NOT EDIT.

package workexperience

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldLTE(FieldID, id))
}

// Company applies equality check predicate on the "company" field. It's identical to CompanyEQ.
func Company(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEQ(FieldCompany, v))
}

// Position applies equality check predicate on the "position" field. It's identical to PositionEQ.
func Position(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEQ(FieldPosition, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEQ(FieldEndDate, v))
}

// IsCurrent applies equality check predicate on the "is_current" field. It's identical to IsCurrentEQ.
func IsCurrent(v bool) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEQ(FieldIsCurrent, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEQ(FieldLocation, v))
}

// CompanyWebsite applies equality check predicate on the "company_website" field. It's identical to CompanyWebsiteEQ.
func CompanyWebsite(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEQ(FieldCompanyWebsite, v))
}

// CompanyLogoURL applies equality check predicate on the "company_logo_url" field. It's identical to CompanyLogoURLEQ.
func CompanyLogoURL(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEQ(FieldCompanyLogoURL, v))
}

// SortOrder applies equality check predicate on the "sort_order" field. It's identical to SortOrderEQ.
func SortOrder(v int) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEQ(FieldSortOrder, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEQ(FieldUpdatedAt, v))
}

// CompanyEQ applies the EQ predicate on the "company" field.
func CompanyEQ(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEQ(FieldCompany, v))
}

// CompanyNEQ applies the NEQ predicate on the "company" field.
func CompanyNEQ(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldNEQ(FieldCompany, v))
}

// CompanyIn applies the In predicate on the "company" field.
func CompanyIn(vs ...string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldIn(FieldCompany, vs...))
}

// CompanyNotIn applies the NotIn predicate on the "company" field.
func CompanyNotIn(vs ...string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldNotIn(FieldCompany, vs...))
}

// CompanyGT applies the GT predicate on the "company" field.
func CompanyGT(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldGT(FieldCompany, v))
}

// CompanyGTE applies the GTE predicate on the "company" field.
func CompanyGTE(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldGTE(FieldCompany, v))
}

// CompanyLT applies the LT predicate on the "company" field.
func CompanyLT(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldLT(FieldCompany, v))
}

// CompanyLTE applies the LTE predicate on the "company" field.
func CompanyLTE(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldLTE(FieldCompany, v))
}

// CompanyContains applies the Contains predicate on the "company" field.
func CompanyContains(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldContains(FieldCompany, v))
}

// CompanyHasPrefix applies the HasPrefix predicate on the "company" field.
func CompanyHasPrefix(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldHasPrefix(FieldCompany, v))
}

// CompanyHasSuffix applies the HasSuffix predicate on the "company" field.
func CompanyHasSuffix(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldHasSuffix(FieldCompany, v))
}

// CompanyEqualFold applies the EqualFold predicate on the "company" field.
func CompanyEqualFold(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEqualFold(FieldCompany, v))
}

// CompanyContainsFold applies the ContainsFold predicate on the "company" field.
func CompanyContainsFold(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldContainsFold(FieldCompany, v))
}

// PositionEQ applies the EQ predicate on the "position" field.
func PositionEQ(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEQ(FieldPosition, v))
}

// PositionNEQ applies the NEQ predicate on the "position" field.
func PositionNEQ(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldNEQ(FieldPosition, v))
}

// PositionIn applies the In predicate on the "position" field.
func PositionIn(vs ...string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldIn(FieldPosition, vs...))
}

// PositionNotIn applies the NotIn predicate on the "position" field.
func PositionNotIn(vs ...string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldNotIn(FieldPosition, vs...))
}

// PositionGT applies the GT predicate on the "position" field.
func PositionGT(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldGT(FieldPosition, v))
}

// PositionGTE applies the GTE predicate on the "position" field.
func PositionGTE(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldGTE(FieldPosition, v))
}

// PositionLT applies the LT predicate on the "position" field.
func PositionLT(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldLT(FieldPosition, v))
}

// PositionLTE applies the LTE predicate on the "position" field.
func PositionLTE(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldLTE(FieldPosition, v))
}

// PositionContains applies the Contains predicate on the "position" field.
func PositionContains(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldContains(FieldPosition, v))
}

// PositionHasPrefix applies the HasPrefix predicate on the "position" field.
func PositionHasPrefix(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldHasPrefix(FieldPosition, v))
}

// PositionHasSuffix applies the HasSuffix predicate on the "position" field.
func PositionHasSuffix(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldHasSuffix(FieldPosition, v))
}

// PositionEqualFold applies the EqualFold predicate on the "position" field.
func PositionEqualFold(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEqualFold(FieldPosition, v))
}

// PositionContainsFold applies the ContainsFold predicate on the "position" field.
func PositionContainsFold(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldContainsFold(FieldPosition, v))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldLTE(FieldStartDate, v))
}

// StartDateIsNil applies the IsNil predicate on the "start_date" field.
func StartDateIsNil() predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldIsNull(FieldStartDate))
}

// StartDateNotNil applies the NotNil predicate on the "start_date" field.
func StartDateNotNil() predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldNotNull(FieldStartDate))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldLTE(FieldEndDate, v))
}

// EndDateIsNil applies the IsNil predicate on the "end_date" field.
func EndDateIsNil() predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldIsNull(FieldEndDate))
}

// EndDateNotNil applies the NotNil predicate on the "end_date" field.
func EndDateNotNil() predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldNotNull(FieldEndDate))
}

// IsCurrentEQ applies the EQ predicate on the "is_current" field.
func IsCurrentEQ(v bool) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEQ(FieldIsCurrent, v))
}

// IsCurrentNEQ applies the NEQ predicate on the "is_current" field.
func IsCurrentNEQ(v bool) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldNEQ(FieldIsCurrent, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldIsNull(FieldLocation))
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldNotNull(FieldLocation))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldContainsFold(FieldLocation, v))
}

// CompanyWebsiteEQ applies the EQ predicate on the "company_website" field.
func CompanyWebsiteEQ(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEQ(FieldCompanyWebsite, v))
}

// CompanyWebsiteNEQ applies the NEQ predicate on the "company_website" field.
func CompanyWebsiteNEQ(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldNEQ(FieldCompanyWebsite, v))
}

// CompanyWebsiteIn applies the In predicate on the "company_website" field.
func CompanyWebsiteIn(vs ...string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldIn(FieldCompanyWebsite, vs...))
}

// CompanyWebsiteNotIn applies the NotIn predicate on the "company_website" field.
func CompanyWebsiteNotIn(vs ...string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldNotIn(FieldCompanyWebsite, vs...))
}

// CompanyWebsiteGT applies the GT predicate on the "company_website" field.
func CompanyWebsiteGT(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldGT(FieldCompanyWebsite, v))
}

// CompanyWebsiteGTE applies the GTE predicate on the "company_website" field.
func CompanyWebsiteGTE(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldGTE(FieldCompanyWebsite, v))
}

// CompanyWebsiteLT applies the LT predicate on the "company_website" field.
func CompanyWebsiteLT(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldLT(FieldCompanyWebsite, v))
}

// CompanyWebsiteLTE applies the LTE predicate on the "company_website" field.
func CompanyWebsiteLTE(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldLTE(FieldCompanyWebsite, v))
}

// CompanyWebsiteContains applies the Contains predicate on the "company_website" field.
func CompanyWebsiteContains(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldContains(FieldCompanyWebsite, v))
}

// CompanyWebsiteHasPrefix applies the HasPrefix predicate on the "company_website" field.
func CompanyWebsiteHasPrefix(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldHasPrefix(FieldCompanyWebsite, v))
}

// CompanyWebsiteHasSuffix applies the HasSuffix predicate on the "company_website" field.
func CompanyWebsiteHasSuffix(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldHasSuffix(FieldCompanyWebsite, v))
}

// CompanyWebsiteIsNil applies the IsNil predicate on the "company_website" field.
func CompanyWebsiteIsNil() predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldIsNull(FieldCompanyWebsite))
}

// CompanyWebsiteNotNil applies the NotNil predicate on the "company_website" field.
func CompanyWebsiteNotNil() predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldNotNull(FieldCompanyWebsite))
}

// CompanyWebsiteEqualFold applies the EqualFold predicate on the "company_website" field.
func CompanyWebsiteEqualFold(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEqualFold(FieldCompanyWebsite, v))
}

// CompanyWebsiteContainsFold applies the ContainsFold predicate on the "company_website" field.
func CompanyWebsiteContainsFold(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldContainsFold(FieldCompanyWebsite, v))
}

// CompanyLogoURLEQ applies the EQ predicate on the "company_logo_url" field.
func CompanyLogoURLEQ(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEQ(FieldCompanyLogoURL, v))
}

// CompanyLogoURLNEQ applies the NEQ predicate on the "company_logo_url" field.
func CompanyLogoURLNEQ(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldNEQ(FieldCompanyLogoURL, v))
}

// CompanyLogoURLIn applies the In predicate on the "company_logo_url" field.
func CompanyLogoURLIn(vs ...string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldIn(FieldCompanyLogoURL, vs...))
}

// CompanyLogoURLNotIn applies the NotIn predicate on the "company_logo_url" field.
func CompanyLogoURLNotIn(vs ...string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldNotIn(FieldCompanyLogoURL, vs...))
}

// CompanyLogoURLGT applies the GT predicate on the "company_logo_url" field.
func CompanyLogoURLGT(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldGT(FieldCompanyLogoURL, v))
}

// CompanyLogoURLGTE applies the GTE predicate on the "company_logo_url" field.
func CompanyLogoURLGTE(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldGTE(FieldCompanyLogoURL, v))
}

// CompanyLogoURLLT applies the LT predicate on the "company_logo_url" field.
func CompanyLogoURLLT(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldLT(FieldCompanyLogoURL, v))
}

// CompanyLogoURLLTE applies the LTE predicate on the "company_logo_url" field.
func CompanyLogoURLLTE(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldLTE(FieldCompanyLogoURL, v))
}

// CompanyLogoURLContains applies the Contains predicate on the "company_logo_url" field.
func CompanyLogoURLContains(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldContains(FieldCompanyLogoURL, v))
}

// CompanyLogoURLHasPrefix applies the HasPrefix predicate on the "company_logo_url" field.
func CompanyLogoURLHasPrefix(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldHasPrefix(FieldCompanyLogoURL, v))
}

// CompanyLogoURLHasSuffix applies the HasSuffix predicate on the "company_logo_url" field.
func CompanyLogoURLHasSuffix(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldHasSuffix(FieldCompanyLogoURL, v))
}

// CompanyLogoURLIsNil applies the IsNil predicate on the "company_logo_url" field.
func CompanyLogoURLIsNil() predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldIsNull(FieldCompanyLogoURL))
}

// CompanyLogoURLNotNil applies the NotNil predicate on the "company_logo_url" field.
func CompanyLogoURLNotNil() predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldNotNull(FieldCompanyLogoURL))
}

// CompanyLogoURLEqualFold applies the EqualFold predicate on the "company_logo_url" field.
func CompanyLogoURLEqualFold(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEqualFold(FieldCompanyLogoURL, v))
}

// CompanyLogoURLContainsFold applies the ContainsFold predicate on the "company_logo_url" field.
func CompanyLogoURLContainsFold(v string) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldContainsFold(FieldCompanyLogoURL, v))
}

// SortOrderEQ applies the EQ predicate on the "sort_order" field.
func SortOrderEQ(v int) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEQ(FieldSortOrder, v))
}

// SortOrderNEQ applies the NEQ predicate on the "sort_order" field.
func SortOrderNEQ(v int) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldNEQ(FieldSortOrder, v))
}

// SortOrderIn applies the In predicate on the "sort_order" field.
func SortOrderIn(vs ...int) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldIn(FieldSortOrder, vs...))
}

// SortOrderNotIn applies the NotIn predicate on the "sort_order" field.
func SortOrderNotIn(vs ...int) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldNotIn(FieldSortOrder, vs...))
}

// SortOrderGT applies the GT predicate on the "sort_order" field.
func SortOrderGT(v int) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldGT(FieldSortOrder, v))
}

// SortOrderGTE applies the GTE predicate on the "sort_order" field.
func SortOrderGTE(v int) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldGTE(FieldSortOrder, v))
}

// SortOrderLT applies the LT predicate on the "sort_order" field.
func SortOrderLT(v int) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldLT(FieldSortOrder, v))
}

// SortOrderLTE applies the LTE predicate on the "sort_order" field.
func SortOrderLTE(v int) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldLTE(FieldSortOrder, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.WorkExperience {
	return predicate.WorkExperience(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.WorkExperience {
	return predicate.WorkExperience(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.WorkExperience {
	return predicate.WorkExperience(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkExperience) predicate.WorkExperience {
	return predicate.WorkExperience(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkExperience) predicate.WorkExperience {
	return predicate.WorkExperience(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkExperience) predicate.WorkExperience {
	return predicate.WorkExperience(sql.NotPredicates(p))
}
