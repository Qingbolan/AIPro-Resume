// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/projecttechnology"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ProjectTechnology is the model entity for the ProjectTechnology schema.
type ProjectTechnology struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ProjectID holds the value of the "project_id" field.
	ProjectID uuid.UUID `json:"project_id,omitempty"`
	// TechnologyName holds the value of the "technology_name" field.
	TechnologyName string `json:"technology_name,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// ProficiencyLevel holds the value of the "proficiency_level" field.
	ProficiencyLevel string `json:"proficiency_level,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// IconURL holds the value of the "icon_url" field.
	IconURL string `json:"icon_url,omitempty"`
	// DocumentationURL holds the value of the "documentation_url" field.
	DocumentationURL string `json:"documentation_url,omitempty"`
	// SortOrder holds the value of the "sort_order" field.
	SortOrder int `json:"sort_order,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectTechnologyQuery when eager-loading is set.
	Edges                ProjectTechnologyEdges `json:"edges"`
	project_technologies *uuid.UUID
	selectValues         sql.SelectValues
}

// ProjectTechnologyEdges holds the relations/edges for other nodes in the graph.
type ProjectTechnologyEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectTechnologyEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectTechnology) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case projecttechnology.FieldSortOrder:
			values[i] = new(sql.NullInt64)
		case projecttechnology.FieldTechnologyName, projecttechnology.FieldCategory, projecttechnology.FieldVersion, projecttechnology.FieldProficiencyLevel, projecttechnology.FieldDescription, projecttechnology.FieldIconURL, projecttechnology.FieldDocumentationURL:
			values[i] = new(sql.NullString)
		case projecttechnology.FieldCreatedAt, projecttechnology.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case projecttechnology.FieldID, projecttechnology.FieldProjectID:
			values[i] = new(uuid.UUID)
		case projecttechnology.ForeignKeys[0]: // project_technologies
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectTechnology fields.
func (pt *ProjectTechnology) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projecttechnology.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pt.ID = *value
			}
		case projecttechnology.FieldProjectID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value != nil {
				pt.ProjectID = *value
			}
		case projecttechnology.FieldTechnologyName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field technology_name", values[i])
			} else if value.Valid {
				pt.TechnologyName = value.String
			}
		case projecttechnology.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				pt.Category = value.String
			}
		case projecttechnology.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				pt.Version = value.String
			}
		case projecttechnology.FieldProficiencyLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field proficiency_level", values[i])
			} else if value.Valid {
				pt.ProficiencyLevel = value.String
			}
		case projecttechnology.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pt.Description = value.String
			}
		case projecttechnology.FieldIconURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon_url", values[i])
			} else if value.Valid {
				pt.IconURL = value.String
			}
		case projecttechnology.FieldDocumentationURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field documentation_url", values[i])
			} else if value.Valid {
				pt.DocumentationURL = value.String
			}
		case projecttechnology.FieldSortOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_order", values[i])
			} else if value.Valid {
				pt.SortOrder = int(value.Int64)
			}
		case projecttechnology.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pt.CreatedAt = value.Time
			}
		case projecttechnology.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pt.UpdatedAt = value.Time
			}
		case projecttechnology.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field project_technologies", values[i])
			} else if value.Valid {
				pt.project_technologies = new(uuid.UUID)
				*pt.project_technologies = *value.S.(*uuid.UUID)
			}
		default:
			pt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProjectTechnology.
// This includes values selected through modifiers, order, etc.
func (pt *ProjectTechnology) Value(name string) (ent.Value, error) {
	return pt.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the ProjectTechnology entity.
func (pt *ProjectTechnology) QueryProject() *ProjectQuery {
	return NewProjectTechnologyClient(pt.config).QueryProject(pt)
}

// Update returns a builder for updating this ProjectTechnology.
// Note that you need to call ProjectTechnology.Unwrap() before calling this method if this ProjectTechnology
// was returned from a transaction, and the transaction was committed or rolled back.
func (pt *ProjectTechnology) Update() *ProjectTechnologyUpdateOne {
	return NewProjectTechnologyClient(pt.config).UpdateOne(pt)
}

// Unwrap unwraps the ProjectTechnology entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pt *ProjectTechnology) Unwrap() *ProjectTechnology {
	_tx, ok := pt.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProjectTechnology is not a transactional entity")
	}
	pt.config.driver = _tx.drv
	return pt
}

// String implements the fmt.Stringer.
func (pt *ProjectTechnology) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectTechnology(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pt.ID))
	builder.WriteString("project_id=")
	builder.WriteString(fmt.Sprintf("%v", pt.ProjectID))
	builder.WriteString(", ")
	builder.WriteString("technology_name=")
	builder.WriteString(pt.TechnologyName)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(pt.Category)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(pt.Version)
	builder.WriteString(", ")
	builder.WriteString("proficiency_level=")
	builder.WriteString(pt.ProficiencyLevel)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pt.Description)
	builder.WriteString(", ")
	builder.WriteString("icon_url=")
	builder.WriteString(pt.IconURL)
	builder.WriteString(", ")
	builder.WriteString("documentation_url=")
	builder.WriteString(pt.DocumentationURL)
	builder.WriteString(", ")
	builder.WriteString("sort_order=")
	builder.WriteString(fmt.Sprintf("%v", pt.SortOrder))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pt.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProjectTechnologies is a parsable slice of ProjectTechnology.
type ProjectTechnologies []*ProjectTechnology
