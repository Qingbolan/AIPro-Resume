// Code generated by ent, DO NOT EDIT.

package blogpost

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldUserID, v))
}

// CategoryID applies equality check predicate on the "category_id" field. It's identical to CategoryIDEQ.
func CategoryID(v uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldCategoryID, v))
}

// SeriesID applies equality check predicate on the "series_id" field. It's identical to SeriesIDEQ.
func SeriesID(v uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldSeriesID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldTitle, v))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldSlug, v))
}

// Excerpt applies equality check predicate on the "excerpt" field. It's identical to ExcerptEQ.
func Excerpt(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldExcerpt, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldContent, v))
}

// IsFeatured applies equality check predicate on the "is_featured" field. It's identical to IsFeaturedEQ.
func IsFeatured(v bool) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldIsFeatured, v))
}

// FeaturedImageURL applies equality check predicate on the "featured_image_url" field. It's identical to FeaturedImageURLEQ.
func FeaturedImageURL(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldFeaturedImageURL, v))
}

// ReadingTimeMinutes applies equality check predicate on the "reading_time_minutes" field. It's identical to ReadingTimeMinutesEQ.
func ReadingTimeMinutes(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldReadingTimeMinutes, v))
}

// ViewCount applies equality check predicate on the "view_count" field. It's identical to ViewCountEQ.
func ViewCount(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldViewCount, v))
}

// LikeCount applies equality check predicate on the "like_count" field. It's identical to LikeCountEQ.
func LikeCount(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldLikeCount, v))
}

// CommentCount applies equality check predicate on the "comment_count" field. It's identical to CommentCountEQ.
func CommentCount(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldCommentCount, v))
}

// PublishedAt applies equality check predicate on the "published_at" field. It's identical to PublishedAtEQ.
func PublishedAt(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldPublishedAt, v))
}

// SeriesOrder applies equality check predicate on the "series_order" field. It's identical to SeriesOrderEQ.
func SeriesOrder(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldSeriesOrder, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLTE(FieldUserID, v))
}

// CategoryIDEQ applies the EQ predicate on the "category_id" field.
func CategoryIDEQ(v uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldCategoryID, v))
}

// CategoryIDNEQ applies the NEQ predicate on the "category_id" field.
func CategoryIDNEQ(v uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldCategoryID, v))
}

// CategoryIDIn applies the In predicate on the "category_id" field.
func CategoryIDIn(vs ...uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIn(FieldCategoryID, vs...))
}

// CategoryIDNotIn applies the NotIn predicate on the "category_id" field.
func CategoryIDNotIn(vs ...uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotIn(FieldCategoryID, vs...))
}

// CategoryIDGT applies the GT predicate on the "category_id" field.
func CategoryIDGT(v uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGT(FieldCategoryID, v))
}

// CategoryIDGTE applies the GTE predicate on the "category_id" field.
func CategoryIDGTE(v uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGTE(FieldCategoryID, v))
}

// CategoryIDLT applies the LT predicate on the "category_id" field.
func CategoryIDLT(v uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLT(FieldCategoryID, v))
}

// CategoryIDLTE applies the LTE predicate on the "category_id" field.
func CategoryIDLTE(v uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLTE(FieldCategoryID, v))
}

// CategoryIDIsNil applies the IsNil predicate on the "category_id" field.
func CategoryIDIsNil() predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIsNull(FieldCategoryID))
}

// CategoryIDNotNil applies the NotNil predicate on the "category_id" field.
func CategoryIDNotNil() predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotNull(FieldCategoryID))
}

// SeriesIDEQ applies the EQ predicate on the "series_id" field.
func SeriesIDEQ(v uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldSeriesID, v))
}

// SeriesIDNEQ applies the NEQ predicate on the "series_id" field.
func SeriesIDNEQ(v uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldSeriesID, v))
}

// SeriesIDIn applies the In predicate on the "series_id" field.
func SeriesIDIn(vs ...uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIn(FieldSeriesID, vs...))
}

// SeriesIDNotIn applies the NotIn predicate on the "series_id" field.
func SeriesIDNotIn(vs ...uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotIn(FieldSeriesID, vs...))
}

// SeriesIDGT applies the GT predicate on the "series_id" field.
func SeriesIDGT(v uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGT(FieldSeriesID, v))
}

// SeriesIDGTE applies the GTE predicate on the "series_id" field.
func SeriesIDGTE(v uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGTE(FieldSeriesID, v))
}

// SeriesIDLT applies the LT predicate on the "series_id" field.
func SeriesIDLT(v uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLT(FieldSeriesID, v))
}

// SeriesIDLTE applies the LTE predicate on the "series_id" field.
func SeriesIDLTE(v uuid.UUID) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLTE(FieldSeriesID, v))
}

// SeriesIDIsNil applies the IsNil predicate on the "series_id" field.
func SeriesIDIsNil() predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIsNull(FieldSeriesID))
}

// SeriesIDNotNil applies the NotNil predicate on the "series_id" field.
func SeriesIDNotNil() predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotNull(FieldSeriesID))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldContainsFold(FieldTitle, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldContainsFold(FieldSlug, v))
}

// ExcerptEQ applies the EQ predicate on the "excerpt" field.
func ExcerptEQ(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldExcerpt, v))
}

// ExcerptNEQ applies the NEQ predicate on the "excerpt" field.
func ExcerptNEQ(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldExcerpt, v))
}

// ExcerptIn applies the In predicate on the "excerpt" field.
func ExcerptIn(vs ...string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIn(FieldExcerpt, vs...))
}

// ExcerptNotIn applies the NotIn predicate on the "excerpt" field.
func ExcerptNotIn(vs ...string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotIn(FieldExcerpt, vs...))
}

// ExcerptGT applies the GT predicate on the "excerpt" field.
func ExcerptGT(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGT(FieldExcerpt, v))
}

// ExcerptGTE applies the GTE predicate on the "excerpt" field.
func ExcerptGTE(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGTE(FieldExcerpt, v))
}

// ExcerptLT applies the LT predicate on the "excerpt" field.
func ExcerptLT(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLT(FieldExcerpt, v))
}

// ExcerptLTE applies the LTE predicate on the "excerpt" field.
func ExcerptLTE(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLTE(FieldExcerpt, v))
}

// ExcerptContains applies the Contains predicate on the "excerpt" field.
func ExcerptContains(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldContains(FieldExcerpt, v))
}

// ExcerptHasPrefix applies the HasPrefix predicate on the "excerpt" field.
func ExcerptHasPrefix(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldHasPrefix(FieldExcerpt, v))
}

// ExcerptHasSuffix applies the HasSuffix predicate on the "excerpt" field.
func ExcerptHasSuffix(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldHasSuffix(FieldExcerpt, v))
}

// ExcerptIsNil applies the IsNil predicate on the "excerpt" field.
func ExcerptIsNil() predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIsNull(FieldExcerpt))
}

// ExcerptNotNil applies the NotNil predicate on the "excerpt" field.
func ExcerptNotNil() predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotNull(FieldExcerpt))
}

// ExcerptEqualFold applies the EqualFold predicate on the "excerpt" field.
func ExcerptEqualFold(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEqualFold(FieldExcerpt, v))
}

// ExcerptContainsFold applies the ContainsFold predicate on the "excerpt" field.
func ExcerptContainsFold(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldContainsFold(FieldExcerpt, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldContainsFold(FieldContent, v))
}

// ContentTypeEQ applies the EQ predicate on the "content_type" field.
func ContentTypeEQ(v ContentType) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldContentType, v))
}

// ContentTypeNEQ applies the NEQ predicate on the "content_type" field.
func ContentTypeNEQ(v ContentType) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldContentType, v))
}

// ContentTypeIn applies the In predicate on the "content_type" field.
func ContentTypeIn(vs ...ContentType) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIn(FieldContentType, vs...))
}

// ContentTypeNotIn applies the NotIn predicate on the "content_type" field.
func ContentTypeNotIn(vs ...ContentType) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotIn(FieldContentType, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotIn(FieldStatus, vs...))
}

// IsFeaturedEQ applies the EQ predicate on the "is_featured" field.
func IsFeaturedEQ(v bool) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldIsFeatured, v))
}

// IsFeaturedNEQ applies the NEQ predicate on the "is_featured" field.
func IsFeaturedNEQ(v bool) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldIsFeatured, v))
}

// FeaturedImageURLEQ applies the EQ predicate on the "featured_image_url" field.
func FeaturedImageURLEQ(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldFeaturedImageURL, v))
}

// FeaturedImageURLNEQ applies the NEQ predicate on the "featured_image_url" field.
func FeaturedImageURLNEQ(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldFeaturedImageURL, v))
}

// FeaturedImageURLIn applies the In predicate on the "featured_image_url" field.
func FeaturedImageURLIn(vs ...string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIn(FieldFeaturedImageURL, vs...))
}

// FeaturedImageURLNotIn applies the NotIn predicate on the "featured_image_url" field.
func FeaturedImageURLNotIn(vs ...string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotIn(FieldFeaturedImageURL, vs...))
}

// FeaturedImageURLGT applies the GT predicate on the "featured_image_url" field.
func FeaturedImageURLGT(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGT(FieldFeaturedImageURL, v))
}

// FeaturedImageURLGTE applies the GTE predicate on the "featured_image_url" field.
func FeaturedImageURLGTE(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGTE(FieldFeaturedImageURL, v))
}

// FeaturedImageURLLT applies the LT predicate on the "featured_image_url" field.
func FeaturedImageURLLT(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLT(FieldFeaturedImageURL, v))
}

// FeaturedImageURLLTE applies the LTE predicate on the "featured_image_url" field.
func FeaturedImageURLLTE(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLTE(FieldFeaturedImageURL, v))
}

// FeaturedImageURLContains applies the Contains predicate on the "featured_image_url" field.
func FeaturedImageURLContains(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldContains(FieldFeaturedImageURL, v))
}

// FeaturedImageURLHasPrefix applies the HasPrefix predicate on the "featured_image_url" field.
func FeaturedImageURLHasPrefix(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldHasPrefix(FieldFeaturedImageURL, v))
}

// FeaturedImageURLHasSuffix applies the HasSuffix predicate on the "featured_image_url" field.
func FeaturedImageURLHasSuffix(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldHasSuffix(FieldFeaturedImageURL, v))
}

// FeaturedImageURLIsNil applies the IsNil predicate on the "featured_image_url" field.
func FeaturedImageURLIsNil() predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIsNull(FieldFeaturedImageURL))
}

// FeaturedImageURLNotNil applies the NotNil predicate on the "featured_image_url" field.
func FeaturedImageURLNotNil() predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotNull(FieldFeaturedImageURL))
}

// FeaturedImageURLEqualFold applies the EqualFold predicate on the "featured_image_url" field.
func FeaturedImageURLEqualFold(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEqualFold(FieldFeaturedImageURL, v))
}

// FeaturedImageURLContainsFold applies the ContainsFold predicate on the "featured_image_url" field.
func FeaturedImageURLContainsFold(v string) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldContainsFold(FieldFeaturedImageURL, v))
}

// ReadingTimeMinutesEQ applies the EQ predicate on the "reading_time_minutes" field.
func ReadingTimeMinutesEQ(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldReadingTimeMinutes, v))
}

// ReadingTimeMinutesNEQ applies the NEQ predicate on the "reading_time_minutes" field.
func ReadingTimeMinutesNEQ(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldReadingTimeMinutes, v))
}

// ReadingTimeMinutesIn applies the In predicate on the "reading_time_minutes" field.
func ReadingTimeMinutesIn(vs ...int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIn(FieldReadingTimeMinutes, vs...))
}

// ReadingTimeMinutesNotIn applies the NotIn predicate on the "reading_time_minutes" field.
func ReadingTimeMinutesNotIn(vs ...int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotIn(FieldReadingTimeMinutes, vs...))
}

// ReadingTimeMinutesGT applies the GT predicate on the "reading_time_minutes" field.
func ReadingTimeMinutesGT(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGT(FieldReadingTimeMinutes, v))
}

// ReadingTimeMinutesGTE applies the GTE predicate on the "reading_time_minutes" field.
func ReadingTimeMinutesGTE(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGTE(FieldReadingTimeMinutes, v))
}

// ReadingTimeMinutesLT applies the LT predicate on the "reading_time_minutes" field.
func ReadingTimeMinutesLT(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLT(FieldReadingTimeMinutes, v))
}

// ReadingTimeMinutesLTE applies the LTE predicate on the "reading_time_minutes" field.
func ReadingTimeMinutesLTE(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLTE(FieldReadingTimeMinutes, v))
}

// ReadingTimeMinutesIsNil applies the IsNil predicate on the "reading_time_minutes" field.
func ReadingTimeMinutesIsNil() predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIsNull(FieldReadingTimeMinutes))
}

// ReadingTimeMinutesNotNil applies the NotNil predicate on the "reading_time_minutes" field.
func ReadingTimeMinutesNotNil() predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotNull(FieldReadingTimeMinutes))
}

// ViewCountEQ applies the EQ predicate on the "view_count" field.
func ViewCountEQ(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldViewCount, v))
}

// ViewCountNEQ applies the NEQ predicate on the "view_count" field.
func ViewCountNEQ(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldViewCount, v))
}

// ViewCountIn applies the In predicate on the "view_count" field.
func ViewCountIn(vs ...int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIn(FieldViewCount, vs...))
}

// ViewCountNotIn applies the NotIn predicate on the "view_count" field.
func ViewCountNotIn(vs ...int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotIn(FieldViewCount, vs...))
}

// ViewCountGT applies the GT predicate on the "view_count" field.
func ViewCountGT(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGT(FieldViewCount, v))
}

// ViewCountGTE applies the GTE predicate on the "view_count" field.
func ViewCountGTE(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGTE(FieldViewCount, v))
}

// ViewCountLT applies the LT predicate on the "view_count" field.
func ViewCountLT(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLT(FieldViewCount, v))
}

// ViewCountLTE applies the LTE predicate on the "view_count" field.
func ViewCountLTE(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLTE(FieldViewCount, v))
}

// LikeCountEQ applies the EQ predicate on the "like_count" field.
func LikeCountEQ(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldLikeCount, v))
}

// LikeCountNEQ applies the NEQ predicate on the "like_count" field.
func LikeCountNEQ(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldLikeCount, v))
}

// LikeCountIn applies the In predicate on the "like_count" field.
func LikeCountIn(vs ...int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIn(FieldLikeCount, vs...))
}

// LikeCountNotIn applies the NotIn predicate on the "like_count" field.
func LikeCountNotIn(vs ...int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotIn(FieldLikeCount, vs...))
}

// LikeCountGT applies the GT predicate on the "like_count" field.
func LikeCountGT(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGT(FieldLikeCount, v))
}

// LikeCountGTE applies the GTE predicate on the "like_count" field.
func LikeCountGTE(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGTE(FieldLikeCount, v))
}

// LikeCountLT applies the LT predicate on the "like_count" field.
func LikeCountLT(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLT(FieldLikeCount, v))
}

// LikeCountLTE applies the LTE predicate on the "like_count" field.
func LikeCountLTE(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLTE(FieldLikeCount, v))
}

// CommentCountEQ applies the EQ predicate on the "comment_count" field.
func CommentCountEQ(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldCommentCount, v))
}

// CommentCountNEQ applies the NEQ predicate on the "comment_count" field.
func CommentCountNEQ(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldCommentCount, v))
}

// CommentCountIn applies the In predicate on the "comment_count" field.
func CommentCountIn(vs ...int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIn(FieldCommentCount, vs...))
}

// CommentCountNotIn applies the NotIn predicate on the "comment_count" field.
func CommentCountNotIn(vs ...int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotIn(FieldCommentCount, vs...))
}

// CommentCountGT applies the GT predicate on the "comment_count" field.
func CommentCountGT(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGT(FieldCommentCount, v))
}

// CommentCountGTE applies the GTE predicate on the "comment_count" field.
func CommentCountGTE(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGTE(FieldCommentCount, v))
}

// CommentCountLT applies the LT predicate on the "comment_count" field.
func CommentCountLT(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLT(FieldCommentCount, v))
}

// CommentCountLTE applies the LTE predicate on the "comment_count" field.
func CommentCountLTE(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLTE(FieldCommentCount, v))
}

// PublishedAtEQ applies the EQ predicate on the "published_at" field.
func PublishedAtEQ(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldPublishedAt, v))
}

// PublishedAtNEQ applies the NEQ predicate on the "published_at" field.
func PublishedAtNEQ(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldPublishedAt, v))
}

// PublishedAtIn applies the In predicate on the "published_at" field.
func PublishedAtIn(vs ...time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIn(FieldPublishedAt, vs...))
}

// PublishedAtNotIn applies the NotIn predicate on the "published_at" field.
func PublishedAtNotIn(vs ...time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotIn(FieldPublishedAt, vs...))
}

// PublishedAtGT applies the GT predicate on the "published_at" field.
func PublishedAtGT(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGT(FieldPublishedAt, v))
}

// PublishedAtGTE applies the GTE predicate on the "published_at" field.
func PublishedAtGTE(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGTE(FieldPublishedAt, v))
}

// PublishedAtLT applies the LT predicate on the "published_at" field.
func PublishedAtLT(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLT(FieldPublishedAt, v))
}

// PublishedAtLTE applies the LTE predicate on the "published_at" field.
func PublishedAtLTE(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLTE(FieldPublishedAt, v))
}

// PublishedAtIsNil applies the IsNil predicate on the "published_at" field.
func PublishedAtIsNil() predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIsNull(FieldPublishedAt))
}

// PublishedAtNotNil applies the NotNil predicate on the "published_at" field.
func PublishedAtNotNil() predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotNull(FieldPublishedAt))
}

// SeriesOrderEQ applies the EQ predicate on the "series_order" field.
func SeriesOrderEQ(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldSeriesOrder, v))
}

// SeriesOrderNEQ applies the NEQ predicate on the "series_order" field.
func SeriesOrderNEQ(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldSeriesOrder, v))
}

// SeriesOrderIn applies the In predicate on the "series_order" field.
func SeriesOrderIn(vs ...int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIn(FieldSeriesOrder, vs...))
}

// SeriesOrderNotIn applies the NotIn predicate on the "series_order" field.
func SeriesOrderNotIn(vs ...int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotIn(FieldSeriesOrder, vs...))
}

// SeriesOrderGT applies the GT predicate on the "series_order" field.
func SeriesOrderGT(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGT(FieldSeriesOrder, v))
}

// SeriesOrderGTE applies the GTE predicate on the "series_order" field.
func SeriesOrderGTE(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGTE(FieldSeriesOrder, v))
}

// SeriesOrderLT applies the LT predicate on the "series_order" field.
func SeriesOrderLT(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLT(FieldSeriesOrder, v))
}

// SeriesOrderLTE applies the LTE predicate on the "series_order" field.
func SeriesOrderLTE(v int) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLTE(FieldSeriesOrder, v))
}

// SeriesOrderIsNil applies the IsNil predicate on the "series_order" field.
func SeriesOrderIsNil() predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIsNull(FieldSeriesOrder))
}

// SeriesOrderNotNil applies the NotNil predicate on the "series_order" field.
func SeriesOrderNotNil() predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotNull(FieldSeriesOrder))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BlogPost {
	return predicate.BlogPost(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.BlogPost {
	return predicate.BlogPost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.BlogPost {
	return predicate.BlogPost(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCategory applies the HasEdge predicate on the "category" edge.
func HasCategory() predicate.BlogPost {
	return predicate.BlogPost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CategoryTable, CategoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCategoryWith applies the HasEdge predicate on the "category" edge with a given conditions (other predicates).
func HasCategoryWith(preds ...predicate.BlogCategory) predicate.BlogPost {
	return predicate.BlogPost(func(s *sql.Selector) {
		step := newCategoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSeries applies the HasEdge predicate on the "series" edge.
func HasSeries() predicate.BlogPost {
	return predicate.BlogPost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SeriesTable, SeriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSeriesWith applies the HasEdge predicate on the "series" edge with a given conditions (other predicates).
func HasSeriesWith(preds ...predicate.BlogSeries) predicate.BlogPost {
	return predicate.BlogPost(func(s *sql.Selector) {
		step := newSeriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTags applies the HasEdge predicate on the "tags" edge.
func HasTags() predicate.BlogPost {
	return predicate.BlogPost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TagsTable, TagsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagsWith applies the HasEdge predicate on the "tags" edge with a given conditions (other predicates).
func HasTagsWith(preds ...predicate.BlogTag) predicate.BlogPost {
	return predicate.BlogPost(func(s *sql.Selector) {
		step := newTagsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasComments applies the HasEdge predicate on the "comments" edge.
func HasComments() predicate.BlogPost {
	return predicate.BlogPost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CommentsTable, CommentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentsWith applies the HasEdge predicate on the "comments" edge with a given conditions (other predicates).
func HasCommentsWith(preds ...predicate.BlogComment) predicate.BlogPost {
	return predicate.BlogPost(func(s *sql.Selector) {
		step := newCommentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BlogPost) predicate.BlogPost {
	return predicate.BlogPost(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BlogPost) predicate.BlogPost {
	return predicate.BlogPost(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BlogPost) predicate.BlogPost {
	return predicate.BlogPost(sql.NotPredicates(p))
}
