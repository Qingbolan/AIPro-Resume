// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"silan-backend/internal/ent/migrate"

	"silan-backend/internal/ent/award"
	"silan-backend/internal/ent/blogcategory"
	"silan-backend/internal/ent/blogcomment"
	"silan-backend/internal/ent/blogpost"
	"silan-backend/internal/ent/blogseries"
	"silan-backend/internal/ent/blogtag"
	"silan-backend/internal/ent/education"
	"silan-backend/internal/ent/idea"
	"silan-backend/internal/ent/language"
	"silan-backend/internal/ent/personalinfo"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/projectdetail"
	"silan-backend/internal/ent/projectimage"
	"silan-backend/internal/ent/projecttechnology"
	"silan-backend/internal/ent/publication"
	"silan-backend/internal/ent/researchproject"
	"silan-backend/internal/ent/sociallink"
	"silan-backend/internal/ent/user"
	"silan-backend/internal/ent/workexperience"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Award is the client for interacting with the Award builders.
	Award *AwardClient
	// BlogCategory is the client for interacting with the BlogCategory builders.
	BlogCategory *BlogCategoryClient
	// BlogComment is the client for interacting with the BlogComment builders.
	BlogComment *BlogCommentClient
	// BlogPost is the client for interacting with the BlogPost builders.
	BlogPost *BlogPostClient
	// BlogSeries is the client for interacting with the BlogSeries builders.
	BlogSeries *BlogSeriesClient
	// BlogTag is the client for interacting with the BlogTag builders.
	BlogTag *BlogTagClient
	// Education is the client for interacting with the Education builders.
	Education *EducationClient
	// Idea is the client for interacting with the Idea builders.
	Idea *IdeaClient
	// Language is the client for interacting with the Language builders.
	Language *LanguageClient
	// PersonalInfo is the client for interacting with the PersonalInfo builders.
	PersonalInfo *PersonalInfoClient
	// Project is the client for interacting with the Project builders.
	Project *ProjectClient
	// ProjectDetail is the client for interacting with the ProjectDetail builders.
	ProjectDetail *ProjectDetailClient
	// ProjectImage is the client for interacting with the ProjectImage builders.
	ProjectImage *ProjectImageClient
	// ProjectTechnology is the client for interacting with the ProjectTechnology builders.
	ProjectTechnology *ProjectTechnologyClient
	// Publication is the client for interacting with the Publication builders.
	Publication *PublicationClient
	// ResearchProject is the client for interacting with the ResearchProject builders.
	ResearchProject *ResearchProjectClient
	// SocialLink is the client for interacting with the SocialLink builders.
	SocialLink *SocialLinkClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// WorkExperience is the client for interacting with the WorkExperience builders.
	WorkExperience *WorkExperienceClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Award = NewAwardClient(c.config)
	c.BlogCategory = NewBlogCategoryClient(c.config)
	c.BlogComment = NewBlogCommentClient(c.config)
	c.BlogPost = NewBlogPostClient(c.config)
	c.BlogSeries = NewBlogSeriesClient(c.config)
	c.BlogTag = NewBlogTagClient(c.config)
	c.Education = NewEducationClient(c.config)
	c.Idea = NewIdeaClient(c.config)
	c.Language = NewLanguageClient(c.config)
	c.PersonalInfo = NewPersonalInfoClient(c.config)
	c.Project = NewProjectClient(c.config)
	c.ProjectDetail = NewProjectDetailClient(c.config)
	c.ProjectImage = NewProjectImageClient(c.config)
	c.ProjectTechnology = NewProjectTechnologyClient(c.config)
	c.Publication = NewPublicationClient(c.config)
	c.ResearchProject = NewResearchProjectClient(c.config)
	c.SocialLink = NewSocialLinkClient(c.config)
	c.User = NewUserClient(c.config)
	c.WorkExperience = NewWorkExperienceClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		Award:             NewAwardClient(cfg),
		BlogCategory:      NewBlogCategoryClient(cfg),
		BlogComment:       NewBlogCommentClient(cfg),
		BlogPost:          NewBlogPostClient(cfg),
		BlogSeries:        NewBlogSeriesClient(cfg),
		BlogTag:           NewBlogTagClient(cfg),
		Education:         NewEducationClient(cfg),
		Idea:              NewIdeaClient(cfg),
		Language:          NewLanguageClient(cfg),
		PersonalInfo:      NewPersonalInfoClient(cfg),
		Project:           NewProjectClient(cfg),
		ProjectDetail:     NewProjectDetailClient(cfg),
		ProjectImage:      NewProjectImageClient(cfg),
		ProjectTechnology: NewProjectTechnologyClient(cfg),
		Publication:       NewPublicationClient(cfg),
		ResearchProject:   NewResearchProjectClient(cfg),
		SocialLink:        NewSocialLinkClient(cfg),
		User:              NewUserClient(cfg),
		WorkExperience:    NewWorkExperienceClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		Award:             NewAwardClient(cfg),
		BlogCategory:      NewBlogCategoryClient(cfg),
		BlogComment:       NewBlogCommentClient(cfg),
		BlogPost:          NewBlogPostClient(cfg),
		BlogSeries:        NewBlogSeriesClient(cfg),
		BlogTag:           NewBlogTagClient(cfg),
		Education:         NewEducationClient(cfg),
		Idea:              NewIdeaClient(cfg),
		Language:          NewLanguageClient(cfg),
		PersonalInfo:      NewPersonalInfoClient(cfg),
		Project:           NewProjectClient(cfg),
		ProjectDetail:     NewProjectDetailClient(cfg),
		ProjectImage:      NewProjectImageClient(cfg),
		ProjectTechnology: NewProjectTechnologyClient(cfg),
		Publication:       NewPublicationClient(cfg),
		ResearchProject:   NewResearchProjectClient(cfg),
		SocialLink:        NewSocialLinkClient(cfg),
		User:              NewUserClient(cfg),
		WorkExperience:    NewWorkExperienceClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Award.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Award, c.BlogCategory, c.BlogComment, c.BlogPost, c.BlogSeries, c.BlogTag,
		c.Education, c.Idea, c.Language, c.PersonalInfo, c.Project, c.ProjectDetail,
		c.ProjectImage, c.ProjectTechnology, c.Publication, c.ResearchProject,
		c.SocialLink, c.User, c.WorkExperience,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Award, c.BlogCategory, c.BlogComment, c.BlogPost, c.BlogSeries, c.BlogTag,
		c.Education, c.Idea, c.Language, c.PersonalInfo, c.Project, c.ProjectDetail,
		c.ProjectImage, c.ProjectTechnology, c.Publication, c.ResearchProject,
		c.SocialLink, c.User, c.WorkExperience,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AwardMutation:
		return c.Award.mutate(ctx, m)
	case *BlogCategoryMutation:
		return c.BlogCategory.mutate(ctx, m)
	case *BlogCommentMutation:
		return c.BlogComment.mutate(ctx, m)
	case *BlogPostMutation:
		return c.BlogPost.mutate(ctx, m)
	case *BlogSeriesMutation:
		return c.BlogSeries.mutate(ctx, m)
	case *BlogTagMutation:
		return c.BlogTag.mutate(ctx, m)
	case *EducationMutation:
		return c.Education.mutate(ctx, m)
	case *IdeaMutation:
		return c.Idea.mutate(ctx, m)
	case *LanguageMutation:
		return c.Language.mutate(ctx, m)
	case *PersonalInfoMutation:
		return c.PersonalInfo.mutate(ctx, m)
	case *ProjectMutation:
		return c.Project.mutate(ctx, m)
	case *ProjectDetailMutation:
		return c.ProjectDetail.mutate(ctx, m)
	case *ProjectImageMutation:
		return c.ProjectImage.mutate(ctx, m)
	case *ProjectTechnologyMutation:
		return c.ProjectTechnology.mutate(ctx, m)
	case *PublicationMutation:
		return c.Publication.mutate(ctx, m)
	case *ResearchProjectMutation:
		return c.ResearchProject.mutate(ctx, m)
	case *SocialLinkMutation:
		return c.SocialLink.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *WorkExperienceMutation:
		return c.WorkExperience.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AwardClient is a client for the Award schema.
type AwardClient struct {
	config
}

// NewAwardClient returns a client for the Award from the given config.
func NewAwardClient(c config) *AwardClient {
	return &AwardClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `award.Hooks(f(g(h())))`.
func (c *AwardClient) Use(hooks ...Hook) {
	c.hooks.Award = append(c.hooks.Award, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `award.Intercept(f(g(h())))`.
func (c *AwardClient) Intercept(interceptors ...Interceptor) {
	c.inters.Award = append(c.inters.Award, interceptors...)
}

// Create returns a builder for creating a Award entity.
func (c *AwardClient) Create() *AwardCreate {
	mutation := newAwardMutation(c.config, OpCreate)
	return &AwardCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Award entities.
func (c *AwardClient) CreateBulk(builders ...*AwardCreate) *AwardCreateBulk {
	return &AwardCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AwardClient) MapCreateBulk(slice any, setFunc func(*AwardCreate, int)) *AwardCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AwardCreateBulk{err: fmt.Errorf("calling to AwardClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AwardCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AwardCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Award.
func (c *AwardClient) Update() *AwardUpdate {
	mutation := newAwardMutation(c.config, OpUpdate)
	return &AwardUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AwardClient) UpdateOne(a *Award) *AwardUpdateOne {
	mutation := newAwardMutation(c.config, OpUpdateOne, withAward(a))
	return &AwardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AwardClient) UpdateOneID(id uuid.UUID) *AwardUpdateOne {
	mutation := newAwardMutation(c.config, OpUpdateOne, withAwardID(id))
	return &AwardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Award.
func (c *AwardClient) Delete() *AwardDelete {
	mutation := newAwardMutation(c.config, OpDelete)
	return &AwardDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AwardClient) DeleteOne(a *Award) *AwardDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AwardClient) DeleteOneID(id uuid.UUID) *AwardDeleteOne {
	builder := c.Delete().Where(award.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AwardDeleteOne{builder}
}

// Query returns a query builder for Award.
func (c *AwardClient) Query() *AwardQuery {
	return &AwardQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAward},
		inters: c.Interceptors(),
	}
}

// Get returns a Award entity by its id.
func (c *AwardClient) Get(ctx context.Context, id uuid.UUID) (*Award, error) {
	return c.Query().Where(award.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AwardClient) GetX(ctx context.Context, id uuid.UUID) *Award {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Award.
func (c *AwardClient) QueryUser(a *Award) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(award.Table, award.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, award.UserTable, award.UserColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AwardClient) Hooks() []Hook {
	return c.hooks.Award
}

// Interceptors returns the client interceptors.
func (c *AwardClient) Interceptors() []Interceptor {
	return c.inters.Award
}

func (c *AwardClient) mutate(ctx context.Context, m *AwardMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AwardCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AwardUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AwardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AwardDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Award mutation op: %q", m.Op())
	}
}

// BlogCategoryClient is a client for the BlogCategory schema.
type BlogCategoryClient struct {
	config
}

// NewBlogCategoryClient returns a client for the BlogCategory from the given config.
func NewBlogCategoryClient(c config) *BlogCategoryClient {
	return &BlogCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `blogcategory.Hooks(f(g(h())))`.
func (c *BlogCategoryClient) Use(hooks ...Hook) {
	c.hooks.BlogCategory = append(c.hooks.BlogCategory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `blogcategory.Intercept(f(g(h())))`.
func (c *BlogCategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.BlogCategory = append(c.inters.BlogCategory, interceptors...)
}

// Create returns a builder for creating a BlogCategory entity.
func (c *BlogCategoryClient) Create() *BlogCategoryCreate {
	mutation := newBlogCategoryMutation(c.config, OpCreate)
	return &BlogCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BlogCategory entities.
func (c *BlogCategoryClient) CreateBulk(builders ...*BlogCategoryCreate) *BlogCategoryCreateBulk {
	return &BlogCategoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BlogCategoryClient) MapCreateBulk(slice any, setFunc func(*BlogCategoryCreate, int)) *BlogCategoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BlogCategoryCreateBulk{err: fmt.Errorf("calling to BlogCategoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BlogCategoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BlogCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BlogCategory.
func (c *BlogCategoryClient) Update() *BlogCategoryUpdate {
	mutation := newBlogCategoryMutation(c.config, OpUpdate)
	return &BlogCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlogCategoryClient) UpdateOne(bc *BlogCategory) *BlogCategoryUpdateOne {
	mutation := newBlogCategoryMutation(c.config, OpUpdateOne, withBlogCategory(bc))
	return &BlogCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlogCategoryClient) UpdateOneID(id uuid.UUID) *BlogCategoryUpdateOne {
	mutation := newBlogCategoryMutation(c.config, OpUpdateOne, withBlogCategoryID(id))
	return &BlogCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BlogCategory.
func (c *BlogCategoryClient) Delete() *BlogCategoryDelete {
	mutation := newBlogCategoryMutation(c.config, OpDelete)
	return &BlogCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BlogCategoryClient) DeleteOne(bc *BlogCategory) *BlogCategoryDeleteOne {
	return c.DeleteOneID(bc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BlogCategoryClient) DeleteOneID(id uuid.UUID) *BlogCategoryDeleteOne {
	builder := c.Delete().Where(blogcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlogCategoryDeleteOne{builder}
}

// Query returns a query builder for BlogCategory.
func (c *BlogCategoryClient) Query() *BlogCategoryQuery {
	return &BlogCategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBlogCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a BlogCategory entity by its id.
func (c *BlogCategoryClient) Get(ctx context.Context, id uuid.UUID) (*BlogCategory, error) {
	return c.Query().Where(blogcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlogCategoryClient) GetX(ctx context.Context, id uuid.UUID) *BlogCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBlogPosts queries the blog_posts edge of a BlogCategory.
func (c *BlogCategoryClient) QueryBlogPosts(bc *BlogCategory) *BlogPostQuery {
	query := (&BlogPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogcategory.Table, blogcategory.FieldID, id),
			sqlgraph.To(blogpost.Table, blogpost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, blogcategory.BlogPostsTable, blogcategory.BlogPostsColumn),
		)
		fromV = sqlgraph.Neighbors(bc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BlogCategoryClient) Hooks() []Hook {
	return c.hooks.BlogCategory
}

// Interceptors returns the client interceptors.
func (c *BlogCategoryClient) Interceptors() []Interceptor {
	return c.inters.BlogCategory
}

func (c *BlogCategoryClient) mutate(ctx context.Context, m *BlogCategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BlogCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BlogCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BlogCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BlogCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BlogCategory mutation op: %q", m.Op())
	}
}

// BlogCommentClient is a client for the BlogComment schema.
type BlogCommentClient struct {
	config
}

// NewBlogCommentClient returns a client for the BlogComment from the given config.
func NewBlogCommentClient(c config) *BlogCommentClient {
	return &BlogCommentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `blogcomment.Hooks(f(g(h())))`.
func (c *BlogCommentClient) Use(hooks ...Hook) {
	c.hooks.BlogComment = append(c.hooks.BlogComment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `blogcomment.Intercept(f(g(h())))`.
func (c *BlogCommentClient) Intercept(interceptors ...Interceptor) {
	c.inters.BlogComment = append(c.inters.BlogComment, interceptors...)
}

// Create returns a builder for creating a BlogComment entity.
func (c *BlogCommentClient) Create() *BlogCommentCreate {
	mutation := newBlogCommentMutation(c.config, OpCreate)
	return &BlogCommentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BlogComment entities.
func (c *BlogCommentClient) CreateBulk(builders ...*BlogCommentCreate) *BlogCommentCreateBulk {
	return &BlogCommentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BlogCommentClient) MapCreateBulk(slice any, setFunc func(*BlogCommentCreate, int)) *BlogCommentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BlogCommentCreateBulk{err: fmt.Errorf("calling to BlogCommentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BlogCommentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BlogCommentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BlogComment.
func (c *BlogCommentClient) Update() *BlogCommentUpdate {
	mutation := newBlogCommentMutation(c.config, OpUpdate)
	return &BlogCommentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlogCommentClient) UpdateOne(bc *BlogComment) *BlogCommentUpdateOne {
	mutation := newBlogCommentMutation(c.config, OpUpdateOne, withBlogComment(bc))
	return &BlogCommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlogCommentClient) UpdateOneID(id uuid.UUID) *BlogCommentUpdateOne {
	mutation := newBlogCommentMutation(c.config, OpUpdateOne, withBlogCommentID(id))
	return &BlogCommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BlogComment.
func (c *BlogCommentClient) Delete() *BlogCommentDelete {
	mutation := newBlogCommentMutation(c.config, OpDelete)
	return &BlogCommentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BlogCommentClient) DeleteOne(bc *BlogComment) *BlogCommentDeleteOne {
	return c.DeleteOneID(bc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BlogCommentClient) DeleteOneID(id uuid.UUID) *BlogCommentDeleteOne {
	builder := c.Delete().Where(blogcomment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlogCommentDeleteOne{builder}
}

// Query returns a query builder for BlogComment.
func (c *BlogCommentClient) Query() *BlogCommentQuery {
	return &BlogCommentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBlogComment},
		inters: c.Interceptors(),
	}
}

// Get returns a BlogComment entity by its id.
func (c *BlogCommentClient) Get(ctx context.Context, id uuid.UUID) (*BlogComment, error) {
	return c.Query().Where(blogcomment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlogCommentClient) GetX(ctx context.Context, id uuid.UUID) *BlogComment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPost queries the post edge of a BlogComment.
func (c *BlogCommentClient) QueryPost(bc *BlogComment) *BlogPostQuery {
	query := (&BlogPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogcomment.Table, blogcomment.FieldID, id),
			sqlgraph.To(blogpost.Table, blogpost.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, blogcomment.PostTable, blogcomment.PostColumn),
		)
		fromV = sqlgraph.Neighbors(bc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a BlogComment.
func (c *BlogCommentClient) QueryParent(bc *BlogComment) *BlogCommentQuery {
	query := (&BlogCommentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogcomment.Table, blogcomment.FieldID, id),
			sqlgraph.To(blogcomment.Table, blogcomment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, blogcomment.ParentTable, blogcomment.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(bc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReplies queries the replies edge of a BlogComment.
func (c *BlogCommentClient) QueryReplies(bc *BlogComment) *BlogCommentQuery {
	query := (&BlogCommentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogcomment.Table, blogcomment.FieldID, id),
			sqlgraph.To(blogcomment.Table, blogcomment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, blogcomment.RepliesTable, blogcomment.RepliesColumn),
		)
		fromV = sqlgraph.Neighbors(bc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BlogCommentClient) Hooks() []Hook {
	return c.hooks.BlogComment
}

// Interceptors returns the client interceptors.
func (c *BlogCommentClient) Interceptors() []Interceptor {
	return c.inters.BlogComment
}

func (c *BlogCommentClient) mutate(ctx context.Context, m *BlogCommentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BlogCommentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BlogCommentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BlogCommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BlogCommentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BlogComment mutation op: %q", m.Op())
	}
}

// BlogPostClient is a client for the BlogPost schema.
type BlogPostClient struct {
	config
}

// NewBlogPostClient returns a client for the BlogPost from the given config.
func NewBlogPostClient(c config) *BlogPostClient {
	return &BlogPostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `blogpost.Hooks(f(g(h())))`.
func (c *BlogPostClient) Use(hooks ...Hook) {
	c.hooks.BlogPost = append(c.hooks.BlogPost, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `blogpost.Intercept(f(g(h())))`.
func (c *BlogPostClient) Intercept(interceptors ...Interceptor) {
	c.inters.BlogPost = append(c.inters.BlogPost, interceptors...)
}

// Create returns a builder for creating a BlogPost entity.
func (c *BlogPostClient) Create() *BlogPostCreate {
	mutation := newBlogPostMutation(c.config, OpCreate)
	return &BlogPostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BlogPost entities.
func (c *BlogPostClient) CreateBulk(builders ...*BlogPostCreate) *BlogPostCreateBulk {
	return &BlogPostCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BlogPostClient) MapCreateBulk(slice any, setFunc func(*BlogPostCreate, int)) *BlogPostCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BlogPostCreateBulk{err: fmt.Errorf("calling to BlogPostClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BlogPostCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BlogPostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BlogPost.
func (c *BlogPostClient) Update() *BlogPostUpdate {
	mutation := newBlogPostMutation(c.config, OpUpdate)
	return &BlogPostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlogPostClient) UpdateOne(bp *BlogPost) *BlogPostUpdateOne {
	mutation := newBlogPostMutation(c.config, OpUpdateOne, withBlogPost(bp))
	return &BlogPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlogPostClient) UpdateOneID(id uuid.UUID) *BlogPostUpdateOne {
	mutation := newBlogPostMutation(c.config, OpUpdateOne, withBlogPostID(id))
	return &BlogPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BlogPost.
func (c *BlogPostClient) Delete() *BlogPostDelete {
	mutation := newBlogPostMutation(c.config, OpDelete)
	return &BlogPostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BlogPostClient) DeleteOne(bp *BlogPost) *BlogPostDeleteOne {
	return c.DeleteOneID(bp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BlogPostClient) DeleteOneID(id uuid.UUID) *BlogPostDeleteOne {
	builder := c.Delete().Where(blogpost.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlogPostDeleteOne{builder}
}

// Query returns a query builder for BlogPost.
func (c *BlogPostClient) Query() *BlogPostQuery {
	return &BlogPostQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBlogPost},
		inters: c.Interceptors(),
	}
}

// Get returns a BlogPost entity by its id.
func (c *BlogPostClient) Get(ctx context.Context, id uuid.UUID) (*BlogPost, error) {
	return c.Query().Where(blogpost.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlogPostClient) GetX(ctx context.Context, id uuid.UUID) *BlogPost {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a BlogPost.
func (c *BlogPostClient) QueryUser(bp *BlogPost) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogpost.Table, blogpost.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, blogpost.UserTable, blogpost.UserColumn),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCategory queries the category edge of a BlogPost.
func (c *BlogPostClient) QueryCategory(bp *BlogPost) *BlogCategoryQuery {
	query := (&BlogCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogpost.Table, blogpost.FieldID, id),
			sqlgraph.To(blogcategory.Table, blogcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, blogpost.CategoryTable, blogpost.CategoryColumn),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySeries queries the series edge of a BlogPost.
func (c *BlogPostClient) QuerySeries(bp *BlogPost) *BlogSeriesQuery {
	query := (&BlogSeriesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogpost.Table, blogpost.FieldID, id),
			sqlgraph.To(blogseries.Table, blogseries.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, blogpost.SeriesTable, blogpost.SeriesColumn),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTags queries the tags edge of a BlogPost.
func (c *BlogPostClient) QueryTags(bp *BlogPost) *BlogTagQuery {
	query := (&BlogTagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogpost.Table, blogpost.FieldID, id),
			sqlgraph.To(blogtag.Table, blogtag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, blogpost.TagsTable, blogpost.TagsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryComments queries the comments edge of a BlogPost.
func (c *BlogPostClient) QueryComments(bp *BlogPost) *BlogCommentQuery {
	query := (&BlogCommentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogpost.Table, blogpost.FieldID, id),
			sqlgraph.To(blogcomment.Table, blogcomment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, blogpost.CommentsTable, blogpost.CommentsColumn),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BlogPostClient) Hooks() []Hook {
	return c.hooks.BlogPost
}

// Interceptors returns the client interceptors.
func (c *BlogPostClient) Interceptors() []Interceptor {
	return c.inters.BlogPost
}

func (c *BlogPostClient) mutate(ctx context.Context, m *BlogPostMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BlogPostCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BlogPostUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BlogPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BlogPostDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BlogPost mutation op: %q", m.Op())
	}
}

// BlogSeriesClient is a client for the BlogSeries schema.
type BlogSeriesClient struct {
	config
}

// NewBlogSeriesClient returns a client for the BlogSeries from the given config.
func NewBlogSeriesClient(c config) *BlogSeriesClient {
	return &BlogSeriesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `blogseries.Hooks(f(g(h())))`.
func (c *BlogSeriesClient) Use(hooks ...Hook) {
	c.hooks.BlogSeries = append(c.hooks.BlogSeries, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `blogseries.Intercept(f(g(h())))`.
func (c *BlogSeriesClient) Intercept(interceptors ...Interceptor) {
	c.inters.BlogSeries = append(c.inters.BlogSeries, interceptors...)
}

// Create returns a builder for creating a BlogSeries entity.
func (c *BlogSeriesClient) Create() *BlogSeriesCreate {
	mutation := newBlogSeriesMutation(c.config, OpCreate)
	return &BlogSeriesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BlogSeries entities.
func (c *BlogSeriesClient) CreateBulk(builders ...*BlogSeriesCreate) *BlogSeriesCreateBulk {
	return &BlogSeriesCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BlogSeriesClient) MapCreateBulk(slice any, setFunc func(*BlogSeriesCreate, int)) *BlogSeriesCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BlogSeriesCreateBulk{err: fmt.Errorf("calling to BlogSeriesClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BlogSeriesCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BlogSeriesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BlogSeries.
func (c *BlogSeriesClient) Update() *BlogSeriesUpdate {
	mutation := newBlogSeriesMutation(c.config, OpUpdate)
	return &BlogSeriesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlogSeriesClient) UpdateOne(bs *BlogSeries) *BlogSeriesUpdateOne {
	mutation := newBlogSeriesMutation(c.config, OpUpdateOne, withBlogSeries(bs))
	return &BlogSeriesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlogSeriesClient) UpdateOneID(id uuid.UUID) *BlogSeriesUpdateOne {
	mutation := newBlogSeriesMutation(c.config, OpUpdateOne, withBlogSeriesID(id))
	return &BlogSeriesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BlogSeries.
func (c *BlogSeriesClient) Delete() *BlogSeriesDelete {
	mutation := newBlogSeriesMutation(c.config, OpDelete)
	return &BlogSeriesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BlogSeriesClient) DeleteOne(bs *BlogSeries) *BlogSeriesDeleteOne {
	return c.DeleteOneID(bs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BlogSeriesClient) DeleteOneID(id uuid.UUID) *BlogSeriesDeleteOne {
	builder := c.Delete().Where(blogseries.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlogSeriesDeleteOne{builder}
}

// Query returns a query builder for BlogSeries.
func (c *BlogSeriesClient) Query() *BlogSeriesQuery {
	return &BlogSeriesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBlogSeries},
		inters: c.Interceptors(),
	}
}

// Get returns a BlogSeries entity by its id.
func (c *BlogSeriesClient) Get(ctx context.Context, id uuid.UUID) (*BlogSeries, error) {
	return c.Query().Where(blogseries.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlogSeriesClient) GetX(ctx context.Context, id uuid.UUID) *BlogSeries {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a BlogSeries.
func (c *BlogSeriesClient) QueryUser(bs *BlogSeries) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogseries.Table, blogseries.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, blogseries.UserTable, blogseries.UserColumn),
		)
		fromV = sqlgraph.Neighbors(bs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBlogPosts queries the blog_posts edge of a BlogSeries.
func (c *BlogSeriesClient) QueryBlogPosts(bs *BlogSeries) *BlogPostQuery {
	query := (&BlogPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogseries.Table, blogseries.FieldID, id),
			sqlgraph.To(blogpost.Table, blogpost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, blogseries.BlogPostsTable, blogseries.BlogPostsColumn),
		)
		fromV = sqlgraph.Neighbors(bs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BlogSeriesClient) Hooks() []Hook {
	return c.hooks.BlogSeries
}

// Interceptors returns the client interceptors.
func (c *BlogSeriesClient) Interceptors() []Interceptor {
	return c.inters.BlogSeries
}

func (c *BlogSeriesClient) mutate(ctx context.Context, m *BlogSeriesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BlogSeriesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BlogSeriesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BlogSeriesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BlogSeriesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BlogSeries mutation op: %q", m.Op())
	}
}

// BlogTagClient is a client for the BlogTag schema.
type BlogTagClient struct {
	config
}

// NewBlogTagClient returns a client for the BlogTag from the given config.
func NewBlogTagClient(c config) *BlogTagClient {
	return &BlogTagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `blogtag.Hooks(f(g(h())))`.
func (c *BlogTagClient) Use(hooks ...Hook) {
	c.hooks.BlogTag = append(c.hooks.BlogTag, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `blogtag.Intercept(f(g(h())))`.
func (c *BlogTagClient) Intercept(interceptors ...Interceptor) {
	c.inters.BlogTag = append(c.inters.BlogTag, interceptors...)
}

// Create returns a builder for creating a BlogTag entity.
func (c *BlogTagClient) Create() *BlogTagCreate {
	mutation := newBlogTagMutation(c.config, OpCreate)
	return &BlogTagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BlogTag entities.
func (c *BlogTagClient) CreateBulk(builders ...*BlogTagCreate) *BlogTagCreateBulk {
	return &BlogTagCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BlogTagClient) MapCreateBulk(slice any, setFunc func(*BlogTagCreate, int)) *BlogTagCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BlogTagCreateBulk{err: fmt.Errorf("calling to BlogTagClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BlogTagCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BlogTagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BlogTag.
func (c *BlogTagClient) Update() *BlogTagUpdate {
	mutation := newBlogTagMutation(c.config, OpUpdate)
	return &BlogTagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlogTagClient) UpdateOne(bt *BlogTag) *BlogTagUpdateOne {
	mutation := newBlogTagMutation(c.config, OpUpdateOne, withBlogTag(bt))
	return &BlogTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlogTagClient) UpdateOneID(id uuid.UUID) *BlogTagUpdateOne {
	mutation := newBlogTagMutation(c.config, OpUpdateOne, withBlogTagID(id))
	return &BlogTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BlogTag.
func (c *BlogTagClient) Delete() *BlogTagDelete {
	mutation := newBlogTagMutation(c.config, OpDelete)
	return &BlogTagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BlogTagClient) DeleteOne(bt *BlogTag) *BlogTagDeleteOne {
	return c.DeleteOneID(bt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BlogTagClient) DeleteOneID(id uuid.UUID) *BlogTagDeleteOne {
	builder := c.Delete().Where(blogtag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlogTagDeleteOne{builder}
}

// Query returns a query builder for BlogTag.
func (c *BlogTagClient) Query() *BlogTagQuery {
	return &BlogTagQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBlogTag},
		inters: c.Interceptors(),
	}
}

// Get returns a BlogTag entity by its id.
func (c *BlogTagClient) Get(ctx context.Context, id uuid.UUID) (*BlogTag, error) {
	return c.Query().Where(blogtag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlogTagClient) GetX(ctx context.Context, id uuid.UUID) *BlogTag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBlogPosts queries the blog_posts edge of a BlogTag.
func (c *BlogTagClient) QueryBlogPosts(bt *BlogTag) *BlogPostQuery {
	query := (&BlogPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogtag.Table, blogtag.FieldID, id),
			sqlgraph.To(blogpost.Table, blogpost.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, blogtag.BlogPostsTable, blogtag.BlogPostsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(bt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BlogTagClient) Hooks() []Hook {
	return c.hooks.BlogTag
}

// Interceptors returns the client interceptors.
func (c *BlogTagClient) Interceptors() []Interceptor {
	return c.inters.BlogTag
}

func (c *BlogTagClient) mutate(ctx context.Context, m *BlogTagMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BlogTagCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BlogTagUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BlogTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BlogTagDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BlogTag mutation op: %q", m.Op())
	}
}

// EducationClient is a client for the Education schema.
type EducationClient struct {
	config
}

// NewEducationClient returns a client for the Education from the given config.
func NewEducationClient(c config) *EducationClient {
	return &EducationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `education.Hooks(f(g(h())))`.
func (c *EducationClient) Use(hooks ...Hook) {
	c.hooks.Education = append(c.hooks.Education, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `education.Intercept(f(g(h())))`.
func (c *EducationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Education = append(c.inters.Education, interceptors...)
}

// Create returns a builder for creating a Education entity.
func (c *EducationClient) Create() *EducationCreate {
	mutation := newEducationMutation(c.config, OpCreate)
	return &EducationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Education entities.
func (c *EducationClient) CreateBulk(builders ...*EducationCreate) *EducationCreateBulk {
	return &EducationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EducationClient) MapCreateBulk(slice any, setFunc func(*EducationCreate, int)) *EducationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EducationCreateBulk{err: fmt.Errorf("calling to EducationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EducationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EducationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Education.
func (c *EducationClient) Update() *EducationUpdate {
	mutation := newEducationMutation(c.config, OpUpdate)
	return &EducationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EducationClient) UpdateOne(e *Education) *EducationUpdateOne {
	mutation := newEducationMutation(c.config, OpUpdateOne, withEducation(e))
	return &EducationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EducationClient) UpdateOneID(id uuid.UUID) *EducationUpdateOne {
	mutation := newEducationMutation(c.config, OpUpdateOne, withEducationID(id))
	return &EducationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Education.
func (c *EducationClient) Delete() *EducationDelete {
	mutation := newEducationMutation(c.config, OpDelete)
	return &EducationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EducationClient) DeleteOne(e *Education) *EducationDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EducationClient) DeleteOneID(id uuid.UUID) *EducationDeleteOne {
	builder := c.Delete().Where(education.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EducationDeleteOne{builder}
}

// Query returns a query builder for Education.
func (c *EducationClient) Query() *EducationQuery {
	return &EducationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEducation},
		inters: c.Interceptors(),
	}
}

// Get returns a Education entity by its id.
func (c *EducationClient) Get(ctx context.Context, id uuid.UUID) (*Education, error) {
	return c.Query().Where(education.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EducationClient) GetX(ctx context.Context, id uuid.UUID) *Education {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Education.
func (c *EducationClient) QueryUser(e *Education) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(education.Table, education.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, education.UserTable, education.UserColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EducationClient) Hooks() []Hook {
	return c.hooks.Education
}

// Interceptors returns the client interceptors.
func (c *EducationClient) Interceptors() []Interceptor {
	return c.inters.Education
}

func (c *EducationClient) mutate(ctx context.Context, m *EducationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EducationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EducationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EducationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EducationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Education mutation op: %q", m.Op())
	}
}

// IdeaClient is a client for the Idea schema.
type IdeaClient struct {
	config
}

// NewIdeaClient returns a client for the Idea from the given config.
func NewIdeaClient(c config) *IdeaClient {
	return &IdeaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `idea.Hooks(f(g(h())))`.
func (c *IdeaClient) Use(hooks ...Hook) {
	c.hooks.Idea = append(c.hooks.Idea, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `idea.Intercept(f(g(h())))`.
func (c *IdeaClient) Intercept(interceptors ...Interceptor) {
	c.inters.Idea = append(c.inters.Idea, interceptors...)
}

// Create returns a builder for creating a Idea entity.
func (c *IdeaClient) Create() *IdeaCreate {
	mutation := newIdeaMutation(c.config, OpCreate)
	return &IdeaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Idea entities.
func (c *IdeaClient) CreateBulk(builders ...*IdeaCreate) *IdeaCreateBulk {
	return &IdeaCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *IdeaClient) MapCreateBulk(slice any, setFunc func(*IdeaCreate, int)) *IdeaCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &IdeaCreateBulk{err: fmt.Errorf("calling to IdeaClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*IdeaCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &IdeaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Idea.
func (c *IdeaClient) Update() *IdeaUpdate {
	mutation := newIdeaMutation(c.config, OpUpdate)
	return &IdeaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IdeaClient) UpdateOne(i *Idea) *IdeaUpdateOne {
	mutation := newIdeaMutation(c.config, OpUpdateOne, withIdea(i))
	return &IdeaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IdeaClient) UpdateOneID(id uuid.UUID) *IdeaUpdateOne {
	mutation := newIdeaMutation(c.config, OpUpdateOne, withIdeaID(id))
	return &IdeaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Idea.
func (c *IdeaClient) Delete() *IdeaDelete {
	mutation := newIdeaMutation(c.config, OpDelete)
	return &IdeaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IdeaClient) DeleteOne(i *Idea) *IdeaDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IdeaClient) DeleteOneID(id uuid.UUID) *IdeaDeleteOne {
	builder := c.Delete().Where(idea.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IdeaDeleteOne{builder}
}

// Query returns a query builder for Idea.
func (c *IdeaClient) Query() *IdeaQuery {
	return &IdeaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIdea},
		inters: c.Interceptors(),
	}
}

// Get returns a Idea entity by its id.
func (c *IdeaClient) Get(ctx context.Context, id uuid.UUID) (*Idea, error) {
	return c.Query().Where(idea.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IdeaClient) GetX(ctx context.Context, id uuid.UUID) *Idea {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Idea.
func (c *IdeaClient) QueryUser(i *Idea) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(idea.Table, idea.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, idea.UserTable, idea.UserColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IdeaClient) Hooks() []Hook {
	return c.hooks.Idea
}

// Interceptors returns the client interceptors.
func (c *IdeaClient) Interceptors() []Interceptor {
	return c.inters.Idea
}

func (c *IdeaClient) mutate(ctx context.Context, m *IdeaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IdeaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IdeaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IdeaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IdeaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Idea mutation op: %q", m.Op())
	}
}

// LanguageClient is a client for the Language schema.
type LanguageClient struct {
	config
}

// NewLanguageClient returns a client for the Language from the given config.
func NewLanguageClient(c config) *LanguageClient {
	return &LanguageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `language.Hooks(f(g(h())))`.
func (c *LanguageClient) Use(hooks ...Hook) {
	c.hooks.Language = append(c.hooks.Language, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `language.Intercept(f(g(h())))`.
func (c *LanguageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Language = append(c.inters.Language, interceptors...)
}

// Create returns a builder for creating a Language entity.
func (c *LanguageClient) Create() *LanguageCreate {
	mutation := newLanguageMutation(c.config, OpCreate)
	return &LanguageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Language entities.
func (c *LanguageClient) CreateBulk(builders ...*LanguageCreate) *LanguageCreateBulk {
	return &LanguageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LanguageClient) MapCreateBulk(slice any, setFunc func(*LanguageCreate, int)) *LanguageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LanguageCreateBulk{err: fmt.Errorf("calling to LanguageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LanguageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LanguageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Language.
func (c *LanguageClient) Update() *LanguageUpdate {
	mutation := newLanguageMutation(c.config, OpUpdate)
	return &LanguageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LanguageClient) UpdateOne(l *Language) *LanguageUpdateOne {
	mutation := newLanguageMutation(c.config, OpUpdateOne, withLanguage(l))
	return &LanguageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LanguageClient) UpdateOneID(id int) *LanguageUpdateOne {
	mutation := newLanguageMutation(c.config, OpUpdateOne, withLanguageID(id))
	return &LanguageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Language.
func (c *LanguageClient) Delete() *LanguageDelete {
	mutation := newLanguageMutation(c.config, OpDelete)
	return &LanguageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LanguageClient) DeleteOne(l *Language) *LanguageDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LanguageClient) DeleteOneID(id int) *LanguageDeleteOne {
	builder := c.Delete().Where(language.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LanguageDeleteOne{builder}
}

// Query returns a query builder for Language.
func (c *LanguageClient) Query() *LanguageQuery {
	return &LanguageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLanguage},
		inters: c.Interceptors(),
	}
}

// Get returns a Language entity by its id.
func (c *LanguageClient) Get(ctx context.Context, id int) (*Language, error) {
	return c.Query().Where(language.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LanguageClient) GetX(ctx context.Context, id int) *Language {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LanguageClient) Hooks() []Hook {
	return c.hooks.Language
}

// Interceptors returns the client interceptors.
func (c *LanguageClient) Interceptors() []Interceptor {
	return c.inters.Language
}

func (c *LanguageClient) mutate(ctx context.Context, m *LanguageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LanguageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LanguageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LanguageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LanguageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Language mutation op: %q", m.Op())
	}
}

// PersonalInfoClient is a client for the PersonalInfo schema.
type PersonalInfoClient struct {
	config
}

// NewPersonalInfoClient returns a client for the PersonalInfo from the given config.
func NewPersonalInfoClient(c config) *PersonalInfoClient {
	return &PersonalInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `personalinfo.Hooks(f(g(h())))`.
func (c *PersonalInfoClient) Use(hooks ...Hook) {
	c.hooks.PersonalInfo = append(c.hooks.PersonalInfo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `personalinfo.Intercept(f(g(h())))`.
func (c *PersonalInfoClient) Intercept(interceptors ...Interceptor) {
	c.inters.PersonalInfo = append(c.inters.PersonalInfo, interceptors...)
}

// Create returns a builder for creating a PersonalInfo entity.
func (c *PersonalInfoClient) Create() *PersonalInfoCreate {
	mutation := newPersonalInfoMutation(c.config, OpCreate)
	return &PersonalInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PersonalInfo entities.
func (c *PersonalInfoClient) CreateBulk(builders ...*PersonalInfoCreate) *PersonalInfoCreateBulk {
	return &PersonalInfoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PersonalInfoClient) MapCreateBulk(slice any, setFunc func(*PersonalInfoCreate, int)) *PersonalInfoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PersonalInfoCreateBulk{err: fmt.Errorf("calling to PersonalInfoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PersonalInfoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PersonalInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PersonalInfo.
func (c *PersonalInfoClient) Update() *PersonalInfoUpdate {
	mutation := newPersonalInfoMutation(c.config, OpUpdate)
	return &PersonalInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PersonalInfoClient) UpdateOne(pi *PersonalInfo) *PersonalInfoUpdateOne {
	mutation := newPersonalInfoMutation(c.config, OpUpdateOne, withPersonalInfo(pi))
	return &PersonalInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PersonalInfoClient) UpdateOneID(id uuid.UUID) *PersonalInfoUpdateOne {
	mutation := newPersonalInfoMutation(c.config, OpUpdateOne, withPersonalInfoID(id))
	return &PersonalInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PersonalInfo.
func (c *PersonalInfoClient) Delete() *PersonalInfoDelete {
	mutation := newPersonalInfoMutation(c.config, OpDelete)
	return &PersonalInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PersonalInfoClient) DeleteOne(pi *PersonalInfo) *PersonalInfoDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PersonalInfoClient) DeleteOneID(id uuid.UUID) *PersonalInfoDeleteOne {
	builder := c.Delete().Where(personalinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PersonalInfoDeleteOne{builder}
}

// Query returns a query builder for PersonalInfo.
func (c *PersonalInfoClient) Query() *PersonalInfoQuery {
	return &PersonalInfoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePersonalInfo},
		inters: c.Interceptors(),
	}
}

// Get returns a PersonalInfo entity by its id.
func (c *PersonalInfoClient) Get(ctx context.Context, id uuid.UUID) (*PersonalInfo, error) {
	return c.Query().Where(personalinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PersonalInfoClient) GetX(ctx context.Context, id uuid.UUID) *PersonalInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a PersonalInfo.
func (c *PersonalInfoClient) QueryUser(pi *PersonalInfo) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(personalinfo.Table, personalinfo.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, personalinfo.UserTable, personalinfo.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PersonalInfoClient) Hooks() []Hook {
	return c.hooks.PersonalInfo
}

// Interceptors returns the client interceptors.
func (c *PersonalInfoClient) Interceptors() []Interceptor {
	return c.inters.PersonalInfo
}

func (c *PersonalInfoClient) mutate(ctx context.Context, m *PersonalInfoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PersonalInfoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PersonalInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PersonalInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PersonalInfoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PersonalInfo mutation op: %q", m.Op())
	}
}

// ProjectClient is a client for the Project schema.
type ProjectClient struct {
	config
}

// NewProjectClient returns a client for the Project from the given config.
func NewProjectClient(c config) *ProjectClient {
	return &ProjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `project.Hooks(f(g(h())))`.
func (c *ProjectClient) Use(hooks ...Hook) {
	c.hooks.Project = append(c.hooks.Project, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `project.Intercept(f(g(h())))`.
func (c *ProjectClient) Intercept(interceptors ...Interceptor) {
	c.inters.Project = append(c.inters.Project, interceptors...)
}

// Create returns a builder for creating a Project entity.
func (c *ProjectClient) Create() *ProjectCreate {
	mutation := newProjectMutation(c.config, OpCreate)
	return &ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Project entities.
func (c *ProjectClient) CreateBulk(builders ...*ProjectCreate) *ProjectCreateBulk {
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProjectClient) MapCreateBulk(slice any, setFunc func(*ProjectCreate, int)) *ProjectCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProjectCreateBulk{err: fmt.Errorf("calling to ProjectClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProjectCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Project.
func (c *ProjectClient) Update() *ProjectUpdate {
	mutation := newProjectMutation(c.config, OpUpdate)
	return &ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectClient) UpdateOne(pr *Project) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProject(pr))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectClient) UpdateOneID(id uuid.UUID) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProjectID(id))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Project.
func (c *ProjectClient) Delete() *ProjectDelete {
	mutation := newProjectMutation(c.config, OpDelete)
	return &ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProjectClient) DeleteOne(pr *Project) *ProjectDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProjectClient) DeleteOneID(id uuid.UUID) *ProjectDeleteOne {
	builder := c.Delete().Where(project.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectDeleteOne{builder}
}

// Query returns a query builder for Project.
func (c *ProjectClient) Query() *ProjectQuery {
	return &ProjectQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProject},
		inters: c.Interceptors(),
	}
}

// Get returns a Project entity by its id.
func (c *ProjectClient) Get(ctx context.Context, id uuid.UUID) (*Project, error) {
	return c.Query().Where(project.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectClient) GetX(ctx context.Context, id uuid.UUID) *Project {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Project.
func (c *ProjectClient) QueryUser(pr *Project) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, project.UserTable, project.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTechnologies queries the technologies edge of a Project.
func (c *ProjectClient) QueryTechnologies(pr *Project) *ProjectTechnologyQuery {
	query := (&ProjectTechnologyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(projecttechnology.Table, projecttechnology.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.TechnologiesTable, project.TechnologiesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDetail queries the detail edge of a Project.
func (c *ProjectClient) QueryDetail(pr *Project) *ProjectDetailQuery {
	query := (&ProjectDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(projectdetail.Table, projectdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, project.DetailTable, project.DetailColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImages queries the images edge of a Project.
func (c *ProjectClient) QueryImages(pr *Project) *ProjectImageQuery {
	query := (&ProjectImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(projectimage.Table, projectimage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.ImagesTable, project.ImagesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectClient) Hooks() []Hook {
	return c.hooks.Project
}

// Interceptors returns the client interceptors.
func (c *ProjectClient) Interceptors() []Interceptor {
	return c.inters.Project
}

func (c *ProjectClient) mutate(ctx context.Context, m *ProjectMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Project mutation op: %q", m.Op())
	}
}

// ProjectDetailClient is a client for the ProjectDetail schema.
type ProjectDetailClient struct {
	config
}

// NewProjectDetailClient returns a client for the ProjectDetail from the given config.
func NewProjectDetailClient(c config) *ProjectDetailClient {
	return &ProjectDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projectdetail.Hooks(f(g(h())))`.
func (c *ProjectDetailClient) Use(hooks ...Hook) {
	c.hooks.ProjectDetail = append(c.hooks.ProjectDetail, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `projectdetail.Intercept(f(g(h())))`.
func (c *ProjectDetailClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProjectDetail = append(c.inters.ProjectDetail, interceptors...)
}

// Create returns a builder for creating a ProjectDetail entity.
func (c *ProjectDetailClient) Create() *ProjectDetailCreate {
	mutation := newProjectDetailMutation(c.config, OpCreate)
	return &ProjectDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectDetail entities.
func (c *ProjectDetailClient) CreateBulk(builders ...*ProjectDetailCreate) *ProjectDetailCreateBulk {
	return &ProjectDetailCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProjectDetailClient) MapCreateBulk(slice any, setFunc func(*ProjectDetailCreate, int)) *ProjectDetailCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProjectDetailCreateBulk{err: fmt.Errorf("calling to ProjectDetailClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProjectDetailCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProjectDetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectDetail.
func (c *ProjectDetailClient) Update() *ProjectDetailUpdate {
	mutation := newProjectDetailMutation(c.config, OpUpdate)
	return &ProjectDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectDetailClient) UpdateOne(pd *ProjectDetail) *ProjectDetailUpdateOne {
	mutation := newProjectDetailMutation(c.config, OpUpdateOne, withProjectDetail(pd))
	return &ProjectDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectDetailClient) UpdateOneID(id uuid.UUID) *ProjectDetailUpdateOne {
	mutation := newProjectDetailMutation(c.config, OpUpdateOne, withProjectDetailID(id))
	return &ProjectDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectDetail.
func (c *ProjectDetailClient) Delete() *ProjectDetailDelete {
	mutation := newProjectDetailMutation(c.config, OpDelete)
	return &ProjectDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProjectDetailClient) DeleteOne(pd *ProjectDetail) *ProjectDetailDeleteOne {
	return c.DeleteOneID(pd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProjectDetailClient) DeleteOneID(id uuid.UUID) *ProjectDetailDeleteOne {
	builder := c.Delete().Where(projectdetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectDetailDeleteOne{builder}
}

// Query returns a query builder for ProjectDetail.
func (c *ProjectDetailClient) Query() *ProjectDetailQuery {
	return &ProjectDetailQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProjectDetail},
		inters: c.Interceptors(),
	}
}

// Get returns a ProjectDetail entity by its id.
func (c *ProjectDetailClient) Get(ctx context.Context, id uuid.UUID) (*ProjectDetail, error) {
	return c.Query().Where(projectdetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectDetailClient) GetX(ctx context.Context, id uuid.UUID) *ProjectDetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a ProjectDetail.
func (c *ProjectDetailClient) QueryProject(pd *ProjectDetail) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectdetail.Table, projectdetail.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, projectdetail.ProjectTable, projectdetail.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(pd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectDetailClient) Hooks() []Hook {
	return c.hooks.ProjectDetail
}

// Interceptors returns the client interceptors.
func (c *ProjectDetailClient) Interceptors() []Interceptor {
	return c.inters.ProjectDetail
}

func (c *ProjectDetailClient) mutate(ctx context.Context, m *ProjectDetailMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProjectDetailCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProjectDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProjectDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProjectDetailDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProjectDetail mutation op: %q", m.Op())
	}
}

// ProjectImageClient is a client for the ProjectImage schema.
type ProjectImageClient struct {
	config
}

// NewProjectImageClient returns a client for the ProjectImage from the given config.
func NewProjectImageClient(c config) *ProjectImageClient {
	return &ProjectImageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projectimage.Hooks(f(g(h())))`.
func (c *ProjectImageClient) Use(hooks ...Hook) {
	c.hooks.ProjectImage = append(c.hooks.ProjectImage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `projectimage.Intercept(f(g(h())))`.
func (c *ProjectImageClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProjectImage = append(c.inters.ProjectImage, interceptors...)
}

// Create returns a builder for creating a ProjectImage entity.
func (c *ProjectImageClient) Create() *ProjectImageCreate {
	mutation := newProjectImageMutation(c.config, OpCreate)
	return &ProjectImageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectImage entities.
func (c *ProjectImageClient) CreateBulk(builders ...*ProjectImageCreate) *ProjectImageCreateBulk {
	return &ProjectImageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProjectImageClient) MapCreateBulk(slice any, setFunc func(*ProjectImageCreate, int)) *ProjectImageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProjectImageCreateBulk{err: fmt.Errorf("calling to ProjectImageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProjectImageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProjectImageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectImage.
func (c *ProjectImageClient) Update() *ProjectImageUpdate {
	mutation := newProjectImageMutation(c.config, OpUpdate)
	return &ProjectImageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectImageClient) UpdateOne(pi *ProjectImage) *ProjectImageUpdateOne {
	mutation := newProjectImageMutation(c.config, OpUpdateOne, withProjectImage(pi))
	return &ProjectImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectImageClient) UpdateOneID(id uuid.UUID) *ProjectImageUpdateOne {
	mutation := newProjectImageMutation(c.config, OpUpdateOne, withProjectImageID(id))
	return &ProjectImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectImage.
func (c *ProjectImageClient) Delete() *ProjectImageDelete {
	mutation := newProjectImageMutation(c.config, OpDelete)
	return &ProjectImageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProjectImageClient) DeleteOne(pi *ProjectImage) *ProjectImageDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProjectImageClient) DeleteOneID(id uuid.UUID) *ProjectImageDeleteOne {
	builder := c.Delete().Where(projectimage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectImageDeleteOne{builder}
}

// Query returns a query builder for ProjectImage.
func (c *ProjectImageClient) Query() *ProjectImageQuery {
	return &ProjectImageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProjectImage},
		inters: c.Interceptors(),
	}
}

// Get returns a ProjectImage entity by its id.
func (c *ProjectImageClient) Get(ctx context.Context, id uuid.UUID) (*ProjectImage, error) {
	return c.Query().Where(projectimage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectImageClient) GetX(ctx context.Context, id uuid.UUID) *ProjectImage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a ProjectImage.
func (c *ProjectImageClient) QueryProject(pi *ProjectImage) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectimage.Table, projectimage.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectimage.ProjectTable, projectimage.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectImageClient) Hooks() []Hook {
	return c.hooks.ProjectImage
}

// Interceptors returns the client interceptors.
func (c *ProjectImageClient) Interceptors() []Interceptor {
	return c.inters.ProjectImage
}

func (c *ProjectImageClient) mutate(ctx context.Context, m *ProjectImageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProjectImageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProjectImageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProjectImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProjectImageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProjectImage mutation op: %q", m.Op())
	}
}

// ProjectTechnologyClient is a client for the ProjectTechnology schema.
type ProjectTechnologyClient struct {
	config
}

// NewProjectTechnologyClient returns a client for the ProjectTechnology from the given config.
func NewProjectTechnologyClient(c config) *ProjectTechnologyClient {
	return &ProjectTechnologyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projecttechnology.Hooks(f(g(h())))`.
func (c *ProjectTechnologyClient) Use(hooks ...Hook) {
	c.hooks.ProjectTechnology = append(c.hooks.ProjectTechnology, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `projecttechnology.Intercept(f(g(h())))`.
func (c *ProjectTechnologyClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProjectTechnology = append(c.inters.ProjectTechnology, interceptors...)
}

// Create returns a builder for creating a ProjectTechnology entity.
func (c *ProjectTechnologyClient) Create() *ProjectTechnologyCreate {
	mutation := newProjectTechnologyMutation(c.config, OpCreate)
	return &ProjectTechnologyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectTechnology entities.
func (c *ProjectTechnologyClient) CreateBulk(builders ...*ProjectTechnologyCreate) *ProjectTechnologyCreateBulk {
	return &ProjectTechnologyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProjectTechnologyClient) MapCreateBulk(slice any, setFunc func(*ProjectTechnologyCreate, int)) *ProjectTechnologyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProjectTechnologyCreateBulk{err: fmt.Errorf("calling to ProjectTechnologyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProjectTechnologyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProjectTechnologyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectTechnology.
func (c *ProjectTechnologyClient) Update() *ProjectTechnologyUpdate {
	mutation := newProjectTechnologyMutation(c.config, OpUpdate)
	return &ProjectTechnologyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectTechnologyClient) UpdateOne(pt *ProjectTechnology) *ProjectTechnologyUpdateOne {
	mutation := newProjectTechnologyMutation(c.config, OpUpdateOne, withProjectTechnology(pt))
	return &ProjectTechnologyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectTechnologyClient) UpdateOneID(id uuid.UUID) *ProjectTechnologyUpdateOne {
	mutation := newProjectTechnologyMutation(c.config, OpUpdateOne, withProjectTechnologyID(id))
	return &ProjectTechnologyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectTechnology.
func (c *ProjectTechnologyClient) Delete() *ProjectTechnologyDelete {
	mutation := newProjectTechnologyMutation(c.config, OpDelete)
	return &ProjectTechnologyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProjectTechnologyClient) DeleteOne(pt *ProjectTechnology) *ProjectTechnologyDeleteOne {
	return c.DeleteOneID(pt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProjectTechnologyClient) DeleteOneID(id uuid.UUID) *ProjectTechnologyDeleteOne {
	builder := c.Delete().Where(projecttechnology.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectTechnologyDeleteOne{builder}
}

// Query returns a query builder for ProjectTechnology.
func (c *ProjectTechnologyClient) Query() *ProjectTechnologyQuery {
	return &ProjectTechnologyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProjectTechnology},
		inters: c.Interceptors(),
	}
}

// Get returns a ProjectTechnology entity by its id.
func (c *ProjectTechnologyClient) Get(ctx context.Context, id uuid.UUID) (*ProjectTechnology, error) {
	return c.Query().Where(projecttechnology.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectTechnologyClient) GetX(ctx context.Context, id uuid.UUID) *ProjectTechnology {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a ProjectTechnology.
func (c *ProjectTechnologyClient) QueryProject(pt *ProjectTechnology) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projecttechnology.Table, projecttechnology.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projecttechnology.ProjectTable, projecttechnology.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectTechnologyClient) Hooks() []Hook {
	return c.hooks.ProjectTechnology
}

// Interceptors returns the client interceptors.
func (c *ProjectTechnologyClient) Interceptors() []Interceptor {
	return c.inters.ProjectTechnology
}

func (c *ProjectTechnologyClient) mutate(ctx context.Context, m *ProjectTechnologyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProjectTechnologyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProjectTechnologyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProjectTechnologyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProjectTechnologyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProjectTechnology mutation op: %q", m.Op())
	}
}

// PublicationClient is a client for the Publication schema.
type PublicationClient struct {
	config
}

// NewPublicationClient returns a client for the Publication from the given config.
func NewPublicationClient(c config) *PublicationClient {
	return &PublicationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `publication.Hooks(f(g(h())))`.
func (c *PublicationClient) Use(hooks ...Hook) {
	c.hooks.Publication = append(c.hooks.Publication, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `publication.Intercept(f(g(h())))`.
func (c *PublicationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Publication = append(c.inters.Publication, interceptors...)
}

// Create returns a builder for creating a Publication entity.
func (c *PublicationClient) Create() *PublicationCreate {
	mutation := newPublicationMutation(c.config, OpCreate)
	return &PublicationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Publication entities.
func (c *PublicationClient) CreateBulk(builders ...*PublicationCreate) *PublicationCreateBulk {
	return &PublicationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PublicationClient) MapCreateBulk(slice any, setFunc func(*PublicationCreate, int)) *PublicationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PublicationCreateBulk{err: fmt.Errorf("calling to PublicationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PublicationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PublicationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Publication.
func (c *PublicationClient) Update() *PublicationUpdate {
	mutation := newPublicationMutation(c.config, OpUpdate)
	return &PublicationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PublicationClient) UpdateOne(pu *Publication) *PublicationUpdateOne {
	mutation := newPublicationMutation(c.config, OpUpdateOne, withPublication(pu))
	return &PublicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PublicationClient) UpdateOneID(id uuid.UUID) *PublicationUpdateOne {
	mutation := newPublicationMutation(c.config, OpUpdateOne, withPublicationID(id))
	return &PublicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Publication.
func (c *PublicationClient) Delete() *PublicationDelete {
	mutation := newPublicationMutation(c.config, OpDelete)
	return &PublicationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PublicationClient) DeleteOne(pu *Publication) *PublicationDeleteOne {
	return c.DeleteOneID(pu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PublicationClient) DeleteOneID(id uuid.UUID) *PublicationDeleteOne {
	builder := c.Delete().Where(publication.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PublicationDeleteOne{builder}
}

// Query returns a query builder for Publication.
func (c *PublicationClient) Query() *PublicationQuery {
	return &PublicationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePublication},
		inters: c.Interceptors(),
	}
}

// Get returns a Publication entity by its id.
func (c *PublicationClient) Get(ctx context.Context, id uuid.UUID) (*Publication, error) {
	return c.Query().Where(publication.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PublicationClient) GetX(ctx context.Context, id uuid.UUID) *Publication {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Publication.
func (c *PublicationClient) QueryUser(pu *Publication) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(publication.Table, publication.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, publication.UserTable, publication.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PublicationClient) Hooks() []Hook {
	return c.hooks.Publication
}

// Interceptors returns the client interceptors.
func (c *PublicationClient) Interceptors() []Interceptor {
	return c.inters.Publication
}

func (c *PublicationClient) mutate(ctx context.Context, m *PublicationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PublicationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PublicationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PublicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PublicationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Publication mutation op: %q", m.Op())
	}
}

// ResearchProjectClient is a client for the ResearchProject schema.
type ResearchProjectClient struct {
	config
}

// NewResearchProjectClient returns a client for the ResearchProject from the given config.
func NewResearchProjectClient(c config) *ResearchProjectClient {
	return &ResearchProjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `researchproject.Hooks(f(g(h())))`.
func (c *ResearchProjectClient) Use(hooks ...Hook) {
	c.hooks.ResearchProject = append(c.hooks.ResearchProject, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `researchproject.Intercept(f(g(h())))`.
func (c *ResearchProjectClient) Intercept(interceptors ...Interceptor) {
	c.inters.ResearchProject = append(c.inters.ResearchProject, interceptors...)
}

// Create returns a builder for creating a ResearchProject entity.
func (c *ResearchProjectClient) Create() *ResearchProjectCreate {
	mutation := newResearchProjectMutation(c.config, OpCreate)
	return &ResearchProjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ResearchProject entities.
func (c *ResearchProjectClient) CreateBulk(builders ...*ResearchProjectCreate) *ResearchProjectCreateBulk {
	return &ResearchProjectCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ResearchProjectClient) MapCreateBulk(slice any, setFunc func(*ResearchProjectCreate, int)) *ResearchProjectCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ResearchProjectCreateBulk{err: fmt.Errorf("calling to ResearchProjectClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ResearchProjectCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ResearchProjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ResearchProject.
func (c *ResearchProjectClient) Update() *ResearchProjectUpdate {
	mutation := newResearchProjectMutation(c.config, OpUpdate)
	return &ResearchProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResearchProjectClient) UpdateOne(rp *ResearchProject) *ResearchProjectUpdateOne {
	mutation := newResearchProjectMutation(c.config, OpUpdateOne, withResearchProject(rp))
	return &ResearchProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResearchProjectClient) UpdateOneID(id uuid.UUID) *ResearchProjectUpdateOne {
	mutation := newResearchProjectMutation(c.config, OpUpdateOne, withResearchProjectID(id))
	return &ResearchProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ResearchProject.
func (c *ResearchProjectClient) Delete() *ResearchProjectDelete {
	mutation := newResearchProjectMutation(c.config, OpDelete)
	return &ResearchProjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ResearchProjectClient) DeleteOne(rp *ResearchProject) *ResearchProjectDeleteOne {
	return c.DeleteOneID(rp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ResearchProjectClient) DeleteOneID(id uuid.UUID) *ResearchProjectDeleteOne {
	builder := c.Delete().Where(researchproject.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResearchProjectDeleteOne{builder}
}

// Query returns a query builder for ResearchProject.
func (c *ResearchProjectClient) Query() *ResearchProjectQuery {
	return &ResearchProjectQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeResearchProject},
		inters: c.Interceptors(),
	}
}

// Get returns a ResearchProject entity by its id.
func (c *ResearchProjectClient) Get(ctx context.Context, id uuid.UUID) (*ResearchProject, error) {
	return c.Query().Where(researchproject.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResearchProjectClient) GetX(ctx context.Context, id uuid.UUID) *ResearchProject {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a ResearchProject.
func (c *ResearchProjectClient) QueryUser(rp *ResearchProject) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(researchproject.Table, researchproject.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, researchproject.UserTable, researchproject.UserColumn),
		)
		fromV = sqlgraph.Neighbors(rp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ResearchProjectClient) Hooks() []Hook {
	return c.hooks.ResearchProject
}

// Interceptors returns the client interceptors.
func (c *ResearchProjectClient) Interceptors() []Interceptor {
	return c.inters.ResearchProject
}

func (c *ResearchProjectClient) mutate(ctx context.Context, m *ResearchProjectMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ResearchProjectCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ResearchProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ResearchProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ResearchProjectDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ResearchProject mutation op: %q", m.Op())
	}
}

// SocialLinkClient is a client for the SocialLink schema.
type SocialLinkClient struct {
	config
}

// NewSocialLinkClient returns a client for the SocialLink from the given config.
func NewSocialLinkClient(c config) *SocialLinkClient {
	return &SocialLinkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sociallink.Hooks(f(g(h())))`.
func (c *SocialLinkClient) Use(hooks ...Hook) {
	c.hooks.SocialLink = append(c.hooks.SocialLink, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sociallink.Intercept(f(g(h())))`.
func (c *SocialLinkClient) Intercept(interceptors ...Interceptor) {
	c.inters.SocialLink = append(c.inters.SocialLink, interceptors...)
}

// Create returns a builder for creating a SocialLink entity.
func (c *SocialLinkClient) Create() *SocialLinkCreate {
	mutation := newSocialLinkMutation(c.config, OpCreate)
	return &SocialLinkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SocialLink entities.
func (c *SocialLinkClient) CreateBulk(builders ...*SocialLinkCreate) *SocialLinkCreateBulk {
	return &SocialLinkCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SocialLinkClient) MapCreateBulk(slice any, setFunc func(*SocialLinkCreate, int)) *SocialLinkCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SocialLinkCreateBulk{err: fmt.Errorf("calling to SocialLinkClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SocialLinkCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SocialLinkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SocialLink.
func (c *SocialLinkClient) Update() *SocialLinkUpdate {
	mutation := newSocialLinkMutation(c.config, OpUpdate)
	return &SocialLinkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SocialLinkClient) UpdateOne(sl *SocialLink) *SocialLinkUpdateOne {
	mutation := newSocialLinkMutation(c.config, OpUpdateOne, withSocialLink(sl))
	return &SocialLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SocialLinkClient) UpdateOneID(id uuid.UUID) *SocialLinkUpdateOne {
	mutation := newSocialLinkMutation(c.config, OpUpdateOne, withSocialLinkID(id))
	return &SocialLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SocialLink.
func (c *SocialLinkClient) Delete() *SocialLinkDelete {
	mutation := newSocialLinkMutation(c.config, OpDelete)
	return &SocialLinkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SocialLinkClient) DeleteOne(sl *SocialLink) *SocialLinkDeleteOne {
	return c.DeleteOneID(sl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SocialLinkClient) DeleteOneID(id uuid.UUID) *SocialLinkDeleteOne {
	builder := c.Delete().Where(sociallink.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SocialLinkDeleteOne{builder}
}

// Query returns a query builder for SocialLink.
func (c *SocialLinkClient) Query() *SocialLinkQuery {
	return &SocialLinkQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSocialLink},
		inters: c.Interceptors(),
	}
}

// Get returns a SocialLink entity by its id.
func (c *SocialLinkClient) Get(ctx context.Context, id uuid.UUID) (*SocialLink, error) {
	return c.Query().Where(sociallink.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SocialLinkClient) GetX(ctx context.Context, id uuid.UUID) *SocialLink {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a SocialLink.
func (c *SocialLinkClient) QueryUser(sl *SocialLink) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sociallink.Table, sociallink.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sociallink.UserTable, sociallink.UserColumn),
		)
		fromV = sqlgraph.Neighbors(sl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SocialLinkClient) Hooks() []Hook {
	return c.hooks.SocialLink
}

// Interceptors returns the client interceptors.
func (c *SocialLinkClient) Interceptors() []Interceptor {
	return c.inters.SocialLink
}

func (c *SocialLinkClient) mutate(ctx context.Context, m *SocialLinkMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SocialLinkCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SocialLinkUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SocialLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SocialLinkDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SocialLink mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPersonalInfo queries the personal_info edge of a User.
func (c *UserClient) QueryPersonalInfo(u *User) *PersonalInfoQuery {
	query := (&PersonalInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(personalinfo.Table, personalinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PersonalInfoTable, user.PersonalInfoColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySocialLinks queries the social_links edge of a User.
func (c *UserClient) QuerySocialLinks(u *User) *SocialLinkQuery {
	query := (&SocialLinkClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(sociallink.Table, sociallink.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SocialLinksTable, user.SocialLinksColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEducation queries the education edge of a User.
func (c *UserClient) QueryEducation(u *User) *EducationQuery {
	query := (&EducationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(education.Table, education.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.EducationTable, user.EducationColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkExperience queries the work_experience edge of a User.
func (c *UserClient) QueryWorkExperience(u *User) *WorkExperienceQuery {
	query := (&WorkExperienceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(workexperience.Table, workexperience.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.WorkExperienceTable, user.WorkExperienceColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjects queries the projects edge of a User.
func (c *UserClient) QueryProjects(u *User) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ProjectsTable, user.ProjectsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBlogPosts queries the blog_posts edge of a User.
func (c *UserClient) QueryBlogPosts(u *User) *BlogPostQuery {
	query := (&BlogPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(blogpost.Table, blogpost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.BlogPostsTable, user.BlogPostsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBlogSeries queries the blog_series edge of a User.
func (c *UserClient) QueryBlogSeries(u *User) *BlogSeriesQuery {
	query := (&BlogSeriesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(blogseries.Table, blogseries.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.BlogSeriesTable, user.BlogSeriesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIdeas queries the ideas edge of a User.
func (c *UserClient) QueryIdeas(u *User) *IdeaQuery {
	query := (&IdeaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(idea.Table, idea.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.IdeasTable, user.IdeasColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryResearchProjects queries the research_projects edge of a User.
func (c *UserClient) QueryResearchProjects(u *User) *ResearchProjectQuery {
	query := (&ResearchProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(researchproject.Table, researchproject.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ResearchProjectsTable, user.ResearchProjectsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPublications queries the publications edge of a User.
func (c *UserClient) QueryPublications(u *User) *PublicationQuery {
	query := (&PublicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(publication.Table, publication.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PublicationsTable, user.PublicationsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAwards queries the awards edge of a User.
func (c *UserClient) QueryAwards(u *User) *AwardQuery {
	query := (&AwardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(award.Table, award.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AwardsTable, user.AwardsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// WorkExperienceClient is a client for the WorkExperience schema.
type WorkExperienceClient struct {
	config
}

// NewWorkExperienceClient returns a client for the WorkExperience from the given config.
func NewWorkExperienceClient(c config) *WorkExperienceClient {
	return &WorkExperienceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workexperience.Hooks(f(g(h())))`.
func (c *WorkExperienceClient) Use(hooks ...Hook) {
	c.hooks.WorkExperience = append(c.hooks.WorkExperience, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `workexperience.Intercept(f(g(h())))`.
func (c *WorkExperienceClient) Intercept(interceptors ...Interceptor) {
	c.inters.WorkExperience = append(c.inters.WorkExperience, interceptors...)
}

// Create returns a builder for creating a WorkExperience entity.
func (c *WorkExperienceClient) Create() *WorkExperienceCreate {
	mutation := newWorkExperienceMutation(c.config, OpCreate)
	return &WorkExperienceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkExperience entities.
func (c *WorkExperienceClient) CreateBulk(builders ...*WorkExperienceCreate) *WorkExperienceCreateBulk {
	return &WorkExperienceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WorkExperienceClient) MapCreateBulk(slice any, setFunc func(*WorkExperienceCreate, int)) *WorkExperienceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WorkExperienceCreateBulk{err: fmt.Errorf("calling to WorkExperienceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WorkExperienceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WorkExperienceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkExperience.
func (c *WorkExperienceClient) Update() *WorkExperienceUpdate {
	mutation := newWorkExperienceMutation(c.config, OpUpdate)
	return &WorkExperienceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkExperienceClient) UpdateOne(we *WorkExperience) *WorkExperienceUpdateOne {
	mutation := newWorkExperienceMutation(c.config, OpUpdateOne, withWorkExperience(we))
	return &WorkExperienceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkExperienceClient) UpdateOneID(id uuid.UUID) *WorkExperienceUpdateOne {
	mutation := newWorkExperienceMutation(c.config, OpUpdateOne, withWorkExperienceID(id))
	return &WorkExperienceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkExperience.
func (c *WorkExperienceClient) Delete() *WorkExperienceDelete {
	mutation := newWorkExperienceMutation(c.config, OpDelete)
	return &WorkExperienceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WorkExperienceClient) DeleteOne(we *WorkExperience) *WorkExperienceDeleteOne {
	return c.DeleteOneID(we.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WorkExperienceClient) DeleteOneID(id uuid.UUID) *WorkExperienceDeleteOne {
	builder := c.Delete().Where(workexperience.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkExperienceDeleteOne{builder}
}

// Query returns a query builder for WorkExperience.
func (c *WorkExperienceClient) Query() *WorkExperienceQuery {
	return &WorkExperienceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWorkExperience},
		inters: c.Interceptors(),
	}
}

// Get returns a WorkExperience entity by its id.
func (c *WorkExperienceClient) Get(ctx context.Context, id uuid.UUID) (*WorkExperience, error) {
	return c.Query().Where(workexperience.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkExperienceClient) GetX(ctx context.Context, id uuid.UUID) *WorkExperience {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a WorkExperience.
func (c *WorkExperienceClient) QueryUser(we *WorkExperience) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := we.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workexperience.Table, workexperience.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workexperience.UserTable, workexperience.UserColumn),
		)
		fromV = sqlgraph.Neighbors(we.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkExperienceClient) Hooks() []Hook {
	return c.hooks.WorkExperience
}

// Interceptors returns the client interceptors.
func (c *WorkExperienceClient) Interceptors() []Interceptor {
	return c.inters.WorkExperience
}

func (c *WorkExperienceClient) mutate(ctx context.Context, m *WorkExperienceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WorkExperienceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WorkExperienceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WorkExperienceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WorkExperienceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WorkExperience mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Award, BlogCategory, BlogComment, BlogPost, BlogSeries, BlogTag, Education,
		Idea, Language, PersonalInfo, Project, ProjectDetail, ProjectImage,
		ProjectTechnology, Publication, ResearchProject, SocialLink, User,
		WorkExperience []ent.Hook
	}
	inters struct {
		Award, BlogCategory, BlogComment, BlogPost, BlogSeries, BlogTag, Education,
		Idea, Language, PersonalInfo, Project, ProjectDetail, ProjectImage,
		ProjectTechnology, Publication, ResearchProject, SocialLink, User,
		WorkExperience []ent.Interceptor
	}
)
