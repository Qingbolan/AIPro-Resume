// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/projectimage"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProjectImageCreate is the builder for creating a ProjectImage entity.
type ProjectImageCreate struct {
	config
	mutation *ProjectImageMutation
	hooks    []Hook
}

// SetProjectID sets the "project_id" field.
func (pic *ProjectImageCreate) SetProjectID(u uuid.UUID) *ProjectImageCreate {
	pic.mutation.SetProjectID(u)
	return pic
}

// SetImageURL sets the "image_url" field.
func (pic *ProjectImageCreate) SetImageURL(s string) *ProjectImageCreate {
	pic.mutation.SetImageURL(s)
	return pic
}

// SetTitle sets the "title" field.
func (pic *ProjectImageCreate) SetTitle(s string) *ProjectImageCreate {
	pic.mutation.SetTitle(s)
	return pic
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pic *ProjectImageCreate) SetNillableTitle(s *string) *ProjectImageCreate {
	if s != nil {
		pic.SetTitle(*s)
	}
	return pic
}

// SetDescription sets the "description" field.
func (pic *ProjectImageCreate) SetDescription(s string) *ProjectImageCreate {
	pic.mutation.SetDescription(s)
	return pic
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pic *ProjectImageCreate) SetNillableDescription(s *string) *ProjectImageCreate {
	if s != nil {
		pic.SetDescription(*s)
	}
	return pic
}

// SetAltText sets the "alt_text" field.
func (pic *ProjectImageCreate) SetAltText(s string) *ProjectImageCreate {
	pic.mutation.SetAltText(s)
	return pic
}

// SetNillableAltText sets the "alt_text" field if the given value is not nil.
func (pic *ProjectImageCreate) SetNillableAltText(s *string) *ProjectImageCreate {
	if s != nil {
		pic.SetAltText(*s)
	}
	return pic
}

// SetImageType sets the "image_type" field.
func (pic *ProjectImageCreate) SetImageType(pt projectimage.ImageType) *ProjectImageCreate {
	pic.mutation.SetImageType(pt)
	return pic
}

// SetNillableImageType sets the "image_type" field if the given value is not nil.
func (pic *ProjectImageCreate) SetNillableImageType(pt *projectimage.ImageType) *ProjectImageCreate {
	if pt != nil {
		pic.SetImageType(*pt)
	}
	return pic
}

// SetFileName sets the "file_name" field.
func (pic *ProjectImageCreate) SetFileName(s string) *ProjectImageCreate {
	pic.mutation.SetFileName(s)
	return pic
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (pic *ProjectImageCreate) SetNillableFileName(s *string) *ProjectImageCreate {
	if s != nil {
		pic.SetFileName(*s)
	}
	return pic
}

// SetFileSize sets the "file_size" field.
func (pic *ProjectImageCreate) SetFileSize(i int) *ProjectImageCreate {
	pic.mutation.SetFileSize(i)
	return pic
}

// SetNillableFileSize sets the "file_size" field if the given value is not nil.
func (pic *ProjectImageCreate) SetNillableFileSize(i *int) *ProjectImageCreate {
	if i != nil {
		pic.SetFileSize(*i)
	}
	return pic
}

// SetMimeType sets the "mime_type" field.
func (pic *ProjectImageCreate) SetMimeType(s string) *ProjectImageCreate {
	pic.mutation.SetMimeType(s)
	return pic
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (pic *ProjectImageCreate) SetNillableMimeType(s *string) *ProjectImageCreate {
	if s != nil {
		pic.SetMimeType(*s)
	}
	return pic
}

// SetWidth sets the "width" field.
func (pic *ProjectImageCreate) SetWidth(i int) *ProjectImageCreate {
	pic.mutation.SetWidth(i)
	return pic
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (pic *ProjectImageCreate) SetNillableWidth(i *int) *ProjectImageCreate {
	if i != nil {
		pic.SetWidth(*i)
	}
	return pic
}

// SetHeight sets the "height" field.
func (pic *ProjectImageCreate) SetHeight(i int) *ProjectImageCreate {
	pic.mutation.SetHeight(i)
	return pic
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (pic *ProjectImageCreate) SetNillableHeight(i *int) *ProjectImageCreate {
	if i != nil {
		pic.SetHeight(*i)
	}
	return pic
}

// SetIsPrimary sets the "is_primary" field.
func (pic *ProjectImageCreate) SetIsPrimary(b bool) *ProjectImageCreate {
	pic.mutation.SetIsPrimary(b)
	return pic
}

// SetNillableIsPrimary sets the "is_primary" field if the given value is not nil.
func (pic *ProjectImageCreate) SetNillableIsPrimary(b *bool) *ProjectImageCreate {
	if b != nil {
		pic.SetIsPrimary(*b)
	}
	return pic
}

// SetIsPublic sets the "is_public" field.
func (pic *ProjectImageCreate) SetIsPublic(b bool) *ProjectImageCreate {
	pic.mutation.SetIsPublic(b)
	return pic
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (pic *ProjectImageCreate) SetNillableIsPublic(b *bool) *ProjectImageCreate {
	if b != nil {
		pic.SetIsPublic(*b)
	}
	return pic
}

// SetSortOrder sets the "sort_order" field.
func (pic *ProjectImageCreate) SetSortOrder(i int) *ProjectImageCreate {
	pic.mutation.SetSortOrder(i)
	return pic
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (pic *ProjectImageCreate) SetNillableSortOrder(i *int) *ProjectImageCreate {
	if i != nil {
		pic.SetSortOrder(*i)
	}
	return pic
}

// SetCreatedAt sets the "created_at" field.
func (pic *ProjectImageCreate) SetCreatedAt(t time.Time) *ProjectImageCreate {
	pic.mutation.SetCreatedAt(t)
	return pic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pic *ProjectImageCreate) SetNillableCreatedAt(t *time.Time) *ProjectImageCreate {
	if t != nil {
		pic.SetCreatedAt(*t)
	}
	return pic
}

// SetUpdatedAt sets the "updated_at" field.
func (pic *ProjectImageCreate) SetUpdatedAt(t time.Time) *ProjectImageCreate {
	pic.mutation.SetUpdatedAt(t)
	return pic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pic *ProjectImageCreate) SetNillableUpdatedAt(t *time.Time) *ProjectImageCreate {
	if t != nil {
		pic.SetUpdatedAt(*t)
	}
	return pic
}

// SetID sets the "id" field.
func (pic *ProjectImageCreate) SetID(u uuid.UUID) *ProjectImageCreate {
	pic.mutation.SetID(u)
	return pic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pic *ProjectImageCreate) SetNillableID(u *uuid.UUID) *ProjectImageCreate {
	if u != nil {
		pic.SetID(*u)
	}
	return pic
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (pic *ProjectImageCreate) SetProjectID(id uuid.UUID) *ProjectImageCreate {
	pic.mutation.SetProjectID(id)
	return pic
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (pic *ProjectImageCreate) SetNillableProjectID(id *uuid.UUID) *ProjectImageCreate {
	if id != nil {
		pic = pic.SetProjectID(*id)
	}
	return pic
}

// SetProject sets the "project" edge to the Project entity.
func (pic *ProjectImageCreate) SetProject(p *Project) *ProjectImageCreate {
	return pic.SetProjectID(p.ID)
}

// Mutation returns the ProjectImageMutation object of the builder.
func (pic *ProjectImageCreate) Mutation() *ProjectImageMutation {
	return pic.mutation
}

// Save creates the ProjectImage in the database.
func (pic *ProjectImageCreate) Save(ctx context.Context) (*ProjectImage, error) {
	pic.defaults()
	return withHooks(ctx, pic.sqlSave, pic.mutation, pic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pic *ProjectImageCreate) SaveX(ctx context.Context) *ProjectImage {
	v, err := pic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pic *ProjectImageCreate) Exec(ctx context.Context) error {
	_, err := pic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pic *ProjectImageCreate) ExecX(ctx context.Context) {
	if err := pic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pic *ProjectImageCreate) defaults() {
	if _, ok := pic.mutation.ImageType(); !ok {
		v := projectimage.DefaultImageType
		pic.mutation.SetImageType(v)
	}
	if _, ok := pic.mutation.IsPrimary(); !ok {
		v := projectimage.DefaultIsPrimary
		pic.mutation.SetIsPrimary(v)
	}
	if _, ok := pic.mutation.IsPublic(); !ok {
		v := projectimage.DefaultIsPublic
		pic.mutation.SetIsPublic(v)
	}
	if _, ok := pic.mutation.SortOrder(); !ok {
		v := projectimage.DefaultSortOrder
		pic.mutation.SetSortOrder(v)
	}
	if _, ok := pic.mutation.CreatedAt(); !ok {
		v := projectimage.DefaultCreatedAt()
		pic.mutation.SetCreatedAt(v)
	}
	if _, ok := pic.mutation.UpdatedAt(); !ok {
		v := projectimage.DefaultUpdatedAt()
		pic.mutation.SetUpdatedAt(v)
	}
	if _, ok := pic.mutation.ID(); !ok {
		v := projectimage.DefaultID()
		pic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pic *ProjectImageCreate) check() error {
	if _, ok := pic.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`ent: missing required field "ProjectImage.project_id"`)}
	}
	if _, ok := pic.mutation.ImageURL(); !ok {
		return &ValidationError{Name: "image_url", err: errors.New(`ent: missing required field "ProjectImage.image_url"`)}
	}
	if v, ok := pic.mutation.ImageURL(); ok {
		if err := projectimage.ImageURLValidator(v); err != nil {
			return &ValidationError{Name: "image_url", err: fmt.Errorf(`ent: validator failed for field "ProjectImage.image_url": %w`, err)}
		}
	}
	if v, ok := pic.mutation.Title(); ok {
		if err := projectimage.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "ProjectImage.title": %w`, err)}
		}
	}
	if v, ok := pic.mutation.AltText(); ok {
		if err := projectimage.AltTextValidator(v); err != nil {
			return &ValidationError{Name: "alt_text", err: fmt.Errorf(`ent: validator failed for field "ProjectImage.alt_text": %w`, err)}
		}
	}
	if _, ok := pic.mutation.ImageType(); !ok {
		return &ValidationError{Name: "image_type", err: errors.New(`ent: missing required field "ProjectImage.image_type"`)}
	}
	if v, ok := pic.mutation.ImageType(); ok {
		if err := projectimage.ImageTypeValidator(v); err != nil {
			return &ValidationError{Name: "image_type", err: fmt.Errorf(`ent: validator failed for field "ProjectImage.image_type": %w`, err)}
		}
	}
	if v, ok := pic.mutation.FileName(); ok {
		if err := projectimage.FileNameValidator(v); err != nil {
			return &ValidationError{Name: "file_name", err: fmt.Errorf(`ent: validator failed for field "ProjectImage.file_name": %w`, err)}
		}
	}
	if v, ok := pic.mutation.MimeType(); ok {
		if err := projectimage.MimeTypeValidator(v); err != nil {
			return &ValidationError{Name: "mime_type", err: fmt.Errorf(`ent: validator failed for field "ProjectImage.mime_type": %w`, err)}
		}
	}
	if _, ok := pic.mutation.IsPrimary(); !ok {
		return &ValidationError{Name: "is_primary", err: errors.New(`ent: missing required field "ProjectImage.is_primary"`)}
	}
	if _, ok := pic.mutation.IsPublic(); !ok {
		return &ValidationError{Name: "is_public", err: errors.New(`ent: missing required field "ProjectImage.is_public"`)}
	}
	if _, ok := pic.mutation.SortOrder(); !ok {
		return &ValidationError{Name: "sort_order", err: errors.New(`ent: missing required field "ProjectImage.sort_order"`)}
	}
	if _, ok := pic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProjectImage.created_at"`)}
	}
	if _, ok := pic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProjectImage.updated_at"`)}
	}
	return nil
}

func (pic *ProjectImageCreate) sqlSave(ctx context.Context) (*ProjectImage, error) {
	if err := pic.check(); err != nil {
		return nil, err
	}
	_node, _spec := pic.createSpec()
	if err := sqlgraph.CreateNode(ctx, pic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pic.mutation.id = &_node.ID
	pic.mutation.done = true
	return _node, nil
}

func (pic *ProjectImageCreate) createSpec() (*ProjectImage, *sqlgraph.CreateSpec) {
	var (
		_node = &ProjectImage{config: pic.config}
		_spec = sqlgraph.NewCreateSpec(projectimage.Table, sqlgraph.NewFieldSpec(projectimage.FieldID, field.TypeUUID))
	)
	if id, ok := pic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pic.mutation.ProjectID(); ok {
		_spec.SetField(projectimage.FieldProjectID, field.TypeUUID, value)
		_node.ProjectID = value
	}
	if value, ok := pic.mutation.ImageURL(); ok {
		_spec.SetField(projectimage.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := pic.mutation.Title(); ok {
		_spec.SetField(projectimage.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := pic.mutation.Description(); ok {
		_spec.SetField(projectimage.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pic.mutation.AltText(); ok {
		_spec.SetField(projectimage.FieldAltText, field.TypeString, value)
		_node.AltText = value
	}
	if value, ok := pic.mutation.ImageType(); ok {
		_spec.SetField(projectimage.FieldImageType, field.TypeEnum, value)
		_node.ImageType = value
	}
	if value, ok := pic.mutation.FileName(); ok {
		_spec.SetField(projectimage.FieldFileName, field.TypeString, value)
		_node.FileName = value
	}
	if value, ok := pic.mutation.FileSize(); ok {
		_spec.SetField(projectimage.FieldFileSize, field.TypeInt, value)
		_node.FileSize = value
	}
	if value, ok := pic.mutation.MimeType(); ok {
		_spec.SetField(projectimage.FieldMimeType, field.TypeString, value)
		_node.MimeType = value
	}
	if value, ok := pic.mutation.Width(); ok {
		_spec.SetField(projectimage.FieldWidth, field.TypeInt, value)
		_node.Width = value
	}
	if value, ok := pic.mutation.Height(); ok {
		_spec.SetField(projectimage.FieldHeight, field.TypeInt, value)
		_node.Height = value
	}
	if value, ok := pic.mutation.IsPrimary(); ok {
		_spec.SetField(projectimage.FieldIsPrimary, field.TypeBool, value)
		_node.IsPrimary = value
	}
	if value, ok := pic.mutation.IsPublic(); ok {
		_spec.SetField(projectimage.FieldIsPublic, field.TypeBool, value)
		_node.IsPublic = value
	}
	if value, ok := pic.mutation.SortOrder(); ok {
		_spec.SetField(projectimage.FieldSortOrder, field.TypeInt, value)
		_node.SortOrder = value
	}
	if value, ok := pic.mutation.CreatedAt(); ok {
		_spec.SetField(projectimage.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pic.mutation.UpdatedAt(); ok {
		_spec.SetField(projectimage.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pic.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectimage.ProjectTable,
			Columns: []string{projectimage.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_images = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProjectImageCreateBulk is the builder for creating many ProjectImage entities in bulk.
type ProjectImageCreateBulk struct {
	config
	err      error
	builders []*ProjectImageCreate
}

// Save creates the ProjectImage entities in the database.
func (picb *ProjectImageCreateBulk) Save(ctx context.Context) ([]*ProjectImage, error) {
	if picb.err != nil {
		return nil, picb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(picb.builders))
	nodes := make([]*ProjectImage, len(picb.builders))
	mutators := make([]Mutator, len(picb.builders))
	for i := range picb.builders {
		func(i int, root context.Context) {
			builder := picb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectImageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, picb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, picb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, picb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (picb *ProjectImageCreateBulk) SaveX(ctx context.Context) []*ProjectImage {
	v, err := picb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (picb *ProjectImageCreateBulk) Exec(ctx context.Context) error {
	_, err := picb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (picb *ProjectImageCreateBulk) ExecX(ctx context.Context) {
	if err := picb.Exec(ctx); err != nil {
		panic(err)
	}
}
