// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/blogcategory"
	"silan-backend/internal/ent/blogpost"
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BlogCategoryUpdate is the builder for updating BlogCategory entities.
type BlogCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *BlogCategoryMutation
}

// Where appends a list predicates to the BlogCategoryUpdate builder.
func (bcu *BlogCategoryUpdate) Where(ps ...predicate.BlogCategory) *BlogCategoryUpdate {
	bcu.mutation.Where(ps...)
	return bcu
}

// SetName sets the "name" field.
func (bcu *BlogCategoryUpdate) SetName(s string) *BlogCategoryUpdate {
	bcu.mutation.SetName(s)
	return bcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bcu *BlogCategoryUpdate) SetNillableName(s *string) *BlogCategoryUpdate {
	if s != nil {
		bcu.SetName(*s)
	}
	return bcu
}

// SetSlug sets the "slug" field.
func (bcu *BlogCategoryUpdate) SetSlug(s string) *BlogCategoryUpdate {
	bcu.mutation.SetSlug(s)
	return bcu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (bcu *BlogCategoryUpdate) SetNillableSlug(s *string) *BlogCategoryUpdate {
	if s != nil {
		bcu.SetSlug(*s)
	}
	return bcu
}

// SetDescription sets the "description" field.
func (bcu *BlogCategoryUpdate) SetDescription(s string) *BlogCategoryUpdate {
	bcu.mutation.SetDescription(s)
	return bcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bcu *BlogCategoryUpdate) SetNillableDescription(s *string) *BlogCategoryUpdate {
	if s != nil {
		bcu.SetDescription(*s)
	}
	return bcu
}

// ClearDescription clears the value of the "description" field.
func (bcu *BlogCategoryUpdate) ClearDescription() *BlogCategoryUpdate {
	bcu.mutation.ClearDescription()
	return bcu
}

// SetColor sets the "color" field.
func (bcu *BlogCategoryUpdate) SetColor(s string) *BlogCategoryUpdate {
	bcu.mutation.SetColor(s)
	return bcu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (bcu *BlogCategoryUpdate) SetNillableColor(s *string) *BlogCategoryUpdate {
	if s != nil {
		bcu.SetColor(*s)
	}
	return bcu
}

// ClearColor clears the value of the "color" field.
func (bcu *BlogCategoryUpdate) ClearColor() *BlogCategoryUpdate {
	bcu.mutation.ClearColor()
	return bcu
}

// SetIcon sets the "icon" field.
func (bcu *BlogCategoryUpdate) SetIcon(s string) *BlogCategoryUpdate {
	bcu.mutation.SetIcon(s)
	return bcu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (bcu *BlogCategoryUpdate) SetNillableIcon(s *string) *BlogCategoryUpdate {
	if s != nil {
		bcu.SetIcon(*s)
	}
	return bcu
}

// ClearIcon clears the value of the "icon" field.
func (bcu *BlogCategoryUpdate) ClearIcon() *BlogCategoryUpdate {
	bcu.mutation.ClearIcon()
	return bcu
}

// SetPostCount sets the "post_count" field.
func (bcu *BlogCategoryUpdate) SetPostCount(i int) *BlogCategoryUpdate {
	bcu.mutation.ResetPostCount()
	bcu.mutation.SetPostCount(i)
	return bcu
}

// SetNillablePostCount sets the "post_count" field if the given value is not nil.
func (bcu *BlogCategoryUpdate) SetNillablePostCount(i *int) *BlogCategoryUpdate {
	if i != nil {
		bcu.SetPostCount(*i)
	}
	return bcu
}

// AddPostCount adds i to the "post_count" field.
func (bcu *BlogCategoryUpdate) AddPostCount(i int) *BlogCategoryUpdate {
	bcu.mutation.AddPostCount(i)
	return bcu
}

// SetCreatedAt sets the "created_at" field.
func (bcu *BlogCategoryUpdate) SetCreatedAt(t time.Time) *BlogCategoryUpdate {
	bcu.mutation.SetCreatedAt(t)
	return bcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bcu *BlogCategoryUpdate) SetNillableCreatedAt(t *time.Time) *BlogCategoryUpdate {
	if t != nil {
		bcu.SetCreatedAt(*t)
	}
	return bcu
}

// SetUpdatedAt sets the "updated_at" field.
func (bcu *BlogCategoryUpdate) SetUpdatedAt(t time.Time) *BlogCategoryUpdate {
	bcu.mutation.SetUpdatedAt(t)
	return bcu
}

// AddBlogPostIDs adds the "blog_posts" edge to the BlogPost entity by IDs.
func (bcu *BlogCategoryUpdate) AddBlogPostIDs(ids ...uuid.UUID) *BlogCategoryUpdate {
	bcu.mutation.AddBlogPostIDs(ids...)
	return bcu
}

// AddBlogPosts adds the "blog_posts" edges to the BlogPost entity.
func (bcu *BlogCategoryUpdate) AddBlogPosts(b ...*BlogPost) *BlogCategoryUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bcu.AddBlogPostIDs(ids...)
}

// Mutation returns the BlogCategoryMutation object of the builder.
func (bcu *BlogCategoryUpdate) Mutation() *BlogCategoryMutation {
	return bcu.mutation
}

// ClearBlogPosts clears all "blog_posts" edges to the BlogPost entity.
func (bcu *BlogCategoryUpdate) ClearBlogPosts() *BlogCategoryUpdate {
	bcu.mutation.ClearBlogPosts()
	return bcu
}

// RemoveBlogPostIDs removes the "blog_posts" edge to BlogPost entities by IDs.
func (bcu *BlogCategoryUpdate) RemoveBlogPostIDs(ids ...uuid.UUID) *BlogCategoryUpdate {
	bcu.mutation.RemoveBlogPostIDs(ids...)
	return bcu
}

// RemoveBlogPosts removes "blog_posts" edges to BlogPost entities.
func (bcu *BlogCategoryUpdate) RemoveBlogPosts(b ...*BlogPost) *BlogCategoryUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bcu.RemoveBlogPostIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bcu *BlogCategoryUpdate) Save(ctx context.Context) (int, error) {
	bcu.defaults()
	return withHooks(ctx, bcu.sqlSave, bcu.mutation, bcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bcu *BlogCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := bcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bcu *BlogCategoryUpdate) Exec(ctx context.Context) error {
	_, err := bcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcu *BlogCategoryUpdate) ExecX(ctx context.Context) {
	if err := bcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcu *BlogCategoryUpdate) defaults() {
	if _, ok := bcu.mutation.UpdatedAt(); !ok {
		v := blogcategory.UpdateDefaultUpdatedAt()
		bcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcu *BlogCategoryUpdate) check() error {
	if v, ok := bcu.mutation.Name(); ok {
		if err := blogcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "BlogCategory.name": %w`, err)}
		}
	}
	if v, ok := bcu.mutation.Slug(); ok {
		if err := blogcategory.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "BlogCategory.slug": %w`, err)}
		}
	}
	if v, ok := bcu.mutation.Color(); ok {
		if err := blogcategory.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "BlogCategory.color": %w`, err)}
		}
	}
	if v, ok := bcu.mutation.Icon(); ok {
		if err := blogcategory.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`ent: validator failed for field "BlogCategory.icon": %w`, err)}
		}
	}
	return nil
}

func (bcu *BlogCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(blogcategory.Table, blogcategory.Columns, sqlgraph.NewFieldSpec(blogcategory.FieldID, field.TypeUUID))
	if ps := bcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bcu.mutation.Name(); ok {
		_spec.SetField(blogcategory.FieldName, field.TypeString, value)
	}
	if value, ok := bcu.mutation.Slug(); ok {
		_spec.SetField(blogcategory.FieldSlug, field.TypeString, value)
	}
	if value, ok := bcu.mutation.Description(); ok {
		_spec.SetField(blogcategory.FieldDescription, field.TypeString, value)
	}
	if bcu.mutation.DescriptionCleared() {
		_spec.ClearField(blogcategory.FieldDescription, field.TypeString)
	}
	if value, ok := bcu.mutation.Color(); ok {
		_spec.SetField(blogcategory.FieldColor, field.TypeString, value)
	}
	if bcu.mutation.ColorCleared() {
		_spec.ClearField(blogcategory.FieldColor, field.TypeString)
	}
	if value, ok := bcu.mutation.Icon(); ok {
		_spec.SetField(blogcategory.FieldIcon, field.TypeString, value)
	}
	if bcu.mutation.IconCleared() {
		_spec.ClearField(blogcategory.FieldIcon, field.TypeString)
	}
	if value, ok := bcu.mutation.PostCount(); ok {
		_spec.SetField(blogcategory.FieldPostCount, field.TypeInt, value)
	}
	if value, ok := bcu.mutation.AddedPostCount(); ok {
		_spec.AddField(blogcategory.FieldPostCount, field.TypeInt, value)
	}
	if value, ok := bcu.mutation.CreatedAt(); ok {
		_spec.SetField(blogcategory.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bcu.mutation.UpdatedAt(); ok {
		_spec.SetField(blogcategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if bcu.mutation.BlogPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogcategory.BlogPostsTable,
			Columns: []string{blogcategory.BlogPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcu.mutation.RemovedBlogPostsIDs(); len(nodes) > 0 && !bcu.mutation.BlogPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogcategory.BlogPostsTable,
			Columns: []string{blogcategory.BlogPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcu.mutation.BlogPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogcategory.BlogPostsTable,
			Columns: []string{blogcategory.BlogPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blogcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bcu.mutation.done = true
	return n, nil
}

// BlogCategoryUpdateOne is the builder for updating a single BlogCategory entity.
type BlogCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlogCategoryMutation
}

// SetName sets the "name" field.
func (bcuo *BlogCategoryUpdateOne) SetName(s string) *BlogCategoryUpdateOne {
	bcuo.mutation.SetName(s)
	return bcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bcuo *BlogCategoryUpdateOne) SetNillableName(s *string) *BlogCategoryUpdateOne {
	if s != nil {
		bcuo.SetName(*s)
	}
	return bcuo
}

// SetSlug sets the "slug" field.
func (bcuo *BlogCategoryUpdateOne) SetSlug(s string) *BlogCategoryUpdateOne {
	bcuo.mutation.SetSlug(s)
	return bcuo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (bcuo *BlogCategoryUpdateOne) SetNillableSlug(s *string) *BlogCategoryUpdateOne {
	if s != nil {
		bcuo.SetSlug(*s)
	}
	return bcuo
}

// SetDescription sets the "description" field.
func (bcuo *BlogCategoryUpdateOne) SetDescription(s string) *BlogCategoryUpdateOne {
	bcuo.mutation.SetDescription(s)
	return bcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bcuo *BlogCategoryUpdateOne) SetNillableDescription(s *string) *BlogCategoryUpdateOne {
	if s != nil {
		bcuo.SetDescription(*s)
	}
	return bcuo
}

// ClearDescription clears the value of the "description" field.
func (bcuo *BlogCategoryUpdateOne) ClearDescription() *BlogCategoryUpdateOne {
	bcuo.mutation.ClearDescription()
	return bcuo
}

// SetColor sets the "color" field.
func (bcuo *BlogCategoryUpdateOne) SetColor(s string) *BlogCategoryUpdateOne {
	bcuo.mutation.SetColor(s)
	return bcuo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (bcuo *BlogCategoryUpdateOne) SetNillableColor(s *string) *BlogCategoryUpdateOne {
	if s != nil {
		bcuo.SetColor(*s)
	}
	return bcuo
}

// ClearColor clears the value of the "color" field.
func (bcuo *BlogCategoryUpdateOne) ClearColor() *BlogCategoryUpdateOne {
	bcuo.mutation.ClearColor()
	return bcuo
}

// SetIcon sets the "icon" field.
func (bcuo *BlogCategoryUpdateOne) SetIcon(s string) *BlogCategoryUpdateOne {
	bcuo.mutation.SetIcon(s)
	return bcuo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (bcuo *BlogCategoryUpdateOne) SetNillableIcon(s *string) *BlogCategoryUpdateOne {
	if s != nil {
		bcuo.SetIcon(*s)
	}
	return bcuo
}

// ClearIcon clears the value of the "icon" field.
func (bcuo *BlogCategoryUpdateOne) ClearIcon() *BlogCategoryUpdateOne {
	bcuo.mutation.ClearIcon()
	return bcuo
}

// SetPostCount sets the "post_count" field.
func (bcuo *BlogCategoryUpdateOne) SetPostCount(i int) *BlogCategoryUpdateOne {
	bcuo.mutation.ResetPostCount()
	bcuo.mutation.SetPostCount(i)
	return bcuo
}

// SetNillablePostCount sets the "post_count" field if the given value is not nil.
func (bcuo *BlogCategoryUpdateOne) SetNillablePostCount(i *int) *BlogCategoryUpdateOne {
	if i != nil {
		bcuo.SetPostCount(*i)
	}
	return bcuo
}

// AddPostCount adds i to the "post_count" field.
func (bcuo *BlogCategoryUpdateOne) AddPostCount(i int) *BlogCategoryUpdateOne {
	bcuo.mutation.AddPostCount(i)
	return bcuo
}

// SetCreatedAt sets the "created_at" field.
func (bcuo *BlogCategoryUpdateOne) SetCreatedAt(t time.Time) *BlogCategoryUpdateOne {
	bcuo.mutation.SetCreatedAt(t)
	return bcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bcuo *BlogCategoryUpdateOne) SetNillableCreatedAt(t *time.Time) *BlogCategoryUpdateOne {
	if t != nil {
		bcuo.SetCreatedAt(*t)
	}
	return bcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (bcuo *BlogCategoryUpdateOne) SetUpdatedAt(t time.Time) *BlogCategoryUpdateOne {
	bcuo.mutation.SetUpdatedAt(t)
	return bcuo
}

// AddBlogPostIDs adds the "blog_posts" edge to the BlogPost entity by IDs.
func (bcuo *BlogCategoryUpdateOne) AddBlogPostIDs(ids ...uuid.UUID) *BlogCategoryUpdateOne {
	bcuo.mutation.AddBlogPostIDs(ids...)
	return bcuo
}

// AddBlogPosts adds the "blog_posts" edges to the BlogPost entity.
func (bcuo *BlogCategoryUpdateOne) AddBlogPosts(b ...*BlogPost) *BlogCategoryUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bcuo.AddBlogPostIDs(ids...)
}

// Mutation returns the BlogCategoryMutation object of the builder.
func (bcuo *BlogCategoryUpdateOne) Mutation() *BlogCategoryMutation {
	return bcuo.mutation
}

// ClearBlogPosts clears all "blog_posts" edges to the BlogPost entity.
func (bcuo *BlogCategoryUpdateOne) ClearBlogPosts() *BlogCategoryUpdateOne {
	bcuo.mutation.ClearBlogPosts()
	return bcuo
}

// RemoveBlogPostIDs removes the "blog_posts" edge to BlogPost entities by IDs.
func (bcuo *BlogCategoryUpdateOne) RemoveBlogPostIDs(ids ...uuid.UUID) *BlogCategoryUpdateOne {
	bcuo.mutation.RemoveBlogPostIDs(ids...)
	return bcuo
}

// RemoveBlogPosts removes "blog_posts" edges to BlogPost entities.
func (bcuo *BlogCategoryUpdateOne) RemoveBlogPosts(b ...*BlogPost) *BlogCategoryUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bcuo.RemoveBlogPostIDs(ids...)
}

// Where appends a list predicates to the BlogCategoryUpdate builder.
func (bcuo *BlogCategoryUpdateOne) Where(ps ...predicate.BlogCategory) *BlogCategoryUpdateOne {
	bcuo.mutation.Where(ps...)
	return bcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bcuo *BlogCategoryUpdateOne) Select(field string, fields ...string) *BlogCategoryUpdateOne {
	bcuo.fields = append([]string{field}, fields...)
	return bcuo
}

// Save executes the query and returns the updated BlogCategory entity.
func (bcuo *BlogCategoryUpdateOne) Save(ctx context.Context) (*BlogCategory, error) {
	bcuo.defaults()
	return withHooks(ctx, bcuo.sqlSave, bcuo.mutation, bcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bcuo *BlogCategoryUpdateOne) SaveX(ctx context.Context) *BlogCategory {
	node, err := bcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bcuo *BlogCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := bcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcuo *BlogCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := bcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcuo *BlogCategoryUpdateOne) defaults() {
	if _, ok := bcuo.mutation.UpdatedAt(); !ok {
		v := blogcategory.UpdateDefaultUpdatedAt()
		bcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcuo *BlogCategoryUpdateOne) check() error {
	if v, ok := bcuo.mutation.Name(); ok {
		if err := blogcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "BlogCategory.name": %w`, err)}
		}
	}
	if v, ok := bcuo.mutation.Slug(); ok {
		if err := blogcategory.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "BlogCategory.slug": %w`, err)}
		}
	}
	if v, ok := bcuo.mutation.Color(); ok {
		if err := blogcategory.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "BlogCategory.color": %w`, err)}
		}
	}
	if v, ok := bcuo.mutation.Icon(); ok {
		if err := blogcategory.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`ent: validator failed for field "BlogCategory.icon": %w`, err)}
		}
	}
	return nil
}

func (bcuo *BlogCategoryUpdateOne) sqlSave(ctx context.Context) (_node *BlogCategory, err error) {
	if err := bcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blogcategory.Table, blogcategory.Columns, sqlgraph.NewFieldSpec(blogcategory.FieldID, field.TypeUUID))
	id, ok := bcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlogCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blogcategory.FieldID)
		for _, f := range fields {
			if !blogcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blogcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bcuo.mutation.Name(); ok {
		_spec.SetField(blogcategory.FieldName, field.TypeString, value)
	}
	if value, ok := bcuo.mutation.Slug(); ok {
		_spec.SetField(blogcategory.FieldSlug, field.TypeString, value)
	}
	if value, ok := bcuo.mutation.Description(); ok {
		_spec.SetField(blogcategory.FieldDescription, field.TypeString, value)
	}
	if bcuo.mutation.DescriptionCleared() {
		_spec.ClearField(blogcategory.FieldDescription, field.TypeString)
	}
	if value, ok := bcuo.mutation.Color(); ok {
		_spec.SetField(blogcategory.FieldColor, field.TypeString, value)
	}
	if bcuo.mutation.ColorCleared() {
		_spec.ClearField(blogcategory.FieldColor, field.TypeString)
	}
	if value, ok := bcuo.mutation.Icon(); ok {
		_spec.SetField(blogcategory.FieldIcon, field.TypeString, value)
	}
	if bcuo.mutation.IconCleared() {
		_spec.ClearField(blogcategory.FieldIcon, field.TypeString)
	}
	if value, ok := bcuo.mutation.PostCount(); ok {
		_spec.SetField(blogcategory.FieldPostCount, field.TypeInt, value)
	}
	if value, ok := bcuo.mutation.AddedPostCount(); ok {
		_spec.AddField(blogcategory.FieldPostCount, field.TypeInt, value)
	}
	if value, ok := bcuo.mutation.CreatedAt(); ok {
		_spec.SetField(blogcategory.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(blogcategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if bcuo.mutation.BlogPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogcategory.BlogPostsTable,
			Columns: []string{blogcategory.BlogPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcuo.mutation.RemovedBlogPostsIDs(); len(nodes) > 0 && !bcuo.mutation.BlogPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogcategory.BlogPostsTable,
			Columns: []string{blogcategory.BlogPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcuo.mutation.BlogPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogcategory.BlogPostsTable,
			Columns: []string{blogcategory.BlogPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BlogCategory{config: bcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blogcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bcuo.mutation.done = true
	return _node, nil
}
