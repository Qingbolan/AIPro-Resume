// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/personalinfo"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PersonalInfoUpdate is the builder for updating PersonalInfo entities.
type PersonalInfoUpdate struct {
	config
	hooks    []Hook
	mutation *PersonalInfoMutation
}

// Where appends a list predicates to the PersonalInfoUpdate builder.
func (piu *PersonalInfoUpdate) Where(ps ...predicate.PersonalInfo) *PersonalInfoUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetPhone sets the "phone" field.
func (piu *PersonalInfoUpdate) SetPhone(s string) *PersonalInfoUpdate {
	piu.mutation.SetPhone(s)
	return piu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillablePhone(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetPhone(*s)
	}
	return piu
}

// ClearPhone clears the value of the "phone" field.
func (piu *PersonalInfoUpdate) ClearPhone() *PersonalInfoUpdate {
	piu.mutation.ClearPhone()
	return piu
}

// SetWebsite sets the "website" field.
func (piu *PersonalInfoUpdate) SetWebsite(s string) *PersonalInfoUpdate {
	piu.mutation.SetWebsite(s)
	return piu
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillableWebsite(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetWebsite(*s)
	}
	return piu
}

// ClearWebsite clears the value of the "website" field.
func (piu *PersonalInfoUpdate) ClearWebsite() *PersonalInfoUpdate {
	piu.mutation.ClearWebsite()
	return piu
}

// SetLocation sets the "location" field.
func (piu *PersonalInfoUpdate) SetLocation(s string) *PersonalInfoUpdate {
	piu.mutation.SetLocation(s)
	return piu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillableLocation(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetLocation(*s)
	}
	return piu
}

// ClearLocation clears the value of the "location" field.
func (piu *PersonalInfoUpdate) ClearLocation() *PersonalInfoUpdate {
	piu.mutation.ClearLocation()
	return piu
}

// SetAddress sets the "address" field.
func (piu *PersonalInfoUpdate) SetAddress(s string) *PersonalInfoUpdate {
	piu.mutation.SetAddress(s)
	return piu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillableAddress(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetAddress(*s)
	}
	return piu
}

// ClearAddress clears the value of the "address" field.
func (piu *PersonalInfoUpdate) ClearAddress() *PersonalInfoUpdate {
	piu.mutation.ClearAddress()
	return piu
}

// SetLinkedin sets the "linkedin" field.
func (piu *PersonalInfoUpdate) SetLinkedin(s string) *PersonalInfoUpdate {
	piu.mutation.SetLinkedin(s)
	return piu
}

// SetNillableLinkedin sets the "linkedin" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillableLinkedin(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetLinkedin(*s)
	}
	return piu
}

// ClearLinkedin clears the value of the "linkedin" field.
func (piu *PersonalInfoUpdate) ClearLinkedin() *PersonalInfoUpdate {
	piu.mutation.ClearLinkedin()
	return piu
}

// SetGithub sets the "github" field.
func (piu *PersonalInfoUpdate) SetGithub(s string) *PersonalInfoUpdate {
	piu.mutation.SetGithub(s)
	return piu
}

// SetNillableGithub sets the "github" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillableGithub(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetGithub(*s)
	}
	return piu
}

// ClearGithub clears the value of the "github" field.
func (piu *PersonalInfoUpdate) ClearGithub() *PersonalInfoUpdate {
	piu.mutation.ClearGithub()
	return piu
}

// SetTwitter sets the "twitter" field.
func (piu *PersonalInfoUpdate) SetTwitter(s string) *PersonalInfoUpdate {
	piu.mutation.SetTwitter(s)
	return piu
}

// SetNillableTwitter sets the "twitter" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillableTwitter(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetTwitter(*s)
	}
	return piu
}

// ClearTwitter clears the value of the "twitter" field.
func (piu *PersonalInfoUpdate) ClearTwitter() *PersonalInfoUpdate {
	piu.mutation.ClearTwitter()
	return piu
}

// SetPersonalEmail sets the "personal_email" field.
func (piu *PersonalInfoUpdate) SetPersonalEmail(s string) *PersonalInfoUpdate {
	piu.mutation.SetPersonalEmail(s)
	return piu
}

// SetNillablePersonalEmail sets the "personal_email" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillablePersonalEmail(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetPersonalEmail(*s)
	}
	return piu
}

// ClearPersonalEmail clears the value of the "personal_email" field.
func (piu *PersonalInfoUpdate) ClearPersonalEmail() *PersonalInfoUpdate {
	piu.mutation.ClearPersonalEmail()
	return piu
}

// SetSummary sets the "summary" field.
func (piu *PersonalInfoUpdate) SetSummary(s string) *PersonalInfoUpdate {
	piu.mutation.SetSummary(s)
	return piu
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillableSummary(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetSummary(*s)
	}
	return piu
}

// ClearSummary clears the value of the "summary" field.
func (piu *PersonalInfoUpdate) ClearSummary() *PersonalInfoUpdate {
	piu.mutation.ClearSummary()
	return piu
}

// SetCreatedAt sets the "created_at" field.
func (piu *PersonalInfoUpdate) SetCreatedAt(t time.Time) *PersonalInfoUpdate {
	piu.mutation.SetCreatedAt(t)
	return piu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillableCreatedAt(t *time.Time) *PersonalInfoUpdate {
	if t != nil {
		piu.SetCreatedAt(*t)
	}
	return piu
}

// SetUpdatedAt sets the "updated_at" field.
func (piu *PersonalInfoUpdate) SetUpdatedAt(t time.Time) *PersonalInfoUpdate {
	piu.mutation.SetUpdatedAt(t)
	return piu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (piu *PersonalInfoUpdate) SetUserID(id uuid.UUID) *PersonalInfoUpdate {
	piu.mutation.SetUserID(id)
	return piu
}

// SetUser sets the "user" edge to the User entity.
func (piu *PersonalInfoUpdate) SetUser(u *User) *PersonalInfoUpdate {
	return piu.SetUserID(u.ID)
}

// Mutation returns the PersonalInfoMutation object of the builder.
func (piu *PersonalInfoUpdate) Mutation() *PersonalInfoMutation {
	return piu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (piu *PersonalInfoUpdate) ClearUser() *PersonalInfoUpdate {
	piu.mutation.ClearUser()
	return piu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *PersonalInfoUpdate) Save(ctx context.Context) (int, error) {
	piu.defaults()
	return withHooks(ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *PersonalInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *PersonalInfoUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *PersonalInfoUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (piu *PersonalInfoUpdate) defaults() {
	if _, ok := piu.mutation.UpdatedAt(); !ok {
		v := personalinfo.UpdateDefaultUpdatedAt()
		piu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piu *PersonalInfoUpdate) check() error {
	if v, ok := piu.mutation.Phone(); ok {
		if err := personalinfo.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.phone": %w`, err)}
		}
	}
	if v, ok := piu.mutation.Website(); ok {
		if err := personalinfo.WebsiteValidator(v); err != nil {
			return &ValidationError{Name: "website", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.website": %w`, err)}
		}
	}
	if v, ok := piu.mutation.Location(); ok {
		if err := personalinfo.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.location": %w`, err)}
		}
	}
	if v, ok := piu.mutation.Address(); ok {
		if err := personalinfo.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.address": %w`, err)}
		}
	}
	if v, ok := piu.mutation.Linkedin(); ok {
		if err := personalinfo.LinkedinValidator(v); err != nil {
			return &ValidationError{Name: "linkedin", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.linkedin": %w`, err)}
		}
	}
	if v, ok := piu.mutation.Github(); ok {
		if err := personalinfo.GithubValidator(v); err != nil {
			return &ValidationError{Name: "github", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.github": %w`, err)}
		}
	}
	if v, ok := piu.mutation.Twitter(); ok {
		if err := personalinfo.TwitterValidator(v); err != nil {
			return &ValidationError{Name: "twitter", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.twitter": %w`, err)}
		}
	}
	if v, ok := piu.mutation.PersonalEmail(); ok {
		if err := personalinfo.PersonalEmailValidator(v); err != nil {
			return &ValidationError{Name: "personal_email", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.personal_email": %w`, err)}
		}
	}
	if piu.mutation.UserCleared() && len(piu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PersonalInfo.user"`)
	}
	return nil
}

func (piu *PersonalInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := piu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(personalinfo.Table, personalinfo.Columns, sqlgraph.NewFieldSpec(personalinfo.FieldID, field.TypeUUID))
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.Phone(); ok {
		_spec.SetField(personalinfo.FieldPhone, field.TypeString, value)
	}
	if piu.mutation.PhoneCleared() {
		_spec.ClearField(personalinfo.FieldPhone, field.TypeString)
	}
	if value, ok := piu.mutation.Website(); ok {
		_spec.SetField(personalinfo.FieldWebsite, field.TypeString, value)
	}
	if piu.mutation.WebsiteCleared() {
		_spec.ClearField(personalinfo.FieldWebsite, field.TypeString)
	}
	if value, ok := piu.mutation.Location(); ok {
		_spec.SetField(personalinfo.FieldLocation, field.TypeString, value)
	}
	if piu.mutation.LocationCleared() {
		_spec.ClearField(personalinfo.FieldLocation, field.TypeString)
	}
	if value, ok := piu.mutation.Address(); ok {
		_spec.SetField(personalinfo.FieldAddress, field.TypeString, value)
	}
	if piu.mutation.AddressCleared() {
		_spec.ClearField(personalinfo.FieldAddress, field.TypeString)
	}
	if value, ok := piu.mutation.Linkedin(); ok {
		_spec.SetField(personalinfo.FieldLinkedin, field.TypeString, value)
	}
	if piu.mutation.LinkedinCleared() {
		_spec.ClearField(personalinfo.FieldLinkedin, field.TypeString)
	}
	if value, ok := piu.mutation.Github(); ok {
		_spec.SetField(personalinfo.FieldGithub, field.TypeString, value)
	}
	if piu.mutation.GithubCleared() {
		_spec.ClearField(personalinfo.FieldGithub, field.TypeString)
	}
	if value, ok := piu.mutation.Twitter(); ok {
		_spec.SetField(personalinfo.FieldTwitter, field.TypeString, value)
	}
	if piu.mutation.TwitterCleared() {
		_spec.ClearField(personalinfo.FieldTwitter, field.TypeString)
	}
	if value, ok := piu.mutation.PersonalEmail(); ok {
		_spec.SetField(personalinfo.FieldPersonalEmail, field.TypeString, value)
	}
	if piu.mutation.PersonalEmailCleared() {
		_spec.ClearField(personalinfo.FieldPersonalEmail, field.TypeString)
	}
	if value, ok := piu.mutation.Summary(); ok {
		_spec.SetField(personalinfo.FieldSummary, field.TypeString, value)
	}
	if piu.mutation.SummaryCleared() {
		_spec.ClearField(personalinfo.FieldSummary, field.TypeString)
	}
	if value, ok := piu.mutation.CreatedAt(); ok {
		_spec.SetField(personalinfo.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := piu.mutation.UpdatedAt(); ok {
		_spec.SetField(personalinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if piu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personalinfo.UserTable,
			Columns: []string{personalinfo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personalinfo.UserTable,
			Columns: []string{personalinfo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personalinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// PersonalInfoUpdateOne is the builder for updating a single PersonalInfo entity.
type PersonalInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PersonalInfoMutation
}

// SetPhone sets the "phone" field.
func (piuo *PersonalInfoUpdateOne) SetPhone(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetPhone(s)
	return piuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillablePhone(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetPhone(*s)
	}
	return piuo
}

// ClearPhone clears the value of the "phone" field.
func (piuo *PersonalInfoUpdateOne) ClearPhone() *PersonalInfoUpdateOne {
	piuo.mutation.ClearPhone()
	return piuo
}

// SetWebsite sets the "website" field.
func (piuo *PersonalInfoUpdateOne) SetWebsite(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetWebsite(s)
	return piuo
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillableWebsite(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetWebsite(*s)
	}
	return piuo
}

// ClearWebsite clears the value of the "website" field.
func (piuo *PersonalInfoUpdateOne) ClearWebsite() *PersonalInfoUpdateOne {
	piuo.mutation.ClearWebsite()
	return piuo
}

// SetLocation sets the "location" field.
func (piuo *PersonalInfoUpdateOne) SetLocation(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetLocation(s)
	return piuo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillableLocation(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetLocation(*s)
	}
	return piuo
}

// ClearLocation clears the value of the "location" field.
func (piuo *PersonalInfoUpdateOne) ClearLocation() *PersonalInfoUpdateOne {
	piuo.mutation.ClearLocation()
	return piuo
}

// SetAddress sets the "address" field.
func (piuo *PersonalInfoUpdateOne) SetAddress(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetAddress(s)
	return piuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillableAddress(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetAddress(*s)
	}
	return piuo
}

// ClearAddress clears the value of the "address" field.
func (piuo *PersonalInfoUpdateOne) ClearAddress() *PersonalInfoUpdateOne {
	piuo.mutation.ClearAddress()
	return piuo
}

// SetLinkedin sets the "linkedin" field.
func (piuo *PersonalInfoUpdateOne) SetLinkedin(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetLinkedin(s)
	return piuo
}

// SetNillableLinkedin sets the "linkedin" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillableLinkedin(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetLinkedin(*s)
	}
	return piuo
}

// ClearLinkedin clears the value of the "linkedin" field.
func (piuo *PersonalInfoUpdateOne) ClearLinkedin() *PersonalInfoUpdateOne {
	piuo.mutation.ClearLinkedin()
	return piuo
}

// SetGithub sets the "github" field.
func (piuo *PersonalInfoUpdateOne) SetGithub(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetGithub(s)
	return piuo
}

// SetNillableGithub sets the "github" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillableGithub(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetGithub(*s)
	}
	return piuo
}

// ClearGithub clears the value of the "github" field.
func (piuo *PersonalInfoUpdateOne) ClearGithub() *PersonalInfoUpdateOne {
	piuo.mutation.ClearGithub()
	return piuo
}

// SetTwitter sets the "twitter" field.
func (piuo *PersonalInfoUpdateOne) SetTwitter(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetTwitter(s)
	return piuo
}

// SetNillableTwitter sets the "twitter" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillableTwitter(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetTwitter(*s)
	}
	return piuo
}

// ClearTwitter clears the value of the "twitter" field.
func (piuo *PersonalInfoUpdateOne) ClearTwitter() *PersonalInfoUpdateOne {
	piuo.mutation.ClearTwitter()
	return piuo
}

// SetPersonalEmail sets the "personal_email" field.
func (piuo *PersonalInfoUpdateOne) SetPersonalEmail(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetPersonalEmail(s)
	return piuo
}

// SetNillablePersonalEmail sets the "personal_email" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillablePersonalEmail(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetPersonalEmail(*s)
	}
	return piuo
}

// ClearPersonalEmail clears the value of the "personal_email" field.
func (piuo *PersonalInfoUpdateOne) ClearPersonalEmail() *PersonalInfoUpdateOne {
	piuo.mutation.ClearPersonalEmail()
	return piuo
}

// SetSummary sets the "summary" field.
func (piuo *PersonalInfoUpdateOne) SetSummary(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetSummary(s)
	return piuo
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillableSummary(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetSummary(*s)
	}
	return piuo
}

// ClearSummary clears the value of the "summary" field.
func (piuo *PersonalInfoUpdateOne) ClearSummary() *PersonalInfoUpdateOne {
	piuo.mutation.ClearSummary()
	return piuo
}

// SetCreatedAt sets the "created_at" field.
func (piuo *PersonalInfoUpdateOne) SetCreatedAt(t time.Time) *PersonalInfoUpdateOne {
	piuo.mutation.SetCreatedAt(t)
	return piuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillableCreatedAt(t *time.Time) *PersonalInfoUpdateOne {
	if t != nil {
		piuo.SetCreatedAt(*t)
	}
	return piuo
}

// SetUpdatedAt sets the "updated_at" field.
func (piuo *PersonalInfoUpdateOne) SetUpdatedAt(t time.Time) *PersonalInfoUpdateOne {
	piuo.mutation.SetUpdatedAt(t)
	return piuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (piuo *PersonalInfoUpdateOne) SetUserID(id uuid.UUID) *PersonalInfoUpdateOne {
	piuo.mutation.SetUserID(id)
	return piuo
}

// SetUser sets the "user" edge to the User entity.
func (piuo *PersonalInfoUpdateOne) SetUser(u *User) *PersonalInfoUpdateOne {
	return piuo.SetUserID(u.ID)
}

// Mutation returns the PersonalInfoMutation object of the builder.
func (piuo *PersonalInfoUpdateOne) Mutation() *PersonalInfoMutation {
	return piuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (piuo *PersonalInfoUpdateOne) ClearUser() *PersonalInfoUpdateOne {
	piuo.mutation.ClearUser()
	return piuo
}

// Where appends a list predicates to the PersonalInfoUpdate builder.
func (piuo *PersonalInfoUpdateOne) Where(ps ...predicate.PersonalInfo) *PersonalInfoUpdateOne {
	piuo.mutation.Where(ps...)
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *PersonalInfoUpdateOne) Select(field string, fields ...string) *PersonalInfoUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated PersonalInfo entity.
func (piuo *PersonalInfoUpdateOne) Save(ctx context.Context) (*PersonalInfo, error) {
	piuo.defaults()
	return withHooks(ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *PersonalInfoUpdateOne) SaveX(ctx context.Context) *PersonalInfo {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *PersonalInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *PersonalInfoUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (piuo *PersonalInfoUpdateOne) defaults() {
	if _, ok := piuo.mutation.UpdatedAt(); !ok {
		v := personalinfo.UpdateDefaultUpdatedAt()
		piuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piuo *PersonalInfoUpdateOne) check() error {
	if v, ok := piuo.mutation.Phone(); ok {
		if err := personalinfo.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.phone": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.Website(); ok {
		if err := personalinfo.WebsiteValidator(v); err != nil {
			return &ValidationError{Name: "website", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.website": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.Location(); ok {
		if err := personalinfo.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.location": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.Address(); ok {
		if err := personalinfo.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.address": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.Linkedin(); ok {
		if err := personalinfo.LinkedinValidator(v); err != nil {
			return &ValidationError{Name: "linkedin", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.linkedin": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.Github(); ok {
		if err := personalinfo.GithubValidator(v); err != nil {
			return &ValidationError{Name: "github", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.github": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.Twitter(); ok {
		if err := personalinfo.TwitterValidator(v); err != nil {
			return &ValidationError{Name: "twitter", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.twitter": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.PersonalEmail(); ok {
		if err := personalinfo.PersonalEmailValidator(v); err != nil {
			return &ValidationError{Name: "personal_email", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.personal_email": %w`, err)}
		}
	}
	if piuo.mutation.UserCleared() && len(piuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PersonalInfo.user"`)
	}
	return nil
}

func (piuo *PersonalInfoUpdateOne) sqlSave(ctx context.Context) (_node *PersonalInfo, err error) {
	if err := piuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(personalinfo.Table, personalinfo.Columns, sqlgraph.NewFieldSpec(personalinfo.FieldID, field.TypeUUID))
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PersonalInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, personalinfo.FieldID)
		for _, f := range fields {
			if !personalinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != personalinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.Phone(); ok {
		_spec.SetField(personalinfo.FieldPhone, field.TypeString, value)
	}
	if piuo.mutation.PhoneCleared() {
		_spec.ClearField(personalinfo.FieldPhone, field.TypeString)
	}
	if value, ok := piuo.mutation.Website(); ok {
		_spec.SetField(personalinfo.FieldWebsite, field.TypeString, value)
	}
	if piuo.mutation.WebsiteCleared() {
		_spec.ClearField(personalinfo.FieldWebsite, field.TypeString)
	}
	if value, ok := piuo.mutation.Location(); ok {
		_spec.SetField(personalinfo.FieldLocation, field.TypeString, value)
	}
	if piuo.mutation.LocationCleared() {
		_spec.ClearField(personalinfo.FieldLocation, field.TypeString)
	}
	if value, ok := piuo.mutation.Address(); ok {
		_spec.SetField(personalinfo.FieldAddress, field.TypeString, value)
	}
	if piuo.mutation.AddressCleared() {
		_spec.ClearField(personalinfo.FieldAddress, field.TypeString)
	}
	if value, ok := piuo.mutation.Linkedin(); ok {
		_spec.SetField(personalinfo.FieldLinkedin, field.TypeString, value)
	}
	if piuo.mutation.LinkedinCleared() {
		_spec.ClearField(personalinfo.FieldLinkedin, field.TypeString)
	}
	if value, ok := piuo.mutation.Github(); ok {
		_spec.SetField(personalinfo.FieldGithub, field.TypeString, value)
	}
	if piuo.mutation.GithubCleared() {
		_spec.ClearField(personalinfo.FieldGithub, field.TypeString)
	}
	if value, ok := piuo.mutation.Twitter(); ok {
		_spec.SetField(personalinfo.FieldTwitter, field.TypeString, value)
	}
	if piuo.mutation.TwitterCleared() {
		_spec.ClearField(personalinfo.FieldTwitter, field.TypeString)
	}
	if value, ok := piuo.mutation.PersonalEmail(); ok {
		_spec.SetField(personalinfo.FieldPersonalEmail, field.TypeString, value)
	}
	if piuo.mutation.PersonalEmailCleared() {
		_spec.ClearField(personalinfo.FieldPersonalEmail, field.TypeString)
	}
	if value, ok := piuo.mutation.Summary(); ok {
		_spec.SetField(personalinfo.FieldSummary, field.TypeString, value)
	}
	if piuo.mutation.SummaryCleared() {
		_spec.ClearField(personalinfo.FieldSummary, field.TypeString)
	}
	if value, ok := piuo.mutation.CreatedAt(); ok {
		_spec.SetField(personalinfo.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := piuo.mutation.UpdatedAt(); ok {
		_spec.SetField(personalinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if piuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personalinfo.UserTable,
			Columns: []string{personalinfo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personalinfo.UserTable,
			Columns: []string{personalinfo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PersonalInfo{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personalinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}
