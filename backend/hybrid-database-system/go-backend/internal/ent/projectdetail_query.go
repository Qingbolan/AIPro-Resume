// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/projectdetail"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProjectDetailQuery is the builder for querying ProjectDetail entities.
type ProjectDetailQuery struct {
	config
	ctx         *QueryContext
	order       []projectdetail.OrderOption
	inters      []Interceptor
	predicates  []predicate.ProjectDetail
	withProject *ProjectQuery
	withFKs     bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProjectDetailQuery builder.
func (pdq *ProjectDetailQuery) Where(ps ...predicate.ProjectDetail) *ProjectDetailQuery {
	pdq.predicates = append(pdq.predicates, ps...)
	return pdq
}

// Limit the number of records to be returned by this query.
func (pdq *ProjectDetailQuery) Limit(limit int) *ProjectDetailQuery {
	pdq.ctx.Limit = &limit
	return pdq
}

// Offset to start from.
func (pdq *ProjectDetailQuery) Offset(offset int) *ProjectDetailQuery {
	pdq.ctx.Offset = &offset
	return pdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pdq *ProjectDetailQuery) Unique(unique bool) *ProjectDetailQuery {
	pdq.ctx.Unique = &unique
	return pdq
}

// Order specifies how the records should be ordered.
func (pdq *ProjectDetailQuery) Order(o ...projectdetail.OrderOption) *ProjectDetailQuery {
	pdq.order = append(pdq.order, o...)
	return pdq
}

// QueryProject chains the current query on the "project" edge.
func (pdq *ProjectDetailQuery) QueryProject() *ProjectQuery {
	query := (&ProjectClient{config: pdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(projectdetail.Table, projectdetail.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, projectdetail.ProjectTable, projectdetail.ProjectColumn),
		)
		fromU = sqlgraph.SetNeighbors(pdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProjectDetail entity from the query.
// Returns a *NotFoundError when no ProjectDetail was found.
func (pdq *ProjectDetailQuery) First(ctx context.Context) (*ProjectDetail, error) {
	nodes, err := pdq.Limit(1).All(setContextOp(ctx, pdq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{projectdetail.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pdq *ProjectDetailQuery) FirstX(ctx context.Context) *ProjectDetail {
	node, err := pdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProjectDetail ID from the query.
// Returns a *NotFoundError when no ProjectDetail ID was found.
func (pdq *ProjectDetailQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pdq.Limit(1).IDs(setContextOp(ctx, pdq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{projectdetail.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pdq *ProjectDetailQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := pdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProjectDetail entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProjectDetail entity is found.
// Returns a *NotFoundError when no ProjectDetail entities are found.
func (pdq *ProjectDetailQuery) Only(ctx context.Context) (*ProjectDetail, error) {
	nodes, err := pdq.Limit(2).All(setContextOp(ctx, pdq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{projectdetail.Label}
	default:
		return nil, &NotSingularError{projectdetail.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pdq *ProjectDetailQuery) OnlyX(ctx context.Context) *ProjectDetail {
	node, err := pdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProjectDetail ID in the query.
// Returns a *NotSingularError when more than one ProjectDetail ID is found.
// Returns a *NotFoundError when no entities are found.
func (pdq *ProjectDetailQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pdq.Limit(2).IDs(setContextOp(ctx, pdq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{projectdetail.Label}
	default:
		err = &NotSingularError{projectdetail.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pdq *ProjectDetailQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := pdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProjectDetails.
func (pdq *ProjectDetailQuery) All(ctx context.Context) ([]*ProjectDetail, error) {
	ctx = setContextOp(ctx, pdq.ctx, ent.OpQueryAll)
	if err := pdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ProjectDetail, *ProjectDetailQuery]()
	return withInterceptors[[]*ProjectDetail](ctx, pdq, qr, pdq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pdq *ProjectDetailQuery) AllX(ctx context.Context) []*ProjectDetail {
	nodes, err := pdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProjectDetail IDs.
func (pdq *ProjectDetailQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if pdq.ctx.Unique == nil && pdq.path != nil {
		pdq.Unique(true)
	}
	ctx = setContextOp(ctx, pdq.ctx, ent.OpQueryIDs)
	if err = pdq.Select(projectdetail.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pdq *ProjectDetailQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := pdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pdq *ProjectDetailQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pdq.ctx, ent.OpQueryCount)
	if err := pdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pdq, querierCount[*ProjectDetailQuery](), pdq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pdq *ProjectDetailQuery) CountX(ctx context.Context) int {
	count, err := pdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pdq *ProjectDetailQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pdq.ctx, ent.OpQueryExist)
	switch _, err := pdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pdq *ProjectDetailQuery) ExistX(ctx context.Context) bool {
	exist, err := pdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProjectDetailQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pdq *ProjectDetailQuery) Clone() *ProjectDetailQuery {
	if pdq == nil {
		return nil
	}
	return &ProjectDetailQuery{
		config:      pdq.config,
		ctx:         pdq.ctx.Clone(),
		order:       append([]projectdetail.OrderOption{}, pdq.order...),
		inters:      append([]Interceptor{}, pdq.inters...),
		predicates:  append([]predicate.ProjectDetail{}, pdq.predicates...),
		withProject: pdq.withProject.Clone(),
		// clone intermediate query.
		sql:  pdq.sql.Clone(),
		path: pdq.path,
	}
}

// WithProject tells the query-builder to eager-load the nodes that are connected to
// the "project" edge. The optional arguments are used to configure the query builder of the edge.
func (pdq *ProjectDetailQuery) WithProject(opts ...func(*ProjectQuery)) *ProjectDetailQuery {
	query := (&ProjectClient{config: pdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pdq.withProject = query
	return pdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ProjectID uuid.UUID `json:"project_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProjectDetail.Query().
//		GroupBy(projectdetail.FieldProjectID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pdq *ProjectDetailQuery) GroupBy(field string, fields ...string) *ProjectDetailGroupBy {
	pdq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ProjectDetailGroupBy{build: pdq}
	grbuild.flds = &pdq.ctx.Fields
	grbuild.label = projectdetail.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ProjectID uuid.UUID `json:"project_id,omitempty"`
//	}
//
//	client.ProjectDetail.Query().
//		Select(projectdetail.FieldProjectID).
//		Scan(ctx, &v)
func (pdq *ProjectDetailQuery) Select(fields ...string) *ProjectDetailSelect {
	pdq.ctx.Fields = append(pdq.ctx.Fields, fields...)
	sbuild := &ProjectDetailSelect{ProjectDetailQuery: pdq}
	sbuild.label = projectdetail.Label
	sbuild.flds, sbuild.scan = &pdq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ProjectDetailSelect configured with the given aggregations.
func (pdq *ProjectDetailQuery) Aggregate(fns ...AggregateFunc) *ProjectDetailSelect {
	return pdq.Select().Aggregate(fns...)
}

func (pdq *ProjectDetailQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pdq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pdq); err != nil {
				return err
			}
		}
	}
	for _, f := range pdq.ctx.Fields {
		if !projectdetail.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pdq.path != nil {
		prev, err := pdq.path(ctx)
		if err != nil {
			return err
		}
		pdq.sql = prev
	}
	return nil
}

func (pdq *ProjectDetailQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ProjectDetail, error) {
	var (
		nodes       = []*ProjectDetail{}
		withFKs     = pdq.withFKs
		_spec       = pdq.querySpec()
		loadedTypes = [1]bool{
			pdq.withProject != nil,
		}
	)
	if pdq.withProject != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, projectdetail.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ProjectDetail).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ProjectDetail{config: pdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pdq.withProject; query != nil {
		if err := pdq.loadProject(ctx, query, nodes, nil,
			func(n *ProjectDetail, e *Project) { n.Edges.Project = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pdq *ProjectDetailQuery) loadProject(ctx context.Context, query *ProjectQuery, nodes []*ProjectDetail, init func(*ProjectDetail), assign func(*ProjectDetail, *Project)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ProjectDetail)
	for i := range nodes {
		if nodes[i].project_detail == nil {
			continue
		}
		fk := *nodes[i].project_detail
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(project.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "project_detail" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (pdq *ProjectDetailQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pdq.querySpec()
	_spec.Node.Columns = pdq.ctx.Fields
	if len(pdq.ctx.Fields) > 0 {
		_spec.Unique = pdq.ctx.Unique != nil && *pdq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pdq.driver, _spec)
}

func (pdq *ProjectDetailQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(projectdetail.Table, projectdetail.Columns, sqlgraph.NewFieldSpec(projectdetail.FieldID, field.TypeUUID))
	_spec.From = pdq.sql
	if unique := pdq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pdq.path != nil {
		_spec.Unique = true
	}
	if fields := pdq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectdetail.FieldID)
		for i := range fields {
			if fields[i] != projectdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pdq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pdq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pdq *ProjectDetailQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pdq.driver.Dialect())
	t1 := builder.Table(projectdetail.Table)
	columns := pdq.ctx.Fields
	if len(columns) == 0 {
		columns = projectdetail.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pdq.sql != nil {
		selector = pdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pdq.ctx.Unique != nil && *pdq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pdq.predicates {
		p(selector)
	}
	for _, p := range pdq.order {
		p(selector)
	}
	if offset := pdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProjectDetailGroupBy is the group-by builder for ProjectDetail entities.
type ProjectDetailGroupBy struct {
	selector
	build *ProjectDetailQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pdgb *ProjectDetailGroupBy) Aggregate(fns ...AggregateFunc) *ProjectDetailGroupBy {
	pdgb.fns = append(pdgb.fns, fns...)
	return pdgb
}

// Scan applies the selector query and scans the result into the given value.
func (pdgb *ProjectDetailGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pdgb.build.ctx, ent.OpQueryGroupBy)
	if err := pdgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProjectDetailQuery, *ProjectDetailGroupBy](ctx, pdgb.build, pdgb, pdgb.build.inters, v)
}

func (pdgb *ProjectDetailGroupBy) sqlScan(ctx context.Context, root *ProjectDetailQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pdgb.fns))
	for _, fn := range pdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pdgb.flds)+len(pdgb.fns))
		for _, f := range *pdgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pdgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pdgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ProjectDetailSelect is the builder for selecting fields of ProjectDetail entities.
type ProjectDetailSelect struct {
	*ProjectDetailQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pds *ProjectDetailSelect) Aggregate(fns ...AggregateFunc) *ProjectDetailSelect {
	pds.fns = append(pds.fns, fns...)
	return pds
}

// Scan applies the selector query and scans the result into the given value.
func (pds *ProjectDetailSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pds.ctx, ent.OpQuerySelect)
	if err := pds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProjectDetailQuery, *ProjectDetailSelect](ctx, pds.ProjectDetailQuery, pds, pds.inters, v)
}

func (pds *ProjectDetailSelect) sqlScan(ctx context.Context, root *ProjectDetailQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pds.fns))
	for _, fn := range pds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
