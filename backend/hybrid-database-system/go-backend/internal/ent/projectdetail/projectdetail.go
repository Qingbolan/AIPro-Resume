// Code generated by ent, DO NOT EDIT.

package projectdetail

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the projectdetail type in the database.
	Label = "project_detail"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProjectID holds the string denoting the project_id field in the database.
	FieldProjectID = "project_id"
	// FieldFullDescription holds the string denoting the full_description field in the database.
	FieldFullDescription = "full_description"
	// FieldFeatures holds the string denoting the features field in the database.
	FieldFeatures = "features"
	// FieldKeyAchievements holds the string denoting the key_achievements field in the database.
	FieldKeyAchievements = "key_achievements"
	// FieldChallengesFaced holds the string denoting the challenges_faced field in the database.
	FieldChallengesFaced = "challenges_faced"
	// FieldLessonsLearned holds the string denoting the lessons_learned field in the database.
	FieldLessonsLearned = "lessons_learned"
	// FieldTechnicalOverview holds the string denoting the technical_overview field in the database.
	FieldTechnicalOverview = "technical_overview"
	// FieldInstallationInstructions holds the string denoting the installation_instructions field in the database.
	FieldInstallationInstructions = "installation_instructions"
	// FieldUsageInstructions holds the string denoting the usage_instructions field in the database.
	FieldUsageInstructions = "usage_instructions"
	// FieldAPIDocumentation holds the string denoting the api_documentation field in the database.
	FieldAPIDocumentation = "api_documentation"
	// FieldDeploymentNotes holds the string denoting the deployment_notes field in the database.
	FieldDeploymentNotes = "deployment_notes"
	// FieldFutureEnhancements holds the string denoting the future_enhancements field in the database.
	FieldFutureEnhancements = "future_enhancements"
	// FieldTeamMembers holds the string denoting the team_members field in the database.
	FieldTeamMembers = "team_members"
	// FieldProjectDuration holds the string denoting the project_duration field in the database.
	FieldProjectDuration = "project_duration"
	// FieldTargetAudience holds the string denoting the target_audience field in the database.
	FieldTargetAudience = "target_audience"
	// FieldPerformanceMetrics holds the string denoting the performance_metrics field in the database.
	FieldPerformanceMetrics = "performance_metrics"
	// FieldTestingApproach holds the string denoting the testing_approach field in the database.
	FieldTestingApproach = "testing_approach"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// Table holds the table name of the projectdetail in the database.
	Table = "project_details"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "project_details"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "project_detail"
)

// Columns holds all SQL columns for projectdetail fields.
var Columns = []string{
	FieldID,
	FieldProjectID,
	FieldFullDescription,
	FieldFeatures,
	FieldKeyAchievements,
	FieldChallengesFaced,
	FieldLessonsLearned,
	FieldTechnicalOverview,
	FieldInstallationInstructions,
	FieldUsageInstructions,
	FieldAPIDocumentation,
	FieldDeploymentNotes,
	FieldFutureEnhancements,
	FieldTeamMembers,
	FieldProjectDuration,
	FieldTargetAudience,
	FieldPerformanceMetrics,
	FieldTestingApproach,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "project_details"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"project_detail",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// ProjectDurationValidator is a validator for the "project_duration" field. It is called by the builders before save.
	ProjectDurationValidator func(string) error
	// TargetAudienceValidator is a validator for the "target_audience" field. It is called by the builders before save.
	TargetAudienceValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ProjectDetail queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByProjectID orders the results by the project_id field.
func ByProjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectID, opts...).ToFunc()
}

// ByFullDescription orders the results by the full_description field.
func ByFullDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFullDescription, opts...).ToFunc()
}

// ByTechnicalOverview orders the results by the technical_overview field.
func ByTechnicalOverview(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTechnicalOverview, opts...).ToFunc()
}

// ByInstallationInstructions orders the results by the installation_instructions field.
func ByInstallationInstructions(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstallationInstructions, opts...).ToFunc()
}

// ByUsageInstructions orders the results by the usage_instructions field.
func ByUsageInstructions(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsageInstructions, opts...).ToFunc()
}

// ByAPIDocumentation orders the results by the api_documentation field.
func ByAPIDocumentation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPIDocumentation, opts...).ToFunc()
}

// ByDeploymentNotes orders the results by the deployment_notes field.
func ByDeploymentNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeploymentNotes, opts...).ToFunc()
}

// ByFutureEnhancements orders the results by the future_enhancements field.
func ByFutureEnhancements(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFutureEnhancements, opts...).ToFunc()
}

// ByProjectDuration orders the results by the project_duration field.
func ByProjectDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectDuration, opts...).ToFunc()
}

// ByTargetAudience orders the results by the target_audience field.
func ByTargetAudience(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetAudience, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByProjectField orders the results by project field.
func ByProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectStep(), sql.OrderByField(field, opts...))
	}
}
func newProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ProjectTable, ProjectColumn),
	)
}
