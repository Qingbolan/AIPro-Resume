// Code generated by ent, DO NOT EDIT.

package projectdetail

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldID, id))
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldProjectID, v))
}

// FullDescription applies equality check predicate on the "full_description" field. It's identical to FullDescriptionEQ.
func FullDescription(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldFullDescription, v))
}

// TechnicalOverview applies equality check predicate on the "technical_overview" field. It's identical to TechnicalOverviewEQ.
func TechnicalOverview(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldTechnicalOverview, v))
}

// InstallationInstructions applies equality check predicate on the "installation_instructions" field. It's identical to InstallationInstructionsEQ.
func InstallationInstructions(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldInstallationInstructions, v))
}

// UsageInstructions applies equality check predicate on the "usage_instructions" field. It's identical to UsageInstructionsEQ.
func UsageInstructions(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldUsageInstructions, v))
}

// APIDocumentation applies equality check predicate on the "api_documentation" field. It's identical to APIDocumentationEQ.
func APIDocumentation(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldAPIDocumentation, v))
}

// DeploymentNotes applies equality check predicate on the "deployment_notes" field. It's identical to DeploymentNotesEQ.
func DeploymentNotes(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldDeploymentNotes, v))
}

// FutureEnhancements applies equality check predicate on the "future_enhancements" field. It's identical to FutureEnhancementsEQ.
func FutureEnhancements(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldFutureEnhancements, v))
}

// ProjectDuration applies equality check predicate on the "project_duration" field. It's identical to ProjectDurationEQ.
func ProjectDuration(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldProjectDuration, v))
}

// TargetAudience applies equality check predicate on the "target_audience" field. It's identical to TargetAudienceEQ.
func TargetAudience(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldTargetAudience, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldProjectID, v))
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldProjectID, v))
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldProjectID, vs...))
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldProjectID, vs...))
}

// ProjectIDGT applies the GT predicate on the "project_id" field.
func ProjectIDGT(v uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldProjectID, v))
}

// ProjectIDGTE applies the GTE predicate on the "project_id" field.
func ProjectIDGTE(v uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldProjectID, v))
}

// ProjectIDLT applies the LT predicate on the "project_id" field.
func ProjectIDLT(v uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldProjectID, v))
}

// ProjectIDLTE applies the LTE predicate on the "project_id" field.
func ProjectIDLTE(v uuid.UUID) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldProjectID, v))
}

// FullDescriptionEQ applies the EQ predicate on the "full_description" field.
func FullDescriptionEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldFullDescription, v))
}

// FullDescriptionNEQ applies the NEQ predicate on the "full_description" field.
func FullDescriptionNEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldFullDescription, v))
}

// FullDescriptionIn applies the In predicate on the "full_description" field.
func FullDescriptionIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldFullDescription, vs...))
}

// FullDescriptionNotIn applies the NotIn predicate on the "full_description" field.
func FullDescriptionNotIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldFullDescription, vs...))
}

// FullDescriptionGT applies the GT predicate on the "full_description" field.
func FullDescriptionGT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldFullDescription, v))
}

// FullDescriptionGTE applies the GTE predicate on the "full_description" field.
func FullDescriptionGTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldFullDescription, v))
}

// FullDescriptionLT applies the LT predicate on the "full_description" field.
func FullDescriptionLT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldFullDescription, v))
}

// FullDescriptionLTE applies the LTE predicate on the "full_description" field.
func FullDescriptionLTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldFullDescription, v))
}

// FullDescriptionContains applies the Contains predicate on the "full_description" field.
func FullDescriptionContains(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContains(FieldFullDescription, v))
}

// FullDescriptionHasPrefix applies the HasPrefix predicate on the "full_description" field.
func FullDescriptionHasPrefix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasPrefix(FieldFullDescription, v))
}

// FullDescriptionHasSuffix applies the HasSuffix predicate on the "full_description" field.
func FullDescriptionHasSuffix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasSuffix(FieldFullDescription, v))
}

// FullDescriptionIsNil applies the IsNil predicate on the "full_description" field.
func FullDescriptionIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldFullDescription))
}

// FullDescriptionNotNil applies the NotNil predicate on the "full_description" field.
func FullDescriptionNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldFullDescription))
}

// FullDescriptionEqualFold applies the EqualFold predicate on the "full_description" field.
func FullDescriptionEqualFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEqualFold(FieldFullDescription, v))
}

// FullDescriptionContainsFold applies the ContainsFold predicate on the "full_description" field.
func FullDescriptionContainsFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContainsFold(FieldFullDescription, v))
}

// FeaturesIsNil applies the IsNil predicate on the "features" field.
func FeaturesIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldFeatures))
}

// FeaturesNotNil applies the NotNil predicate on the "features" field.
func FeaturesNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldFeatures))
}

// KeyAchievementsIsNil applies the IsNil predicate on the "key_achievements" field.
func KeyAchievementsIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldKeyAchievements))
}

// KeyAchievementsNotNil applies the NotNil predicate on the "key_achievements" field.
func KeyAchievementsNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldKeyAchievements))
}

// ChallengesFacedIsNil applies the IsNil predicate on the "challenges_faced" field.
func ChallengesFacedIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldChallengesFaced))
}

// ChallengesFacedNotNil applies the NotNil predicate on the "challenges_faced" field.
func ChallengesFacedNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldChallengesFaced))
}

// LessonsLearnedIsNil applies the IsNil predicate on the "lessons_learned" field.
func LessonsLearnedIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldLessonsLearned))
}

// LessonsLearnedNotNil applies the NotNil predicate on the "lessons_learned" field.
func LessonsLearnedNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldLessonsLearned))
}

// TechnicalOverviewEQ applies the EQ predicate on the "technical_overview" field.
func TechnicalOverviewEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldTechnicalOverview, v))
}

// TechnicalOverviewNEQ applies the NEQ predicate on the "technical_overview" field.
func TechnicalOverviewNEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldTechnicalOverview, v))
}

// TechnicalOverviewIn applies the In predicate on the "technical_overview" field.
func TechnicalOverviewIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldTechnicalOverview, vs...))
}

// TechnicalOverviewNotIn applies the NotIn predicate on the "technical_overview" field.
func TechnicalOverviewNotIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldTechnicalOverview, vs...))
}

// TechnicalOverviewGT applies the GT predicate on the "technical_overview" field.
func TechnicalOverviewGT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldTechnicalOverview, v))
}

// TechnicalOverviewGTE applies the GTE predicate on the "technical_overview" field.
func TechnicalOverviewGTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldTechnicalOverview, v))
}

// TechnicalOverviewLT applies the LT predicate on the "technical_overview" field.
func TechnicalOverviewLT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldTechnicalOverview, v))
}

// TechnicalOverviewLTE applies the LTE predicate on the "technical_overview" field.
func TechnicalOverviewLTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldTechnicalOverview, v))
}

// TechnicalOverviewContains applies the Contains predicate on the "technical_overview" field.
func TechnicalOverviewContains(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContains(FieldTechnicalOverview, v))
}

// TechnicalOverviewHasPrefix applies the HasPrefix predicate on the "technical_overview" field.
func TechnicalOverviewHasPrefix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasPrefix(FieldTechnicalOverview, v))
}

// TechnicalOverviewHasSuffix applies the HasSuffix predicate on the "technical_overview" field.
func TechnicalOverviewHasSuffix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasSuffix(FieldTechnicalOverview, v))
}

// TechnicalOverviewIsNil applies the IsNil predicate on the "technical_overview" field.
func TechnicalOverviewIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldTechnicalOverview))
}

// TechnicalOverviewNotNil applies the NotNil predicate on the "technical_overview" field.
func TechnicalOverviewNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldTechnicalOverview))
}

// TechnicalOverviewEqualFold applies the EqualFold predicate on the "technical_overview" field.
func TechnicalOverviewEqualFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEqualFold(FieldTechnicalOverview, v))
}

// TechnicalOverviewContainsFold applies the ContainsFold predicate on the "technical_overview" field.
func TechnicalOverviewContainsFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContainsFold(FieldTechnicalOverview, v))
}

// InstallationInstructionsEQ applies the EQ predicate on the "installation_instructions" field.
func InstallationInstructionsEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldInstallationInstructions, v))
}

// InstallationInstructionsNEQ applies the NEQ predicate on the "installation_instructions" field.
func InstallationInstructionsNEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldInstallationInstructions, v))
}

// InstallationInstructionsIn applies the In predicate on the "installation_instructions" field.
func InstallationInstructionsIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldInstallationInstructions, vs...))
}

// InstallationInstructionsNotIn applies the NotIn predicate on the "installation_instructions" field.
func InstallationInstructionsNotIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldInstallationInstructions, vs...))
}

// InstallationInstructionsGT applies the GT predicate on the "installation_instructions" field.
func InstallationInstructionsGT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldInstallationInstructions, v))
}

// InstallationInstructionsGTE applies the GTE predicate on the "installation_instructions" field.
func InstallationInstructionsGTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldInstallationInstructions, v))
}

// InstallationInstructionsLT applies the LT predicate on the "installation_instructions" field.
func InstallationInstructionsLT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldInstallationInstructions, v))
}

// InstallationInstructionsLTE applies the LTE predicate on the "installation_instructions" field.
func InstallationInstructionsLTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldInstallationInstructions, v))
}

// InstallationInstructionsContains applies the Contains predicate on the "installation_instructions" field.
func InstallationInstructionsContains(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContains(FieldInstallationInstructions, v))
}

// InstallationInstructionsHasPrefix applies the HasPrefix predicate on the "installation_instructions" field.
func InstallationInstructionsHasPrefix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasPrefix(FieldInstallationInstructions, v))
}

// InstallationInstructionsHasSuffix applies the HasSuffix predicate on the "installation_instructions" field.
func InstallationInstructionsHasSuffix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasSuffix(FieldInstallationInstructions, v))
}

// InstallationInstructionsIsNil applies the IsNil predicate on the "installation_instructions" field.
func InstallationInstructionsIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldInstallationInstructions))
}

// InstallationInstructionsNotNil applies the NotNil predicate on the "installation_instructions" field.
func InstallationInstructionsNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldInstallationInstructions))
}

// InstallationInstructionsEqualFold applies the EqualFold predicate on the "installation_instructions" field.
func InstallationInstructionsEqualFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEqualFold(FieldInstallationInstructions, v))
}

// InstallationInstructionsContainsFold applies the ContainsFold predicate on the "installation_instructions" field.
func InstallationInstructionsContainsFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContainsFold(FieldInstallationInstructions, v))
}

// UsageInstructionsEQ applies the EQ predicate on the "usage_instructions" field.
func UsageInstructionsEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldUsageInstructions, v))
}

// UsageInstructionsNEQ applies the NEQ predicate on the "usage_instructions" field.
func UsageInstructionsNEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldUsageInstructions, v))
}

// UsageInstructionsIn applies the In predicate on the "usage_instructions" field.
func UsageInstructionsIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldUsageInstructions, vs...))
}

// UsageInstructionsNotIn applies the NotIn predicate on the "usage_instructions" field.
func UsageInstructionsNotIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldUsageInstructions, vs...))
}

// UsageInstructionsGT applies the GT predicate on the "usage_instructions" field.
func UsageInstructionsGT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldUsageInstructions, v))
}

// UsageInstructionsGTE applies the GTE predicate on the "usage_instructions" field.
func UsageInstructionsGTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldUsageInstructions, v))
}

// UsageInstructionsLT applies the LT predicate on the "usage_instructions" field.
func UsageInstructionsLT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldUsageInstructions, v))
}

// UsageInstructionsLTE applies the LTE predicate on the "usage_instructions" field.
func UsageInstructionsLTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldUsageInstructions, v))
}

// UsageInstructionsContains applies the Contains predicate on the "usage_instructions" field.
func UsageInstructionsContains(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContains(FieldUsageInstructions, v))
}

// UsageInstructionsHasPrefix applies the HasPrefix predicate on the "usage_instructions" field.
func UsageInstructionsHasPrefix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasPrefix(FieldUsageInstructions, v))
}

// UsageInstructionsHasSuffix applies the HasSuffix predicate on the "usage_instructions" field.
func UsageInstructionsHasSuffix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasSuffix(FieldUsageInstructions, v))
}

// UsageInstructionsIsNil applies the IsNil predicate on the "usage_instructions" field.
func UsageInstructionsIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldUsageInstructions))
}

// UsageInstructionsNotNil applies the NotNil predicate on the "usage_instructions" field.
func UsageInstructionsNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldUsageInstructions))
}

// UsageInstructionsEqualFold applies the EqualFold predicate on the "usage_instructions" field.
func UsageInstructionsEqualFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEqualFold(FieldUsageInstructions, v))
}

// UsageInstructionsContainsFold applies the ContainsFold predicate on the "usage_instructions" field.
func UsageInstructionsContainsFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContainsFold(FieldUsageInstructions, v))
}

// APIDocumentationEQ applies the EQ predicate on the "api_documentation" field.
func APIDocumentationEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldAPIDocumentation, v))
}

// APIDocumentationNEQ applies the NEQ predicate on the "api_documentation" field.
func APIDocumentationNEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldAPIDocumentation, v))
}

// APIDocumentationIn applies the In predicate on the "api_documentation" field.
func APIDocumentationIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldAPIDocumentation, vs...))
}

// APIDocumentationNotIn applies the NotIn predicate on the "api_documentation" field.
func APIDocumentationNotIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldAPIDocumentation, vs...))
}

// APIDocumentationGT applies the GT predicate on the "api_documentation" field.
func APIDocumentationGT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldAPIDocumentation, v))
}

// APIDocumentationGTE applies the GTE predicate on the "api_documentation" field.
func APIDocumentationGTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldAPIDocumentation, v))
}

// APIDocumentationLT applies the LT predicate on the "api_documentation" field.
func APIDocumentationLT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldAPIDocumentation, v))
}

// APIDocumentationLTE applies the LTE predicate on the "api_documentation" field.
func APIDocumentationLTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldAPIDocumentation, v))
}

// APIDocumentationContains applies the Contains predicate on the "api_documentation" field.
func APIDocumentationContains(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContains(FieldAPIDocumentation, v))
}

// APIDocumentationHasPrefix applies the HasPrefix predicate on the "api_documentation" field.
func APIDocumentationHasPrefix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasPrefix(FieldAPIDocumentation, v))
}

// APIDocumentationHasSuffix applies the HasSuffix predicate on the "api_documentation" field.
func APIDocumentationHasSuffix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasSuffix(FieldAPIDocumentation, v))
}

// APIDocumentationIsNil applies the IsNil predicate on the "api_documentation" field.
func APIDocumentationIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldAPIDocumentation))
}

// APIDocumentationNotNil applies the NotNil predicate on the "api_documentation" field.
func APIDocumentationNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldAPIDocumentation))
}

// APIDocumentationEqualFold applies the EqualFold predicate on the "api_documentation" field.
func APIDocumentationEqualFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEqualFold(FieldAPIDocumentation, v))
}

// APIDocumentationContainsFold applies the ContainsFold predicate on the "api_documentation" field.
func APIDocumentationContainsFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContainsFold(FieldAPIDocumentation, v))
}

// DeploymentNotesEQ applies the EQ predicate on the "deployment_notes" field.
func DeploymentNotesEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldDeploymentNotes, v))
}

// DeploymentNotesNEQ applies the NEQ predicate on the "deployment_notes" field.
func DeploymentNotesNEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldDeploymentNotes, v))
}

// DeploymentNotesIn applies the In predicate on the "deployment_notes" field.
func DeploymentNotesIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldDeploymentNotes, vs...))
}

// DeploymentNotesNotIn applies the NotIn predicate on the "deployment_notes" field.
func DeploymentNotesNotIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldDeploymentNotes, vs...))
}

// DeploymentNotesGT applies the GT predicate on the "deployment_notes" field.
func DeploymentNotesGT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldDeploymentNotes, v))
}

// DeploymentNotesGTE applies the GTE predicate on the "deployment_notes" field.
func DeploymentNotesGTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldDeploymentNotes, v))
}

// DeploymentNotesLT applies the LT predicate on the "deployment_notes" field.
func DeploymentNotesLT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldDeploymentNotes, v))
}

// DeploymentNotesLTE applies the LTE predicate on the "deployment_notes" field.
func DeploymentNotesLTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldDeploymentNotes, v))
}

// DeploymentNotesContains applies the Contains predicate on the "deployment_notes" field.
func DeploymentNotesContains(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContains(FieldDeploymentNotes, v))
}

// DeploymentNotesHasPrefix applies the HasPrefix predicate on the "deployment_notes" field.
func DeploymentNotesHasPrefix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasPrefix(FieldDeploymentNotes, v))
}

// DeploymentNotesHasSuffix applies the HasSuffix predicate on the "deployment_notes" field.
func DeploymentNotesHasSuffix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasSuffix(FieldDeploymentNotes, v))
}

// DeploymentNotesIsNil applies the IsNil predicate on the "deployment_notes" field.
func DeploymentNotesIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldDeploymentNotes))
}

// DeploymentNotesNotNil applies the NotNil predicate on the "deployment_notes" field.
func DeploymentNotesNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldDeploymentNotes))
}

// DeploymentNotesEqualFold applies the EqualFold predicate on the "deployment_notes" field.
func DeploymentNotesEqualFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEqualFold(FieldDeploymentNotes, v))
}

// DeploymentNotesContainsFold applies the ContainsFold predicate on the "deployment_notes" field.
func DeploymentNotesContainsFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContainsFold(FieldDeploymentNotes, v))
}

// FutureEnhancementsEQ applies the EQ predicate on the "future_enhancements" field.
func FutureEnhancementsEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldFutureEnhancements, v))
}

// FutureEnhancementsNEQ applies the NEQ predicate on the "future_enhancements" field.
func FutureEnhancementsNEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldFutureEnhancements, v))
}

// FutureEnhancementsIn applies the In predicate on the "future_enhancements" field.
func FutureEnhancementsIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldFutureEnhancements, vs...))
}

// FutureEnhancementsNotIn applies the NotIn predicate on the "future_enhancements" field.
func FutureEnhancementsNotIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldFutureEnhancements, vs...))
}

// FutureEnhancementsGT applies the GT predicate on the "future_enhancements" field.
func FutureEnhancementsGT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldFutureEnhancements, v))
}

// FutureEnhancementsGTE applies the GTE predicate on the "future_enhancements" field.
func FutureEnhancementsGTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldFutureEnhancements, v))
}

// FutureEnhancementsLT applies the LT predicate on the "future_enhancements" field.
func FutureEnhancementsLT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldFutureEnhancements, v))
}

// FutureEnhancementsLTE applies the LTE predicate on the "future_enhancements" field.
func FutureEnhancementsLTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldFutureEnhancements, v))
}

// FutureEnhancementsContains applies the Contains predicate on the "future_enhancements" field.
func FutureEnhancementsContains(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContains(FieldFutureEnhancements, v))
}

// FutureEnhancementsHasPrefix applies the HasPrefix predicate on the "future_enhancements" field.
func FutureEnhancementsHasPrefix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasPrefix(FieldFutureEnhancements, v))
}

// FutureEnhancementsHasSuffix applies the HasSuffix predicate on the "future_enhancements" field.
func FutureEnhancementsHasSuffix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasSuffix(FieldFutureEnhancements, v))
}

// FutureEnhancementsIsNil applies the IsNil predicate on the "future_enhancements" field.
func FutureEnhancementsIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldFutureEnhancements))
}

// FutureEnhancementsNotNil applies the NotNil predicate on the "future_enhancements" field.
func FutureEnhancementsNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldFutureEnhancements))
}

// FutureEnhancementsEqualFold applies the EqualFold predicate on the "future_enhancements" field.
func FutureEnhancementsEqualFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEqualFold(FieldFutureEnhancements, v))
}

// FutureEnhancementsContainsFold applies the ContainsFold predicate on the "future_enhancements" field.
func FutureEnhancementsContainsFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContainsFold(FieldFutureEnhancements, v))
}

// TeamMembersIsNil applies the IsNil predicate on the "team_members" field.
func TeamMembersIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldTeamMembers))
}

// TeamMembersNotNil applies the NotNil predicate on the "team_members" field.
func TeamMembersNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldTeamMembers))
}

// ProjectDurationEQ applies the EQ predicate on the "project_duration" field.
func ProjectDurationEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldProjectDuration, v))
}

// ProjectDurationNEQ applies the NEQ predicate on the "project_duration" field.
func ProjectDurationNEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldProjectDuration, v))
}

// ProjectDurationIn applies the In predicate on the "project_duration" field.
func ProjectDurationIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldProjectDuration, vs...))
}

// ProjectDurationNotIn applies the NotIn predicate on the "project_duration" field.
func ProjectDurationNotIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldProjectDuration, vs...))
}

// ProjectDurationGT applies the GT predicate on the "project_duration" field.
func ProjectDurationGT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldProjectDuration, v))
}

// ProjectDurationGTE applies the GTE predicate on the "project_duration" field.
func ProjectDurationGTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldProjectDuration, v))
}

// ProjectDurationLT applies the LT predicate on the "project_duration" field.
func ProjectDurationLT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldProjectDuration, v))
}

// ProjectDurationLTE applies the LTE predicate on the "project_duration" field.
func ProjectDurationLTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldProjectDuration, v))
}

// ProjectDurationContains applies the Contains predicate on the "project_duration" field.
func ProjectDurationContains(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContains(FieldProjectDuration, v))
}

// ProjectDurationHasPrefix applies the HasPrefix predicate on the "project_duration" field.
func ProjectDurationHasPrefix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasPrefix(FieldProjectDuration, v))
}

// ProjectDurationHasSuffix applies the HasSuffix predicate on the "project_duration" field.
func ProjectDurationHasSuffix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasSuffix(FieldProjectDuration, v))
}

// ProjectDurationIsNil applies the IsNil predicate on the "project_duration" field.
func ProjectDurationIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldProjectDuration))
}

// ProjectDurationNotNil applies the NotNil predicate on the "project_duration" field.
func ProjectDurationNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldProjectDuration))
}

// ProjectDurationEqualFold applies the EqualFold predicate on the "project_duration" field.
func ProjectDurationEqualFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEqualFold(FieldProjectDuration, v))
}

// ProjectDurationContainsFold applies the ContainsFold predicate on the "project_duration" field.
func ProjectDurationContainsFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContainsFold(FieldProjectDuration, v))
}

// TargetAudienceEQ applies the EQ predicate on the "target_audience" field.
func TargetAudienceEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldTargetAudience, v))
}

// TargetAudienceNEQ applies the NEQ predicate on the "target_audience" field.
func TargetAudienceNEQ(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldTargetAudience, v))
}

// TargetAudienceIn applies the In predicate on the "target_audience" field.
func TargetAudienceIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldTargetAudience, vs...))
}

// TargetAudienceNotIn applies the NotIn predicate on the "target_audience" field.
func TargetAudienceNotIn(vs ...string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldTargetAudience, vs...))
}

// TargetAudienceGT applies the GT predicate on the "target_audience" field.
func TargetAudienceGT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldTargetAudience, v))
}

// TargetAudienceGTE applies the GTE predicate on the "target_audience" field.
func TargetAudienceGTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldTargetAudience, v))
}

// TargetAudienceLT applies the LT predicate on the "target_audience" field.
func TargetAudienceLT(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldTargetAudience, v))
}

// TargetAudienceLTE applies the LTE predicate on the "target_audience" field.
func TargetAudienceLTE(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldTargetAudience, v))
}

// TargetAudienceContains applies the Contains predicate on the "target_audience" field.
func TargetAudienceContains(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContains(FieldTargetAudience, v))
}

// TargetAudienceHasPrefix applies the HasPrefix predicate on the "target_audience" field.
func TargetAudienceHasPrefix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasPrefix(FieldTargetAudience, v))
}

// TargetAudienceHasSuffix applies the HasSuffix predicate on the "target_audience" field.
func TargetAudienceHasSuffix(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldHasSuffix(FieldTargetAudience, v))
}

// TargetAudienceIsNil applies the IsNil predicate on the "target_audience" field.
func TargetAudienceIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldTargetAudience))
}

// TargetAudienceNotNil applies the NotNil predicate on the "target_audience" field.
func TargetAudienceNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldTargetAudience))
}

// TargetAudienceEqualFold applies the EqualFold predicate on the "target_audience" field.
func TargetAudienceEqualFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEqualFold(FieldTargetAudience, v))
}

// TargetAudienceContainsFold applies the ContainsFold predicate on the "target_audience" field.
func TargetAudienceContainsFold(v string) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldContainsFold(FieldTargetAudience, v))
}

// PerformanceMetricsIsNil applies the IsNil predicate on the "performance_metrics" field.
func PerformanceMetricsIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldPerformanceMetrics))
}

// PerformanceMetricsNotNil applies the NotNil predicate on the "performance_metrics" field.
func PerformanceMetricsNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldPerformanceMetrics))
}

// TestingApproachIsNil applies the IsNil predicate on the "testing_approach" field.
func TestingApproachIsNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIsNull(FieldTestingApproach))
}

// TestingApproachNotNil applies the NotNil predicate on the "testing_approach" field.
func TestingApproachNotNil() predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotNull(FieldTestingApproach))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.ProjectDetail {
	return predicate.ProjectDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.ProjectDetail {
	return predicate.ProjectDetail(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProjectDetail) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProjectDetail) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProjectDetail) predicate.ProjectDetail {
	return predicate.ProjectDetail(sql.NotPredicates(p))
}
