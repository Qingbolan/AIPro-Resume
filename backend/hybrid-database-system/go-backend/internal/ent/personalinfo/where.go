// Code generated by ent, DO NOT EDIT.

package personalinfo

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldUserID, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldPhone, v))
}

// Website applies equality check predicate on the "website" field. It's identical to WebsiteEQ.
func Website(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldWebsite, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldLocation, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldAddress, v))
}

// Linkedin applies equality check predicate on the "linkedin" field. It's identical to LinkedinEQ.
func Linkedin(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldLinkedin, v))
}

// Github applies equality check predicate on the "github" field. It's identical to GithubEQ.
func Github(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldGithub, v))
}

// Twitter applies equality check predicate on the "twitter" field. It's identical to TwitterEQ.
func Twitter(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldTwitter, v))
}

// PersonalEmail applies equality check predicate on the "personal_email" field. It's identical to PersonalEmailEQ.
func PersonalEmail(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldPersonalEmail, v))
}

// Summary applies equality check predicate on the "summary" field. It's identical to SummaryEQ.
func Summary(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldSummary, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLTE(FieldUserID, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneIsNil applies the IsNil predicate on the "phone" field.
func PhoneIsNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIsNull(FieldPhone))
}

// PhoneNotNil applies the NotNil predicate on the "phone" field.
func PhoneNotNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotNull(FieldPhone))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContainsFold(FieldPhone, v))
}

// WebsiteEQ applies the EQ predicate on the "website" field.
func WebsiteEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldWebsite, v))
}

// WebsiteNEQ applies the NEQ predicate on the "website" field.
func WebsiteNEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNEQ(FieldWebsite, v))
}

// WebsiteIn applies the In predicate on the "website" field.
func WebsiteIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIn(FieldWebsite, vs...))
}

// WebsiteNotIn applies the NotIn predicate on the "website" field.
func WebsiteNotIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotIn(FieldWebsite, vs...))
}

// WebsiteGT applies the GT predicate on the "website" field.
func WebsiteGT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGT(FieldWebsite, v))
}

// WebsiteGTE applies the GTE predicate on the "website" field.
func WebsiteGTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGTE(FieldWebsite, v))
}

// WebsiteLT applies the LT predicate on the "website" field.
func WebsiteLT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLT(FieldWebsite, v))
}

// WebsiteLTE applies the LTE predicate on the "website" field.
func WebsiteLTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLTE(FieldWebsite, v))
}

// WebsiteContains applies the Contains predicate on the "website" field.
func WebsiteContains(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContains(FieldWebsite, v))
}

// WebsiteHasPrefix applies the HasPrefix predicate on the "website" field.
func WebsiteHasPrefix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasPrefix(FieldWebsite, v))
}

// WebsiteHasSuffix applies the HasSuffix predicate on the "website" field.
func WebsiteHasSuffix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasSuffix(FieldWebsite, v))
}

// WebsiteIsNil applies the IsNil predicate on the "website" field.
func WebsiteIsNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIsNull(FieldWebsite))
}

// WebsiteNotNil applies the NotNil predicate on the "website" field.
func WebsiteNotNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotNull(FieldWebsite))
}

// WebsiteEqualFold applies the EqualFold predicate on the "website" field.
func WebsiteEqualFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEqualFold(FieldWebsite, v))
}

// WebsiteContainsFold applies the ContainsFold predicate on the "website" field.
func WebsiteContainsFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContainsFold(FieldWebsite, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIsNull(FieldLocation))
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotNull(FieldLocation))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContainsFold(FieldLocation, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressIsNil applies the IsNil predicate on the "address" field.
func AddressIsNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIsNull(FieldAddress))
}

// AddressNotNil applies the NotNil predicate on the "address" field.
func AddressNotNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotNull(FieldAddress))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContainsFold(FieldAddress, v))
}

// LinkedinEQ applies the EQ predicate on the "linkedin" field.
func LinkedinEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldLinkedin, v))
}

// LinkedinNEQ applies the NEQ predicate on the "linkedin" field.
func LinkedinNEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNEQ(FieldLinkedin, v))
}

// LinkedinIn applies the In predicate on the "linkedin" field.
func LinkedinIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIn(FieldLinkedin, vs...))
}

// LinkedinNotIn applies the NotIn predicate on the "linkedin" field.
func LinkedinNotIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotIn(FieldLinkedin, vs...))
}

// LinkedinGT applies the GT predicate on the "linkedin" field.
func LinkedinGT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGT(FieldLinkedin, v))
}

// LinkedinGTE applies the GTE predicate on the "linkedin" field.
func LinkedinGTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGTE(FieldLinkedin, v))
}

// LinkedinLT applies the LT predicate on the "linkedin" field.
func LinkedinLT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLT(FieldLinkedin, v))
}

// LinkedinLTE applies the LTE predicate on the "linkedin" field.
func LinkedinLTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLTE(FieldLinkedin, v))
}

// LinkedinContains applies the Contains predicate on the "linkedin" field.
func LinkedinContains(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContains(FieldLinkedin, v))
}

// LinkedinHasPrefix applies the HasPrefix predicate on the "linkedin" field.
func LinkedinHasPrefix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasPrefix(FieldLinkedin, v))
}

// LinkedinHasSuffix applies the HasSuffix predicate on the "linkedin" field.
func LinkedinHasSuffix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasSuffix(FieldLinkedin, v))
}

// LinkedinIsNil applies the IsNil predicate on the "linkedin" field.
func LinkedinIsNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIsNull(FieldLinkedin))
}

// LinkedinNotNil applies the NotNil predicate on the "linkedin" field.
func LinkedinNotNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotNull(FieldLinkedin))
}

// LinkedinEqualFold applies the EqualFold predicate on the "linkedin" field.
func LinkedinEqualFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEqualFold(FieldLinkedin, v))
}

// LinkedinContainsFold applies the ContainsFold predicate on the "linkedin" field.
func LinkedinContainsFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContainsFold(FieldLinkedin, v))
}

// GithubEQ applies the EQ predicate on the "github" field.
func GithubEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldGithub, v))
}

// GithubNEQ applies the NEQ predicate on the "github" field.
func GithubNEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNEQ(FieldGithub, v))
}

// GithubIn applies the In predicate on the "github" field.
func GithubIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIn(FieldGithub, vs...))
}

// GithubNotIn applies the NotIn predicate on the "github" field.
func GithubNotIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotIn(FieldGithub, vs...))
}

// GithubGT applies the GT predicate on the "github" field.
func GithubGT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGT(FieldGithub, v))
}

// GithubGTE applies the GTE predicate on the "github" field.
func GithubGTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGTE(FieldGithub, v))
}

// GithubLT applies the LT predicate on the "github" field.
func GithubLT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLT(FieldGithub, v))
}

// GithubLTE applies the LTE predicate on the "github" field.
func GithubLTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLTE(FieldGithub, v))
}

// GithubContains applies the Contains predicate on the "github" field.
func GithubContains(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContains(FieldGithub, v))
}

// GithubHasPrefix applies the HasPrefix predicate on the "github" field.
func GithubHasPrefix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasPrefix(FieldGithub, v))
}

// GithubHasSuffix applies the HasSuffix predicate on the "github" field.
func GithubHasSuffix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasSuffix(FieldGithub, v))
}

// GithubIsNil applies the IsNil predicate on the "github" field.
func GithubIsNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIsNull(FieldGithub))
}

// GithubNotNil applies the NotNil predicate on the "github" field.
func GithubNotNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotNull(FieldGithub))
}

// GithubEqualFold applies the EqualFold predicate on the "github" field.
func GithubEqualFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEqualFold(FieldGithub, v))
}

// GithubContainsFold applies the ContainsFold predicate on the "github" field.
func GithubContainsFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContainsFold(FieldGithub, v))
}

// TwitterEQ applies the EQ predicate on the "twitter" field.
func TwitterEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldTwitter, v))
}

// TwitterNEQ applies the NEQ predicate on the "twitter" field.
func TwitterNEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNEQ(FieldTwitter, v))
}

// TwitterIn applies the In predicate on the "twitter" field.
func TwitterIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIn(FieldTwitter, vs...))
}

// TwitterNotIn applies the NotIn predicate on the "twitter" field.
func TwitterNotIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotIn(FieldTwitter, vs...))
}

// TwitterGT applies the GT predicate on the "twitter" field.
func TwitterGT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGT(FieldTwitter, v))
}

// TwitterGTE applies the GTE predicate on the "twitter" field.
func TwitterGTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGTE(FieldTwitter, v))
}

// TwitterLT applies the LT predicate on the "twitter" field.
func TwitterLT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLT(FieldTwitter, v))
}

// TwitterLTE applies the LTE predicate on the "twitter" field.
func TwitterLTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLTE(FieldTwitter, v))
}

// TwitterContains applies the Contains predicate on the "twitter" field.
func TwitterContains(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContains(FieldTwitter, v))
}

// TwitterHasPrefix applies the HasPrefix predicate on the "twitter" field.
func TwitterHasPrefix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasPrefix(FieldTwitter, v))
}

// TwitterHasSuffix applies the HasSuffix predicate on the "twitter" field.
func TwitterHasSuffix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasSuffix(FieldTwitter, v))
}

// TwitterIsNil applies the IsNil predicate on the "twitter" field.
func TwitterIsNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIsNull(FieldTwitter))
}

// TwitterNotNil applies the NotNil predicate on the "twitter" field.
func TwitterNotNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotNull(FieldTwitter))
}

// TwitterEqualFold applies the EqualFold predicate on the "twitter" field.
func TwitterEqualFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEqualFold(FieldTwitter, v))
}

// TwitterContainsFold applies the ContainsFold predicate on the "twitter" field.
func TwitterContainsFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContainsFold(FieldTwitter, v))
}

// PersonalEmailEQ applies the EQ predicate on the "personal_email" field.
func PersonalEmailEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldPersonalEmail, v))
}

// PersonalEmailNEQ applies the NEQ predicate on the "personal_email" field.
func PersonalEmailNEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNEQ(FieldPersonalEmail, v))
}

// PersonalEmailIn applies the In predicate on the "personal_email" field.
func PersonalEmailIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIn(FieldPersonalEmail, vs...))
}

// PersonalEmailNotIn applies the NotIn predicate on the "personal_email" field.
func PersonalEmailNotIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotIn(FieldPersonalEmail, vs...))
}

// PersonalEmailGT applies the GT predicate on the "personal_email" field.
func PersonalEmailGT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGT(FieldPersonalEmail, v))
}

// PersonalEmailGTE applies the GTE predicate on the "personal_email" field.
func PersonalEmailGTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGTE(FieldPersonalEmail, v))
}

// PersonalEmailLT applies the LT predicate on the "personal_email" field.
func PersonalEmailLT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLT(FieldPersonalEmail, v))
}

// PersonalEmailLTE applies the LTE predicate on the "personal_email" field.
func PersonalEmailLTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLTE(FieldPersonalEmail, v))
}

// PersonalEmailContains applies the Contains predicate on the "personal_email" field.
func PersonalEmailContains(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContains(FieldPersonalEmail, v))
}

// PersonalEmailHasPrefix applies the HasPrefix predicate on the "personal_email" field.
func PersonalEmailHasPrefix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasPrefix(FieldPersonalEmail, v))
}

// PersonalEmailHasSuffix applies the HasSuffix predicate on the "personal_email" field.
func PersonalEmailHasSuffix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasSuffix(FieldPersonalEmail, v))
}

// PersonalEmailIsNil applies the IsNil predicate on the "personal_email" field.
func PersonalEmailIsNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIsNull(FieldPersonalEmail))
}

// PersonalEmailNotNil applies the NotNil predicate on the "personal_email" field.
func PersonalEmailNotNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotNull(FieldPersonalEmail))
}

// PersonalEmailEqualFold applies the EqualFold predicate on the "personal_email" field.
func PersonalEmailEqualFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEqualFold(FieldPersonalEmail, v))
}

// PersonalEmailContainsFold applies the ContainsFold predicate on the "personal_email" field.
func PersonalEmailContainsFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContainsFold(FieldPersonalEmail, v))
}

// SummaryEQ applies the EQ predicate on the "summary" field.
func SummaryEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldSummary, v))
}

// SummaryNEQ applies the NEQ predicate on the "summary" field.
func SummaryNEQ(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNEQ(FieldSummary, v))
}

// SummaryIn applies the In predicate on the "summary" field.
func SummaryIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIn(FieldSummary, vs...))
}

// SummaryNotIn applies the NotIn predicate on the "summary" field.
func SummaryNotIn(vs ...string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotIn(FieldSummary, vs...))
}

// SummaryGT applies the GT predicate on the "summary" field.
func SummaryGT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGT(FieldSummary, v))
}

// SummaryGTE applies the GTE predicate on the "summary" field.
func SummaryGTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGTE(FieldSummary, v))
}

// SummaryLT applies the LT predicate on the "summary" field.
func SummaryLT(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLT(FieldSummary, v))
}

// SummaryLTE applies the LTE predicate on the "summary" field.
func SummaryLTE(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLTE(FieldSummary, v))
}

// SummaryContains applies the Contains predicate on the "summary" field.
func SummaryContains(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContains(FieldSummary, v))
}

// SummaryHasPrefix applies the HasPrefix predicate on the "summary" field.
func SummaryHasPrefix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasPrefix(FieldSummary, v))
}

// SummaryHasSuffix applies the HasSuffix predicate on the "summary" field.
func SummaryHasSuffix(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldHasSuffix(FieldSummary, v))
}

// SummaryIsNil applies the IsNil predicate on the "summary" field.
func SummaryIsNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIsNull(FieldSummary))
}

// SummaryNotNil applies the NotNil predicate on the "summary" field.
func SummaryNotNil() predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotNull(FieldSummary))
}

// SummaryEqualFold applies the EqualFold predicate on the "summary" field.
func SummaryEqualFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEqualFold(FieldSummary, v))
}

// SummaryContainsFold applies the ContainsFold predicate on the "summary" field.
func SummaryContainsFold(v string) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldContainsFold(FieldSummary, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.PersonalInfo {
	return predicate.PersonalInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.PersonalInfo {
	return predicate.PersonalInfo(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PersonalInfo) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PersonalInfo) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PersonalInfo) predicate.PersonalInfo {
	return predicate.PersonalInfo(sql.NotPredicates(p))
}
