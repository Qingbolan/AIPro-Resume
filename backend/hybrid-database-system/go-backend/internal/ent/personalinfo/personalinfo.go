// Code generated by ent, DO NOT EDIT.

package personalinfo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the personalinfo type in the database.
	Label = "personal_info"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldWebsite holds the string denoting the website field in the database.
	FieldWebsite = "website"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldLinkedin holds the string denoting the linkedin field in the database.
	FieldLinkedin = "linkedin"
	// FieldGithub holds the string denoting the github field in the database.
	FieldGithub = "github"
	// FieldTwitter holds the string denoting the twitter field in the database.
	FieldTwitter = "twitter"
	// FieldPersonalEmail holds the string denoting the personal_email field in the database.
	FieldPersonalEmail = "personal_email"
	// FieldSummary holds the string denoting the summary field in the database.
	FieldSummary = "summary"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the personalinfo in the database.
	Table = "personal_infos"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "personal_infos"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_personal_info"
)

// Columns holds all SQL columns for personalinfo fields.
var Columns = []string{
	FieldID,
	FieldPhone,
	FieldWebsite,
	FieldLocation,
	FieldAddress,
	FieldLinkedin,
	FieldGithub,
	FieldTwitter,
	FieldPersonalEmail,
	FieldSummary,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "personal_infos"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_personal_info",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	PhoneValidator func(string) error
	// WebsiteValidator is a validator for the "website" field. It is called by the builders before save.
	WebsiteValidator func(string) error
	// LocationValidator is a validator for the "location" field. It is called by the builders before save.
	LocationValidator func(string) error
	// AddressValidator is a validator for the "address" field. It is called by the builders before save.
	AddressValidator func(string) error
	// LinkedinValidator is a validator for the "linkedin" field. It is called by the builders before save.
	LinkedinValidator func(string) error
	// GithubValidator is a validator for the "github" field. It is called by the builders before save.
	GithubValidator func(string) error
	// TwitterValidator is a validator for the "twitter" field. It is called by the builders before save.
	TwitterValidator func(string) error
	// PersonalEmailValidator is a validator for the "personal_email" field. It is called by the builders before save.
	PersonalEmailValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the PersonalInfo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByWebsite orders the results by the website field.
func ByWebsite(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWebsite, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByLinkedin orders the results by the linkedin field.
func ByLinkedin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLinkedin, opts...).ToFunc()
}

// ByGithub orders the results by the github field.
func ByGithub(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGithub, opts...).ToFunc()
}

// ByTwitter orders the results by the twitter field.
func ByTwitter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTwitter, opts...).ToFunc()
}

// ByPersonalEmail orders the results by the personal_email field.
func ByPersonalEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPersonalEmail, opts...).ToFunc()
}

// BySummary orders the results by the summary field.
func BySummary(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSummary, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
