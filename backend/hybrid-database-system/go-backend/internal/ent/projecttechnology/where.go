// Code generated by ent, DO NOT EDIT.

package projecttechnology

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLTE(FieldID, id))
}

// TechnologyName applies equality check predicate on the "technology_name" field. It's identical to TechnologyNameEQ.
func TechnologyName(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldTechnologyName, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldCategory, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldVersion, v))
}

// ProficiencyLevel applies equality check predicate on the "proficiency_level" field. It's identical to ProficiencyLevelEQ.
func ProficiencyLevel(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldProficiencyLevel, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldDescription, v))
}

// IconURL applies equality check predicate on the "icon_url" field. It's identical to IconURLEQ.
func IconURL(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldIconURL, v))
}

// DocumentationURL applies equality check predicate on the "documentation_url" field. It's identical to DocumentationURLEQ.
func DocumentationURL(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldDocumentationURL, v))
}

// SortOrder applies equality check predicate on the "sort_order" field. It's identical to SortOrderEQ.
func SortOrder(v int) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldSortOrder, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldUpdatedAt, v))
}

// TechnologyNameEQ applies the EQ predicate on the "technology_name" field.
func TechnologyNameEQ(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldTechnologyName, v))
}

// TechnologyNameNEQ applies the NEQ predicate on the "technology_name" field.
func TechnologyNameNEQ(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNEQ(FieldTechnologyName, v))
}

// TechnologyNameIn applies the In predicate on the "technology_name" field.
func TechnologyNameIn(vs ...string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldIn(FieldTechnologyName, vs...))
}

// TechnologyNameNotIn applies the NotIn predicate on the "technology_name" field.
func TechnologyNameNotIn(vs ...string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNotIn(FieldTechnologyName, vs...))
}

// TechnologyNameGT applies the GT predicate on the "technology_name" field.
func TechnologyNameGT(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGT(FieldTechnologyName, v))
}

// TechnologyNameGTE applies the GTE predicate on the "technology_name" field.
func TechnologyNameGTE(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGTE(FieldTechnologyName, v))
}

// TechnologyNameLT applies the LT predicate on the "technology_name" field.
func TechnologyNameLT(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLT(FieldTechnologyName, v))
}

// TechnologyNameLTE applies the LTE predicate on the "technology_name" field.
func TechnologyNameLTE(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLTE(FieldTechnologyName, v))
}

// TechnologyNameContains applies the Contains predicate on the "technology_name" field.
func TechnologyNameContains(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldContains(FieldTechnologyName, v))
}

// TechnologyNameHasPrefix applies the HasPrefix predicate on the "technology_name" field.
func TechnologyNameHasPrefix(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldHasPrefix(FieldTechnologyName, v))
}

// TechnologyNameHasSuffix applies the HasSuffix predicate on the "technology_name" field.
func TechnologyNameHasSuffix(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldHasSuffix(FieldTechnologyName, v))
}

// TechnologyNameEqualFold applies the EqualFold predicate on the "technology_name" field.
func TechnologyNameEqualFold(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEqualFold(FieldTechnologyName, v))
}

// TechnologyNameContainsFold applies the ContainsFold predicate on the "technology_name" field.
func TechnologyNameContainsFold(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldContainsFold(FieldTechnologyName, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryIsNil applies the IsNil predicate on the "category" field.
func CategoryIsNil() predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldIsNull(FieldCategory))
}

// CategoryNotNil applies the NotNil predicate on the "category" field.
func CategoryNotNil() predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNotNull(FieldCategory))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldContainsFold(FieldCategory, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionIsNil applies the IsNil predicate on the "version" field.
func VersionIsNil() predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldIsNull(FieldVersion))
}

// VersionNotNil applies the NotNil predicate on the "version" field.
func VersionNotNil() predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNotNull(FieldVersion))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldContainsFold(FieldVersion, v))
}

// ProficiencyLevelEQ applies the EQ predicate on the "proficiency_level" field.
func ProficiencyLevelEQ(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldProficiencyLevel, v))
}

// ProficiencyLevelNEQ applies the NEQ predicate on the "proficiency_level" field.
func ProficiencyLevelNEQ(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNEQ(FieldProficiencyLevel, v))
}

// ProficiencyLevelIn applies the In predicate on the "proficiency_level" field.
func ProficiencyLevelIn(vs ...string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldIn(FieldProficiencyLevel, vs...))
}

// ProficiencyLevelNotIn applies the NotIn predicate on the "proficiency_level" field.
func ProficiencyLevelNotIn(vs ...string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNotIn(FieldProficiencyLevel, vs...))
}

// ProficiencyLevelGT applies the GT predicate on the "proficiency_level" field.
func ProficiencyLevelGT(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGT(FieldProficiencyLevel, v))
}

// ProficiencyLevelGTE applies the GTE predicate on the "proficiency_level" field.
func ProficiencyLevelGTE(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGTE(FieldProficiencyLevel, v))
}

// ProficiencyLevelLT applies the LT predicate on the "proficiency_level" field.
func ProficiencyLevelLT(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLT(FieldProficiencyLevel, v))
}

// ProficiencyLevelLTE applies the LTE predicate on the "proficiency_level" field.
func ProficiencyLevelLTE(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLTE(FieldProficiencyLevel, v))
}

// ProficiencyLevelContains applies the Contains predicate on the "proficiency_level" field.
func ProficiencyLevelContains(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldContains(FieldProficiencyLevel, v))
}

// ProficiencyLevelHasPrefix applies the HasPrefix predicate on the "proficiency_level" field.
func ProficiencyLevelHasPrefix(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldHasPrefix(FieldProficiencyLevel, v))
}

// ProficiencyLevelHasSuffix applies the HasSuffix predicate on the "proficiency_level" field.
func ProficiencyLevelHasSuffix(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldHasSuffix(FieldProficiencyLevel, v))
}

// ProficiencyLevelIsNil applies the IsNil predicate on the "proficiency_level" field.
func ProficiencyLevelIsNil() predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldIsNull(FieldProficiencyLevel))
}

// ProficiencyLevelNotNil applies the NotNil predicate on the "proficiency_level" field.
func ProficiencyLevelNotNil() predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNotNull(FieldProficiencyLevel))
}

// ProficiencyLevelEqualFold applies the EqualFold predicate on the "proficiency_level" field.
func ProficiencyLevelEqualFold(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEqualFold(FieldProficiencyLevel, v))
}

// ProficiencyLevelContainsFold applies the ContainsFold predicate on the "proficiency_level" field.
func ProficiencyLevelContainsFold(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldContainsFold(FieldProficiencyLevel, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldContainsFold(FieldDescription, v))
}

// IconURLEQ applies the EQ predicate on the "icon_url" field.
func IconURLEQ(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldIconURL, v))
}

// IconURLNEQ applies the NEQ predicate on the "icon_url" field.
func IconURLNEQ(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNEQ(FieldIconURL, v))
}

// IconURLIn applies the In predicate on the "icon_url" field.
func IconURLIn(vs ...string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldIn(FieldIconURL, vs...))
}

// IconURLNotIn applies the NotIn predicate on the "icon_url" field.
func IconURLNotIn(vs ...string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNotIn(FieldIconURL, vs...))
}

// IconURLGT applies the GT predicate on the "icon_url" field.
func IconURLGT(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGT(FieldIconURL, v))
}

// IconURLGTE applies the GTE predicate on the "icon_url" field.
func IconURLGTE(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGTE(FieldIconURL, v))
}

// IconURLLT applies the LT predicate on the "icon_url" field.
func IconURLLT(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLT(FieldIconURL, v))
}

// IconURLLTE applies the LTE predicate on the "icon_url" field.
func IconURLLTE(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLTE(FieldIconURL, v))
}

// IconURLContains applies the Contains predicate on the "icon_url" field.
func IconURLContains(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldContains(FieldIconURL, v))
}

// IconURLHasPrefix applies the HasPrefix predicate on the "icon_url" field.
func IconURLHasPrefix(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldHasPrefix(FieldIconURL, v))
}

// IconURLHasSuffix applies the HasSuffix predicate on the "icon_url" field.
func IconURLHasSuffix(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldHasSuffix(FieldIconURL, v))
}

// IconURLIsNil applies the IsNil predicate on the "icon_url" field.
func IconURLIsNil() predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldIsNull(FieldIconURL))
}

// IconURLNotNil applies the NotNil predicate on the "icon_url" field.
func IconURLNotNil() predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNotNull(FieldIconURL))
}

// IconURLEqualFold applies the EqualFold predicate on the "icon_url" field.
func IconURLEqualFold(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEqualFold(FieldIconURL, v))
}

// IconURLContainsFold applies the ContainsFold predicate on the "icon_url" field.
func IconURLContainsFold(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldContainsFold(FieldIconURL, v))
}

// DocumentationURLEQ applies the EQ predicate on the "documentation_url" field.
func DocumentationURLEQ(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldDocumentationURL, v))
}

// DocumentationURLNEQ applies the NEQ predicate on the "documentation_url" field.
func DocumentationURLNEQ(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNEQ(FieldDocumentationURL, v))
}

// DocumentationURLIn applies the In predicate on the "documentation_url" field.
func DocumentationURLIn(vs ...string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldIn(FieldDocumentationURL, vs...))
}

// DocumentationURLNotIn applies the NotIn predicate on the "documentation_url" field.
func DocumentationURLNotIn(vs ...string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNotIn(FieldDocumentationURL, vs...))
}

// DocumentationURLGT applies the GT predicate on the "documentation_url" field.
func DocumentationURLGT(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGT(FieldDocumentationURL, v))
}

// DocumentationURLGTE applies the GTE predicate on the "documentation_url" field.
func DocumentationURLGTE(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGTE(FieldDocumentationURL, v))
}

// DocumentationURLLT applies the LT predicate on the "documentation_url" field.
func DocumentationURLLT(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLT(FieldDocumentationURL, v))
}

// DocumentationURLLTE applies the LTE predicate on the "documentation_url" field.
func DocumentationURLLTE(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLTE(FieldDocumentationURL, v))
}

// DocumentationURLContains applies the Contains predicate on the "documentation_url" field.
func DocumentationURLContains(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldContains(FieldDocumentationURL, v))
}

// DocumentationURLHasPrefix applies the HasPrefix predicate on the "documentation_url" field.
func DocumentationURLHasPrefix(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldHasPrefix(FieldDocumentationURL, v))
}

// DocumentationURLHasSuffix applies the HasSuffix predicate on the "documentation_url" field.
func DocumentationURLHasSuffix(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldHasSuffix(FieldDocumentationURL, v))
}

// DocumentationURLIsNil applies the IsNil predicate on the "documentation_url" field.
func DocumentationURLIsNil() predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldIsNull(FieldDocumentationURL))
}

// DocumentationURLNotNil applies the NotNil predicate on the "documentation_url" field.
func DocumentationURLNotNil() predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNotNull(FieldDocumentationURL))
}

// DocumentationURLEqualFold applies the EqualFold predicate on the "documentation_url" field.
func DocumentationURLEqualFold(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEqualFold(FieldDocumentationURL, v))
}

// DocumentationURLContainsFold applies the ContainsFold predicate on the "documentation_url" field.
func DocumentationURLContainsFold(v string) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldContainsFold(FieldDocumentationURL, v))
}

// SortOrderEQ applies the EQ predicate on the "sort_order" field.
func SortOrderEQ(v int) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldSortOrder, v))
}

// SortOrderNEQ applies the NEQ predicate on the "sort_order" field.
func SortOrderNEQ(v int) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNEQ(FieldSortOrder, v))
}

// SortOrderIn applies the In predicate on the "sort_order" field.
func SortOrderIn(vs ...int) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldIn(FieldSortOrder, vs...))
}

// SortOrderNotIn applies the NotIn predicate on the "sort_order" field.
func SortOrderNotIn(vs ...int) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNotIn(FieldSortOrder, vs...))
}

// SortOrderGT applies the GT predicate on the "sort_order" field.
func SortOrderGT(v int) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGT(FieldSortOrder, v))
}

// SortOrderGTE applies the GTE predicate on the "sort_order" field.
func SortOrderGTE(v int) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGTE(FieldSortOrder, v))
}

// SortOrderLT applies the LT predicate on the "sort_order" field.
func SortOrderLT(v int) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLT(FieldSortOrder, v))
}

// SortOrderLTE applies the LTE predicate on the "sort_order" field.
func SortOrderLTE(v int) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLTE(FieldSortOrder, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.ProjectTechnology {
	return predicate.ProjectTechnology(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProjectTechnology) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProjectTechnology) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProjectTechnology) predicate.ProjectTechnology {
	return predicate.ProjectTechnology(sql.NotPredicates(p))
}
