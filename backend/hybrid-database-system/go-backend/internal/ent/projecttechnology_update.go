// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/projecttechnology"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProjectTechnologyUpdate is the builder for updating ProjectTechnology entities.
type ProjectTechnologyUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectTechnologyMutation
}

// Where appends a list predicates to the ProjectTechnologyUpdate builder.
func (ptu *ProjectTechnologyUpdate) Where(ps ...predicate.ProjectTechnology) *ProjectTechnologyUpdate {
	ptu.mutation.Where(ps...)
	return ptu
}

// SetProjectID sets the "project_id" field.
func (ptu *ProjectTechnologyUpdate) SetProjectID(u uuid.UUID) *ProjectTechnologyUpdate {
	ptu.mutation.SetProjectID(u)
	return ptu
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (ptu *ProjectTechnologyUpdate) SetNillableProjectID(u *uuid.UUID) *ProjectTechnologyUpdate {
	if u != nil {
		ptu.SetProjectID(*u)
	}
	return ptu
}

// SetTechnologyName sets the "technology_name" field.
func (ptu *ProjectTechnologyUpdate) SetTechnologyName(s string) *ProjectTechnologyUpdate {
	ptu.mutation.SetTechnologyName(s)
	return ptu
}

// SetNillableTechnologyName sets the "technology_name" field if the given value is not nil.
func (ptu *ProjectTechnologyUpdate) SetNillableTechnologyName(s *string) *ProjectTechnologyUpdate {
	if s != nil {
		ptu.SetTechnologyName(*s)
	}
	return ptu
}

// SetCategory sets the "category" field.
func (ptu *ProjectTechnologyUpdate) SetCategory(s string) *ProjectTechnologyUpdate {
	ptu.mutation.SetCategory(s)
	return ptu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (ptu *ProjectTechnologyUpdate) SetNillableCategory(s *string) *ProjectTechnologyUpdate {
	if s != nil {
		ptu.SetCategory(*s)
	}
	return ptu
}

// ClearCategory clears the value of the "category" field.
func (ptu *ProjectTechnologyUpdate) ClearCategory() *ProjectTechnologyUpdate {
	ptu.mutation.ClearCategory()
	return ptu
}

// SetVersion sets the "version" field.
func (ptu *ProjectTechnologyUpdate) SetVersion(s string) *ProjectTechnologyUpdate {
	ptu.mutation.SetVersion(s)
	return ptu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ptu *ProjectTechnologyUpdate) SetNillableVersion(s *string) *ProjectTechnologyUpdate {
	if s != nil {
		ptu.SetVersion(*s)
	}
	return ptu
}

// ClearVersion clears the value of the "version" field.
func (ptu *ProjectTechnologyUpdate) ClearVersion() *ProjectTechnologyUpdate {
	ptu.mutation.ClearVersion()
	return ptu
}

// SetProficiencyLevel sets the "proficiency_level" field.
func (ptu *ProjectTechnologyUpdate) SetProficiencyLevel(s string) *ProjectTechnologyUpdate {
	ptu.mutation.SetProficiencyLevel(s)
	return ptu
}

// SetNillableProficiencyLevel sets the "proficiency_level" field if the given value is not nil.
func (ptu *ProjectTechnologyUpdate) SetNillableProficiencyLevel(s *string) *ProjectTechnologyUpdate {
	if s != nil {
		ptu.SetProficiencyLevel(*s)
	}
	return ptu
}

// ClearProficiencyLevel clears the value of the "proficiency_level" field.
func (ptu *ProjectTechnologyUpdate) ClearProficiencyLevel() *ProjectTechnologyUpdate {
	ptu.mutation.ClearProficiencyLevel()
	return ptu
}

// SetDescription sets the "description" field.
func (ptu *ProjectTechnologyUpdate) SetDescription(s string) *ProjectTechnologyUpdate {
	ptu.mutation.SetDescription(s)
	return ptu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptu *ProjectTechnologyUpdate) SetNillableDescription(s *string) *ProjectTechnologyUpdate {
	if s != nil {
		ptu.SetDescription(*s)
	}
	return ptu
}

// ClearDescription clears the value of the "description" field.
func (ptu *ProjectTechnologyUpdate) ClearDescription() *ProjectTechnologyUpdate {
	ptu.mutation.ClearDescription()
	return ptu
}

// SetIconURL sets the "icon_url" field.
func (ptu *ProjectTechnologyUpdate) SetIconURL(s string) *ProjectTechnologyUpdate {
	ptu.mutation.SetIconURL(s)
	return ptu
}

// SetNillableIconURL sets the "icon_url" field if the given value is not nil.
func (ptu *ProjectTechnologyUpdate) SetNillableIconURL(s *string) *ProjectTechnologyUpdate {
	if s != nil {
		ptu.SetIconURL(*s)
	}
	return ptu
}

// ClearIconURL clears the value of the "icon_url" field.
func (ptu *ProjectTechnologyUpdate) ClearIconURL() *ProjectTechnologyUpdate {
	ptu.mutation.ClearIconURL()
	return ptu
}

// SetDocumentationURL sets the "documentation_url" field.
func (ptu *ProjectTechnologyUpdate) SetDocumentationURL(s string) *ProjectTechnologyUpdate {
	ptu.mutation.SetDocumentationURL(s)
	return ptu
}

// SetNillableDocumentationURL sets the "documentation_url" field if the given value is not nil.
func (ptu *ProjectTechnologyUpdate) SetNillableDocumentationURL(s *string) *ProjectTechnologyUpdate {
	if s != nil {
		ptu.SetDocumentationURL(*s)
	}
	return ptu
}

// ClearDocumentationURL clears the value of the "documentation_url" field.
func (ptu *ProjectTechnologyUpdate) ClearDocumentationURL() *ProjectTechnologyUpdate {
	ptu.mutation.ClearDocumentationURL()
	return ptu
}

// SetSortOrder sets the "sort_order" field.
func (ptu *ProjectTechnologyUpdate) SetSortOrder(i int) *ProjectTechnologyUpdate {
	ptu.mutation.ResetSortOrder()
	ptu.mutation.SetSortOrder(i)
	return ptu
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (ptu *ProjectTechnologyUpdate) SetNillableSortOrder(i *int) *ProjectTechnologyUpdate {
	if i != nil {
		ptu.SetSortOrder(*i)
	}
	return ptu
}

// AddSortOrder adds i to the "sort_order" field.
func (ptu *ProjectTechnologyUpdate) AddSortOrder(i int) *ProjectTechnologyUpdate {
	ptu.mutation.AddSortOrder(i)
	return ptu
}

// SetCreatedAt sets the "created_at" field.
func (ptu *ProjectTechnologyUpdate) SetCreatedAt(t time.Time) *ProjectTechnologyUpdate {
	ptu.mutation.SetCreatedAt(t)
	return ptu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptu *ProjectTechnologyUpdate) SetNillableCreatedAt(t *time.Time) *ProjectTechnologyUpdate {
	if t != nil {
		ptu.SetCreatedAt(*t)
	}
	return ptu
}

// SetUpdatedAt sets the "updated_at" field.
func (ptu *ProjectTechnologyUpdate) SetUpdatedAt(t time.Time) *ProjectTechnologyUpdate {
	ptu.mutation.SetUpdatedAt(t)
	return ptu
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (ptu *ProjectTechnologyUpdate) SetProjectID(id uuid.UUID) *ProjectTechnologyUpdate {
	ptu.mutation.SetProjectID(id)
	return ptu
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (ptu *ProjectTechnologyUpdate) SetNillableProjectID(id *uuid.UUID) *ProjectTechnologyUpdate {
	if id != nil {
		ptu = ptu.SetProjectID(*id)
	}
	return ptu
}

// SetProject sets the "project" edge to the Project entity.
func (ptu *ProjectTechnologyUpdate) SetProject(p *Project) *ProjectTechnologyUpdate {
	return ptu.SetProjectID(p.ID)
}

// Mutation returns the ProjectTechnologyMutation object of the builder.
func (ptu *ProjectTechnologyUpdate) Mutation() *ProjectTechnologyMutation {
	return ptu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (ptu *ProjectTechnologyUpdate) ClearProject() *ProjectTechnologyUpdate {
	ptu.mutation.ClearProject()
	return ptu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptu *ProjectTechnologyUpdate) Save(ctx context.Context) (int, error) {
	ptu.defaults()
	return withHooks(ctx, ptu.sqlSave, ptu.mutation, ptu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *ProjectTechnologyUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *ProjectTechnologyUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *ProjectTechnologyUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptu *ProjectTechnologyUpdate) defaults() {
	if _, ok := ptu.mutation.UpdatedAt(); !ok {
		v := projecttechnology.UpdateDefaultUpdatedAt()
		ptu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptu *ProjectTechnologyUpdate) check() error {
	if v, ok := ptu.mutation.TechnologyName(); ok {
		if err := projecttechnology.TechnologyNameValidator(v); err != nil {
			return &ValidationError{Name: "technology_name", err: fmt.Errorf(`ent: validator failed for field "ProjectTechnology.technology_name": %w`, err)}
		}
	}
	if v, ok := ptu.mutation.Category(); ok {
		if err := projecttechnology.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "ProjectTechnology.category": %w`, err)}
		}
	}
	if v, ok := ptu.mutation.Version(); ok {
		if err := projecttechnology.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "ProjectTechnology.version": %w`, err)}
		}
	}
	if v, ok := ptu.mutation.ProficiencyLevel(); ok {
		if err := projecttechnology.ProficiencyLevelValidator(v); err != nil {
			return &ValidationError{Name: "proficiency_level", err: fmt.Errorf(`ent: validator failed for field "ProjectTechnology.proficiency_level": %w`, err)}
		}
	}
	if v, ok := ptu.mutation.IconURL(); ok {
		if err := projecttechnology.IconURLValidator(v); err != nil {
			return &ValidationError{Name: "icon_url", err: fmt.Errorf(`ent: validator failed for field "ProjectTechnology.icon_url": %w`, err)}
		}
	}
	if v, ok := ptu.mutation.DocumentationURL(); ok {
		if err := projecttechnology.DocumentationURLValidator(v); err != nil {
			return &ValidationError{Name: "documentation_url", err: fmt.Errorf(`ent: validator failed for field "ProjectTechnology.documentation_url": %w`, err)}
		}
	}
	return nil
}

func (ptu *ProjectTechnologyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ptu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(projecttechnology.Table, projecttechnology.Columns, sqlgraph.NewFieldSpec(projecttechnology.FieldID, field.TypeUUID))
	if ps := ptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptu.mutation.ProjectID(); ok {
		_spec.SetField(projecttechnology.FieldProjectID, field.TypeUUID, value)
	}
	if value, ok := ptu.mutation.TechnologyName(); ok {
		_spec.SetField(projecttechnology.FieldTechnologyName, field.TypeString, value)
	}
	if value, ok := ptu.mutation.Category(); ok {
		_spec.SetField(projecttechnology.FieldCategory, field.TypeString, value)
	}
	if ptu.mutation.CategoryCleared() {
		_spec.ClearField(projecttechnology.FieldCategory, field.TypeString)
	}
	if value, ok := ptu.mutation.Version(); ok {
		_spec.SetField(projecttechnology.FieldVersion, field.TypeString, value)
	}
	if ptu.mutation.VersionCleared() {
		_spec.ClearField(projecttechnology.FieldVersion, field.TypeString)
	}
	if value, ok := ptu.mutation.ProficiencyLevel(); ok {
		_spec.SetField(projecttechnology.FieldProficiencyLevel, field.TypeString, value)
	}
	if ptu.mutation.ProficiencyLevelCleared() {
		_spec.ClearField(projecttechnology.FieldProficiencyLevel, field.TypeString)
	}
	if value, ok := ptu.mutation.Description(); ok {
		_spec.SetField(projecttechnology.FieldDescription, field.TypeString, value)
	}
	if ptu.mutation.DescriptionCleared() {
		_spec.ClearField(projecttechnology.FieldDescription, field.TypeString)
	}
	if value, ok := ptu.mutation.IconURL(); ok {
		_spec.SetField(projecttechnology.FieldIconURL, field.TypeString, value)
	}
	if ptu.mutation.IconURLCleared() {
		_spec.ClearField(projecttechnology.FieldIconURL, field.TypeString)
	}
	if value, ok := ptu.mutation.DocumentationURL(); ok {
		_spec.SetField(projecttechnology.FieldDocumentationURL, field.TypeString, value)
	}
	if ptu.mutation.DocumentationURLCleared() {
		_spec.ClearField(projecttechnology.FieldDocumentationURL, field.TypeString)
	}
	if value, ok := ptu.mutation.SortOrder(); ok {
		_spec.SetField(projecttechnology.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := ptu.mutation.AddedSortOrder(); ok {
		_spec.AddField(projecttechnology.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := ptu.mutation.CreatedAt(); ok {
		_spec.SetField(projecttechnology.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ptu.mutation.UpdatedAt(); ok {
		_spec.SetField(projecttechnology.FieldUpdatedAt, field.TypeTime, value)
	}
	if ptu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projecttechnology.ProjectTable,
			Columns: []string{projecttechnology.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projecttechnology.ProjectTable,
			Columns: []string{projecttechnology.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projecttechnology.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ptu.mutation.done = true
	return n, nil
}

// ProjectTechnologyUpdateOne is the builder for updating a single ProjectTechnology entity.
type ProjectTechnologyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectTechnologyMutation
}

// SetProjectID sets the "project_id" field.
func (ptuo *ProjectTechnologyUpdateOne) SetProjectID(u uuid.UUID) *ProjectTechnologyUpdateOne {
	ptuo.mutation.SetProjectID(u)
	return ptuo
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (ptuo *ProjectTechnologyUpdateOne) SetNillableProjectID(u *uuid.UUID) *ProjectTechnologyUpdateOne {
	if u != nil {
		ptuo.SetProjectID(*u)
	}
	return ptuo
}

// SetTechnologyName sets the "technology_name" field.
func (ptuo *ProjectTechnologyUpdateOne) SetTechnologyName(s string) *ProjectTechnologyUpdateOne {
	ptuo.mutation.SetTechnologyName(s)
	return ptuo
}

// SetNillableTechnologyName sets the "technology_name" field if the given value is not nil.
func (ptuo *ProjectTechnologyUpdateOne) SetNillableTechnologyName(s *string) *ProjectTechnologyUpdateOne {
	if s != nil {
		ptuo.SetTechnologyName(*s)
	}
	return ptuo
}

// SetCategory sets the "category" field.
func (ptuo *ProjectTechnologyUpdateOne) SetCategory(s string) *ProjectTechnologyUpdateOne {
	ptuo.mutation.SetCategory(s)
	return ptuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (ptuo *ProjectTechnologyUpdateOne) SetNillableCategory(s *string) *ProjectTechnologyUpdateOne {
	if s != nil {
		ptuo.SetCategory(*s)
	}
	return ptuo
}

// ClearCategory clears the value of the "category" field.
func (ptuo *ProjectTechnologyUpdateOne) ClearCategory() *ProjectTechnologyUpdateOne {
	ptuo.mutation.ClearCategory()
	return ptuo
}

// SetVersion sets the "version" field.
func (ptuo *ProjectTechnologyUpdateOne) SetVersion(s string) *ProjectTechnologyUpdateOne {
	ptuo.mutation.SetVersion(s)
	return ptuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ptuo *ProjectTechnologyUpdateOne) SetNillableVersion(s *string) *ProjectTechnologyUpdateOne {
	if s != nil {
		ptuo.SetVersion(*s)
	}
	return ptuo
}

// ClearVersion clears the value of the "version" field.
func (ptuo *ProjectTechnologyUpdateOne) ClearVersion() *ProjectTechnologyUpdateOne {
	ptuo.mutation.ClearVersion()
	return ptuo
}

// SetProficiencyLevel sets the "proficiency_level" field.
func (ptuo *ProjectTechnologyUpdateOne) SetProficiencyLevel(s string) *ProjectTechnologyUpdateOne {
	ptuo.mutation.SetProficiencyLevel(s)
	return ptuo
}

// SetNillableProficiencyLevel sets the "proficiency_level" field if the given value is not nil.
func (ptuo *ProjectTechnologyUpdateOne) SetNillableProficiencyLevel(s *string) *ProjectTechnologyUpdateOne {
	if s != nil {
		ptuo.SetProficiencyLevel(*s)
	}
	return ptuo
}

// ClearProficiencyLevel clears the value of the "proficiency_level" field.
func (ptuo *ProjectTechnologyUpdateOne) ClearProficiencyLevel() *ProjectTechnologyUpdateOne {
	ptuo.mutation.ClearProficiencyLevel()
	return ptuo
}

// SetDescription sets the "description" field.
func (ptuo *ProjectTechnologyUpdateOne) SetDescription(s string) *ProjectTechnologyUpdateOne {
	ptuo.mutation.SetDescription(s)
	return ptuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptuo *ProjectTechnologyUpdateOne) SetNillableDescription(s *string) *ProjectTechnologyUpdateOne {
	if s != nil {
		ptuo.SetDescription(*s)
	}
	return ptuo
}

// ClearDescription clears the value of the "description" field.
func (ptuo *ProjectTechnologyUpdateOne) ClearDescription() *ProjectTechnologyUpdateOne {
	ptuo.mutation.ClearDescription()
	return ptuo
}

// SetIconURL sets the "icon_url" field.
func (ptuo *ProjectTechnologyUpdateOne) SetIconURL(s string) *ProjectTechnologyUpdateOne {
	ptuo.mutation.SetIconURL(s)
	return ptuo
}

// SetNillableIconURL sets the "icon_url" field if the given value is not nil.
func (ptuo *ProjectTechnologyUpdateOne) SetNillableIconURL(s *string) *ProjectTechnologyUpdateOne {
	if s != nil {
		ptuo.SetIconURL(*s)
	}
	return ptuo
}

// ClearIconURL clears the value of the "icon_url" field.
func (ptuo *ProjectTechnologyUpdateOne) ClearIconURL() *ProjectTechnologyUpdateOne {
	ptuo.mutation.ClearIconURL()
	return ptuo
}

// SetDocumentationURL sets the "documentation_url" field.
func (ptuo *ProjectTechnologyUpdateOne) SetDocumentationURL(s string) *ProjectTechnologyUpdateOne {
	ptuo.mutation.SetDocumentationURL(s)
	return ptuo
}

// SetNillableDocumentationURL sets the "documentation_url" field if the given value is not nil.
func (ptuo *ProjectTechnologyUpdateOne) SetNillableDocumentationURL(s *string) *ProjectTechnologyUpdateOne {
	if s != nil {
		ptuo.SetDocumentationURL(*s)
	}
	return ptuo
}

// ClearDocumentationURL clears the value of the "documentation_url" field.
func (ptuo *ProjectTechnologyUpdateOne) ClearDocumentationURL() *ProjectTechnologyUpdateOne {
	ptuo.mutation.ClearDocumentationURL()
	return ptuo
}

// SetSortOrder sets the "sort_order" field.
func (ptuo *ProjectTechnologyUpdateOne) SetSortOrder(i int) *ProjectTechnologyUpdateOne {
	ptuo.mutation.ResetSortOrder()
	ptuo.mutation.SetSortOrder(i)
	return ptuo
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (ptuo *ProjectTechnologyUpdateOne) SetNillableSortOrder(i *int) *ProjectTechnologyUpdateOne {
	if i != nil {
		ptuo.SetSortOrder(*i)
	}
	return ptuo
}

// AddSortOrder adds i to the "sort_order" field.
func (ptuo *ProjectTechnologyUpdateOne) AddSortOrder(i int) *ProjectTechnologyUpdateOne {
	ptuo.mutation.AddSortOrder(i)
	return ptuo
}

// SetCreatedAt sets the "created_at" field.
func (ptuo *ProjectTechnologyUpdateOne) SetCreatedAt(t time.Time) *ProjectTechnologyUpdateOne {
	ptuo.mutation.SetCreatedAt(t)
	return ptuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptuo *ProjectTechnologyUpdateOne) SetNillableCreatedAt(t *time.Time) *ProjectTechnologyUpdateOne {
	if t != nil {
		ptuo.SetCreatedAt(*t)
	}
	return ptuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ptuo *ProjectTechnologyUpdateOne) SetUpdatedAt(t time.Time) *ProjectTechnologyUpdateOne {
	ptuo.mutation.SetUpdatedAt(t)
	return ptuo
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (ptuo *ProjectTechnologyUpdateOne) SetProjectID(id uuid.UUID) *ProjectTechnologyUpdateOne {
	ptuo.mutation.SetProjectID(id)
	return ptuo
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (ptuo *ProjectTechnologyUpdateOne) SetNillableProjectID(id *uuid.UUID) *ProjectTechnologyUpdateOne {
	if id != nil {
		ptuo = ptuo.SetProjectID(*id)
	}
	return ptuo
}

// SetProject sets the "project" edge to the Project entity.
func (ptuo *ProjectTechnologyUpdateOne) SetProject(p *Project) *ProjectTechnologyUpdateOne {
	return ptuo.SetProjectID(p.ID)
}

// Mutation returns the ProjectTechnologyMutation object of the builder.
func (ptuo *ProjectTechnologyUpdateOne) Mutation() *ProjectTechnologyMutation {
	return ptuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (ptuo *ProjectTechnologyUpdateOne) ClearProject() *ProjectTechnologyUpdateOne {
	ptuo.mutation.ClearProject()
	return ptuo
}

// Where appends a list predicates to the ProjectTechnologyUpdate builder.
func (ptuo *ProjectTechnologyUpdateOne) Where(ps ...predicate.ProjectTechnology) *ProjectTechnologyUpdateOne {
	ptuo.mutation.Where(ps...)
	return ptuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptuo *ProjectTechnologyUpdateOne) Select(field string, fields ...string) *ProjectTechnologyUpdateOne {
	ptuo.fields = append([]string{field}, fields...)
	return ptuo
}

// Save executes the query and returns the updated ProjectTechnology entity.
func (ptuo *ProjectTechnologyUpdateOne) Save(ctx context.Context) (*ProjectTechnology, error) {
	ptuo.defaults()
	return withHooks(ctx, ptuo.sqlSave, ptuo.mutation, ptuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *ProjectTechnologyUpdateOne) SaveX(ctx context.Context) *ProjectTechnology {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *ProjectTechnologyUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *ProjectTechnologyUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptuo *ProjectTechnologyUpdateOne) defaults() {
	if _, ok := ptuo.mutation.UpdatedAt(); !ok {
		v := projecttechnology.UpdateDefaultUpdatedAt()
		ptuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptuo *ProjectTechnologyUpdateOne) check() error {
	if v, ok := ptuo.mutation.TechnologyName(); ok {
		if err := projecttechnology.TechnologyNameValidator(v); err != nil {
			return &ValidationError{Name: "technology_name", err: fmt.Errorf(`ent: validator failed for field "ProjectTechnology.technology_name": %w`, err)}
		}
	}
	if v, ok := ptuo.mutation.Category(); ok {
		if err := projecttechnology.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "ProjectTechnology.category": %w`, err)}
		}
	}
	if v, ok := ptuo.mutation.Version(); ok {
		if err := projecttechnology.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "ProjectTechnology.version": %w`, err)}
		}
	}
	if v, ok := ptuo.mutation.ProficiencyLevel(); ok {
		if err := projecttechnology.ProficiencyLevelValidator(v); err != nil {
			return &ValidationError{Name: "proficiency_level", err: fmt.Errorf(`ent: validator failed for field "ProjectTechnology.proficiency_level": %w`, err)}
		}
	}
	if v, ok := ptuo.mutation.IconURL(); ok {
		if err := projecttechnology.IconURLValidator(v); err != nil {
			return &ValidationError{Name: "icon_url", err: fmt.Errorf(`ent: validator failed for field "ProjectTechnology.icon_url": %w`, err)}
		}
	}
	if v, ok := ptuo.mutation.DocumentationURL(); ok {
		if err := projecttechnology.DocumentationURLValidator(v); err != nil {
			return &ValidationError{Name: "documentation_url", err: fmt.Errorf(`ent: validator failed for field "ProjectTechnology.documentation_url": %w`, err)}
		}
	}
	return nil
}

func (ptuo *ProjectTechnologyUpdateOne) sqlSave(ctx context.Context) (_node *ProjectTechnology, err error) {
	if err := ptuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(projecttechnology.Table, projecttechnology.Columns, sqlgraph.NewFieldSpec(projecttechnology.FieldID, field.TypeUUID))
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProjectTechnology.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projecttechnology.FieldID)
		for _, f := range fields {
			if !projecttechnology.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != projecttechnology.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptuo.mutation.ProjectID(); ok {
		_spec.SetField(projecttechnology.FieldProjectID, field.TypeUUID, value)
	}
	if value, ok := ptuo.mutation.TechnologyName(); ok {
		_spec.SetField(projecttechnology.FieldTechnologyName, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.Category(); ok {
		_spec.SetField(projecttechnology.FieldCategory, field.TypeString, value)
	}
	if ptuo.mutation.CategoryCleared() {
		_spec.ClearField(projecttechnology.FieldCategory, field.TypeString)
	}
	if value, ok := ptuo.mutation.Version(); ok {
		_spec.SetField(projecttechnology.FieldVersion, field.TypeString, value)
	}
	if ptuo.mutation.VersionCleared() {
		_spec.ClearField(projecttechnology.FieldVersion, field.TypeString)
	}
	if value, ok := ptuo.mutation.ProficiencyLevel(); ok {
		_spec.SetField(projecttechnology.FieldProficiencyLevel, field.TypeString, value)
	}
	if ptuo.mutation.ProficiencyLevelCleared() {
		_spec.ClearField(projecttechnology.FieldProficiencyLevel, field.TypeString)
	}
	if value, ok := ptuo.mutation.Description(); ok {
		_spec.SetField(projecttechnology.FieldDescription, field.TypeString, value)
	}
	if ptuo.mutation.DescriptionCleared() {
		_spec.ClearField(projecttechnology.FieldDescription, field.TypeString)
	}
	if value, ok := ptuo.mutation.IconURL(); ok {
		_spec.SetField(projecttechnology.FieldIconURL, field.TypeString, value)
	}
	if ptuo.mutation.IconURLCleared() {
		_spec.ClearField(projecttechnology.FieldIconURL, field.TypeString)
	}
	if value, ok := ptuo.mutation.DocumentationURL(); ok {
		_spec.SetField(projecttechnology.FieldDocumentationURL, field.TypeString, value)
	}
	if ptuo.mutation.DocumentationURLCleared() {
		_spec.ClearField(projecttechnology.FieldDocumentationURL, field.TypeString)
	}
	if value, ok := ptuo.mutation.SortOrder(); ok {
		_spec.SetField(projecttechnology.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := ptuo.mutation.AddedSortOrder(); ok {
		_spec.AddField(projecttechnology.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := ptuo.mutation.CreatedAt(); ok {
		_spec.SetField(projecttechnology.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ptuo.mutation.UpdatedAt(); ok {
		_spec.SetField(projecttechnology.FieldUpdatedAt, field.TypeTime, value)
	}
	if ptuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projecttechnology.ProjectTable,
			Columns: []string{projecttechnology.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projecttechnology.ProjectTable,
			Columns: []string{projecttechnology.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProjectTechnology{config: ptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projecttechnology.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ptuo.mutation.done = true
	return _node, nil
}
