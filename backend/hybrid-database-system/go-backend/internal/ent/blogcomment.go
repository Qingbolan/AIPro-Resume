// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/blogcomment"
	"silan-backend/internal/ent/blogpost"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// BlogComment is the model entity for the BlogComment schema.
type BlogComment struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// BlogPostID holds the value of the "blog_post_id" field.
	BlogPostID uuid.UUID `json:"blog_post_id,omitempty"`
	// ParentID holds the value of the "parent_id" field.
	ParentID uuid.UUID `json:"parent_id,omitempty"`
	// AuthorName holds the value of the "author_name" field.
	AuthorName string `json:"author_name,omitempty"`
	// AuthorEmail holds the value of the "author_email" field.
	AuthorEmail string `json:"author_email,omitempty"`
	// AuthorWebsite holds the value of the "author_website" field.
	AuthorWebsite string `json:"author_website,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// IsApproved holds the value of the "is_approved" field.
	IsApproved bool `json:"is_approved,omitempty"`
	// IsSpam holds the value of the "is_spam" field.
	IsSpam bool `json:"is_spam,omitempty"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress string `json:"ip_address,omitempty"`
	// UserAgent holds the value of the "user_agent" field.
	UserAgent string `json:"user_agent,omitempty"`
	// LikeCount holds the value of the "like_count" field.
	LikeCount int `json:"like_count,omitempty"`
	// DislikeCount holds the value of the "dislike_count" field.
	DislikeCount int `json:"dislike_count,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BlogCommentQuery when eager-loading is set.
	Edges              BlogCommentEdges `json:"edges"`
	blog_post_comments *uuid.UUID
	selectValues       sql.SelectValues
}

// BlogCommentEdges holds the relations/edges for other nodes in the graph.
type BlogCommentEdges struct {
	// Post holds the value of the post edge.
	Post *BlogPost `json:"post,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *BlogComment `json:"parent,omitempty"`
	// Replies holds the value of the replies edge.
	Replies []*BlogComment `json:"replies,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// PostOrErr returns the Post value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlogCommentEdges) PostOrErr() (*BlogPost, error) {
	if e.Post != nil {
		return e.Post, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: blogpost.Label}
	}
	return nil, &NotLoadedError{edge: "post"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlogCommentEdges) ParentOrErr() (*BlogComment, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: blogcomment.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// RepliesOrErr returns the Replies value or an error if the edge
// was not loaded in eager-loading.
func (e BlogCommentEdges) RepliesOrErr() ([]*BlogComment, error) {
	if e.loadedTypes[2] {
		return e.Replies, nil
	}
	return nil, &NotLoadedError{edge: "replies"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BlogComment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case blogcomment.FieldIsApproved, blogcomment.FieldIsSpam:
			values[i] = new(sql.NullBool)
		case blogcomment.FieldLikeCount, blogcomment.FieldDislikeCount:
			values[i] = new(sql.NullInt64)
		case blogcomment.FieldAuthorName, blogcomment.FieldAuthorEmail, blogcomment.FieldAuthorWebsite, blogcomment.FieldContent, blogcomment.FieldIPAddress, blogcomment.FieldUserAgent:
			values[i] = new(sql.NullString)
		case blogcomment.FieldCreatedAt, blogcomment.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case blogcomment.FieldID, blogcomment.FieldBlogPostID, blogcomment.FieldParentID:
			values[i] = new(uuid.UUID)
		case blogcomment.ForeignKeys[0]: // blog_post_comments
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BlogComment fields.
func (bc *BlogComment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case blogcomment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				bc.ID = *value
			}
		case blogcomment.FieldBlogPostID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field blog_post_id", values[i])
			} else if value != nil {
				bc.BlogPostID = *value
			}
		case blogcomment.FieldParentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value != nil {
				bc.ParentID = *value
			}
		case blogcomment.FieldAuthorName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author_name", values[i])
			} else if value.Valid {
				bc.AuthorName = value.String
			}
		case blogcomment.FieldAuthorEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author_email", values[i])
			} else if value.Valid {
				bc.AuthorEmail = value.String
			}
		case blogcomment.FieldAuthorWebsite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author_website", values[i])
			} else if value.Valid {
				bc.AuthorWebsite = value.String
			}
		case blogcomment.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				bc.Content = value.String
			}
		case blogcomment.FieldIsApproved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_approved", values[i])
			} else if value.Valid {
				bc.IsApproved = value.Bool
			}
		case blogcomment.FieldIsSpam:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_spam", values[i])
			} else if value.Valid {
				bc.IsSpam = value.Bool
			}
		case blogcomment.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				bc.IPAddress = value.String
			}
		case blogcomment.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				bc.UserAgent = value.String
			}
		case blogcomment.FieldLikeCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field like_count", values[i])
			} else if value.Valid {
				bc.LikeCount = int(value.Int64)
			}
		case blogcomment.FieldDislikeCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dislike_count", values[i])
			} else if value.Valid {
				bc.DislikeCount = int(value.Int64)
			}
		case blogcomment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bc.CreatedAt = value.Time
			}
		case blogcomment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bc.UpdatedAt = value.Time
			}
		case blogcomment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field blog_post_comments", values[i])
			} else if value.Valid {
				bc.blog_post_comments = new(uuid.UUID)
				*bc.blog_post_comments = *value.S.(*uuid.UUID)
			}
		default:
			bc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BlogComment.
// This includes values selected through modifiers, order, etc.
func (bc *BlogComment) Value(name string) (ent.Value, error) {
	return bc.selectValues.Get(name)
}

// QueryPost queries the "post" edge of the BlogComment entity.
func (bc *BlogComment) QueryPost() *BlogPostQuery {
	return NewBlogCommentClient(bc.config).QueryPost(bc)
}

// QueryParent queries the "parent" edge of the BlogComment entity.
func (bc *BlogComment) QueryParent() *BlogCommentQuery {
	return NewBlogCommentClient(bc.config).QueryParent(bc)
}

// QueryReplies queries the "replies" edge of the BlogComment entity.
func (bc *BlogComment) QueryReplies() *BlogCommentQuery {
	return NewBlogCommentClient(bc.config).QueryReplies(bc)
}

// Update returns a builder for updating this BlogComment.
// Note that you need to call BlogComment.Unwrap() before calling this method if this BlogComment
// was returned from a transaction, and the transaction was committed or rolled back.
func (bc *BlogComment) Update() *BlogCommentUpdateOne {
	return NewBlogCommentClient(bc.config).UpdateOne(bc)
}

// Unwrap unwraps the BlogComment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bc *BlogComment) Unwrap() *BlogComment {
	_tx, ok := bc.config.driver.(*txDriver)
	if !ok {
		panic("ent: BlogComment is not a transactional entity")
	}
	bc.config.driver = _tx.drv
	return bc
}

// String implements the fmt.Stringer.
func (bc *BlogComment) String() string {
	var builder strings.Builder
	builder.WriteString("BlogComment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bc.ID))
	builder.WriteString("blog_post_id=")
	builder.WriteString(fmt.Sprintf("%v", bc.BlogPostID))
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", bc.ParentID))
	builder.WriteString(", ")
	builder.WriteString("author_name=")
	builder.WriteString(bc.AuthorName)
	builder.WriteString(", ")
	builder.WriteString("author_email=")
	builder.WriteString(bc.AuthorEmail)
	builder.WriteString(", ")
	builder.WriteString("author_website=")
	builder.WriteString(bc.AuthorWebsite)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(bc.Content)
	builder.WriteString(", ")
	builder.WriteString("is_approved=")
	builder.WriteString(fmt.Sprintf("%v", bc.IsApproved))
	builder.WriteString(", ")
	builder.WriteString("is_spam=")
	builder.WriteString(fmt.Sprintf("%v", bc.IsSpam))
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(bc.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(bc.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("like_count=")
	builder.WriteString(fmt.Sprintf("%v", bc.LikeCount))
	builder.WriteString(", ")
	builder.WriteString("dislike_count=")
	builder.WriteString(fmt.Sprintf("%v", bc.DislikeCount))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(bc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bc.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BlogComments is a parsable slice of BlogComment.
type BlogComments []*BlogComment
