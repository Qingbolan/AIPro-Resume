// Code generated by ent, DO NOT EDIT.

package blogcomment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the blogcomment type in the database.
	Label = "blog_comment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBlogPostID holds the string denoting the blog_post_id field in the database.
	FieldBlogPostID = "blog_post_id"
	// FieldParentID holds the string denoting the parent_id field in the database.
	FieldParentID = "parent_id"
	// FieldAuthorName holds the string denoting the author_name field in the database.
	FieldAuthorName = "author_name"
	// FieldAuthorEmail holds the string denoting the author_email field in the database.
	FieldAuthorEmail = "author_email"
	// FieldAuthorWebsite holds the string denoting the author_website field in the database.
	FieldAuthorWebsite = "author_website"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldIsApproved holds the string denoting the is_approved field in the database.
	FieldIsApproved = "is_approved"
	// FieldIsSpam holds the string denoting the is_spam field in the database.
	FieldIsSpam = "is_spam"
	// FieldIPAddress holds the string denoting the ip_address field in the database.
	FieldIPAddress = "ip_address"
	// FieldUserAgent holds the string denoting the user_agent field in the database.
	FieldUserAgent = "user_agent"
	// FieldLikeCount holds the string denoting the like_count field in the database.
	FieldLikeCount = "like_count"
	// FieldDislikeCount holds the string denoting the dislike_count field in the database.
	FieldDislikeCount = "dislike_count"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgePost holds the string denoting the post edge name in mutations.
	EdgePost = "post"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeReplies holds the string denoting the replies edge name in mutations.
	EdgeReplies = "replies"
	// Table holds the table name of the blogcomment in the database.
	Table = "blog_comments"
	// PostTable is the table that holds the post relation/edge.
	PostTable = "blog_comments"
	// PostInverseTable is the table name for the BlogPost entity.
	// It exists in this package in order to avoid circular dependency with the "blogpost" package.
	PostInverseTable = "blog_posts"
	// PostColumn is the table column denoting the post relation/edge.
	PostColumn = "blog_post_comments"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "blog_comments"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "parent_id"
	// RepliesTable is the table that holds the replies relation/edge.
	RepliesTable = "blog_comments"
	// RepliesColumn is the table column denoting the replies relation/edge.
	RepliesColumn = "parent_id"
)

// Columns holds all SQL columns for blogcomment fields.
var Columns = []string{
	FieldID,
	FieldBlogPostID,
	FieldParentID,
	FieldAuthorName,
	FieldAuthorEmail,
	FieldAuthorWebsite,
	FieldContent,
	FieldIsApproved,
	FieldIsSpam,
	FieldIPAddress,
	FieldUserAgent,
	FieldLikeCount,
	FieldDislikeCount,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "blog_comments"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"blog_post_comments",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// AuthorNameValidator is a validator for the "author_name" field. It is called by the builders before save.
	AuthorNameValidator func(string) error
	// AuthorEmailValidator is a validator for the "author_email" field. It is called by the builders before save.
	AuthorEmailValidator func(string) error
	// AuthorWebsiteValidator is a validator for the "author_website" field. It is called by the builders before save.
	AuthorWebsiteValidator func(string) error
	// DefaultIsApproved holds the default value on creation for the "is_approved" field.
	DefaultIsApproved bool
	// DefaultIsSpam holds the default value on creation for the "is_spam" field.
	DefaultIsSpam bool
	// IPAddressValidator is a validator for the "ip_address" field. It is called by the builders before save.
	IPAddressValidator func(string) error
	// UserAgentValidator is a validator for the "user_agent" field. It is called by the builders before save.
	UserAgentValidator func(string) error
	// DefaultLikeCount holds the default value on creation for the "like_count" field.
	DefaultLikeCount int
	// DefaultDislikeCount holds the default value on creation for the "dislike_count" field.
	DefaultDislikeCount int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the BlogComment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBlogPostID orders the results by the blog_post_id field.
func ByBlogPostID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlogPostID, opts...).ToFunc()
}

// ByParentID orders the results by the parent_id field.
func ByParentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentID, opts...).ToFunc()
}

// ByAuthorName orders the results by the author_name field.
func ByAuthorName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthorName, opts...).ToFunc()
}

// ByAuthorEmail orders the results by the author_email field.
func ByAuthorEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthorEmail, opts...).ToFunc()
}

// ByAuthorWebsite orders the results by the author_website field.
func ByAuthorWebsite(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthorWebsite, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByIsApproved orders the results by the is_approved field.
func ByIsApproved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsApproved, opts...).ToFunc()
}

// ByIsSpam orders the results by the is_spam field.
func ByIsSpam(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsSpam, opts...).ToFunc()
}

// ByIPAddress orders the results by the ip_address field.
func ByIPAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIPAddress, opts...).ToFunc()
}

// ByUserAgent orders the results by the user_agent field.
func ByUserAgent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserAgent, opts...).ToFunc()
}

// ByLikeCount orders the results by the like_count field.
func ByLikeCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLikeCount, opts...).ToFunc()
}

// ByDislikeCount orders the results by the dislike_count field.
func ByDislikeCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDislikeCount, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPostField orders the results by post field.
func ByPostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPostStep(), sql.OrderByField(field, opts...))
	}
}

// ByParentField orders the results by parent field.
func ByParentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentStep(), sql.OrderByField(field, opts...))
	}
}

// ByRepliesCount orders the results by replies count.
func ByRepliesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRepliesStep(), opts...)
	}
}

// ByReplies orders the results by replies terms.
func ByReplies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRepliesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PostTable, PostColumn),
	)
}
func newParentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
	)
}
func newRepliesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RepliesTable, RepliesColumn),
	)
}
