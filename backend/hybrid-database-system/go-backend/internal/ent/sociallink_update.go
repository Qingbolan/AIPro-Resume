// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/sociallink"
	"silan-backend/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SocialLinkUpdate is the builder for updating SocialLink entities.
type SocialLinkUpdate struct {
	config
	hooks    []Hook
	mutation *SocialLinkMutation
}

// Where appends a list predicates to the SocialLinkUpdate builder.
func (slu *SocialLinkUpdate) Where(ps ...predicate.SocialLink) *SocialLinkUpdate {
	slu.mutation.Where(ps...)
	return slu
}

// SetUserID sets the "user_id" field.
func (slu *SocialLinkUpdate) SetUserID(u uuid.UUID) *SocialLinkUpdate {
	slu.mutation.SetUserID(u)
	return slu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (slu *SocialLinkUpdate) SetNillableUserID(u *uuid.UUID) *SocialLinkUpdate {
	if u != nil {
		slu.SetUserID(*u)
	}
	return slu
}

// SetPlatform sets the "platform" field.
func (slu *SocialLinkUpdate) SetPlatform(s string) *SocialLinkUpdate {
	slu.mutation.SetPlatform(s)
	return slu
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (slu *SocialLinkUpdate) SetNillablePlatform(s *string) *SocialLinkUpdate {
	if s != nil {
		slu.SetPlatform(*s)
	}
	return slu
}

// SetURL sets the "url" field.
func (slu *SocialLinkUpdate) SetURL(s string) *SocialLinkUpdate {
	slu.mutation.SetURL(s)
	return slu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (slu *SocialLinkUpdate) SetNillableURL(s *string) *SocialLinkUpdate {
	if s != nil {
		slu.SetURL(*s)
	}
	return slu
}

// SetUsername sets the "username" field.
func (slu *SocialLinkUpdate) SetUsername(s string) *SocialLinkUpdate {
	slu.mutation.SetUsername(s)
	return slu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (slu *SocialLinkUpdate) SetNillableUsername(s *string) *SocialLinkUpdate {
	if s != nil {
		slu.SetUsername(*s)
	}
	return slu
}

// ClearUsername clears the value of the "username" field.
func (slu *SocialLinkUpdate) ClearUsername() *SocialLinkUpdate {
	slu.mutation.ClearUsername()
	return slu
}

// SetDisplayName sets the "display_name" field.
func (slu *SocialLinkUpdate) SetDisplayName(s string) *SocialLinkUpdate {
	slu.mutation.SetDisplayName(s)
	return slu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (slu *SocialLinkUpdate) SetNillableDisplayName(s *string) *SocialLinkUpdate {
	if s != nil {
		slu.SetDisplayName(*s)
	}
	return slu
}

// ClearDisplayName clears the value of the "display_name" field.
func (slu *SocialLinkUpdate) ClearDisplayName() *SocialLinkUpdate {
	slu.mutation.ClearDisplayName()
	return slu
}

// SetIsPublic sets the "is_public" field.
func (slu *SocialLinkUpdate) SetIsPublic(b bool) *SocialLinkUpdate {
	slu.mutation.SetIsPublic(b)
	return slu
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (slu *SocialLinkUpdate) SetNillableIsPublic(b *bool) *SocialLinkUpdate {
	if b != nil {
		slu.SetIsPublic(*b)
	}
	return slu
}

// SetOrder sets the "order" field.
func (slu *SocialLinkUpdate) SetOrder(i int) *SocialLinkUpdate {
	slu.mutation.ResetOrder()
	slu.mutation.SetOrder(i)
	return slu
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (slu *SocialLinkUpdate) SetNillableOrder(i *int) *SocialLinkUpdate {
	if i != nil {
		slu.SetOrder(*i)
	}
	return slu
}

// AddOrder adds i to the "order" field.
func (slu *SocialLinkUpdate) AddOrder(i int) *SocialLinkUpdate {
	slu.mutation.AddOrder(i)
	return slu
}

// SetCreatedAt sets the "created_at" field.
func (slu *SocialLinkUpdate) SetCreatedAt(t time.Time) *SocialLinkUpdate {
	slu.mutation.SetCreatedAt(t)
	return slu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (slu *SocialLinkUpdate) SetNillableCreatedAt(t *time.Time) *SocialLinkUpdate {
	if t != nil {
		slu.SetCreatedAt(*t)
	}
	return slu
}

// SetUpdatedAt sets the "updated_at" field.
func (slu *SocialLinkUpdate) SetUpdatedAt(t time.Time) *SocialLinkUpdate {
	slu.mutation.SetUpdatedAt(t)
	return slu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (slu *SocialLinkUpdate) SetUserID(id uuid.UUID) *SocialLinkUpdate {
	slu.mutation.SetUserID(id)
	return slu
}

// SetUser sets the "user" edge to the User entity.
func (slu *SocialLinkUpdate) SetUser(u *User) *SocialLinkUpdate {
	return slu.SetUserID(u.ID)
}

// Mutation returns the SocialLinkMutation object of the builder.
func (slu *SocialLinkUpdate) Mutation() *SocialLinkMutation {
	return slu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (slu *SocialLinkUpdate) ClearUser() *SocialLinkUpdate {
	slu.mutation.ClearUser()
	return slu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (slu *SocialLinkUpdate) Save(ctx context.Context) (int, error) {
	slu.defaults()
	return withHooks(ctx, slu.sqlSave, slu.mutation, slu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (slu *SocialLinkUpdate) SaveX(ctx context.Context) int {
	affected, err := slu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (slu *SocialLinkUpdate) Exec(ctx context.Context) error {
	_, err := slu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slu *SocialLinkUpdate) ExecX(ctx context.Context) {
	if err := slu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (slu *SocialLinkUpdate) defaults() {
	if _, ok := slu.mutation.UpdatedAt(); !ok {
		v := sociallink.UpdateDefaultUpdatedAt()
		slu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (slu *SocialLinkUpdate) check() error {
	if v, ok := slu.mutation.Platform(); ok {
		if err := sociallink.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "SocialLink.platform": %w`, err)}
		}
	}
	if v, ok := slu.mutation.URL(); ok {
		if err := sociallink.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "SocialLink.url": %w`, err)}
		}
	}
	if v, ok := slu.mutation.Username(); ok {
		if err := sociallink.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "SocialLink.username": %w`, err)}
		}
	}
	if v, ok := slu.mutation.DisplayName(); ok {
		if err := sociallink.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "SocialLink.display_name": %w`, err)}
		}
	}
	if slu.mutation.UserCleared() && len(slu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SocialLink.user"`)
	}
	return nil
}

func (slu *SocialLinkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := slu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sociallink.Table, sociallink.Columns, sqlgraph.NewFieldSpec(sociallink.FieldID, field.TypeUUID))
	if ps := slu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := slu.mutation.UserID(); ok {
		_spec.SetField(sociallink.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := slu.mutation.Platform(); ok {
		_spec.SetField(sociallink.FieldPlatform, field.TypeString, value)
	}
	if value, ok := slu.mutation.URL(); ok {
		_spec.SetField(sociallink.FieldURL, field.TypeString, value)
	}
	if value, ok := slu.mutation.Username(); ok {
		_spec.SetField(sociallink.FieldUsername, field.TypeString, value)
	}
	if slu.mutation.UsernameCleared() {
		_spec.ClearField(sociallink.FieldUsername, field.TypeString)
	}
	if value, ok := slu.mutation.DisplayName(); ok {
		_spec.SetField(sociallink.FieldDisplayName, field.TypeString, value)
	}
	if slu.mutation.DisplayNameCleared() {
		_spec.ClearField(sociallink.FieldDisplayName, field.TypeString)
	}
	if value, ok := slu.mutation.IsPublic(); ok {
		_spec.SetField(sociallink.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := slu.mutation.Order(); ok {
		_spec.SetField(sociallink.FieldOrder, field.TypeInt, value)
	}
	if value, ok := slu.mutation.AddedOrder(); ok {
		_spec.AddField(sociallink.FieldOrder, field.TypeInt, value)
	}
	if value, ok := slu.mutation.CreatedAt(); ok {
		_spec.SetField(sociallink.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := slu.mutation.UpdatedAt(); ok {
		_spec.SetField(sociallink.FieldUpdatedAt, field.TypeTime, value)
	}
	if slu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sociallink.UserTable,
			Columns: []string{sociallink.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := slu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sociallink.UserTable,
			Columns: []string{sociallink.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, slu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sociallink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	slu.mutation.done = true
	return n, nil
}

// SocialLinkUpdateOne is the builder for updating a single SocialLink entity.
type SocialLinkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SocialLinkMutation
}

// SetUserID sets the "user_id" field.
func (sluo *SocialLinkUpdateOne) SetUserID(u uuid.UUID) *SocialLinkUpdateOne {
	sluo.mutation.SetUserID(u)
	return sluo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sluo *SocialLinkUpdateOne) SetNillableUserID(u *uuid.UUID) *SocialLinkUpdateOne {
	if u != nil {
		sluo.SetUserID(*u)
	}
	return sluo
}

// SetPlatform sets the "platform" field.
func (sluo *SocialLinkUpdateOne) SetPlatform(s string) *SocialLinkUpdateOne {
	sluo.mutation.SetPlatform(s)
	return sluo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (sluo *SocialLinkUpdateOne) SetNillablePlatform(s *string) *SocialLinkUpdateOne {
	if s != nil {
		sluo.SetPlatform(*s)
	}
	return sluo
}

// SetURL sets the "url" field.
func (sluo *SocialLinkUpdateOne) SetURL(s string) *SocialLinkUpdateOne {
	sluo.mutation.SetURL(s)
	return sluo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (sluo *SocialLinkUpdateOne) SetNillableURL(s *string) *SocialLinkUpdateOne {
	if s != nil {
		sluo.SetURL(*s)
	}
	return sluo
}

// SetUsername sets the "username" field.
func (sluo *SocialLinkUpdateOne) SetUsername(s string) *SocialLinkUpdateOne {
	sluo.mutation.SetUsername(s)
	return sluo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (sluo *SocialLinkUpdateOne) SetNillableUsername(s *string) *SocialLinkUpdateOne {
	if s != nil {
		sluo.SetUsername(*s)
	}
	return sluo
}

// ClearUsername clears the value of the "username" field.
func (sluo *SocialLinkUpdateOne) ClearUsername() *SocialLinkUpdateOne {
	sluo.mutation.ClearUsername()
	return sluo
}

// SetDisplayName sets the "display_name" field.
func (sluo *SocialLinkUpdateOne) SetDisplayName(s string) *SocialLinkUpdateOne {
	sluo.mutation.SetDisplayName(s)
	return sluo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (sluo *SocialLinkUpdateOne) SetNillableDisplayName(s *string) *SocialLinkUpdateOne {
	if s != nil {
		sluo.SetDisplayName(*s)
	}
	return sluo
}

// ClearDisplayName clears the value of the "display_name" field.
func (sluo *SocialLinkUpdateOne) ClearDisplayName() *SocialLinkUpdateOne {
	sluo.mutation.ClearDisplayName()
	return sluo
}

// SetIsPublic sets the "is_public" field.
func (sluo *SocialLinkUpdateOne) SetIsPublic(b bool) *SocialLinkUpdateOne {
	sluo.mutation.SetIsPublic(b)
	return sluo
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (sluo *SocialLinkUpdateOne) SetNillableIsPublic(b *bool) *SocialLinkUpdateOne {
	if b != nil {
		sluo.SetIsPublic(*b)
	}
	return sluo
}

// SetOrder sets the "order" field.
func (sluo *SocialLinkUpdateOne) SetOrder(i int) *SocialLinkUpdateOne {
	sluo.mutation.ResetOrder()
	sluo.mutation.SetOrder(i)
	return sluo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (sluo *SocialLinkUpdateOne) SetNillableOrder(i *int) *SocialLinkUpdateOne {
	if i != nil {
		sluo.SetOrder(*i)
	}
	return sluo
}

// AddOrder adds i to the "order" field.
func (sluo *SocialLinkUpdateOne) AddOrder(i int) *SocialLinkUpdateOne {
	sluo.mutation.AddOrder(i)
	return sluo
}

// SetCreatedAt sets the "created_at" field.
func (sluo *SocialLinkUpdateOne) SetCreatedAt(t time.Time) *SocialLinkUpdateOne {
	sluo.mutation.SetCreatedAt(t)
	return sluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sluo *SocialLinkUpdateOne) SetNillableCreatedAt(t *time.Time) *SocialLinkUpdateOne {
	if t != nil {
		sluo.SetCreatedAt(*t)
	}
	return sluo
}

// SetUpdatedAt sets the "updated_at" field.
func (sluo *SocialLinkUpdateOne) SetUpdatedAt(t time.Time) *SocialLinkUpdateOne {
	sluo.mutation.SetUpdatedAt(t)
	return sluo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (sluo *SocialLinkUpdateOne) SetUserID(id uuid.UUID) *SocialLinkUpdateOne {
	sluo.mutation.SetUserID(id)
	return sluo
}

// SetUser sets the "user" edge to the User entity.
func (sluo *SocialLinkUpdateOne) SetUser(u *User) *SocialLinkUpdateOne {
	return sluo.SetUserID(u.ID)
}

// Mutation returns the SocialLinkMutation object of the builder.
func (sluo *SocialLinkUpdateOne) Mutation() *SocialLinkMutation {
	return sluo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (sluo *SocialLinkUpdateOne) ClearUser() *SocialLinkUpdateOne {
	sluo.mutation.ClearUser()
	return sluo
}

// Where appends a list predicates to the SocialLinkUpdate builder.
func (sluo *SocialLinkUpdateOne) Where(ps ...predicate.SocialLink) *SocialLinkUpdateOne {
	sluo.mutation.Where(ps...)
	return sluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sluo *SocialLinkUpdateOne) Select(field string, fields ...string) *SocialLinkUpdateOne {
	sluo.fields = append([]string{field}, fields...)
	return sluo
}

// Save executes the query and returns the updated SocialLink entity.
func (sluo *SocialLinkUpdateOne) Save(ctx context.Context) (*SocialLink, error) {
	sluo.defaults()
	return withHooks(ctx, sluo.sqlSave, sluo.mutation, sluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sluo *SocialLinkUpdateOne) SaveX(ctx context.Context) *SocialLink {
	node, err := sluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sluo *SocialLinkUpdateOne) Exec(ctx context.Context) error {
	_, err := sluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sluo *SocialLinkUpdateOne) ExecX(ctx context.Context) {
	if err := sluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sluo *SocialLinkUpdateOne) defaults() {
	if _, ok := sluo.mutation.UpdatedAt(); !ok {
		v := sociallink.UpdateDefaultUpdatedAt()
		sluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sluo *SocialLinkUpdateOne) check() error {
	if v, ok := sluo.mutation.Platform(); ok {
		if err := sociallink.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "SocialLink.platform": %w`, err)}
		}
	}
	if v, ok := sluo.mutation.URL(); ok {
		if err := sociallink.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "SocialLink.url": %w`, err)}
		}
	}
	if v, ok := sluo.mutation.Username(); ok {
		if err := sociallink.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "SocialLink.username": %w`, err)}
		}
	}
	if v, ok := sluo.mutation.DisplayName(); ok {
		if err := sociallink.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "SocialLink.display_name": %w`, err)}
		}
	}
	if sluo.mutation.UserCleared() && len(sluo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SocialLink.user"`)
	}
	return nil
}

func (sluo *SocialLinkUpdateOne) sqlSave(ctx context.Context) (_node *SocialLink, err error) {
	if err := sluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sociallink.Table, sociallink.Columns, sqlgraph.NewFieldSpec(sociallink.FieldID, field.TypeUUID))
	id, ok := sluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SocialLink.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sociallink.FieldID)
		for _, f := range fields {
			if !sociallink.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sociallink.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sluo.mutation.UserID(); ok {
		_spec.SetField(sociallink.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := sluo.mutation.Platform(); ok {
		_spec.SetField(sociallink.FieldPlatform, field.TypeString, value)
	}
	if value, ok := sluo.mutation.URL(); ok {
		_spec.SetField(sociallink.FieldURL, field.TypeString, value)
	}
	if value, ok := sluo.mutation.Username(); ok {
		_spec.SetField(sociallink.FieldUsername, field.TypeString, value)
	}
	if sluo.mutation.UsernameCleared() {
		_spec.ClearField(sociallink.FieldUsername, field.TypeString)
	}
	if value, ok := sluo.mutation.DisplayName(); ok {
		_spec.SetField(sociallink.FieldDisplayName, field.TypeString, value)
	}
	if sluo.mutation.DisplayNameCleared() {
		_spec.ClearField(sociallink.FieldDisplayName, field.TypeString)
	}
	if value, ok := sluo.mutation.IsPublic(); ok {
		_spec.SetField(sociallink.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := sluo.mutation.Order(); ok {
		_spec.SetField(sociallink.FieldOrder, field.TypeInt, value)
	}
	if value, ok := sluo.mutation.AddedOrder(); ok {
		_spec.AddField(sociallink.FieldOrder, field.TypeInt, value)
	}
	if value, ok := sluo.mutation.CreatedAt(); ok {
		_spec.SetField(sociallink.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := sluo.mutation.UpdatedAt(); ok {
		_spec.SetField(sociallink.FieldUpdatedAt, field.TypeTime, value)
	}
	if sluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sociallink.UserTable,
			Columns: []string{sociallink.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sociallink.UserTable,
			Columns: []string{sociallink.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SocialLink{config: sluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sociallink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sluo.mutation.done = true
	return _node, nil
}
