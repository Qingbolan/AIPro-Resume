// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/projectimage"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProjectImageUpdate is the builder for updating ProjectImage entities.
type ProjectImageUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectImageMutation
}

// Where appends a list predicates to the ProjectImageUpdate builder.
func (piu *ProjectImageUpdate) Where(ps ...predicate.ProjectImage) *ProjectImageUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetImageURL sets the "image_url" field.
func (piu *ProjectImageUpdate) SetImageURL(s string) *ProjectImageUpdate {
	piu.mutation.SetImageURL(s)
	return piu
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (piu *ProjectImageUpdate) SetNillableImageURL(s *string) *ProjectImageUpdate {
	if s != nil {
		piu.SetImageURL(*s)
	}
	return piu
}

// SetTitle sets the "title" field.
func (piu *ProjectImageUpdate) SetTitle(s string) *ProjectImageUpdate {
	piu.mutation.SetTitle(s)
	return piu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (piu *ProjectImageUpdate) SetNillableTitle(s *string) *ProjectImageUpdate {
	if s != nil {
		piu.SetTitle(*s)
	}
	return piu
}

// ClearTitle clears the value of the "title" field.
func (piu *ProjectImageUpdate) ClearTitle() *ProjectImageUpdate {
	piu.mutation.ClearTitle()
	return piu
}

// SetDescription sets the "description" field.
func (piu *ProjectImageUpdate) SetDescription(s string) *ProjectImageUpdate {
	piu.mutation.SetDescription(s)
	return piu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (piu *ProjectImageUpdate) SetNillableDescription(s *string) *ProjectImageUpdate {
	if s != nil {
		piu.SetDescription(*s)
	}
	return piu
}

// ClearDescription clears the value of the "description" field.
func (piu *ProjectImageUpdate) ClearDescription() *ProjectImageUpdate {
	piu.mutation.ClearDescription()
	return piu
}

// SetAltText sets the "alt_text" field.
func (piu *ProjectImageUpdate) SetAltText(s string) *ProjectImageUpdate {
	piu.mutation.SetAltText(s)
	return piu
}

// SetNillableAltText sets the "alt_text" field if the given value is not nil.
func (piu *ProjectImageUpdate) SetNillableAltText(s *string) *ProjectImageUpdate {
	if s != nil {
		piu.SetAltText(*s)
	}
	return piu
}

// ClearAltText clears the value of the "alt_text" field.
func (piu *ProjectImageUpdate) ClearAltText() *ProjectImageUpdate {
	piu.mutation.ClearAltText()
	return piu
}

// SetImageType sets the "image_type" field.
func (piu *ProjectImageUpdate) SetImageType(pt projectimage.ImageType) *ProjectImageUpdate {
	piu.mutation.SetImageType(pt)
	return piu
}

// SetNillableImageType sets the "image_type" field if the given value is not nil.
func (piu *ProjectImageUpdate) SetNillableImageType(pt *projectimage.ImageType) *ProjectImageUpdate {
	if pt != nil {
		piu.SetImageType(*pt)
	}
	return piu
}

// SetFileName sets the "file_name" field.
func (piu *ProjectImageUpdate) SetFileName(s string) *ProjectImageUpdate {
	piu.mutation.SetFileName(s)
	return piu
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (piu *ProjectImageUpdate) SetNillableFileName(s *string) *ProjectImageUpdate {
	if s != nil {
		piu.SetFileName(*s)
	}
	return piu
}

// ClearFileName clears the value of the "file_name" field.
func (piu *ProjectImageUpdate) ClearFileName() *ProjectImageUpdate {
	piu.mutation.ClearFileName()
	return piu
}

// SetFileSize sets the "file_size" field.
func (piu *ProjectImageUpdate) SetFileSize(i int) *ProjectImageUpdate {
	piu.mutation.ResetFileSize()
	piu.mutation.SetFileSize(i)
	return piu
}

// SetNillableFileSize sets the "file_size" field if the given value is not nil.
func (piu *ProjectImageUpdate) SetNillableFileSize(i *int) *ProjectImageUpdate {
	if i != nil {
		piu.SetFileSize(*i)
	}
	return piu
}

// AddFileSize adds i to the "file_size" field.
func (piu *ProjectImageUpdate) AddFileSize(i int) *ProjectImageUpdate {
	piu.mutation.AddFileSize(i)
	return piu
}

// ClearFileSize clears the value of the "file_size" field.
func (piu *ProjectImageUpdate) ClearFileSize() *ProjectImageUpdate {
	piu.mutation.ClearFileSize()
	return piu
}

// SetMimeType sets the "mime_type" field.
func (piu *ProjectImageUpdate) SetMimeType(s string) *ProjectImageUpdate {
	piu.mutation.SetMimeType(s)
	return piu
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (piu *ProjectImageUpdate) SetNillableMimeType(s *string) *ProjectImageUpdate {
	if s != nil {
		piu.SetMimeType(*s)
	}
	return piu
}

// ClearMimeType clears the value of the "mime_type" field.
func (piu *ProjectImageUpdate) ClearMimeType() *ProjectImageUpdate {
	piu.mutation.ClearMimeType()
	return piu
}

// SetWidth sets the "width" field.
func (piu *ProjectImageUpdate) SetWidth(i int) *ProjectImageUpdate {
	piu.mutation.ResetWidth()
	piu.mutation.SetWidth(i)
	return piu
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (piu *ProjectImageUpdate) SetNillableWidth(i *int) *ProjectImageUpdate {
	if i != nil {
		piu.SetWidth(*i)
	}
	return piu
}

// AddWidth adds i to the "width" field.
func (piu *ProjectImageUpdate) AddWidth(i int) *ProjectImageUpdate {
	piu.mutation.AddWidth(i)
	return piu
}

// ClearWidth clears the value of the "width" field.
func (piu *ProjectImageUpdate) ClearWidth() *ProjectImageUpdate {
	piu.mutation.ClearWidth()
	return piu
}

// SetHeight sets the "height" field.
func (piu *ProjectImageUpdate) SetHeight(i int) *ProjectImageUpdate {
	piu.mutation.ResetHeight()
	piu.mutation.SetHeight(i)
	return piu
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (piu *ProjectImageUpdate) SetNillableHeight(i *int) *ProjectImageUpdate {
	if i != nil {
		piu.SetHeight(*i)
	}
	return piu
}

// AddHeight adds i to the "height" field.
func (piu *ProjectImageUpdate) AddHeight(i int) *ProjectImageUpdate {
	piu.mutation.AddHeight(i)
	return piu
}

// ClearHeight clears the value of the "height" field.
func (piu *ProjectImageUpdate) ClearHeight() *ProjectImageUpdate {
	piu.mutation.ClearHeight()
	return piu
}

// SetIsPrimary sets the "is_primary" field.
func (piu *ProjectImageUpdate) SetIsPrimary(b bool) *ProjectImageUpdate {
	piu.mutation.SetIsPrimary(b)
	return piu
}

// SetNillableIsPrimary sets the "is_primary" field if the given value is not nil.
func (piu *ProjectImageUpdate) SetNillableIsPrimary(b *bool) *ProjectImageUpdate {
	if b != nil {
		piu.SetIsPrimary(*b)
	}
	return piu
}

// SetIsPublic sets the "is_public" field.
func (piu *ProjectImageUpdate) SetIsPublic(b bool) *ProjectImageUpdate {
	piu.mutation.SetIsPublic(b)
	return piu
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (piu *ProjectImageUpdate) SetNillableIsPublic(b *bool) *ProjectImageUpdate {
	if b != nil {
		piu.SetIsPublic(*b)
	}
	return piu
}

// SetSortOrder sets the "sort_order" field.
func (piu *ProjectImageUpdate) SetSortOrder(i int) *ProjectImageUpdate {
	piu.mutation.ResetSortOrder()
	piu.mutation.SetSortOrder(i)
	return piu
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (piu *ProjectImageUpdate) SetNillableSortOrder(i *int) *ProjectImageUpdate {
	if i != nil {
		piu.SetSortOrder(*i)
	}
	return piu
}

// AddSortOrder adds i to the "sort_order" field.
func (piu *ProjectImageUpdate) AddSortOrder(i int) *ProjectImageUpdate {
	piu.mutation.AddSortOrder(i)
	return piu
}

// SetCreatedAt sets the "created_at" field.
func (piu *ProjectImageUpdate) SetCreatedAt(t time.Time) *ProjectImageUpdate {
	piu.mutation.SetCreatedAt(t)
	return piu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (piu *ProjectImageUpdate) SetNillableCreatedAt(t *time.Time) *ProjectImageUpdate {
	if t != nil {
		piu.SetCreatedAt(*t)
	}
	return piu
}

// SetUpdatedAt sets the "updated_at" field.
func (piu *ProjectImageUpdate) SetUpdatedAt(t time.Time) *ProjectImageUpdate {
	piu.mutation.SetUpdatedAt(t)
	return piu
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (piu *ProjectImageUpdate) SetProjectID(id uuid.UUID) *ProjectImageUpdate {
	piu.mutation.SetProjectID(id)
	return piu
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (piu *ProjectImageUpdate) SetNillableProjectID(id *uuid.UUID) *ProjectImageUpdate {
	if id != nil {
		piu = piu.SetProjectID(*id)
	}
	return piu
}

// SetProject sets the "project" edge to the Project entity.
func (piu *ProjectImageUpdate) SetProject(p *Project) *ProjectImageUpdate {
	return piu.SetProjectID(p.ID)
}

// Mutation returns the ProjectImageMutation object of the builder.
func (piu *ProjectImageUpdate) Mutation() *ProjectImageMutation {
	return piu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (piu *ProjectImageUpdate) ClearProject() *ProjectImageUpdate {
	piu.mutation.ClearProject()
	return piu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *ProjectImageUpdate) Save(ctx context.Context) (int, error) {
	piu.defaults()
	return withHooks(ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *ProjectImageUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *ProjectImageUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *ProjectImageUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (piu *ProjectImageUpdate) defaults() {
	if _, ok := piu.mutation.UpdatedAt(); !ok {
		v := projectimage.UpdateDefaultUpdatedAt()
		piu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piu *ProjectImageUpdate) check() error {
	if v, ok := piu.mutation.ImageURL(); ok {
		if err := projectimage.ImageURLValidator(v); err != nil {
			return &ValidationError{Name: "image_url", err: fmt.Errorf(`ent: validator failed for field "ProjectImage.image_url": %w`, err)}
		}
	}
	if v, ok := piu.mutation.Title(); ok {
		if err := projectimage.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "ProjectImage.title": %w`, err)}
		}
	}
	if v, ok := piu.mutation.AltText(); ok {
		if err := projectimage.AltTextValidator(v); err != nil {
			return &ValidationError{Name: "alt_text", err: fmt.Errorf(`ent: validator failed for field "ProjectImage.alt_text": %w`, err)}
		}
	}
	if v, ok := piu.mutation.ImageType(); ok {
		if err := projectimage.ImageTypeValidator(v); err != nil {
			return &ValidationError{Name: "image_type", err: fmt.Errorf(`ent: validator failed for field "ProjectImage.image_type": %w`, err)}
		}
	}
	if v, ok := piu.mutation.FileName(); ok {
		if err := projectimage.FileNameValidator(v); err != nil {
			return &ValidationError{Name: "file_name", err: fmt.Errorf(`ent: validator failed for field "ProjectImage.file_name": %w`, err)}
		}
	}
	if v, ok := piu.mutation.MimeType(); ok {
		if err := projectimage.MimeTypeValidator(v); err != nil {
			return &ValidationError{Name: "mime_type", err: fmt.Errorf(`ent: validator failed for field "ProjectImage.mime_type": %w`, err)}
		}
	}
	return nil
}

func (piu *ProjectImageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := piu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectimage.Table, projectimage.Columns, sqlgraph.NewFieldSpec(projectimage.FieldID, field.TypeUUID))
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.ImageURL(); ok {
		_spec.SetField(projectimage.FieldImageURL, field.TypeString, value)
	}
	if value, ok := piu.mutation.Title(); ok {
		_spec.SetField(projectimage.FieldTitle, field.TypeString, value)
	}
	if piu.mutation.TitleCleared() {
		_spec.ClearField(projectimage.FieldTitle, field.TypeString)
	}
	if value, ok := piu.mutation.Description(); ok {
		_spec.SetField(projectimage.FieldDescription, field.TypeString, value)
	}
	if piu.mutation.DescriptionCleared() {
		_spec.ClearField(projectimage.FieldDescription, field.TypeString)
	}
	if value, ok := piu.mutation.AltText(); ok {
		_spec.SetField(projectimage.FieldAltText, field.TypeString, value)
	}
	if piu.mutation.AltTextCleared() {
		_spec.ClearField(projectimage.FieldAltText, field.TypeString)
	}
	if value, ok := piu.mutation.ImageType(); ok {
		_spec.SetField(projectimage.FieldImageType, field.TypeEnum, value)
	}
	if value, ok := piu.mutation.FileName(); ok {
		_spec.SetField(projectimage.FieldFileName, field.TypeString, value)
	}
	if piu.mutation.FileNameCleared() {
		_spec.ClearField(projectimage.FieldFileName, field.TypeString)
	}
	if value, ok := piu.mutation.FileSize(); ok {
		_spec.SetField(projectimage.FieldFileSize, field.TypeInt, value)
	}
	if value, ok := piu.mutation.AddedFileSize(); ok {
		_spec.AddField(projectimage.FieldFileSize, field.TypeInt, value)
	}
	if piu.mutation.FileSizeCleared() {
		_spec.ClearField(projectimage.FieldFileSize, field.TypeInt)
	}
	if value, ok := piu.mutation.MimeType(); ok {
		_spec.SetField(projectimage.FieldMimeType, field.TypeString, value)
	}
	if piu.mutation.MimeTypeCleared() {
		_spec.ClearField(projectimage.FieldMimeType, field.TypeString)
	}
	if value, ok := piu.mutation.Width(); ok {
		_spec.SetField(projectimage.FieldWidth, field.TypeInt, value)
	}
	if value, ok := piu.mutation.AddedWidth(); ok {
		_spec.AddField(projectimage.FieldWidth, field.TypeInt, value)
	}
	if piu.mutation.WidthCleared() {
		_spec.ClearField(projectimage.FieldWidth, field.TypeInt)
	}
	if value, ok := piu.mutation.Height(); ok {
		_spec.SetField(projectimage.FieldHeight, field.TypeInt, value)
	}
	if value, ok := piu.mutation.AddedHeight(); ok {
		_spec.AddField(projectimage.FieldHeight, field.TypeInt, value)
	}
	if piu.mutation.HeightCleared() {
		_spec.ClearField(projectimage.FieldHeight, field.TypeInt)
	}
	if value, ok := piu.mutation.IsPrimary(); ok {
		_spec.SetField(projectimage.FieldIsPrimary, field.TypeBool, value)
	}
	if value, ok := piu.mutation.IsPublic(); ok {
		_spec.SetField(projectimage.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := piu.mutation.SortOrder(); ok {
		_spec.SetField(projectimage.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := piu.mutation.AddedSortOrder(); ok {
		_spec.AddField(projectimage.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := piu.mutation.CreatedAt(); ok {
		_spec.SetField(projectimage.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := piu.mutation.UpdatedAt(); ok {
		_spec.SetField(projectimage.FieldUpdatedAt, field.TypeTime, value)
	}
	if piu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectimage.ProjectTable,
			Columns: []string{projectimage.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectimage.ProjectTable,
			Columns: []string{projectimage.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// ProjectImageUpdateOne is the builder for updating a single ProjectImage entity.
type ProjectImageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectImageMutation
}

// SetImageURL sets the "image_url" field.
func (piuo *ProjectImageUpdateOne) SetImageURL(s string) *ProjectImageUpdateOne {
	piuo.mutation.SetImageURL(s)
	return piuo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (piuo *ProjectImageUpdateOne) SetNillableImageURL(s *string) *ProjectImageUpdateOne {
	if s != nil {
		piuo.SetImageURL(*s)
	}
	return piuo
}

// SetTitle sets the "title" field.
func (piuo *ProjectImageUpdateOne) SetTitle(s string) *ProjectImageUpdateOne {
	piuo.mutation.SetTitle(s)
	return piuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (piuo *ProjectImageUpdateOne) SetNillableTitle(s *string) *ProjectImageUpdateOne {
	if s != nil {
		piuo.SetTitle(*s)
	}
	return piuo
}

// ClearTitle clears the value of the "title" field.
func (piuo *ProjectImageUpdateOne) ClearTitle() *ProjectImageUpdateOne {
	piuo.mutation.ClearTitle()
	return piuo
}

// SetDescription sets the "description" field.
func (piuo *ProjectImageUpdateOne) SetDescription(s string) *ProjectImageUpdateOne {
	piuo.mutation.SetDescription(s)
	return piuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (piuo *ProjectImageUpdateOne) SetNillableDescription(s *string) *ProjectImageUpdateOne {
	if s != nil {
		piuo.SetDescription(*s)
	}
	return piuo
}

// ClearDescription clears the value of the "description" field.
func (piuo *ProjectImageUpdateOne) ClearDescription() *ProjectImageUpdateOne {
	piuo.mutation.ClearDescription()
	return piuo
}

// SetAltText sets the "alt_text" field.
func (piuo *ProjectImageUpdateOne) SetAltText(s string) *ProjectImageUpdateOne {
	piuo.mutation.SetAltText(s)
	return piuo
}

// SetNillableAltText sets the "alt_text" field if the given value is not nil.
func (piuo *ProjectImageUpdateOne) SetNillableAltText(s *string) *ProjectImageUpdateOne {
	if s != nil {
		piuo.SetAltText(*s)
	}
	return piuo
}

// ClearAltText clears the value of the "alt_text" field.
func (piuo *ProjectImageUpdateOne) ClearAltText() *ProjectImageUpdateOne {
	piuo.mutation.ClearAltText()
	return piuo
}

// SetImageType sets the "image_type" field.
func (piuo *ProjectImageUpdateOne) SetImageType(pt projectimage.ImageType) *ProjectImageUpdateOne {
	piuo.mutation.SetImageType(pt)
	return piuo
}

// SetNillableImageType sets the "image_type" field if the given value is not nil.
func (piuo *ProjectImageUpdateOne) SetNillableImageType(pt *projectimage.ImageType) *ProjectImageUpdateOne {
	if pt != nil {
		piuo.SetImageType(*pt)
	}
	return piuo
}

// SetFileName sets the "file_name" field.
func (piuo *ProjectImageUpdateOne) SetFileName(s string) *ProjectImageUpdateOne {
	piuo.mutation.SetFileName(s)
	return piuo
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (piuo *ProjectImageUpdateOne) SetNillableFileName(s *string) *ProjectImageUpdateOne {
	if s != nil {
		piuo.SetFileName(*s)
	}
	return piuo
}

// ClearFileName clears the value of the "file_name" field.
func (piuo *ProjectImageUpdateOne) ClearFileName() *ProjectImageUpdateOne {
	piuo.mutation.ClearFileName()
	return piuo
}

// SetFileSize sets the "file_size" field.
func (piuo *ProjectImageUpdateOne) SetFileSize(i int) *ProjectImageUpdateOne {
	piuo.mutation.ResetFileSize()
	piuo.mutation.SetFileSize(i)
	return piuo
}

// SetNillableFileSize sets the "file_size" field if the given value is not nil.
func (piuo *ProjectImageUpdateOne) SetNillableFileSize(i *int) *ProjectImageUpdateOne {
	if i != nil {
		piuo.SetFileSize(*i)
	}
	return piuo
}

// AddFileSize adds i to the "file_size" field.
func (piuo *ProjectImageUpdateOne) AddFileSize(i int) *ProjectImageUpdateOne {
	piuo.mutation.AddFileSize(i)
	return piuo
}

// ClearFileSize clears the value of the "file_size" field.
func (piuo *ProjectImageUpdateOne) ClearFileSize() *ProjectImageUpdateOne {
	piuo.mutation.ClearFileSize()
	return piuo
}

// SetMimeType sets the "mime_type" field.
func (piuo *ProjectImageUpdateOne) SetMimeType(s string) *ProjectImageUpdateOne {
	piuo.mutation.SetMimeType(s)
	return piuo
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (piuo *ProjectImageUpdateOne) SetNillableMimeType(s *string) *ProjectImageUpdateOne {
	if s != nil {
		piuo.SetMimeType(*s)
	}
	return piuo
}

// ClearMimeType clears the value of the "mime_type" field.
func (piuo *ProjectImageUpdateOne) ClearMimeType() *ProjectImageUpdateOne {
	piuo.mutation.ClearMimeType()
	return piuo
}

// SetWidth sets the "width" field.
func (piuo *ProjectImageUpdateOne) SetWidth(i int) *ProjectImageUpdateOne {
	piuo.mutation.ResetWidth()
	piuo.mutation.SetWidth(i)
	return piuo
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (piuo *ProjectImageUpdateOne) SetNillableWidth(i *int) *ProjectImageUpdateOne {
	if i != nil {
		piuo.SetWidth(*i)
	}
	return piuo
}

// AddWidth adds i to the "width" field.
func (piuo *ProjectImageUpdateOne) AddWidth(i int) *ProjectImageUpdateOne {
	piuo.mutation.AddWidth(i)
	return piuo
}

// ClearWidth clears the value of the "width" field.
func (piuo *ProjectImageUpdateOne) ClearWidth() *ProjectImageUpdateOne {
	piuo.mutation.ClearWidth()
	return piuo
}

// SetHeight sets the "height" field.
func (piuo *ProjectImageUpdateOne) SetHeight(i int) *ProjectImageUpdateOne {
	piuo.mutation.ResetHeight()
	piuo.mutation.SetHeight(i)
	return piuo
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (piuo *ProjectImageUpdateOne) SetNillableHeight(i *int) *ProjectImageUpdateOne {
	if i != nil {
		piuo.SetHeight(*i)
	}
	return piuo
}

// AddHeight adds i to the "height" field.
func (piuo *ProjectImageUpdateOne) AddHeight(i int) *ProjectImageUpdateOne {
	piuo.mutation.AddHeight(i)
	return piuo
}

// ClearHeight clears the value of the "height" field.
func (piuo *ProjectImageUpdateOne) ClearHeight() *ProjectImageUpdateOne {
	piuo.mutation.ClearHeight()
	return piuo
}

// SetIsPrimary sets the "is_primary" field.
func (piuo *ProjectImageUpdateOne) SetIsPrimary(b bool) *ProjectImageUpdateOne {
	piuo.mutation.SetIsPrimary(b)
	return piuo
}

// SetNillableIsPrimary sets the "is_primary" field if the given value is not nil.
func (piuo *ProjectImageUpdateOne) SetNillableIsPrimary(b *bool) *ProjectImageUpdateOne {
	if b != nil {
		piuo.SetIsPrimary(*b)
	}
	return piuo
}

// SetIsPublic sets the "is_public" field.
func (piuo *ProjectImageUpdateOne) SetIsPublic(b bool) *ProjectImageUpdateOne {
	piuo.mutation.SetIsPublic(b)
	return piuo
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (piuo *ProjectImageUpdateOne) SetNillableIsPublic(b *bool) *ProjectImageUpdateOne {
	if b != nil {
		piuo.SetIsPublic(*b)
	}
	return piuo
}

// SetSortOrder sets the "sort_order" field.
func (piuo *ProjectImageUpdateOne) SetSortOrder(i int) *ProjectImageUpdateOne {
	piuo.mutation.ResetSortOrder()
	piuo.mutation.SetSortOrder(i)
	return piuo
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (piuo *ProjectImageUpdateOne) SetNillableSortOrder(i *int) *ProjectImageUpdateOne {
	if i != nil {
		piuo.SetSortOrder(*i)
	}
	return piuo
}

// AddSortOrder adds i to the "sort_order" field.
func (piuo *ProjectImageUpdateOne) AddSortOrder(i int) *ProjectImageUpdateOne {
	piuo.mutation.AddSortOrder(i)
	return piuo
}

// SetCreatedAt sets the "created_at" field.
func (piuo *ProjectImageUpdateOne) SetCreatedAt(t time.Time) *ProjectImageUpdateOne {
	piuo.mutation.SetCreatedAt(t)
	return piuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (piuo *ProjectImageUpdateOne) SetNillableCreatedAt(t *time.Time) *ProjectImageUpdateOne {
	if t != nil {
		piuo.SetCreatedAt(*t)
	}
	return piuo
}

// SetUpdatedAt sets the "updated_at" field.
func (piuo *ProjectImageUpdateOne) SetUpdatedAt(t time.Time) *ProjectImageUpdateOne {
	piuo.mutation.SetUpdatedAt(t)
	return piuo
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (piuo *ProjectImageUpdateOne) SetProjectID(id uuid.UUID) *ProjectImageUpdateOne {
	piuo.mutation.SetProjectID(id)
	return piuo
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (piuo *ProjectImageUpdateOne) SetNillableProjectID(id *uuid.UUID) *ProjectImageUpdateOne {
	if id != nil {
		piuo = piuo.SetProjectID(*id)
	}
	return piuo
}

// SetProject sets the "project" edge to the Project entity.
func (piuo *ProjectImageUpdateOne) SetProject(p *Project) *ProjectImageUpdateOne {
	return piuo.SetProjectID(p.ID)
}

// Mutation returns the ProjectImageMutation object of the builder.
func (piuo *ProjectImageUpdateOne) Mutation() *ProjectImageMutation {
	return piuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (piuo *ProjectImageUpdateOne) ClearProject() *ProjectImageUpdateOne {
	piuo.mutation.ClearProject()
	return piuo
}

// Where appends a list predicates to the ProjectImageUpdate builder.
func (piuo *ProjectImageUpdateOne) Where(ps ...predicate.ProjectImage) *ProjectImageUpdateOne {
	piuo.mutation.Where(ps...)
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *ProjectImageUpdateOne) Select(field string, fields ...string) *ProjectImageUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated ProjectImage entity.
func (piuo *ProjectImageUpdateOne) Save(ctx context.Context) (*ProjectImage, error) {
	piuo.defaults()
	return withHooks(ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *ProjectImageUpdateOne) SaveX(ctx context.Context) *ProjectImage {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *ProjectImageUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *ProjectImageUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (piuo *ProjectImageUpdateOne) defaults() {
	if _, ok := piuo.mutation.UpdatedAt(); !ok {
		v := projectimage.UpdateDefaultUpdatedAt()
		piuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piuo *ProjectImageUpdateOne) check() error {
	if v, ok := piuo.mutation.ImageURL(); ok {
		if err := projectimage.ImageURLValidator(v); err != nil {
			return &ValidationError{Name: "image_url", err: fmt.Errorf(`ent: validator failed for field "ProjectImage.image_url": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.Title(); ok {
		if err := projectimage.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "ProjectImage.title": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.AltText(); ok {
		if err := projectimage.AltTextValidator(v); err != nil {
			return &ValidationError{Name: "alt_text", err: fmt.Errorf(`ent: validator failed for field "ProjectImage.alt_text": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.ImageType(); ok {
		if err := projectimage.ImageTypeValidator(v); err != nil {
			return &ValidationError{Name: "image_type", err: fmt.Errorf(`ent: validator failed for field "ProjectImage.image_type": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.FileName(); ok {
		if err := projectimage.FileNameValidator(v); err != nil {
			return &ValidationError{Name: "file_name", err: fmt.Errorf(`ent: validator failed for field "ProjectImage.file_name": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.MimeType(); ok {
		if err := projectimage.MimeTypeValidator(v); err != nil {
			return &ValidationError{Name: "mime_type", err: fmt.Errorf(`ent: validator failed for field "ProjectImage.mime_type": %w`, err)}
		}
	}
	return nil
}

func (piuo *ProjectImageUpdateOne) sqlSave(ctx context.Context) (_node *ProjectImage, err error) {
	if err := piuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectimage.Table, projectimage.Columns, sqlgraph.NewFieldSpec(projectimage.FieldID, field.TypeUUID))
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProjectImage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectimage.FieldID)
		for _, f := range fields {
			if !projectimage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != projectimage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.ImageURL(); ok {
		_spec.SetField(projectimage.FieldImageURL, field.TypeString, value)
	}
	if value, ok := piuo.mutation.Title(); ok {
		_spec.SetField(projectimage.FieldTitle, field.TypeString, value)
	}
	if piuo.mutation.TitleCleared() {
		_spec.ClearField(projectimage.FieldTitle, field.TypeString)
	}
	if value, ok := piuo.mutation.Description(); ok {
		_spec.SetField(projectimage.FieldDescription, field.TypeString, value)
	}
	if piuo.mutation.DescriptionCleared() {
		_spec.ClearField(projectimage.FieldDescription, field.TypeString)
	}
	if value, ok := piuo.mutation.AltText(); ok {
		_spec.SetField(projectimage.FieldAltText, field.TypeString, value)
	}
	if piuo.mutation.AltTextCleared() {
		_spec.ClearField(projectimage.FieldAltText, field.TypeString)
	}
	if value, ok := piuo.mutation.ImageType(); ok {
		_spec.SetField(projectimage.FieldImageType, field.TypeEnum, value)
	}
	if value, ok := piuo.mutation.FileName(); ok {
		_spec.SetField(projectimage.FieldFileName, field.TypeString, value)
	}
	if piuo.mutation.FileNameCleared() {
		_spec.ClearField(projectimage.FieldFileName, field.TypeString)
	}
	if value, ok := piuo.mutation.FileSize(); ok {
		_spec.SetField(projectimage.FieldFileSize, field.TypeInt, value)
	}
	if value, ok := piuo.mutation.AddedFileSize(); ok {
		_spec.AddField(projectimage.FieldFileSize, field.TypeInt, value)
	}
	if piuo.mutation.FileSizeCleared() {
		_spec.ClearField(projectimage.FieldFileSize, field.TypeInt)
	}
	if value, ok := piuo.mutation.MimeType(); ok {
		_spec.SetField(projectimage.FieldMimeType, field.TypeString, value)
	}
	if piuo.mutation.MimeTypeCleared() {
		_spec.ClearField(projectimage.FieldMimeType, field.TypeString)
	}
	if value, ok := piuo.mutation.Width(); ok {
		_spec.SetField(projectimage.FieldWidth, field.TypeInt, value)
	}
	if value, ok := piuo.mutation.AddedWidth(); ok {
		_spec.AddField(projectimage.FieldWidth, field.TypeInt, value)
	}
	if piuo.mutation.WidthCleared() {
		_spec.ClearField(projectimage.FieldWidth, field.TypeInt)
	}
	if value, ok := piuo.mutation.Height(); ok {
		_spec.SetField(projectimage.FieldHeight, field.TypeInt, value)
	}
	if value, ok := piuo.mutation.AddedHeight(); ok {
		_spec.AddField(projectimage.FieldHeight, field.TypeInt, value)
	}
	if piuo.mutation.HeightCleared() {
		_spec.ClearField(projectimage.FieldHeight, field.TypeInt)
	}
	if value, ok := piuo.mutation.IsPrimary(); ok {
		_spec.SetField(projectimage.FieldIsPrimary, field.TypeBool, value)
	}
	if value, ok := piuo.mutation.IsPublic(); ok {
		_spec.SetField(projectimage.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := piuo.mutation.SortOrder(); ok {
		_spec.SetField(projectimage.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := piuo.mutation.AddedSortOrder(); ok {
		_spec.AddField(projectimage.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := piuo.mutation.CreatedAt(); ok {
		_spec.SetField(projectimage.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := piuo.mutation.UpdatedAt(); ok {
		_spec.SetField(projectimage.FieldUpdatedAt, field.TypeTime, value)
	}
	if piuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectimage.ProjectTable,
			Columns: []string{projectimage.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectimage.ProjectTable,
			Columns: []string{projectimage.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProjectImage{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}
