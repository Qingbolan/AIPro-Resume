// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/blogseries"
	"silan-backend/internal/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// BlogSeries is the model entity for the BlogSeries schema.
type BlogSeries struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// FeaturedImageURL holds the value of the "featured_image_url" field.
	FeaturedImageURL string `json:"featured_image_url,omitempty"`
	// PostCount holds the value of the "post_count" field.
	PostCount int `json:"post_count,omitempty"`
	// IsCompleted holds the value of the "is_completed" field.
	IsCompleted bool `json:"is_completed,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BlogSeriesQuery when eager-loading is set.
	Edges            BlogSeriesEdges `json:"edges"`
	user_blog_series *uuid.UUID
	selectValues     sql.SelectValues
}

// BlogSeriesEdges holds the relations/edges for other nodes in the graph.
type BlogSeriesEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// BlogPosts holds the value of the blog_posts edge.
	BlogPosts []*BlogPost `json:"blog_posts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlogSeriesEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// BlogPostsOrErr returns the BlogPosts value or an error if the edge
// was not loaded in eager-loading.
func (e BlogSeriesEdges) BlogPostsOrErr() ([]*BlogPost, error) {
	if e.loadedTypes[1] {
		return e.BlogPosts, nil
	}
	return nil, &NotLoadedError{edge: "blog_posts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BlogSeries) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case blogseries.FieldIsCompleted:
			values[i] = new(sql.NullBool)
		case blogseries.FieldPostCount:
			values[i] = new(sql.NullInt64)
		case blogseries.FieldTitle, blogseries.FieldSlug, blogseries.FieldDescription, blogseries.FieldFeaturedImageURL:
			values[i] = new(sql.NullString)
		case blogseries.FieldCreatedAt, blogseries.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case blogseries.FieldID:
			values[i] = new(uuid.UUID)
		case blogseries.ForeignKeys[0]: // user_blog_series
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BlogSeries fields.
func (bs *BlogSeries) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case blogseries.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				bs.ID = *value
			}
		case blogseries.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				bs.Title = value.String
			}
		case blogseries.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				bs.Slug = value.String
			}
		case blogseries.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				bs.Description = value.String
			}
		case blogseries.FieldFeaturedImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field featured_image_url", values[i])
			} else if value.Valid {
				bs.FeaturedImageURL = value.String
			}
		case blogseries.FieldPostCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field post_count", values[i])
			} else if value.Valid {
				bs.PostCount = int(value.Int64)
			}
		case blogseries.FieldIsCompleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_completed", values[i])
			} else if value.Valid {
				bs.IsCompleted = value.Bool
			}
		case blogseries.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bs.CreatedAt = value.Time
			}
		case blogseries.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bs.UpdatedAt = value.Time
			}
		case blogseries.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_blog_series", values[i])
			} else if value.Valid {
				bs.user_blog_series = new(uuid.UUID)
				*bs.user_blog_series = *value.S.(*uuid.UUID)
			}
		default:
			bs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BlogSeries.
// This includes values selected through modifiers, order, etc.
func (bs *BlogSeries) Value(name string) (ent.Value, error) {
	return bs.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the BlogSeries entity.
func (bs *BlogSeries) QueryUser() *UserQuery {
	return NewBlogSeriesClient(bs.config).QueryUser(bs)
}

// QueryBlogPosts queries the "blog_posts" edge of the BlogSeries entity.
func (bs *BlogSeries) QueryBlogPosts() *BlogPostQuery {
	return NewBlogSeriesClient(bs.config).QueryBlogPosts(bs)
}

// Update returns a builder for updating this BlogSeries.
// Note that you need to call BlogSeries.Unwrap() before calling this method if this BlogSeries
// was returned from a transaction, and the transaction was committed or rolled back.
func (bs *BlogSeries) Update() *BlogSeriesUpdateOne {
	return NewBlogSeriesClient(bs.config).UpdateOne(bs)
}

// Unwrap unwraps the BlogSeries entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bs *BlogSeries) Unwrap() *BlogSeries {
	_tx, ok := bs.config.driver.(*txDriver)
	if !ok {
		panic("ent: BlogSeries is not a transactional entity")
	}
	bs.config.driver = _tx.drv
	return bs
}

// String implements the fmt.Stringer.
func (bs *BlogSeries) String() string {
	var builder strings.Builder
	builder.WriteString("BlogSeries(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bs.ID))
	builder.WriteString("title=")
	builder.WriteString(bs.Title)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(bs.Slug)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(bs.Description)
	builder.WriteString(", ")
	builder.WriteString("featured_image_url=")
	builder.WriteString(bs.FeaturedImageURL)
	builder.WriteString(", ")
	builder.WriteString("post_count=")
	builder.WriteString(fmt.Sprintf("%v", bs.PostCount))
	builder.WriteString(", ")
	builder.WriteString("is_completed=")
	builder.WriteString(fmt.Sprintf("%v", bs.IsCompleted))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(bs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bs.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BlogSeriesSlice is a parsable slice of BlogSeries.
type BlogSeriesSlice []*BlogSeries
