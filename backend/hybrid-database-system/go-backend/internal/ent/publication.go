// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/publication"
	"silan-backend/internal/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Publication is the model entity for the Publication schema.
type Publication struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// PublicationType holds the value of the "publication_type" field.
	PublicationType string `json:"publication_type,omitempty"`
	// JournalName holds the value of the "journal_name" field.
	JournalName string `json:"journal_name,omitempty"`
	// ConferenceName holds the value of the "conference_name" field.
	ConferenceName string `json:"conference_name,omitempty"`
	// Volume holds the value of the "volume" field.
	Volume string `json:"volume,omitempty"`
	// Issue holds the value of the "issue" field.
	Issue string `json:"issue,omitempty"`
	// Pages holds the value of the "pages" field.
	Pages string `json:"pages,omitempty"`
	// PublicationDate holds the value of the "publication_date" field.
	PublicationDate time.Time `json:"publication_date,omitempty"`
	// Doi holds the value of the "doi" field.
	Doi string `json:"doi,omitempty"`
	// Isbn holds the value of the "isbn" field.
	Isbn string `json:"isbn,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// PdfURL holds the value of the "pdf_url" field.
	PdfURL string `json:"pdf_url,omitempty"`
	// CitationCount holds the value of the "citation_count" field.
	CitationCount int `json:"citation_count,omitempty"`
	// IsPeerReviewed holds the value of the "is_peer_reviewed" field.
	IsPeerReviewed bool `json:"is_peer_reviewed,omitempty"`
	// SortOrder holds the value of the "sort_order" field.
	SortOrder int `json:"sort_order,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PublicationQuery when eager-loading is set.
	Edges             PublicationEdges `json:"edges"`
	user_publications *uuid.UUID
	selectValues      sql.SelectValues
}

// PublicationEdges holds the relations/edges for other nodes in the graph.
type PublicationEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PublicationEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Publication) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case publication.FieldIsPeerReviewed:
			values[i] = new(sql.NullBool)
		case publication.FieldCitationCount, publication.FieldSortOrder:
			values[i] = new(sql.NullInt64)
		case publication.FieldTitle, publication.FieldPublicationType, publication.FieldJournalName, publication.FieldConferenceName, publication.FieldVolume, publication.FieldIssue, publication.FieldPages, publication.FieldDoi, publication.FieldIsbn, publication.FieldURL, publication.FieldPdfURL:
			values[i] = new(sql.NullString)
		case publication.FieldPublicationDate, publication.FieldCreatedAt, publication.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case publication.FieldID, publication.FieldUserID:
			values[i] = new(uuid.UUID)
		case publication.ForeignKeys[0]: // user_publications
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Publication fields.
func (pu *Publication) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case publication.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pu.ID = *value
			}
		case publication.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				pu.UserID = *value
			}
		case publication.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				pu.Title = value.String
			}
		case publication.FieldPublicationType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field publication_type", values[i])
			} else if value.Valid {
				pu.PublicationType = value.String
			}
		case publication.FieldJournalName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field journal_name", values[i])
			} else if value.Valid {
				pu.JournalName = value.String
			}
		case publication.FieldConferenceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field conference_name", values[i])
			} else if value.Valid {
				pu.ConferenceName = value.String
			}
		case publication.FieldVolume:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field volume", values[i])
			} else if value.Valid {
				pu.Volume = value.String
			}
		case publication.FieldIssue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field issue", values[i])
			} else if value.Valid {
				pu.Issue = value.String
			}
		case publication.FieldPages:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pages", values[i])
			} else if value.Valid {
				pu.Pages = value.String
			}
		case publication.FieldPublicationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field publication_date", values[i])
			} else if value.Valid {
				pu.PublicationDate = value.Time
			}
		case publication.FieldDoi:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field doi", values[i])
			} else if value.Valid {
				pu.Doi = value.String
			}
		case publication.FieldIsbn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field isbn", values[i])
			} else if value.Valid {
				pu.Isbn = value.String
			}
		case publication.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				pu.URL = value.String
			}
		case publication.FieldPdfURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pdf_url", values[i])
			} else if value.Valid {
				pu.PdfURL = value.String
			}
		case publication.FieldCitationCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field citation_count", values[i])
			} else if value.Valid {
				pu.CitationCount = int(value.Int64)
			}
		case publication.FieldIsPeerReviewed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_peer_reviewed", values[i])
			} else if value.Valid {
				pu.IsPeerReviewed = value.Bool
			}
		case publication.FieldSortOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_order", values[i])
			} else if value.Valid {
				pu.SortOrder = int(value.Int64)
			}
		case publication.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pu.CreatedAt = value.Time
			}
		case publication.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pu.UpdatedAt = value.Time
			}
		case publication.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_publications", values[i])
			} else if value.Valid {
				pu.user_publications = new(uuid.UUID)
				*pu.user_publications = *value.S.(*uuid.UUID)
			}
		default:
			pu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Publication.
// This includes values selected through modifiers, order, etc.
func (pu *Publication) Value(name string) (ent.Value, error) {
	return pu.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Publication entity.
func (pu *Publication) QueryUser() *UserQuery {
	return NewPublicationClient(pu.config).QueryUser(pu)
}

// Update returns a builder for updating this Publication.
// Note that you need to call Publication.Unwrap() before calling this method if this Publication
// was returned from a transaction, and the transaction was committed or rolled back.
func (pu *Publication) Update() *PublicationUpdateOne {
	return NewPublicationClient(pu.config).UpdateOne(pu)
}

// Unwrap unwraps the Publication entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pu *Publication) Unwrap() *Publication {
	_tx, ok := pu.config.driver.(*txDriver)
	if !ok {
		panic("ent: Publication is not a transactional entity")
	}
	pu.config.driver = _tx.drv
	return pu
}

// String implements the fmt.Stringer.
func (pu *Publication) String() string {
	var builder strings.Builder
	builder.WriteString("Publication(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pu.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", pu.UserID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(pu.Title)
	builder.WriteString(", ")
	builder.WriteString("publication_type=")
	builder.WriteString(pu.PublicationType)
	builder.WriteString(", ")
	builder.WriteString("journal_name=")
	builder.WriteString(pu.JournalName)
	builder.WriteString(", ")
	builder.WriteString("conference_name=")
	builder.WriteString(pu.ConferenceName)
	builder.WriteString(", ")
	builder.WriteString("volume=")
	builder.WriteString(pu.Volume)
	builder.WriteString(", ")
	builder.WriteString("issue=")
	builder.WriteString(pu.Issue)
	builder.WriteString(", ")
	builder.WriteString("pages=")
	builder.WriteString(pu.Pages)
	builder.WriteString(", ")
	builder.WriteString("publication_date=")
	builder.WriteString(pu.PublicationDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("doi=")
	builder.WriteString(pu.Doi)
	builder.WriteString(", ")
	builder.WriteString("isbn=")
	builder.WriteString(pu.Isbn)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(pu.URL)
	builder.WriteString(", ")
	builder.WriteString("pdf_url=")
	builder.WriteString(pu.PdfURL)
	builder.WriteString(", ")
	builder.WriteString("citation_count=")
	builder.WriteString(fmt.Sprintf("%v", pu.CitationCount))
	builder.WriteString(", ")
	builder.WriteString("is_peer_reviewed=")
	builder.WriteString(fmt.Sprintf("%v", pu.IsPeerReviewed))
	builder.WriteString(", ")
	builder.WriteString("sort_order=")
	builder.WriteString(fmt.Sprintf("%v", pu.SortOrder))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pu.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pu.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Publications is a parsable slice of Publication.
type Publications []*Publication
