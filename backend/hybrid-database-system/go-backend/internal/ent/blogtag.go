// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/blogtag"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// BlogTag is the model entity for the BlogTag schema.
type BlogTag struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Color holds the value of the "color" field.
	Color string `json:"color,omitempty"`
	// PostCount holds the value of the "post_count" field.
	PostCount int `json:"post_count,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BlogTagQuery when eager-loading is set.
	Edges        BlogTagEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BlogTagEdges holds the relations/edges for other nodes in the graph.
type BlogTagEdges struct {
	// BlogPosts holds the value of the blog_posts edge.
	BlogPosts []*BlogPost `json:"blog_posts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BlogPostsOrErr returns the BlogPosts value or an error if the edge
// was not loaded in eager-loading.
func (e BlogTagEdges) BlogPostsOrErr() ([]*BlogPost, error) {
	if e.loadedTypes[0] {
		return e.BlogPosts, nil
	}
	return nil, &NotLoadedError{edge: "blog_posts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BlogTag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case blogtag.FieldPostCount:
			values[i] = new(sql.NullInt64)
		case blogtag.FieldName, blogtag.FieldSlug, blogtag.FieldDescription, blogtag.FieldColor:
			values[i] = new(sql.NullString)
		case blogtag.FieldCreatedAt, blogtag.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case blogtag.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BlogTag fields.
func (bt *BlogTag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case blogtag.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				bt.ID = *value
			}
		case blogtag.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				bt.Name = value.String
			}
		case blogtag.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				bt.Slug = value.String
			}
		case blogtag.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				bt.Description = value.String
			}
		case blogtag.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				bt.Color = value.String
			}
		case blogtag.FieldPostCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field post_count", values[i])
			} else if value.Valid {
				bt.PostCount = int(value.Int64)
			}
		case blogtag.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bt.CreatedAt = value.Time
			}
		case blogtag.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bt.UpdatedAt = value.Time
			}
		default:
			bt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BlogTag.
// This includes values selected through modifiers, order, etc.
func (bt *BlogTag) Value(name string) (ent.Value, error) {
	return bt.selectValues.Get(name)
}

// QueryBlogPosts queries the "blog_posts" edge of the BlogTag entity.
func (bt *BlogTag) QueryBlogPosts() *BlogPostQuery {
	return NewBlogTagClient(bt.config).QueryBlogPosts(bt)
}

// Update returns a builder for updating this BlogTag.
// Note that you need to call BlogTag.Unwrap() before calling this method if this BlogTag
// was returned from a transaction, and the transaction was committed or rolled back.
func (bt *BlogTag) Update() *BlogTagUpdateOne {
	return NewBlogTagClient(bt.config).UpdateOne(bt)
}

// Unwrap unwraps the BlogTag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bt *BlogTag) Unwrap() *BlogTag {
	_tx, ok := bt.config.driver.(*txDriver)
	if !ok {
		panic("ent: BlogTag is not a transactional entity")
	}
	bt.config.driver = _tx.drv
	return bt
}

// String implements the fmt.Stringer.
func (bt *BlogTag) String() string {
	var builder strings.Builder
	builder.WriteString("BlogTag(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bt.ID))
	builder.WriteString("name=")
	builder.WriteString(bt.Name)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(bt.Slug)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(bt.Description)
	builder.WriteString(", ")
	builder.WriteString("color=")
	builder.WriteString(bt.Color)
	builder.WriteString(", ")
	builder.WriteString("post_count=")
	builder.WriteString(fmt.Sprintf("%v", bt.PostCount))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(bt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bt.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BlogTags is a parsable slice of BlogTag.
type BlogTags []*BlogTag
