// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/award"
	"silan-backend/internal/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Award is the model entity for the Award schema.
type Award struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// AwardingOrganization holds the value of the "awarding_organization" field.
	AwardingOrganization string `json:"awarding_organization,omitempty"`
	// AwardDate holds the value of the "award_date" field.
	AwardDate time.Time `json:"award_date,omitempty"`
	// AwardType holds the value of the "award_type" field.
	AwardType string `json:"award_type,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CertificateURL holds the value of the "certificate_url" field.
	CertificateURL string `json:"certificate_url,omitempty"`
	// SortOrder holds the value of the "sort_order" field.
	SortOrder int `json:"sort_order,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AwardQuery when eager-loading is set.
	Edges        AwardEdges `json:"edges"`
	user_awards  *uuid.UUID
	selectValues sql.SelectValues
}

// AwardEdges holds the relations/edges for other nodes in the graph.
type AwardEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AwardEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Award) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case award.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case award.FieldSortOrder:
			values[i] = new(sql.NullInt64)
		case award.FieldTitle, award.FieldAwardingOrganization, award.FieldAwardType, award.FieldDescription, award.FieldCertificateURL:
			values[i] = new(sql.NullString)
		case award.FieldAwardDate, award.FieldCreatedAt, award.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case award.FieldID, award.FieldUserID:
			values[i] = new(uuid.UUID)
		case award.ForeignKeys[0]: // user_awards
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Award fields.
func (a *Award) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case award.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case award.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				a.UserID = *value
			}
		case award.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				a.Title = value.String
			}
		case award.FieldAwardingOrganization:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field awarding_organization", values[i])
			} else if value.Valid {
				a.AwardingOrganization = value.String
			}
		case award.FieldAwardDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field award_date", values[i])
			} else if value.Valid {
				a.AwardDate = value.Time
			}
		case award.FieldAwardType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field award_type", values[i])
			} else if value.Valid {
				a.AwardType = value.String
			}
		case award.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				a.Amount = value.Float64
			}
		case award.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				a.Description = value.String
			}
		case award.FieldCertificateURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field certificate_url", values[i])
			} else if value.Valid {
				a.CertificateURL = value.String
			}
		case award.FieldSortOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_order", values[i])
			} else if value.Valid {
				a.SortOrder = int(value.Int64)
			}
		case award.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case award.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case award.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_awards", values[i])
			} else if value.Valid {
				a.user_awards = new(uuid.UUID)
				*a.user_awards = *value.S.(*uuid.UUID)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Award.
// This includes values selected through modifiers, order, etc.
func (a *Award) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Award entity.
func (a *Award) QueryUser() *UserQuery {
	return NewAwardClient(a.config).QueryUser(a)
}

// Update returns a builder for updating this Award.
// Note that you need to call Award.Unwrap() before calling this method if this Award
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Award) Update() *AwardUpdateOne {
	return NewAwardClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Award entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Award) Unwrap() *Award {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Award is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Award) String() string {
	var builder strings.Builder
	builder.WriteString("Award(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", a.UserID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(a.Title)
	builder.WriteString(", ")
	builder.WriteString("awarding_organization=")
	builder.WriteString(a.AwardingOrganization)
	builder.WriteString(", ")
	builder.WriteString("award_date=")
	builder.WriteString(a.AwardDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("award_type=")
	builder.WriteString(a.AwardType)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", a.Amount))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(a.Description)
	builder.WriteString(", ")
	builder.WriteString("certificate_url=")
	builder.WriteString(a.CertificateURL)
	builder.WriteString(", ")
	builder.WriteString("sort_order=")
	builder.WriteString(fmt.Sprintf("%v", a.SortOrder))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Awards is a parsable slice of Award.
type Awards []*Award
