// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/projectdetail"
	"silan-backend/internal/ent/projectimage"
	"silan-backend/internal/ent/projecttechnology"
	"silan-backend/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProjectUpdate is the builder for updating Project entities.
type ProjectUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectMutation
}

// Where appends a list predicates to the ProjectUpdate builder.
func (pu *ProjectUpdate) Where(ps ...predicate.Project) *ProjectUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUserID sets the "user_id" field.
func (pu *ProjectUpdate) SetUserID(u uuid.UUID) *ProjectUpdate {
	pu.mutation.SetUserID(u)
	return pu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableUserID(u *uuid.UUID) *ProjectUpdate {
	if u != nil {
		pu.SetUserID(*u)
	}
	return pu
}

// SetTitle sets the "title" field.
func (pu *ProjectUpdate) SetTitle(s string) *ProjectUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableTitle(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetTitle(*s)
	}
	return pu
}

// SetSlug sets the "slug" field.
func (pu *ProjectUpdate) SetSlug(s string) *ProjectUpdate {
	pu.mutation.SetSlug(s)
	return pu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableSlug(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetSlug(*s)
	}
	return pu
}

// SetDescription sets the "description" field.
func (pu *ProjectUpdate) SetDescription(s string) *ProjectUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDescription(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *ProjectUpdate) ClearDescription() *ProjectUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetProjectType sets the "project_type" field.
func (pu *ProjectUpdate) SetProjectType(s string) *ProjectUpdate {
	pu.mutation.SetProjectType(s)
	return pu
}

// SetNillableProjectType sets the "project_type" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableProjectType(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetProjectType(*s)
	}
	return pu
}

// SetStatus sets the "status" field.
func (pu *ProjectUpdate) SetStatus(pr project.Status) *ProjectUpdate {
	pu.mutation.SetStatus(pr)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableStatus(pr *project.Status) *ProjectUpdate {
	if pr != nil {
		pu.SetStatus(*pr)
	}
	return pu
}

// SetStartDate sets the "start_date" field.
func (pu *ProjectUpdate) SetStartDate(t time.Time) *ProjectUpdate {
	pu.mutation.SetStartDate(t)
	return pu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableStartDate(t *time.Time) *ProjectUpdate {
	if t != nil {
		pu.SetStartDate(*t)
	}
	return pu
}

// ClearStartDate clears the value of the "start_date" field.
func (pu *ProjectUpdate) ClearStartDate() *ProjectUpdate {
	pu.mutation.ClearStartDate()
	return pu
}

// SetEndDate sets the "end_date" field.
func (pu *ProjectUpdate) SetEndDate(t time.Time) *ProjectUpdate {
	pu.mutation.SetEndDate(t)
	return pu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableEndDate(t *time.Time) *ProjectUpdate {
	if t != nil {
		pu.SetEndDate(*t)
	}
	return pu
}

// ClearEndDate clears the value of the "end_date" field.
func (pu *ProjectUpdate) ClearEndDate() *ProjectUpdate {
	pu.mutation.ClearEndDate()
	return pu
}

// SetGithubURL sets the "github_url" field.
func (pu *ProjectUpdate) SetGithubURL(s string) *ProjectUpdate {
	pu.mutation.SetGithubURL(s)
	return pu
}

// SetNillableGithubURL sets the "github_url" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableGithubURL(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetGithubURL(*s)
	}
	return pu
}

// ClearGithubURL clears the value of the "github_url" field.
func (pu *ProjectUpdate) ClearGithubURL() *ProjectUpdate {
	pu.mutation.ClearGithubURL()
	return pu
}

// SetDemoURL sets the "demo_url" field.
func (pu *ProjectUpdate) SetDemoURL(s string) *ProjectUpdate {
	pu.mutation.SetDemoURL(s)
	return pu
}

// SetNillableDemoURL sets the "demo_url" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDemoURL(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetDemoURL(*s)
	}
	return pu
}

// ClearDemoURL clears the value of the "demo_url" field.
func (pu *ProjectUpdate) ClearDemoURL() *ProjectUpdate {
	pu.mutation.ClearDemoURL()
	return pu
}

// SetDocumentationURL sets the "documentation_url" field.
func (pu *ProjectUpdate) SetDocumentationURL(s string) *ProjectUpdate {
	pu.mutation.SetDocumentationURL(s)
	return pu
}

// SetNillableDocumentationURL sets the "documentation_url" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDocumentationURL(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetDocumentationURL(*s)
	}
	return pu
}

// ClearDocumentationURL clears the value of the "documentation_url" field.
func (pu *ProjectUpdate) ClearDocumentationURL() *ProjectUpdate {
	pu.mutation.ClearDocumentationURL()
	return pu
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (pu *ProjectUpdate) SetThumbnailURL(s string) *ProjectUpdate {
	pu.mutation.SetThumbnailURL(s)
	return pu
}

// SetNillableThumbnailURL sets the "thumbnail_url" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableThumbnailURL(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetThumbnailURL(*s)
	}
	return pu
}

// ClearThumbnailURL clears the value of the "thumbnail_url" field.
func (pu *ProjectUpdate) ClearThumbnailURL() *ProjectUpdate {
	pu.mutation.ClearThumbnailURL()
	return pu
}

// SetIsFeatured sets the "is_featured" field.
func (pu *ProjectUpdate) SetIsFeatured(b bool) *ProjectUpdate {
	pu.mutation.SetIsFeatured(b)
	return pu
}

// SetNillableIsFeatured sets the "is_featured" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableIsFeatured(b *bool) *ProjectUpdate {
	if b != nil {
		pu.SetIsFeatured(*b)
	}
	return pu
}

// SetIsPublic sets the "is_public" field.
func (pu *ProjectUpdate) SetIsPublic(b bool) *ProjectUpdate {
	pu.mutation.SetIsPublic(b)
	return pu
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableIsPublic(b *bool) *ProjectUpdate {
	if b != nil {
		pu.SetIsPublic(*b)
	}
	return pu
}

// SetViewCount sets the "view_count" field.
func (pu *ProjectUpdate) SetViewCount(i int) *ProjectUpdate {
	pu.mutation.ResetViewCount()
	pu.mutation.SetViewCount(i)
	return pu
}

// SetNillableViewCount sets the "view_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableViewCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetViewCount(*i)
	}
	return pu
}

// AddViewCount adds i to the "view_count" field.
func (pu *ProjectUpdate) AddViewCount(i int) *ProjectUpdate {
	pu.mutation.AddViewCount(i)
	return pu
}

// SetStarCount sets the "star_count" field.
func (pu *ProjectUpdate) SetStarCount(i int) *ProjectUpdate {
	pu.mutation.ResetStarCount()
	pu.mutation.SetStarCount(i)
	return pu
}

// SetNillableStarCount sets the "star_count" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableStarCount(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetStarCount(*i)
	}
	return pu
}

// AddStarCount adds i to the "star_count" field.
func (pu *ProjectUpdate) AddStarCount(i int) *ProjectUpdate {
	pu.mutation.AddStarCount(i)
	return pu
}

// SetSortOrder sets the "sort_order" field.
func (pu *ProjectUpdate) SetSortOrder(i int) *ProjectUpdate {
	pu.mutation.ResetSortOrder()
	pu.mutation.SetSortOrder(i)
	return pu
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableSortOrder(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetSortOrder(*i)
	}
	return pu
}

// AddSortOrder adds i to the "sort_order" field.
func (pu *ProjectUpdate) AddSortOrder(i int) *ProjectUpdate {
	pu.mutation.AddSortOrder(i)
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *ProjectUpdate) SetCreatedAt(t time.Time) *ProjectUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableCreatedAt(t *time.Time) *ProjectUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProjectUpdate) SetUpdatedAt(t time.Time) *ProjectUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pu *ProjectUpdate) SetUserID(id uuid.UUID) *ProjectUpdate {
	pu.mutation.SetUserID(id)
	return pu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (pu *ProjectUpdate) SetNillableUserID(id *uuid.UUID) *ProjectUpdate {
	if id != nil {
		pu = pu.SetUserID(*id)
	}
	return pu
}

// SetUser sets the "user" edge to the User entity.
func (pu *ProjectUpdate) SetUser(u *User) *ProjectUpdate {
	return pu.SetUserID(u.ID)
}

// AddTechnologyIDs adds the "technologies" edge to the ProjectTechnology entity by IDs.
func (pu *ProjectUpdate) AddTechnologyIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.AddTechnologyIDs(ids...)
	return pu
}

// AddTechnologies adds the "technologies" edges to the ProjectTechnology entity.
func (pu *ProjectUpdate) AddTechnologies(p ...*ProjectTechnology) *ProjectUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddTechnologyIDs(ids...)
}

// SetDetailID sets the "detail" edge to the ProjectDetail entity by ID.
func (pu *ProjectUpdate) SetDetailID(id uuid.UUID) *ProjectUpdate {
	pu.mutation.SetDetailID(id)
	return pu
}

// SetNillableDetailID sets the "detail" edge to the ProjectDetail entity by ID if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDetailID(id *uuid.UUID) *ProjectUpdate {
	if id != nil {
		pu = pu.SetDetailID(*id)
	}
	return pu
}

// SetDetail sets the "detail" edge to the ProjectDetail entity.
func (pu *ProjectUpdate) SetDetail(p *ProjectDetail) *ProjectUpdate {
	return pu.SetDetailID(p.ID)
}

// AddImageIDs adds the "images" edge to the ProjectImage entity by IDs.
func (pu *ProjectUpdate) AddImageIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.AddImageIDs(ids...)
	return pu
}

// AddImages adds the "images" edges to the ProjectImage entity.
func (pu *ProjectUpdate) AddImages(p ...*ProjectImage) *ProjectUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddImageIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (pu *ProjectUpdate) Mutation() *ProjectMutation {
	return pu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pu *ProjectUpdate) ClearUser() *ProjectUpdate {
	pu.mutation.ClearUser()
	return pu
}

// ClearTechnologies clears all "technologies" edges to the ProjectTechnology entity.
func (pu *ProjectUpdate) ClearTechnologies() *ProjectUpdate {
	pu.mutation.ClearTechnologies()
	return pu
}

// RemoveTechnologyIDs removes the "technologies" edge to ProjectTechnology entities by IDs.
func (pu *ProjectUpdate) RemoveTechnologyIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.RemoveTechnologyIDs(ids...)
	return pu
}

// RemoveTechnologies removes "technologies" edges to ProjectTechnology entities.
func (pu *ProjectUpdate) RemoveTechnologies(p ...*ProjectTechnology) *ProjectUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveTechnologyIDs(ids...)
}

// ClearDetail clears the "detail" edge to the ProjectDetail entity.
func (pu *ProjectUpdate) ClearDetail() *ProjectUpdate {
	pu.mutation.ClearDetail()
	return pu
}

// ClearImages clears all "images" edges to the ProjectImage entity.
func (pu *ProjectUpdate) ClearImages() *ProjectUpdate {
	pu.mutation.ClearImages()
	return pu
}

// RemoveImageIDs removes the "images" edge to ProjectImage entities by IDs.
func (pu *ProjectUpdate) RemoveImageIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.RemoveImageIDs(ids...)
	return pu
}

// RemoveImages removes "images" edges to ProjectImage entities.
func (pu *ProjectUpdate) RemoveImages(p ...*ProjectImage) *ProjectUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveImageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProjectUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProjectUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProjectUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProjectUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := project.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProjectUpdate) check() error {
	if v, ok := pu.mutation.Title(); ok {
		if err := project.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Project.title": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Slug(); ok {
		if err := project.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Project.slug": %w`, err)}
		}
	}
	if v, ok := pu.mutation.ProjectType(); ok {
		if err := project.ProjectTypeValidator(v); err != nil {
			return &ValidationError{Name: "project_type", err: fmt.Errorf(`ent: validator failed for field "Project.project_type": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Status(); ok {
		if err := project.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Project.status": %w`, err)}
		}
	}
	if v, ok := pu.mutation.GithubURL(); ok {
		if err := project.GithubURLValidator(v); err != nil {
			return &ValidationError{Name: "github_url", err: fmt.Errorf(`ent: validator failed for field "Project.github_url": %w`, err)}
		}
	}
	if v, ok := pu.mutation.DemoURL(); ok {
		if err := project.DemoURLValidator(v); err != nil {
			return &ValidationError{Name: "demo_url", err: fmt.Errorf(`ent: validator failed for field "Project.demo_url": %w`, err)}
		}
	}
	if v, ok := pu.mutation.DocumentationURL(); ok {
		if err := project.DocumentationURLValidator(v); err != nil {
			return &ValidationError{Name: "documentation_url", err: fmt.Errorf(`ent: validator failed for field "Project.documentation_url": %w`, err)}
		}
	}
	if v, ok := pu.mutation.ThumbnailURL(); ok {
		if err := project.ThumbnailURLValidator(v); err != nil {
			return &ValidationError{Name: "thumbnail_url", err: fmt.Errorf(`ent: validator failed for field "Project.thumbnail_url": %w`, err)}
		}
	}
	return nil
}

func (pu *ProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UserID(); ok {
		_spec.SetField(project.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(project.FieldTitle, field.TypeString, value)
	}
	if value, ok := pu.mutation.Slug(); ok {
		_spec.SetField(project.FieldSlug, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(project.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(project.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.ProjectType(); ok {
		_spec.SetField(project.FieldProjectType, field.TypeString, value)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(project.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.StartDate(); ok {
		_spec.SetField(project.FieldStartDate, field.TypeTime, value)
	}
	if pu.mutation.StartDateCleared() {
		_spec.ClearField(project.FieldStartDate, field.TypeTime)
	}
	if value, ok := pu.mutation.EndDate(); ok {
		_spec.SetField(project.FieldEndDate, field.TypeTime, value)
	}
	if pu.mutation.EndDateCleared() {
		_spec.ClearField(project.FieldEndDate, field.TypeTime)
	}
	if value, ok := pu.mutation.GithubURL(); ok {
		_spec.SetField(project.FieldGithubURL, field.TypeString, value)
	}
	if pu.mutation.GithubURLCleared() {
		_spec.ClearField(project.FieldGithubURL, field.TypeString)
	}
	if value, ok := pu.mutation.DemoURL(); ok {
		_spec.SetField(project.FieldDemoURL, field.TypeString, value)
	}
	if pu.mutation.DemoURLCleared() {
		_spec.ClearField(project.FieldDemoURL, field.TypeString)
	}
	if value, ok := pu.mutation.DocumentationURL(); ok {
		_spec.SetField(project.FieldDocumentationURL, field.TypeString, value)
	}
	if pu.mutation.DocumentationURLCleared() {
		_spec.ClearField(project.FieldDocumentationURL, field.TypeString)
	}
	if value, ok := pu.mutation.ThumbnailURL(); ok {
		_spec.SetField(project.FieldThumbnailURL, field.TypeString, value)
	}
	if pu.mutation.ThumbnailURLCleared() {
		_spec.ClearField(project.FieldThumbnailURL, field.TypeString)
	}
	if value, ok := pu.mutation.IsFeatured(); ok {
		_spec.SetField(project.FieldIsFeatured, field.TypeBool, value)
	}
	if value, ok := pu.mutation.IsPublic(); ok {
		_spec.SetField(project.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := pu.mutation.ViewCount(); ok {
		_spec.SetField(project.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedViewCount(); ok {
		_spec.AddField(project.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.StarCount(); ok {
		_spec.SetField(project.FieldStarCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedStarCount(); ok {
		_spec.AddField(project.FieldStarCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.SortOrder(); ok {
		_spec.SetField(project.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedSortOrder(); ok {
		_spec.AddField(project.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(project.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.UserTable,
			Columns: []string{project.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.UserTable,
			Columns: []string{project.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.TechnologiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.TechnologiesTable,
			Columns: []string{project.TechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttechnology.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedTechnologiesIDs(); len(nodes) > 0 && !pu.mutation.TechnologiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.TechnologiesTable,
			Columns: []string{project.TechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttechnology.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TechnologiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.TechnologiesTable,
			Columns: []string{project.TechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttechnology.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.DetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   project.DetailTable,
			Columns: []string{project.DetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectdetail.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   project.DetailTable,
			Columns: []string{project.DetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectdetail.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ImagesTable,
			Columns: []string{project.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectimage.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedImagesIDs(); len(nodes) > 0 && !pu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ImagesTable,
			Columns: []string{project.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectimage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ImagesTable,
			Columns: []string{project.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectimage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProjectUpdateOne is the builder for updating a single Project entity.
type ProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectMutation
}

// SetUserID sets the "user_id" field.
func (puo *ProjectUpdateOne) SetUserID(u uuid.UUID) *ProjectUpdateOne {
	puo.mutation.SetUserID(u)
	return puo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableUserID(u *uuid.UUID) *ProjectUpdateOne {
	if u != nil {
		puo.SetUserID(*u)
	}
	return puo
}

// SetTitle sets the "title" field.
func (puo *ProjectUpdateOne) SetTitle(s string) *ProjectUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableTitle(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetTitle(*s)
	}
	return puo
}

// SetSlug sets the "slug" field.
func (puo *ProjectUpdateOne) SetSlug(s string) *ProjectUpdateOne {
	puo.mutation.SetSlug(s)
	return puo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableSlug(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetSlug(*s)
	}
	return puo
}

// SetDescription sets the "description" field.
func (puo *ProjectUpdateOne) SetDescription(s string) *ProjectUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDescription(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *ProjectUpdateOne) ClearDescription() *ProjectUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetProjectType sets the "project_type" field.
func (puo *ProjectUpdateOne) SetProjectType(s string) *ProjectUpdateOne {
	puo.mutation.SetProjectType(s)
	return puo
}

// SetNillableProjectType sets the "project_type" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableProjectType(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetProjectType(*s)
	}
	return puo
}

// SetStatus sets the "status" field.
func (puo *ProjectUpdateOne) SetStatus(pr project.Status) *ProjectUpdateOne {
	puo.mutation.SetStatus(pr)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableStatus(pr *project.Status) *ProjectUpdateOne {
	if pr != nil {
		puo.SetStatus(*pr)
	}
	return puo
}

// SetStartDate sets the "start_date" field.
func (puo *ProjectUpdateOne) SetStartDate(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetStartDate(t)
	return puo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableStartDate(t *time.Time) *ProjectUpdateOne {
	if t != nil {
		puo.SetStartDate(*t)
	}
	return puo
}

// ClearStartDate clears the value of the "start_date" field.
func (puo *ProjectUpdateOne) ClearStartDate() *ProjectUpdateOne {
	puo.mutation.ClearStartDate()
	return puo
}

// SetEndDate sets the "end_date" field.
func (puo *ProjectUpdateOne) SetEndDate(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetEndDate(t)
	return puo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableEndDate(t *time.Time) *ProjectUpdateOne {
	if t != nil {
		puo.SetEndDate(*t)
	}
	return puo
}

// ClearEndDate clears the value of the "end_date" field.
func (puo *ProjectUpdateOne) ClearEndDate() *ProjectUpdateOne {
	puo.mutation.ClearEndDate()
	return puo
}

// SetGithubURL sets the "github_url" field.
func (puo *ProjectUpdateOne) SetGithubURL(s string) *ProjectUpdateOne {
	puo.mutation.SetGithubURL(s)
	return puo
}

// SetNillableGithubURL sets the "github_url" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableGithubURL(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetGithubURL(*s)
	}
	return puo
}

// ClearGithubURL clears the value of the "github_url" field.
func (puo *ProjectUpdateOne) ClearGithubURL() *ProjectUpdateOne {
	puo.mutation.ClearGithubURL()
	return puo
}

// SetDemoURL sets the "demo_url" field.
func (puo *ProjectUpdateOne) SetDemoURL(s string) *ProjectUpdateOne {
	puo.mutation.SetDemoURL(s)
	return puo
}

// SetNillableDemoURL sets the "demo_url" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDemoURL(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetDemoURL(*s)
	}
	return puo
}

// ClearDemoURL clears the value of the "demo_url" field.
func (puo *ProjectUpdateOne) ClearDemoURL() *ProjectUpdateOne {
	puo.mutation.ClearDemoURL()
	return puo
}

// SetDocumentationURL sets the "documentation_url" field.
func (puo *ProjectUpdateOne) SetDocumentationURL(s string) *ProjectUpdateOne {
	puo.mutation.SetDocumentationURL(s)
	return puo
}

// SetNillableDocumentationURL sets the "documentation_url" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDocumentationURL(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetDocumentationURL(*s)
	}
	return puo
}

// ClearDocumentationURL clears the value of the "documentation_url" field.
func (puo *ProjectUpdateOne) ClearDocumentationURL() *ProjectUpdateOne {
	puo.mutation.ClearDocumentationURL()
	return puo
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (puo *ProjectUpdateOne) SetThumbnailURL(s string) *ProjectUpdateOne {
	puo.mutation.SetThumbnailURL(s)
	return puo
}

// SetNillableThumbnailURL sets the "thumbnail_url" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableThumbnailURL(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetThumbnailURL(*s)
	}
	return puo
}

// ClearThumbnailURL clears the value of the "thumbnail_url" field.
func (puo *ProjectUpdateOne) ClearThumbnailURL() *ProjectUpdateOne {
	puo.mutation.ClearThumbnailURL()
	return puo
}

// SetIsFeatured sets the "is_featured" field.
func (puo *ProjectUpdateOne) SetIsFeatured(b bool) *ProjectUpdateOne {
	puo.mutation.SetIsFeatured(b)
	return puo
}

// SetNillableIsFeatured sets the "is_featured" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableIsFeatured(b *bool) *ProjectUpdateOne {
	if b != nil {
		puo.SetIsFeatured(*b)
	}
	return puo
}

// SetIsPublic sets the "is_public" field.
func (puo *ProjectUpdateOne) SetIsPublic(b bool) *ProjectUpdateOne {
	puo.mutation.SetIsPublic(b)
	return puo
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableIsPublic(b *bool) *ProjectUpdateOne {
	if b != nil {
		puo.SetIsPublic(*b)
	}
	return puo
}

// SetViewCount sets the "view_count" field.
func (puo *ProjectUpdateOne) SetViewCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetViewCount()
	puo.mutation.SetViewCount(i)
	return puo
}

// SetNillableViewCount sets the "view_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableViewCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetViewCount(*i)
	}
	return puo
}

// AddViewCount adds i to the "view_count" field.
func (puo *ProjectUpdateOne) AddViewCount(i int) *ProjectUpdateOne {
	puo.mutation.AddViewCount(i)
	return puo
}

// SetStarCount sets the "star_count" field.
func (puo *ProjectUpdateOne) SetStarCount(i int) *ProjectUpdateOne {
	puo.mutation.ResetStarCount()
	puo.mutation.SetStarCount(i)
	return puo
}

// SetNillableStarCount sets the "star_count" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableStarCount(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetStarCount(*i)
	}
	return puo
}

// AddStarCount adds i to the "star_count" field.
func (puo *ProjectUpdateOne) AddStarCount(i int) *ProjectUpdateOne {
	puo.mutation.AddStarCount(i)
	return puo
}

// SetSortOrder sets the "sort_order" field.
func (puo *ProjectUpdateOne) SetSortOrder(i int) *ProjectUpdateOne {
	puo.mutation.ResetSortOrder()
	puo.mutation.SetSortOrder(i)
	return puo
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableSortOrder(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetSortOrder(*i)
	}
	return puo
}

// AddSortOrder adds i to the "sort_order" field.
func (puo *ProjectUpdateOne) AddSortOrder(i int) *ProjectUpdateOne {
	puo.mutation.AddSortOrder(i)
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *ProjectUpdateOne) SetCreatedAt(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableCreatedAt(t *time.Time) *ProjectUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProjectUpdateOne) SetUpdatedAt(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (puo *ProjectUpdateOne) SetUserID(id uuid.UUID) *ProjectUpdateOne {
	puo.mutation.SetUserID(id)
	return puo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableUserID(id *uuid.UUID) *ProjectUpdateOne {
	if id != nil {
		puo = puo.SetUserID(*id)
	}
	return puo
}

// SetUser sets the "user" edge to the User entity.
func (puo *ProjectUpdateOne) SetUser(u *User) *ProjectUpdateOne {
	return puo.SetUserID(u.ID)
}

// AddTechnologyIDs adds the "technologies" edge to the ProjectTechnology entity by IDs.
func (puo *ProjectUpdateOne) AddTechnologyIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.AddTechnologyIDs(ids...)
	return puo
}

// AddTechnologies adds the "technologies" edges to the ProjectTechnology entity.
func (puo *ProjectUpdateOne) AddTechnologies(p ...*ProjectTechnology) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddTechnologyIDs(ids...)
}

// SetDetailID sets the "detail" edge to the ProjectDetail entity by ID.
func (puo *ProjectUpdateOne) SetDetailID(id uuid.UUID) *ProjectUpdateOne {
	puo.mutation.SetDetailID(id)
	return puo
}

// SetNillableDetailID sets the "detail" edge to the ProjectDetail entity by ID if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDetailID(id *uuid.UUID) *ProjectUpdateOne {
	if id != nil {
		puo = puo.SetDetailID(*id)
	}
	return puo
}

// SetDetail sets the "detail" edge to the ProjectDetail entity.
func (puo *ProjectUpdateOne) SetDetail(p *ProjectDetail) *ProjectUpdateOne {
	return puo.SetDetailID(p.ID)
}

// AddImageIDs adds the "images" edge to the ProjectImage entity by IDs.
func (puo *ProjectUpdateOne) AddImageIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.AddImageIDs(ids...)
	return puo
}

// AddImages adds the "images" edges to the ProjectImage entity.
func (puo *ProjectUpdateOne) AddImages(p ...*ProjectImage) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddImageIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (puo *ProjectUpdateOne) Mutation() *ProjectMutation {
	return puo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (puo *ProjectUpdateOne) ClearUser() *ProjectUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// ClearTechnologies clears all "technologies" edges to the ProjectTechnology entity.
func (puo *ProjectUpdateOne) ClearTechnologies() *ProjectUpdateOne {
	puo.mutation.ClearTechnologies()
	return puo
}

// RemoveTechnologyIDs removes the "technologies" edge to ProjectTechnology entities by IDs.
func (puo *ProjectUpdateOne) RemoveTechnologyIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.RemoveTechnologyIDs(ids...)
	return puo
}

// RemoveTechnologies removes "technologies" edges to ProjectTechnology entities.
func (puo *ProjectUpdateOne) RemoveTechnologies(p ...*ProjectTechnology) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveTechnologyIDs(ids...)
}

// ClearDetail clears the "detail" edge to the ProjectDetail entity.
func (puo *ProjectUpdateOne) ClearDetail() *ProjectUpdateOne {
	puo.mutation.ClearDetail()
	return puo
}

// ClearImages clears all "images" edges to the ProjectImage entity.
func (puo *ProjectUpdateOne) ClearImages() *ProjectUpdateOne {
	puo.mutation.ClearImages()
	return puo
}

// RemoveImageIDs removes the "images" edge to ProjectImage entities by IDs.
func (puo *ProjectUpdateOne) RemoveImageIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.RemoveImageIDs(ids...)
	return puo
}

// RemoveImages removes "images" edges to ProjectImage entities.
func (puo *ProjectUpdateOne) RemoveImages(p ...*ProjectImage) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveImageIDs(ids...)
}

// Where appends a list predicates to the ProjectUpdate builder.
func (puo *ProjectUpdateOne) Where(ps ...predicate.Project) *ProjectUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProjectUpdateOne) Select(field string, fields ...string) *ProjectUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Project entity.
func (puo *ProjectUpdateOne) Save(ctx context.Context) (*Project, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProjectUpdateOne) SaveX(ctx context.Context) *Project {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProjectUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProjectUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := project.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProjectUpdateOne) check() error {
	if v, ok := puo.mutation.Title(); ok {
		if err := project.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Project.title": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Slug(); ok {
		if err := project.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Project.slug": %w`, err)}
		}
	}
	if v, ok := puo.mutation.ProjectType(); ok {
		if err := project.ProjectTypeValidator(v); err != nil {
			return &ValidationError{Name: "project_type", err: fmt.Errorf(`ent: validator failed for field "Project.project_type": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Status(); ok {
		if err := project.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Project.status": %w`, err)}
		}
	}
	if v, ok := puo.mutation.GithubURL(); ok {
		if err := project.GithubURLValidator(v); err != nil {
			return &ValidationError{Name: "github_url", err: fmt.Errorf(`ent: validator failed for field "Project.github_url": %w`, err)}
		}
	}
	if v, ok := puo.mutation.DemoURL(); ok {
		if err := project.DemoURLValidator(v); err != nil {
			return &ValidationError{Name: "demo_url", err: fmt.Errorf(`ent: validator failed for field "Project.demo_url": %w`, err)}
		}
	}
	if v, ok := puo.mutation.DocumentationURL(); ok {
		if err := project.DocumentationURLValidator(v); err != nil {
			return &ValidationError{Name: "documentation_url", err: fmt.Errorf(`ent: validator failed for field "Project.documentation_url": %w`, err)}
		}
	}
	if v, ok := puo.mutation.ThumbnailURL(); ok {
		if err := project.ThumbnailURLValidator(v); err != nil {
			return &ValidationError{Name: "thumbnail_url", err: fmt.Errorf(`ent: validator failed for field "Project.thumbnail_url": %w`, err)}
		}
	}
	return nil
}

func (puo *ProjectUpdateOne) sqlSave(ctx context.Context) (_node *Project, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Project.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, project.FieldID)
		for _, f := range fields {
			if !project.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != project.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UserID(); ok {
		_spec.SetField(project.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(project.FieldTitle, field.TypeString, value)
	}
	if value, ok := puo.mutation.Slug(); ok {
		_spec.SetField(project.FieldSlug, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(project.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(project.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.ProjectType(); ok {
		_spec.SetField(project.FieldProjectType, field.TypeString, value)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(project.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.StartDate(); ok {
		_spec.SetField(project.FieldStartDate, field.TypeTime, value)
	}
	if puo.mutation.StartDateCleared() {
		_spec.ClearField(project.FieldStartDate, field.TypeTime)
	}
	if value, ok := puo.mutation.EndDate(); ok {
		_spec.SetField(project.FieldEndDate, field.TypeTime, value)
	}
	if puo.mutation.EndDateCleared() {
		_spec.ClearField(project.FieldEndDate, field.TypeTime)
	}
	if value, ok := puo.mutation.GithubURL(); ok {
		_spec.SetField(project.FieldGithubURL, field.TypeString, value)
	}
	if puo.mutation.GithubURLCleared() {
		_spec.ClearField(project.FieldGithubURL, field.TypeString)
	}
	if value, ok := puo.mutation.DemoURL(); ok {
		_spec.SetField(project.FieldDemoURL, field.TypeString, value)
	}
	if puo.mutation.DemoURLCleared() {
		_spec.ClearField(project.FieldDemoURL, field.TypeString)
	}
	if value, ok := puo.mutation.DocumentationURL(); ok {
		_spec.SetField(project.FieldDocumentationURL, field.TypeString, value)
	}
	if puo.mutation.DocumentationURLCleared() {
		_spec.ClearField(project.FieldDocumentationURL, field.TypeString)
	}
	if value, ok := puo.mutation.ThumbnailURL(); ok {
		_spec.SetField(project.FieldThumbnailURL, field.TypeString, value)
	}
	if puo.mutation.ThumbnailURLCleared() {
		_spec.ClearField(project.FieldThumbnailURL, field.TypeString)
	}
	if value, ok := puo.mutation.IsFeatured(); ok {
		_spec.SetField(project.FieldIsFeatured, field.TypeBool, value)
	}
	if value, ok := puo.mutation.IsPublic(); ok {
		_spec.SetField(project.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := puo.mutation.ViewCount(); ok {
		_spec.SetField(project.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedViewCount(); ok {
		_spec.AddField(project.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.StarCount(); ok {
		_spec.SetField(project.FieldStarCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedStarCount(); ok {
		_spec.AddField(project.FieldStarCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.SortOrder(); ok {
		_spec.SetField(project.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedSortOrder(); ok {
		_spec.AddField(project.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(project.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.UserTable,
			Columns: []string{project.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.UserTable,
			Columns: []string{project.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.TechnologiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.TechnologiesTable,
			Columns: []string{project.TechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttechnology.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedTechnologiesIDs(); len(nodes) > 0 && !puo.mutation.TechnologiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.TechnologiesTable,
			Columns: []string{project.TechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttechnology.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TechnologiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.TechnologiesTable,
			Columns: []string{project.TechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttechnology.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.DetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   project.DetailTable,
			Columns: []string{project.DetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectdetail.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   project.DetailTable,
			Columns: []string{project.DetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectdetail.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ImagesTable,
			Columns: []string{project.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectimage.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedImagesIDs(); len(nodes) > 0 && !puo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ImagesTable,
			Columns: []string{project.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectimage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ImagesTable,
			Columns: []string{project.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectimage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Project{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
