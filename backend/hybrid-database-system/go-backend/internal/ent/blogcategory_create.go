// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/blogcategory"
	"silan-backend/internal/ent/blogpost"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BlogCategoryCreate is the builder for creating a BlogCategory entity.
type BlogCategoryCreate struct {
	config
	mutation *BlogCategoryMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (bcc *BlogCategoryCreate) SetName(s string) *BlogCategoryCreate {
	bcc.mutation.SetName(s)
	return bcc
}

// SetSlug sets the "slug" field.
func (bcc *BlogCategoryCreate) SetSlug(s string) *BlogCategoryCreate {
	bcc.mutation.SetSlug(s)
	return bcc
}

// SetDescription sets the "description" field.
func (bcc *BlogCategoryCreate) SetDescription(s string) *BlogCategoryCreate {
	bcc.mutation.SetDescription(s)
	return bcc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bcc *BlogCategoryCreate) SetNillableDescription(s *string) *BlogCategoryCreate {
	if s != nil {
		bcc.SetDescription(*s)
	}
	return bcc
}

// SetColor sets the "color" field.
func (bcc *BlogCategoryCreate) SetColor(s string) *BlogCategoryCreate {
	bcc.mutation.SetColor(s)
	return bcc
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (bcc *BlogCategoryCreate) SetNillableColor(s *string) *BlogCategoryCreate {
	if s != nil {
		bcc.SetColor(*s)
	}
	return bcc
}

// SetIcon sets the "icon" field.
func (bcc *BlogCategoryCreate) SetIcon(s string) *BlogCategoryCreate {
	bcc.mutation.SetIcon(s)
	return bcc
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (bcc *BlogCategoryCreate) SetNillableIcon(s *string) *BlogCategoryCreate {
	if s != nil {
		bcc.SetIcon(*s)
	}
	return bcc
}

// SetPostCount sets the "post_count" field.
func (bcc *BlogCategoryCreate) SetPostCount(i int) *BlogCategoryCreate {
	bcc.mutation.SetPostCount(i)
	return bcc
}

// SetNillablePostCount sets the "post_count" field if the given value is not nil.
func (bcc *BlogCategoryCreate) SetNillablePostCount(i *int) *BlogCategoryCreate {
	if i != nil {
		bcc.SetPostCount(*i)
	}
	return bcc
}

// SetCreatedAt sets the "created_at" field.
func (bcc *BlogCategoryCreate) SetCreatedAt(t time.Time) *BlogCategoryCreate {
	bcc.mutation.SetCreatedAt(t)
	return bcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bcc *BlogCategoryCreate) SetNillableCreatedAt(t *time.Time) *BlogCategoryCreate {
	if t != nil {
		bcc.SetCreatedAt(*t)
	}
	return bcc
}

// SetUpdatedAt sets the "updated_at" field.
func (bcc *BlogCategoryCreate) SetUpdatedAt(t time.Time) *BlogCategoryCreate {
	bcc.mutation.SetUpdatedAt(t)
	return bcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bcc *BlogCategoryCreate) SetNillableUpdatedAt(t *time.Time) *BlogCategoryCreate {
	if t != nil {
		bcc.SetUpdatedAt(*t)
	}
	return bcc
}

// SetID sets the "id" field.
func (bcc *BlogCategoryCreate) SetID(u uuid.UUID) *BlogCategoryCreate {
	bcc.mutation.SetID(u)
	return bcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bcc *BlogCategoryCreate) SetNillableID(u *uuid.UUID) *BlogCategoryCreate {
	if u != nil {
		bcc.SetID(*u)
	}
	return bcc
}

// AddBlogPostIDs adds the "blog_posts" edge to the BlogPost entity by IDs.
func (bcc *BlogCategoryCreate) AddBlogPostIDs(ids ...uuid.UUID) *BlogCategoryCreate {
	bcc.mutation.AddBlogPostIDs(ids...)
	return bcc
}

// AddBlogPosts adds the "blog_posts" edges to the BlogPost entity.
func (bcc *BlogCategoryCreate) AddBlogPosts(b ...*BlogPost) *BlogCategoryCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bcc.AddBlogPostIDs(ids...)
}

// Mutation returns the BlogCategoryMutation object of the builder.
func (bcc *BlogCategoryCreate) Mutation() *BlogCategoryMutation {
	return bcc.mutation
}

// Save creates the BlogCategory in the database.
func (bcc *BlogCategoryCreate) Save(ctx context.Context) (*BlogCategory, error) {
	bcc.defaults()
	return withHooks(ctx, bcc.sqlSave, bcc.mutation, bcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bcc *BlogCategoryCreate) SaveX(ctx context.Context) *BlogCategory {
	v, err := bcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcc *BlogCategoryCreate) Exec(ctx context.Context) error {
	_, err := bcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcc *BlogCategoryCreate) ExecX(ctx context.Context) {
	if err := bcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcc *BlogCategoryCreate) defaults() {
	if _, ok := bcc.mutation.PostCount(); !ok {
		v := blogcategory.DefaultPostCount
		bcc.mutation.SetPostCount(v)
	}
	if _, ok := bcc.mutation.CreatedAt(); !ok {
		v := blogcategory.DefaultCreatedAt()
		bcc.mutation.SetCreatedAt(v)
	}
	if _, ok := bcc.mutation.UpdatedAt(); !ok {
		v := blogcategory.DefaultUpdatedAt()
		bcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bcc.mutation.ID(); !ok {
		v := blogcategory.DefaultID()
		bcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcc *BlogCategoryCreate) check() error {
	if _, ok := bcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "BlogCategory.name"`)}
	}
	if v, ok := bcc.mutation.Name(); ok {
		if err := blogcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "BlogCategory.name": %w`, err)}
		}
	}
	if _, ok := bcc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "BlogCategory.slug"`)}
	}
	if v, ok := bcc.mutation.Slug(); ok {
		if err := blogcategory.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "BlogCategory.slug": %w`, err)}
		}
	}
	if v, ok := bcc.mutation.Color(); ok {
		if err := blogcategory.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "BlogCategory.color": %w`, err)}
		}
	}
	if v, ok := bcc.mutation.Icon(); ok {
		if err := blogcategory.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`ent: validator failed for field "BlogCategory.icon": %w`, err)}
		}
	}
	if _, ok := bcc.mutation.PostCount(); !ok {
		return &ValidationError{Name: "post_count", err: errors.New(`ent: missing required field "BlogCategory.post_count"`)}
	}
	if _, ok := bcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlogCategory.created_at"`)}
	}
	if _, ok := bcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BlogCategory.updated_at"`)}
	}
	return nil
}

func (bcc *BlogCategoryCreate) sqlSave(ctx context.Context) (*BlogCategory, error) {
	if err := bcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bcc.mutation.id = &_node.ID
	bcc.mutation.done = true
	return _node, nil
}

func (bcc *BlogCategoryCreate) createSpec() (*BlogCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &BlogCategory{config: bcc.config}
		_spec = sqlgraph.NewCreateSpec(blogcategory.Table, sqlgraph.NewFieldSpec(blogcategory.FieldID, field.TypeUUID))
	)
	if id, ok := bcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bcc.mutation.Name(); ok {
		_spec.SetField(blogcategory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bcc.mutation.Slug(); ok {
		_spec.SetField(blogcategory.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := bcc.mutation.Description(); ok {
		_spec.SetField(blogcategory.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := bcc.mutation.Color(); ok {
		_spec.SetField(blogcategory.FieldColor, field.TypeString, value)
		_node.Color = value
	}
	if value, ok := bcc.mutation.Icon(); ok {
		_spec.SetField(blogcategory.FieldIcon, field.TypeString, value)
		_node.Icon = value
	}
	if value, ok := bcc.mutation.PostCount(); ok {
		_spec.SetField(blogcategory.FieldPostCount, field.TypeInt, value)
		_node.PostCount = value
	}
	if value, ok := bcc.mutation.CreatedAt(); ok {
		_spec.SetField(blogcategory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bcc.mutation.UpdatedAt(); ok {
		_spec.SetField(blogcategory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := bcc.mutation.BlogPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   blogcategory.BlogPostsTable,
			Columns: []string{blogcategory.BlogPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blogpost.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BlogCategoryCreateBulk is the builder for creating many BlogCategory entities in bulk.
type BlogCategoryCreateBulk struct {
	config
	err      error
	builders []*BlogCategoryCreate
}

// Save creates the BlogCategory entities in the database.
func (bccb *BlogCategoryCreateBulk) Save(ctx context.Context) ([]*BlogCategory, error) {
	if bccb.err != nil {
		return nil, bccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bccb.builders))
	nodes := make([]*BlogCategory, len(bccb.builders))
	mutators := make([]Mutator, len(bccb.builders))
	for i := range bccb.builders {
		func(i int, root context.Context) {
			builder := bccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlogCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bccb *BlogCategoryCreateBulk) SaveX(ctx context.Context) []*BlogCategory {
	v, err := bccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bccb *BlogCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := bccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bccb *BlogCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := bccb.Exec(ctx); err != nil {
		panic(err)
	}
}
