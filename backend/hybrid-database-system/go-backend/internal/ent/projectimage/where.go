// Code generated by ent, DO NOT EDIT.

package projectimage

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLTE(FieldID, id))
}

// ImageURL applies equality check predicate on the "image_url" field. It's identical to ImageURLEQ.
func ImageURL(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldImageURL, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldDescription, v))
}

// AltText applies equality check predicate on the "alt_text" field. It's identical to AltTextEQ.
func AltText(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldAltText, v))
}

// FileName applies equality check predicate on the "file_name" field. It's identical to FileNameEQ.
func FileName(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldFileName, v))
}

// FileSize applies equality check predicate on the "file_size" field. It's identical to FileSizeEQ.
func FileSize(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldFileSize, v))
}

// MimeType applies equality check predicate on the "mime_type" field. It's identical to MimeTypeEQ.
func MimeType(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldMimeType, v))
}

// Width applies equality check predicate on the "width" field. It's identical to WidthEQ.
func Width(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldWidth, v))
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldHeight, v))
}

// IsPrimary applies equality check predicate on the "is_primary" field. It's identical to IsPrimaryEQ.
func IsPrimary(v bool) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldIsPrimary, v))
}

// IsPublic applies equality check predicate on the "is_public" field. It's identical to IsPublicEQ.
func IsPublic(v bool) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldIsPublic, v))
}

// SortOrder applies equality check predicate on the "sort_order" field. It's identical to SortOrderEQ.
func SortOrder(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldSortOrder, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldUpdatedAt, v))
}

// ImageURLEQ applies the EQ predicate on the "image_url" field.
func ImageURLEQ(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldImageURL, v))
}

// ImageURLNEQ applies the NEQ predicate on the "image_url" field.
func ImageURLNEQ(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNEQ(FieldImageURL, v))
}

// ImageURLIn applies the In predicate on the "image_url" field.
func ImageURLIn(vs ...string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIn(FieldImageURL, vs...))
}

// ImageURLNotIn applies the NotIn predicate on the "image_url" field.
func ImageURLNotIn(vs ...string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotIn(FieldImageURL, vs...))
}

// ImageURLGT applies the GT predicate on the "image_url" field.
func ImageURLGT(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGT(FieldImageURL, v))
}

// ImageURLGTE applies the GTE predicate on the "image_url" field.
func ImageURLGTE(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGTE(FieldImageURL, v))
}

// ImageURLLT applies the LT predicate on the "image_url" field.
func ImageURLLT(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLT(FieldImageURL, v))
}

// ImageURLLTE applies the LTE predicate on the "image_url" field.
func ImageURLLTE(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLTE(FieldImageURL, v))
}

// ImageURLContains applies the Contains predicate on the "image_url" field.
func ImageURLContains(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldContains(FieldImageURL, v))
}

// ImageURLHasPrefix applies the HasPrefix predicate on the "image_url" field.
func ImageURLHasPrefix(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldHasPrefix(FieldImageURL, v))
}

// ImageURLHasSuffix applies the HasSuffix predicate on the "image_url" field.
func ImageURLHasSuffix(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldHasSuffix(FieldImageURL, v))
}

// ImageURLEqualFold applies the EqualFold predicate on the "image_url" field.
func ImageURLEqualFold(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEqualFold(FieldImageURL, v))
}

// ImageURLContainsFold applies the ContainsFold predicate on the "image_url" field.
func ImageURLContainsFold(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldContainsFold(FieldImageURL, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIsNull(FieldTitle))
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotNull(FieldTitle))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldContainsFold(FieldDescription, v))
}

// AltTextEQ applies the EQ predicate on the "alt_text" field.
func AltTextEQ(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldAltText, v))
}

// AltTextNEQ applies the NEQ predicate on the "alt_text" field.
func AltTextNEQ(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNEQ(FieldAltText, v))
}

// AltTextIn applies the In predicate on the "alt_text" field.
func AltTextIn(vs ...string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIn(FieldAltText, vs...))
}

// AltTextNotIn applies the NotIn predicate on the "alt_text" field.
func AltTextNotIn(vs ...string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotIn(FieldAltText, vs...))
}

// AltTextGT applies the GT predicate on the "alt_text" field.
func AltTextGT(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGT(FieldAltText, v))
}

// AltTextGTE applies the GTE predicate on the "alt_text" field.
func AltTextGTE(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGTE(FieldAltText, v))
}

// AltTextLT applies the LT predicate on the "alt_text" field.
func AltTextLT(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLT(FieldAltText, v))
}

// AltTextLTE applies the LTE predicate on the "alt_text" field.
func AltTextLTE(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLTE(FieldAltText, v))
}

// AltTextContains applies the Contains predicate on the "alt_text" field.
func AltTextContains(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldContains(FieldAltText, v))
}

// AltTextHasPrefix applies the HasPrefix predicate on the "alt_text" field.
func AltTextHasPrefix(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldHasPrefix(FieldAltText, v))
}

// AltTextHasSuffix applies the HasSuffix predicate on the "alt_text" field.
func AltTextHasSuffix(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldHasSuffix(FieldAltText, v))
}

// AltTextIsNil applies the IsNil predicate on the "alt_text" field.
func AltTextIsNil() predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIsNull(FieldAltText))
}

// AltTextNotNil applies the NotNil predicate on the "alt_text" field.
func AltTextNotNil() predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotNull(FieldAltText))
}

// AltTextEqualFold applies the EqualFold predicate on the "alt_text" field.
func AltTextEqualFold(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEqualFold(FieldAltText, v))
}

// AltTextContainsFold applies the ContainsFold predicate on the "alt_text" field.
func AltTextContainsFold(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldContainsFold(FieldAltText, v))
}

// ImageTypeEQ applies the EQ predicate on the "image_type" field.
func ImageTypeEQ(v ImageType) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldImageType, v))
}

// ImageTypeNEQ applies the NEQ predicate on the "image_type" field.
func ImageTypeNEQ(v ImageType) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNEQ(FieldImageType, v))
}

// ImageTypeIn applies the In predicate on the "image_type" field.
func ImageTypeIn(vs ...ImageType) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIn(FieldImageType, vs...))
}

// ImageTypeNotIn applies the NotIn predicate on the "image_type" field.
func ImageTypeNotIn(vs ...ImageType) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotIn(FieldImageType, vs...))
}

// FileNameEQ applies the EQ predicate on the "file_name" field.
func FileNameEQ(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldFileName, v))
}

// FileNameNEQ applies the NEQ predicate on the "file_name" field.
func FileNameNEQ(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNEQ(FieldFileName, v))
}

// FileNameIn applies the In predicate on the "file_name" field.
func FileNameIn(vs ...string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIn(FieldFileName, vs...))
}

// FileNameNotIn applies the NotIn predicate on the "file_name" field.
func FileNameNotIn(vs ...string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotIn(FieldFileName, vs...))
}

// FileNameGT applies the GT predicate on the "file_name" field.
func FileNameGT(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGT(FieldFileName, v))
}

// FileNameGTE applies the GTE predicate on the "file_name" field.
func FileNameGTE(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGTE(FieldFileName, v))
}

// FileNameLT applies the LT predicate on the "file_name" field.
func FileNameLT(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLT(FieldFileName, v))
}

// FileNameLTE applies the LTE predicate on the "file_name" field.
func FileNameLTE(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLTE(FieldFileName, v))
}

// FileNameContains applies the Contains predicate on the "file_name" field.
func FileNameContains(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldContains(FieldFileName, v))
}

// FileNameHasPrefix applies the HasPrefix predicate on the "file_name" field.
func FileNameHasPrefix(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldHasPrefix(FieldFileName, v))
}

// FileNameHasSuffix applies the HasSuffix predicate on the "file_name" field.
func FileNameHasSuffix(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldHasSuffix(FieldFileName, v))
}

// FileNameIsNil applies the IsNil predicate on the "file_name" field.
func FileNameIsNil() predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIsNull(FieldFileName))
}

// FileNameNotNil applies the NotNil predicate on the "file_name" field.
func FileNameNotNil() predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotNull(FieldFileName))
}

// FileNameEqualFold applies the EqualFold predicate on the "file_name" field.
func FileNameEqualFold(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEqualFold(FieldFileName, v))
}

// FileNameContainsFold applies the ContainsFold predicate on the "file_name" field.
func FileNameContainsFold(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldContainsFold(FieldFileName, v))
}

// FileSizeEQ applies the EQ predicate on the "file_size" field.
func FileSizeEQ(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldFileSize, v))
}

// FileSizeNEQ applies the NEQ predicate on the "file_size" field.
func FileSizeNEQ(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNEQ(FieldFileSize, v))
}

// FileSizeIn applies the In predicate on the "file_size" field.
func FileSizeIn(vs ...int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIn(FieldFileSize, vs...))
}

// FileSizeNotIn applies the NotIn predicate on the "file_size" field.
func FileSizeNotIn(vs ...int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotIn(FieldFileSize, vs...))
}

// FileSizeGT applies the GT predicate on the "file_size" field.
func FileSizeGT(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGT(FieldFileSize, v))
}

// FileSizeGTE applies the GTE predicate on the "file_size" field.
func FileSizeGTE(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGTE(FieldFileSize, v))
}

// FileSizeLT applies the LT predicate on the "file_size" field.
func FileSizeLT(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLT(FieldFileSize, v))
}

// FileSizeLTE applies the LTE predicate on the "file_size" field.
func FileSizeLTE(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLTE(FieldFileSize, v))
}

// FileSizeIsNil applies the IsNil predicate on the "file_size" field.
func FileSizeIsNil() predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIsNull(FieldFileSize))
}

// FileSizeNotNil applies the NotNil predicate on the "file_size" field.
func FileSizeNotNil() predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotNull(FieldFileSize))
}

// MimeTypeEQ applies the EQ predicate on the "mime_type" field.
func MimeTypeEQ(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldMimeType, v))
}

// MimeTypeNEQ applies the NEQ predicate on the "mime_type" field.
func MimeTypeNEQ(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNEQ(FieldMimeType, v))
}

// MimeTypeIn applies the In predicate on the "mime_type" field.
func MimeTypeIn(vs ...string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIn(FieldMimeType, vs...))
}

// MimeTypeNotIn applies the NotIn predicate on the "mime_type" field.
func MimeTypeNotIn(vs ...string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotIn(FieldMimeType, vs...))
}

// MimeTypeGT applies the GT predicate on the "mime_type" field.
func MimeTypeGT(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGT(FieldMimeType, v))
}

// MimeTypeGTE applies the GTE predicate on the "mime_type" field.
func MimeTypeGTE(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGTE(FieldMimeType, v))
}

// MimeTypeLT applies the LT predicate on the "mime_type" field.
func MimeTypeLT(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLT(FieldMimeType, v))
}

// MimeTypeLTE applies the LTE predicate on the "mime_type" field.
func MimeTypeLTE(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLTE(FieldMimeType, v))
}

// MimeTypeContains applies the Contains predicate on the "mime_type" field.
func MimeTypeContains(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldContains(FieldMimeType, v))
}

// MimeTypeHasPrefix applies the HasPrefix predicate on the "mime_type" field.
func MimeTypeHasPrefix(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldHasPrefix(FieldMimeType, v))
}

// MimeTypeHasSuffix applies the HasSuffix predicate on the "mime_type" field.
func MimeTypeHasSuffix(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldHasSuffix(FieldMimeType, v))
}

// MimeTypeIsNil applies the IsNil predicate on the "mime_type" field.
func MimeTypeIsNil() predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIsNull(FieldMimeType))
}

// MimeTypeNotNil applies the NotNil predicate on the "mime_type" field.
func MimeTypeNotNil() predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotNull(FieldMimeType))
}

// MimeTypeEqualFold applies the EqualFold predicate on the "mime_type" field.
func MimeTypeEqualFold(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEqualFold(FieldMimeType, v))
}

// MimeTypeContainsFold applies the ContainsFold predicate on the "mime_type" field.
func MimeTypeContainsFold(v string) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldContainsFold(FieldMimeType, v))
}

// WidthEQ applies the EQ predicate on the "width" field.
func WidthEQ(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldWidth, v))
}

// WidthNEQ applies the NEQ predicate on the "width" field.
func WidthNEQ(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNEQ(FieldWidth, v))
}

// WidthIn applies the In predicate on the "width" field.
func WidthIn(vs ...int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIn(FieldWidth, vs...))
}

// WidthNotIn applies the NotIn predicate on the "width" field.
func WidthNotIn(vs ...int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotIn(FieldWidth, vs...))
}

// WidthGT applies the GT predicate on the "width" field.
func WidthGT(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGT(FieldWidth, v))
}

// WidthGTE applies the GTE predicate on the "width" field.
func WidthGTE(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGTE(FieldWidth, v))
}

// WidthLT applies the LT predicate on the "width" field.
func WidthLT(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLT(FieldWidth, v))
}

// WidthLTE applies the LTE predicate on the "width" field.
func WidthLTE(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLTE(FieldWidth, v))
}

// WidthIsNil applies the IsNil predicate on the "width" field.
func WidthIsNil() predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIsNull(FieldWidth))
}

// WidthNotNil applies the NotNil predicate on the "width" field.
func WidthNotNil() predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotNull(FieldWidth))
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldHeight, v))
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNEQ(FieldHeight, v))
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIn(FieldHeight, vs...))
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotIn(FieldHeight, vs...))
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGT(FieldHeight, v))
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGTE(FieldHeight, v))
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLT(FieldHeight, v))
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLTE(FieldHeight, v))
}

// HeightIsNil applies the IsNil predicate on the "height" field.
func HeightIsNil() predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIsNull(FieldHeight))
}

// HeightNotNil applies the NotNil predicate on the "height" field.
func HeightNotNil() predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotNull(FieldHeight))
}

// IsPrimaryEQ applies the EQ predicate on the "is_primary" field.
func IsPrimaryEQ(v bool) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldIsPrimary, v))
}

// IsPrimaryNEQ applies the NEQ predicate on the "is_primary" field.
func IsPrimaryNEQ(v bool) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNEQ(FieldIsPrimary, v))
}

// IsPublicEQ applies the EQ predicate on the "is_public" field.
func IsPublicEQ(v bool) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldIsPublic, v))
}

// IsPublicNEQ applies the NEQ predicate on the "is_public" field.
func IsPublicNEQ(v bool) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNEQ(FieldIsPublic, v))
}

// SortOrderEQ applies the EQ predicate on the "sort_order" field.
func SortOrderEQ(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldSortOrder, v))
}

// SortOrderNEQ applies the NEQ predicate on the "sort_order" field.
func SortOrderNEQ(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNEQ(FieldSortOrder, v))
}

// SortOrderIn applies the In predicate on the "sort_order" field.
func SortOrderIn(vs ...int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIn(FieldSortOrder, vs...))
}

// SortOrderNotIn applies the NotIn predicate on the "sort_order" field.
func SortOrderNotIn(vs ...int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotIn(FieldSortOrder, vs...))
}

// SortOrderGT applies the GT predicate on the "sort_order" field.
func SortOrderGT(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGT(FieldSortOrder, v))
}

// SortOrderGTE applies the GTE predicate on the "sort_order" field.
func SortOrderGTE(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGTE(FieldSortOrder, v))
}

// SortOrderLT applies the LT predicate on the "sort_order" field.
func SortOrderLT(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLT(FieldSortOrder, v))
}

// SortOrderLTE applies the LTE predicate on the "sort_order" field.
func SortOrderLTE(v int) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLTE(FieldSortOrder, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProjectImage {
	return predicate.ProjectImage(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.ProjectImage {
	return predicate.ProjectImage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.ProjectImage {
	return predicate.ProjectImage(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProjectImage) predicate.ProjectImage {
	return predicate.ProjectImage(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProjectImage) predicate.ProjectImage {
	return predicate.ProjectImage(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProjectImage) predicate.ProjectImage {
	return predicate.ProjectImage(sql.NotPredicates(p))
}
