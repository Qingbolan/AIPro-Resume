// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/user"
	"silan-backend/internal/ent/workexperience"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// WorkExperience is the model entity for the WorkExperience schema.
type WorkExperience struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Company holds the value of the "company" field.
	Company string `json:"company,omitempty"`
	// Position holds the value of the "position" field.
	Position string `json:"position,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// IsCurrent holds the value of the "is_current" field.
	IsCurrent bool `json:"is_current,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// CompanyWebsite holds the value of the "company_website" field.
	CompanyWebsite string `json:"company_website,omitempty"`
	// CompanyLogoURL holds the value of the "company_logo_url" field.
	CompanyLogoURL string `json:"company_logo_url,omitempty"`
	// SortOrder holds the value of the "sort_order" field.
	SortOrder int `json:"sort_order,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkExperienceQuery when eager-loading is set.
	Edges                WorkExperienceEdges `json:"edges"`
	user_work_experience *uuid.UUID
	selectValues         sql.SelectValues
}

// WorkExperienceEdges holds the relations/edges for other nodes in the graph.
type WorkExperienceEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkExperienceEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkExperience) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workexperience.FieldIsCurrent:
			values[i] = new(sql.NullBool)
		case workexperience.FieldSortOrder:
			values[i] = new(sql.NullInt64)
		case workexperience.FieldCompany, workexperience.FieldPosition, workexperience.FieldLocation, workexperience.FieldCompanyWebsite, workexperience.FieldCompanyLogoURL:
			values[i] = new(sql.NullString)
		case workexperience.FieldStartDate, workexperience.FieldEndDate, workexperience.FieldCreatedAt, workexperience.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case workexperience.FieldID, workexperience.FieldUserID:
			values[i] = new(uuid.UUID)
		case workexperience.ForeignKeys[0]: // user_work_experience
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkExperience fields.
func (we *WorkExperience) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workexperience.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				we.ID = *value
			}
		case workexperience.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				we.UserID = *value
			}
		case workexperience.FieldCompany:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company", values[i])
			} else if value.Valid {
				we.Company = value.String
			}
		case workexperience.FieldPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				we.Position = value.String
			}
		case workexperience.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				we.StartDate = value.Time
			}
		case workexperience.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				we.EndDate = value.Time
			}
		case workexperience.FieldIsCurrent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_current", values[i])
			} else if value.Valid {
				we.IsCurrent = value.Bool
			}
		case workexperience.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				we.Location = value.String
			}
		case workexperience.FieldCompanyWebsite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company_website", values[i])
			} else if value.Valid {
				we.CompanyWebsite = value.String
			}
		case workexperience.FieldCompanyLogoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company_logo_url", values[i])
			} else if value.Valid {
				we.CompanyLogoURL = value.String
			}
		case workexperience.FieldSortOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_order", values[i])
			} else if value.Valid {
				we.SortOrder = int(value.Int64)
			}
		case workexperience.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				we.CreatedAt = value.Time
			}
		case workexperience.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				we.UpdatedAt = value.Time
			}
		case workexperience.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_work_experience", values[i])
			} else if value.Valid {
				we.user_work_experience = new(uuid.UUID)
				*we.user_work_experience = *value.S.(*uuid.UUID)
			}
		default:
			we.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkExperience.
// This includes values selected through modifiers, order, etc.
func (we *WorkExperience) Value(name string) (ent.Value, error) {
	return we.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the WorkExperience entity.
func (we *WorkExperience) QueryUser() *UserQuery {
	return NewWorkExperienceClient(we.config).QueryUser(we)
}

// Update returns a builder for updating this WorkExperience.
// Note that you need to call WorkExperience.Unwrap() before calling this method if this WorkExperience
// was returned from a transaction, and the transaction was committed or rolled back.
func (we *WorkExperience) Update() *WorkExperienceUpdateOne {
	return NewWorkExperienceClient(we.config).UpdateOne(we)
}

// Unwrap unwraps the WorkExperience entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (we *WorkExperience) Unwrap() *WorkExperience {
	_tx, ok := we.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkExperience is not a transactional entity")
	}
	we.config.driver = _tx.drv
	return we
}

// String implements the fmt.Stringer.
func (we *WorkExperience) String() string {
	var builder strings.Builder
	builder.WriteString("WorkExperience(")
	builder.WriteString(fmt.Sprintf("id=%v, ", we.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", we.UserID))
	builder.WriteString(", ")
	builder.WriteString("company=")
	builder.WriteString(we.Company)
	builder.WriteString(", ")
	builder.WriteString("position=")
	builder.WriteString(we.Position)
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(we.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(we.EndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_current=")
	builder.WriteString(fmt.Sprintf("%v", we.IsCurrent))
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(we.Location)
	builder.WriteString(", ")
	builder.WriteString("company_website=")
	builder.WriteString(we.CompanyWebsite)
	builder.WriteString(", ")
	builder.WriteString("company_logo_url=")
	builder.WriteString(we.CompanyLogoURL)
	builder.WriteString(", ")
	builder.WriteString("sort_order=")
	builder.WriteString(fmt.Sprintf("%v", we.SortOrder))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(we.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(we.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// WorkExperiences is a parsable slice of WorkExperience.
type WorkExperiences []*WorkExperience
