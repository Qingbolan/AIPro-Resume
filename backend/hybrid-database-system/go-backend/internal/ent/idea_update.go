// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/idea"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// IdeaUpdate is the builder for updating Idea entities.
type IdeaUpdate struct {
	config
	hooks    []Hook
	mutation *IdeaMutation
}

// Where appends a list predicates to the IdeaUpdate builder.
func (iu *IdeaUpdate) Where(ps ...predicate.Idea) *IdeaUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetTitle sets the "title" field.
func (iu *IdeaUpdate) SetTitle(s string) *IdeaUpdate {
	iu.mutation.SetTitle(s)
	return iu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillableTitle(s *string) *IdeaUpdate {
	if s != nil {
		iu.SetTitle(*s)
	}
	return iu
}

// SetSlug sets the "slug" field.
func (iu *IdeaUpdate) SetSlug(s string) *IdeaUpdate {
	iu.mutation.SetSlug(s)
	return iu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillableSlug(s *string) *IdeaUpdate {
	if s != nil {
		iu.SetSlug(*s)
	}
	return iu
}

// SetAbstract sets the "abstract" field.
func (iu *IdeaUpdate) SetAbstract(s string) *IdeaUpdate {
	iu.mutation.SetAbstract(s)
	return iu
}

// SetNillableAbstract sets the "abstract" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillableAbstract(s *string) *IdeaUpdate {
	if s != nil {
		iu.SetAbstract(*s)
	}
	return iu
}

// ClearAbstract clears the value of the "abstract" field.
func (iu *IdeaUpdate) ClearAbstract() *IdeaUpdate {
	iu.mutation.ClearAbstract()
	return iu
}

// SetMotivation sets the "motivation" field.
func (iu *IdeaUpdate) SetMotivation(s string) *IdeaUpdate {
	iu.mutation.SetMotivation(s)
	return iu
}

// SetNillableMotivation sets the "motivation" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillableMotivation(s *string) *IdeaUpdate {
	if s != nil {
		iu.SetMotivation(*s)
	}
	return iu
}

// ClearMotivation clears the value of the "motivation" field.
func (iu *IdeaUpdate) ClearMotivation() *IdeaUpdate {
	iu.mutation.ClearMotivation()
	return iu
}

// SetMethodology sets the "methodology" field.
func (iu *IdeaUpdate) SetMethodology(s string) *IdeaUpdate {
	iu.mutation.SetMethodology(s)
	return iu
}

// SetNillableMethodology sets the "methodology" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillableMethodology(s *string) *IdeaUpdate {
	if s != nil {
		iu.SetMethodology(*s)
	}
	return iu
}

// ClearMethodology clears the value of the "methodology" field.
func (iu *IdeaUpdate) ClearMethodology() *IdeaUpdate {
	iu.mutation.ClearMethodology()
	return iu
}

// SetExpectedOutcome sets the "expected_outcome" field.
func (iu *IdeaUpdate) SetExpectedOutcome(s string) *IdeaUpdate {
	iu.mutation.SetExpectedOutcome(s)
	return iu
}

// SetNillableExpectedOutcome sets the "expected_outcome" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillableExpectedOutcome(s *string) *IdeaUpdate {
	if s != nil {
		iu.SetExpectedOutcome(*s)
	}
	return iu
}

// ClearExpectedOutcome clears the value of the "expected_outcome" field.
func (iu *IdeaUpdate) ClearExpectedOutcome() *IdeaUpdate {
	iu.mutation.ClearExpectedOutcome()
	return iu
}

// SetStatus sets the "status" field.
func (iu *IdeaUpdate) SetStatus(i idea.Status) *IdeaUpdate {
	iu.mutation.SetStatus(i)
	return iu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillableStatus(i *idea.Status) *IdeaUpdate {
	if i != nil {
		iu.SetStatus(*i)
	}
	return iu
}

// SetPriority sets the "priority" field.
func (iu *IdeaUpdate) SetPriority(i idea.Priority) *IdeaUpdate {
	iu.mutation.SetPriority(i)
	return iu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillablePriority(i *idea.Priority) *IdeaUpdate {
	if i != nil {
		iu.SetPriority(*i)
	}
	return iu
}

// SetEstimatedDurationMonths sets the "estimated_duration_months" field.
func (iu *IdeaUpdate) SetEstimatedDurationMonths(i int) *IdeaUpdate {
	iu.mutation.ResetEstimatedDurationMonths()
	iu.mutation.SetEstimatedDurationMonths(i)
	return iu
}

// SetNillableEstimatedDurationMonths sets the "estimated_duration_months" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillableEstimatedDurationMonths(i *int) *IdeaUpdate {
	if i != nil {
		iu.SetEstimatedDurationMonths(*i)
	}
	return iu
}

// AddEstimatedDurationMonths adds i to the "estimated_duration_months" field.
func (iu *IdeaUpdate) AddEstimatedDurationMonths(i int) *IdeaUpdate {
	iu.mutation.AddEstimatedDurationMonths(i)
	return iu
}

// ClearEstimatedDurationMonths clears the value of the "estimated_duration_months" field.
func (iu *IdeaUpdate) ClearEstimatedDurationMonths() *IdeaUpdate {
	iu.mutation.ClearEstimatedDurationMonths()
	return iu
}

// SetRequiredResources sets the "required_resources" field.
func (iu *IdeaUpdate) SetRequiredResources(s string) *IdeaUpdate {
	iu.mutation.SetRequiredResources(s)
	return iu
}

// SetNillableRequiredResources sets the "required_resources" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillableRequiredResources(s *string) *IdeaUpdate {
	if s != nil {
		iu.SetRequiredResources(*s)
	}
	return iu
}

// ClearRequiredResources clears the value of the "required_resources" field.
func (iu *IdeaUpdate) ClearRequiredResources() *IdeaUpdate {
	iu.mutation.ClearRequiredResources()
	return iu
}

// SetCollaborationNeeded sets the "collaboration_needed" field.
func (iu *IdeaUpdate) SetCollaborationNeeded(b bool) *IdeaUpdate {
	iu.mutation.SetCollaborationNeeded(b)
	return iu
}

// SetNillableCollaborationNeeded sets the "collaboration_needed" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillableCollaborationNeeded(b *bool) *IdeaUpdate {
	if b != nil {
		iu.SetCollaborationNeeded(*b)
	}
	return iu
}

// SetFundingRequired sets the "funding_required" field.
func (iu *IdeaUpdate) SetFundingRequired(b bool) *IdeaUpdate {
	iu.mutation.SetFundingRequired(b)
	return iu
}

// SetNillableFundingRequired sets the "funding_required" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillableFundingRequired(b *bool) *IdeaUpdate {
	if b != nil {
		iu.SetFundingRequired(*b)
	}
	return iu
}

// SetEstimatedBudget sets the "estimated_budget" field.
func (iu *IdeaUpdate) SetEstimatedBudget(f float64) *IdeaUpdate {
	iu.mutation.ResetEstimatedBudget()
	iu.mutation.SetEstimatedBudget(f)
	return iu
}

// SetNillableEstimatedBudget sets the "estimated_budget" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillableEstimatedBudget(f *float64) *IdeaUpdate {
	if f != nil {
		iu.SetEstimatedBudget(*f)
	}
	return iu
}

// AddEstimatedBudget adds f to the "estimated_budget" field.
func (iu *IdeaUpdate) AddEstimatedBudget(f float64) *IdeaUpdate {
	iu.mutation.AddEstimatedBudget(f)
	return iu
}

// ClearEstimatedBudget clears the value of the "estimated_budget" field.
func (iu *IdeaUpdate) ClearEstimatedBudget() *IdeaUpdate {
	iu.mutation.ClearEstimatedBudget()
	return iu
}

// SetIsPublic sets the "is_public" field.
func (iu *IdeaUpdate) SetIsPublic(b bool) *IdeaUpdate {
	iu.mutation.SetIsPublic(b)
	return iu
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillableIsPublic(b *bool) *IdeaUpdate {
	if b != nil {
		iu.SetIsPublic(*b)
	}
	return iu
}

// SetViewCount sets the "view_count" field.
func (iu *IdeaUpdate) SetViewCount(i int) *IdeaUpdate {
	iu.mutation.ResetViewCount()
	iu.mutation.SetViewCount(i)
	return iu
}

// SetNillableViewCount sets the "view_count" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillableViewCount(i *int) *IdeaUpdate {
	if i != nil {
		iu.SetViewCount(*i)
	}
	return iu
}

// AddViewCount adds i to the "view_count" field.
func (iu *IdeaUpdate) AddViewCount(i int) *IdeaUpdate {
	iu.mutation.AddViewCount(i)
	return iu
}

// SetLikeCount sets the "like_count" field.
func (iu *IdeaUpdate) SetLikeCount(i int) *IdeaUpdate {
	iu.mutation.ResetLikeCount()
	iu.mutation.SetLikeCount(i)
	return iu
}

// SetNillableLikeCount sets the "like_count" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillableLikeCount(i *int) *IdeaUpdate {
	if i != nil {
		iu.SetLikeCount(*i)
	}
	return iu
}

// AddLikeCount adds i to the "like_count" field.
func (iu *IdeaUpdate) AddLikeCount(i int) *IdeaUpdate {
	iu.mutation.AddLikeCount(i)
	return iu
}

// SetCreatedAt sets the "created_at" field.
func (iu *IdeaUpdate) SetCreatedAt(t time.Time) *IdeaUpdate {
	iu.mutation.SetCreatedAt(t)
	return iu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillableCreatedAt(t *time.Time) *IdeaUpdate {
	if t != nil {
		iu.SetCreatedAt(*t)
	}
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *IdeaUpdate) SetUpdatedAt(t time.Time) *IdeaUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (iu *IdeaUpdate) SetUserID(id uuid.UUID) *IdeaUpdate {
	iu.mutation.SetUserID(id)
	return iu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (iu *IdeaUpdate) SetNillableUserID(id *uuid.UUID) *IdeaUpdate {
	if id != nil {
		iu = iu.SetUserID(*id)
	}
	return iu
}

// SetUser sets the "user" edge to the User entity.
func (iu *IdeaUpdate) SetUser(u *User) *IdeaUpdate {
	return iu.SetUserID(u.ID)
}

// Mutation returns the IdeaMutation object of the builder.
func (iu *IdeaUpdate) Mutation() *IdeaMutation {
	return iu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (iu *IdeaUpdate) ClearUser() *IdeaUpdate {
	iu.mutation.ClearUser()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IdeaUpdate) Save(ctx context.Context) (int, error) {
	iu.defaults()
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IdeaUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IdeaUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IdeaUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *IdeaUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		v := idea.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *IdeaUpdate) check() error {
	if v, ok := iu.mutation.Title(); ok {
		if err := idea.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Idea.title": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Slug(); ok {
		if err := idea.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Idea.slug": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Status(); ok {
		if err := idea.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Idea.status": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Priority(); ok {
		if err := idea.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "Idea.priority": %w`, err)}
		}
	}
	return nil
}

func (iu *IdeaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(idea.Table, idea.Columns, sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Title(); ok {
		_spec.SetField(idea.FieldTitle, field.TypeString, value)
	}
	if value, ok := iu.mutation.Slug(); ok {
		_spec.SetField(idea.FieldSlug, field.TypeString, value)
	}
	if value, ok := iu.mutation.Abstract(); ok {
		_spec.SetField(idea.FieldAbstract, field.TypeString, value)
	}
	if iu.mutation.AbstractCleared() {
		_spec.ClearField(idea.FieldAbstract, field.TypeString)
	}
	if value, ok := iu.mutation.Motivation(); ok {
		_spec.SetField(idea.FieldMotivation, field.TypeString, value)
	}
	if iu.mutation.MotivationCleared() {
		_spec.ClearField(idea.FieldMotivation, field.TypeString)
	}
	if value, ok := iu.mutation.Methodology(); ok {
		_spec.SetField(idea.FieldMethodology, field.TypeString, value)
	}
	if iu.mutation.MethodologyCleared() {
		_spec.ClearField(idea.FieldMethodology, field.TypeString)
	}
	if value, ok := iu.mutation.ExpectedOutcome(); ok {
		_spec.SetField(idea.FieldExpectedOutcome, field.TypeString, value)
	}
	if iu.mutation.ExpectedOutcomeCleared() {
		_spec.ClearField(idea.FieldExpectedOutcome, field.TypeString)
	}
	if value, ok := iu.mutation.Status(); ok {
		_spec.SetField(idea.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := iu.mutation.Priority(); ok {
		_spec.SetField(idea.FieldPriority, field.TypeEnum, value)
	}
	if value, ok := iu.mutation.EstimatedDurationMonths(); ok {
		_spec.SetField(idea.FieldEstimatedDurationMonths, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedEstimatedDurationMonths(); ok {
		_spec.AddField(idea.FieldEstimatedDurationMonths, field.TypeInt, value)
	}
	if iu.mutation.EstimatedDurationMonthsCleared() {
		_spec.ClearField(idea.FieldEstimatedDurationMonths, field.TypeInt)
	}
	if value, ok := iu.mutation.RequiredResources(); ok {
		_spec.SetField(idea.FieldRequiredResources, field.TypeString, value)
	}
	if iu.mutation.RequiredResourcesCleared() {
		_spec.ClearField(idea.FieldRequiredResources, field.TypeString)
	}
	if value, ok := iu.mutation.CollaborationNeeded(); ok {
		_spec.SetField(idea.FieldCollaborationNeeded, field.TypeBool, value)
	}
	if value, ok := iu.mutation.FundingRequired(); ok {
		_spec.SetField(idea.FieldFundingRequired, field.TypeBool, value)
	}
	if value, ok := iu.mutation.EstimatedBudget(); ok {
		_spec.SetField(idea.FieldEstimatedBudget, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedEstimatedBudget(); ok {
		_spec.AddField(idea.FieldEstimatedBudget, field.TypeFloat64, value)
	}
	if iu.mutation.EstimatedBudgetCleared() {
		_spec.ClearField(idea.FieldEstimatedBudget, field.TypeFloat64)
	}
	if value, ok := iu.mutation.IsPublic(); ok {
		_spec.SetField(idea.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := iu.mutation.ViewCount(); ok {
		_spec.SetField(idea.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedViewCount(); ok {
		_spec.AddField(idea.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := iu.mutation.LikeCount(); ok {
		_spec.SetField(idea.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedLikeCount(); ok {
		_spec.AddField(idea.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := iu.mutation.CreatedAt(); ok {
		_spec.SetField(idea.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(idea.FieldUpdatedAt, field.TypeTime, value)
	}
	if iu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   idea.UserTable,
			Columns: []string{idea.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   idea.UserTable,
			Columns: []string{idea.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{idea.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// IdeaUpdateOne is the builder for updating a single Idea entity.
type IdeaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IdeaMutation
}

// SetTitle sets the "title" field.
func (iuo *IdeaUpdateOne) SetTitle(s string) *IdeaUpdateOne {
	iuo.mutation.SetTitle(s)
	return iuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableTitle(s *string) *IdeaUpdateOne {
	if s != nil {
		iuo.SetTitle(*s)
	}
	return iuo
}

// SetSlug sets the "slug" field.
func (iuo *IdeaUpdateOne) SetSlug(s string) *IdeaUpdateOne {
	iuo.mutation.SetSlug(s)
	return iuo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableSlug(s *string) *IdeaUpdateOne {
	if s != nil {
		iuo.SetSlug(*s)
	}
	return iuo
}

// SetAbstract sets the "abstract" field.
func (iuo *IdeaUpdateOne) SetAbstract(s string) *IdeaUpdateOne {
	iuo.mutation.SetAbstract(s)
	return iuo
}

// SetNillableAbstract sets the "abstract" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableAbstract(s *string) *IdeaUpdateOne {
	if s != nil {
		iuo.SetAbstract(*s)
	}
	return iuo
}

// ClearAbstract clears the value of the "abstract" field.
func (iuo *IdeaUpdateOne) ClearAbstract() *IdeaUpdateOne {
	iuo.mutation.ClearAbstract()
	return iuo
}

// SetMotivation sets the "motivation" field.
func (iuo *IdeaUpdateOne) SetMotivation(s string) *IdeaUpdateOne {
	iuo.mutation.SetMotivation(s)
	return iuo
}

// SetNillableMotivation sets the "motivation" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableMotivation(s *string) *IdeaUpdateOne {
	if s != nil {
		iuo.SetMotivation(*s)
	}
	return iuo
}

// ClearMotivation clears the value of the "motivation" field.
func (iuo *IdeaUpdateOne) ClearMotivation() *IdeaUpdateOne {
	iuo.mutation.ClearMotivation()
	return iuo
}

// SetMethodology sets the "methodology" field.
func (iuo *IdeaUpdateOne) SetMethodology(s string) *IdeaUpdateOne {
	iuo.mutation.SetMethodology(s)
	return iuo
}

// SetNillableMethodology sets the "methodology" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableMethodology(s *string) *IdeaUpdateOne {
	if s != nil {
		iuo.SetMethodology(*s)
	}
	return iuo
}

// ClearMethodology clears the value of the "methodology" field.
func (iuo *IdeaUpdateOne) ClearMethodology() *IdeaUpdateOne {
	iuo.mutation.ClearMethodology()
	return iuo
}

// SetExpectedOutcome sets the "expected_outcome" field.
func (iuo *IdeaUpdateOne) SetExpectedOutcome(s string) *IdeaUpdateOne {
	iuo.mutation.SetExpectedOutcome(s)
	return iuo
}

// SetNillableExpectedOutcome sets the "expected_outcome" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableExpectedOutcome(s *string) *IdeaUpdateOne {
	if s != nil {
		iuo.SetExpectedOutcome(*s)
	}
	return iuo
}

// ClearExpectedOutcome clears the value of the "expected_outcome" field.
func (iuo *IdeaUpdateOne) ClearExpectedOutcome() *IdeaUpdateOne {
	iuo.mutation.ClearExpectedOutcome()
	return iuo
}

// SetStatus sets the "status" field.
func (iuo *IdeaUpdateOne) SetStatus(i idea.Status) *IdeaUpdateOne {
	iuo.mutation.SetStatus(i)
	return iuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableStatus(i *idea.Status) *IdeaUpdateOne {
	if i != nil {
		iuo.SetStatus(*i)
	}
	return iuo
}

// SetPriority sets the "priority" field.
func (iuo *IdeaUpdateOne) SetPriority(i idea.Priority) *IdeaUpdateOne {
	iuo.mutation.SetPriority(i)
	return iuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillablePriority(i *idea.Priority) *IdeaUpdateOne {
	if i != nil {
		iuo.SetPriority(*i)
	}
	return iuo
}

// SetEstimatedDurationMonths sets the "estimated_duration_months" field.
func (iuo *IdeaUpdateOne) SetEstimatedDurationMonths(i int) *IdeaUpdateOne {
	iuo.mutation.ResetEstimatedDurationMonths()
	iuo.mutation.SetEstimatedDurationMonths(i)
	return iuo
}

// SetNillableEstimatedDurationMonths sets the "estimated_duration_months" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableEstimatedDurationMonths(i *int) *IdeaUpdateOne {
	if i != nil {
		iuo.SetEstimatedDurationMonths(*i)
	}
	return iuo
}

// AddEstimatedDurationMonths adds i to the "estimated_duration_months" field.
func (iuo *IdeaUpdateOne) AddEstimatedDurationMonths(i int) *IdeaUpdateOne {
	iuo.mutation.AddEstimatedDurationMonths(i)
	return iuo
}

// ClearEstimatedDurationMonths clears the value of the "estimated_duration_months" field.
func (iuo *IdeaUpdateOne) ClearEstimatedDurationMonths() *IdeaUpdateOne {
	iuo.mutation.ClearEstimatedDurationMonths()
	return iuo
}

// SetRequiredResources sets the "required_resources" field.
func (iuo *IdeaUpdateOne) SetRequiredResources(s string) *IdeaUpdateOne {
	iuo.mutation.SetRequiredResources(s)
	return iuo
}

// SetNillableRequiredResources sets the "required_resources" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableRequiredResources(s *string) *IdeaUpdateOne {
	if s != nil {
		iuo.SetRequiredResources(*s)
	}
	return iuo
}

// ClearRequiredResources clears the value of the "required_resources" field.
func (iuo *IdeaUpdateOne) ClearRequiredResources() *IdeaUpdateOne {
	iuo.mutation.ClearRequiredResources()
	return iuo
}

// SetCollaborationNeeded sets the "collaboration_needed" field.
func (iuo *IdeaUpdateOne) SetCollaborationNeeded(b bool) *IdeaUpdateOne {
	iuo.mutation.SetCollaborationNeeded(b)
	return iuo
}

// SetNillableCollaborationNeeded sets the "collaboration_needed" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableCollaborationNeeded(b *bool) *IdeaUpdateOne {
	if b != nil {
		iuo.SetCollaborationNeeded(*b)
	}
	return iuo
}

// SetFundingRequired sets the "funding_required" field.
func (iuo *IdeaUpdateOne) SetFundingRequired(b bool) *IdeaUpdateOne {
	iuo.mutation.SetFundingRequired(b)
	return iuo
}

// SetNillableFundingRequired sets the "funding_required" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableFundingRequired(b *bool) *IdeaUpdateOne {
	if b != nil {
		iuo.SetFundingRequired(*b)
	}
	return iuo
}

// SetEstimatedBudget sets the "estimated_budget" field.
func (iuo *IdeaUpdateOne) SetEstimatedBudget(f float64) *IdeaUpdateOne {
	iuo.mutation.ResetEstimatedBudget()
	iuo.mutation.SetEstimatedBudget(f)
	return iuo
}

// SetNillableEstimatedBudget sets the "estimated_budget" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableEstimatedBudget(f *float64) *IdeaUpdateOne {
	if f != nil {
		iuo.SetEstimatedBudget(*f)
	}
	return iuo
}

// AddEstimatedBudget adds f to the "estimated_budget" field.
func (iuo *IdeaUpdateOne) AddEstimatedBudget(f float64) *IdeaUpdateOne {
	iuo.mutation.AddEstimatedBudget(f)
	return iuo
}

// ClearEstimatedBudget clears the value of the "estimated_budget" field.
func (iuo *IdeaUpdateOne) ClearEstimatedBudget() *IdeaUpdateOne {
	iuo.mutation.ClearEstimatedBudget()
	return iuo
}

// SetIsPublic sets the "is_public" field.
func (iuo *IdeaUpdateOne) SetIsPublic(b bool) *IdeaUpdateOne {
	iuo.mutation.SetIsPublic(b)
	return iuo
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableIsPublic(b *bool) *IdeaUpdateOne {
	if b != nil {
		iuo.SetIsPublic(*b)
	}
	return iuo
}

// SetViewCount sets the "view_count" field.
func (iuo *IdeaUpdateOne) SetViewCount(i int) *IdeaUpdateOne {
	iuo.mutation.ResetViewCount()
	iuo.mutation.SetViewCount(i)
	return iuo
}

// SetNillableViewCount sets the "view_count" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableViewCount(i *int) *IdeaUpdateOne {
	if i != nil {
		iuo.SetViewCount(*i)
	}
	return iuo
}

// AddViewCount adds i to the "view_count" field.
func (iuo *IdeaUpdateOne) AddViewCount(i int) *IdeaUpdateOne {
	iuo.mutation.AddViewCount(i)
	return iuo
}

// SetLikeCount sets the "like_count" field.
func (iuo *IdeaUpdateOne) SetLikeCount(i int) *IdeaUpdateOne {
	iuo.mutation.ResetLikeCount()
	iuo.mutation.SetLikeCount(i)
	return iuo
}

// SetNillableLikeCount sets the "like_count" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableLikeCount(i *int) *IdeaUpdateOne {
	if i != nil {
		iuo.SetLikeCount(*i)
	}
	return iuo
}

// AddLikeCount adds i to the "like_count" field.
func (iuo *IdeaUpdateOne) AddLikeCount(i int) *IdeaUpdateOne {
	iuo.mutation.AddLikeCount(i)
	return iuo
}

// SetCreatedAt sets the "created_at" field.
func (iuo *IdeaUpdateOne) SetCreatedAt(t time.Time) *IdeaUpdateOne {
	iuo.mutation.SetCreatedAt(t)
	return iuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableCreatedAt(t *time.Time) *IdeaUpdateOne {
	if t != nil {
		iuo.SetCreatedAt(*t)
	}
	return iuo
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *IdeaUpdateOne) SetUpdatedAt(t time.Time) *IdeaUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (iuo *IdeaUpdateOne) SetUserID(id uuid.UUID) *IdeaUpdateOne {
	iuo.mutation.SetUserID(id)
	return iuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableUserID(id *uuid.UUID) *IdeaUpdateOne {
	if id != nil {
		iuo = iuo.SetUserID(*id)
	}
	return iuo
}

// SetUser sets the "user" edge to the User entity.
func (iuo *IdeaUpdateOne) SetUser(u *User) *IdeaUpdateOne {
	return iuo.SetUserID(u.ID)
}

// Mutation returns the IdeaMutation object of the builder.
func (iuo *IdeaUpdateOne) Mutation() *IdeaMutation {
	return iuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (iuo *IdeaUpdateOne) ClearUser() *IdeaUpdateOne {
	iuo.mutation.ClearUser()
	return iuo
}

// Where appends a list predicates to the IdeaUpdate builder.
func (iuo *IdeaUpdateOne) Where(ps ...predicate.Idea) *IdeaUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IdeaUpdateOne) Select(field string, fields ...string) *IdeaUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Idea entity.
func (iuo *IdeaUpdateOne) Save(ctx context.Context) (*Idea, error) {
	iuo.defaults()
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IdeaUpdateOne) SaveX(ctx context.Context) *Idea {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IdeaUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IdeaUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *IdeaUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		v := idea.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *IdeaUpdateOne) check() error {
	if v, ok := iuo.mutation.Title(); ok {
		if err := idea.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Idea.title": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Slug(); ok {
		if err := idea.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Idea.slug": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Status(); ok {
		if err := idea.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Idea.status": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Priority(); ok {
		if err := idea.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "Idea.priority": %w`, err)}
		}
	}
	return nil
}

func (iuo *IdeaUpdateOne) sqlSave(ctx context.Context) (_node *Idea, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(idea.Table, idea.Columns, sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Idea.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, idea.FieldID)
		for _, f := range fields {
			if !idea.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != idea.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Title(); ok {
		_spec.SetField(idea.FieldTitle, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Slug(); ok {
		_spec.SetField(idea.FieldSlug, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Abstract(); ok {
		_spec.SetField(idea.FieldAbstract, field.TypeString, value)
	}
	if iuo.mutation.AbstractCleared() {
		_spec.ClearField(idea.FieldAbstract, field.TypeString)
	}
	if value, ok := iuo.mutation.Motivation(); ok {
		_spec.SetField(idea.FieldMotivation, field.TypeString, value)
	}
	if iuo.mutation.MotivationCleared() {
		_spec.ClearField(idea.FieldMotivation, field.TypeString)
	}
	if value, ok := iuo.mutation.Methodology(); ok {
		_spec.SetField(idea.FieldMethodology, field.TypeString, value)
	}
	if iuo.mutation.MethodologyCleared() {
		_spec.ClearField(idea.FieldMethodology, field.TypeString)
	}
	if value, ok := iuo.mutation.ExpectedOutcome(); ok {
		_spec.SetField(idea.FieldExpectedOutcome, field.TypeString, value)
	}
	if iuo.mutation.ExpectedOutcomeCleared() {
		_spec.ClearField(idea.FieldExpectedOutcome, field.TypeString)
	}
	if value, ok := iuo.mutation.Status(); ok {
		_spec.SetField(idea.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := iuo.mutation.Priority(); ok {
		_spec.SetField(idea.FieldPriority, field.TypeEnum, value)
	}
	if value, ok := iuo.mutation.EstimatedDurationMonths(); ok {
		_spec.SetField(idea.FieldEstimatedDurationMonths, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedEstimatedDurationMonths(); ok {
		_spec.AddField(idea.FieldEstimatedDurationMonths, field.TypeInt, value)
	}
	if iuo.mutation.EstimatedDurationMonthsCleared() {
		_spec.ClearField(idea.FieldEstimatedDurationMonths, field.TypeInt)
	}
	if value, ok := iuo.mutation.RequiredResources(); ok {
		_spec.SetField(idea.FieldRequiredResources, field.TypeString, value)
	}
	if iuo.mutation.RequiredResourcesCleared() {
		_spec.ClearField(idea.FieldRequiredResources, field.TypeString)
	}
	if value, ok := iuo.mutation.CollaborationNeeded(); ok {
		_spec.SetField(idea.FieldCollaborationNeeded, field.TypeBool, value)
	}
	if value, ok := iuo.mutation.FundingRequired(); ok {
		_spec.SetField(idea.FieldFundingRequired, field.TypeBool, value)
	}
	if value, ok := iuo.mutation.EstimatedBudget(); ok {
		_spec.SetField(idea.FieldEstimatedBudget, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedEstimatedBudget(); ok {
		_spec.AddField(idea.FieldEstimatedBudget, field.TypeFloat64, value)
	}
	if iuo.mutation.EstimatedBudgetCleared() {
		_spec.ClearField(idea.FieldEstimatedBudget, field.TypeFloat64)
	}
	if value, ok := iuo.mutation.IsPublic(); ok {
		_spec.SetField(idea.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := iuo.mutation.ViewCount(); ok {
		_spec.SetField(idea.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedViewCount(); ok {
		_spec.AddField(idea.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.LikeCount(); ok {
		_spec.SetField(idea.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedLikeCount(); ok {
		_spec.AddField(idea.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.CreatedAt(); ok {
		_spec.SetField(idea.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(idea.FieldUpdatedAt, field.TypeTime, value)
	}
	if iuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   idea.UserTable,
			Columns: []string{idea.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   idea.UserTable,
			Columns: []string{idea.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Idea{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{idea.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
