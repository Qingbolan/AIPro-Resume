// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/researchproject"
	"silan-backend/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ResearchProjectCreate is the builder for creating a ResearchProject entity.
type ResearchProjectCreate struct {
	config
	mutation *ResearchProjectMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (rpc *ResearchProjectCreate) SetTitle(s string) *ResearchProjectCreate {
	rpc.mutation.SetTitle(s)
	return rpc
}

// SetStartDate sets the "start_date" field.
func (rpc *ResearchProjectCreate) SetStartDate(t time.Time) *ResearchProjectCreate {
	rpc.mutation.SetStartDate(t)
	return rpc
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (rpc *ResearchProjectCreate) SetNillableStartDate(t *time.Time) *ResearchProjectCreate {
	if t != nil {
		rpc.SetStartDate(*t)
	}
	return rpc
}

// SetEndDate sets the "end_date" field.
func (rpc *ResearchProjectCreate) SetEndDate(t time.Time) *ResearchProjectCreate {
	rpc.mutation.SetEndDate(t)
	return rpc
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (rpc *ResearchProjectCreate) SetNillableEndDate(t *time.Time) *ResearchProjectCreate {
	if t != nil {
		rpc.SetEndDate(*t)
	}
	return rpc
}

// SetIsOngoing sets the "is_ongoing" field.
func (rpc *ResearchProjectCreate) SetIsOngoing(b bool) *ResearchProjectCreate {
	rpc.mutation.SetIsOngoing(b)
	return rpc
}

// SetNillableIsOngoing sets the "is_ongoing" field if the given value is not nil.
func (rpc *ResearchProjectCreate) SetNillableIsOngoing(b *bool) *ResearchProjectCreate {
	if b != nil {
		rpc.SetIsOngoing(*b)
	}
	return rpc
}

// SetLocation sets the "location" field.
func (rpc *ResearchProjectCreate) SetLocation(s string) *ResearchProjectCreate {
	rpc.mutation.SetLocation(s)
	return rpc
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (rpc *ResearchProjectCreate) SetNillableLocation(s *string) *ResearchProjectCreate {
	if s != nil {
		rpc.SetLocation(*s)
	}
	return rpc
}

// SetResearchType sets the "research_type" field.
func (rpc *ResearchProjectCreate) SetResearchType(s string) *ResearchProjectCreate {
	rpc.mutation.SetResearchType(s)
	return rpc
}

// SetNillableResearchType sets the "research_type" field if the given value is not nil.
func (rpc *ResearchProjectCreate) SetNillableResearchType(s *string) *ResearchProjectCreate {
	if s != nil {
		rpc.SetResearchType(*s)
	}
	return rpc
}

// SetFundingSource sets the "funding_source" field.
func (rpc *ResearchProjectCreate) SetFundingSource(s string) *ResearchProjectCreate {
	rpc.mutation.SetFundingSource(s)
	return rpc
}

// SetNillableFundingSource sets the "funding_source" field if the given value is not nil.
func (rpc *ResearchProjectCreate) SetNillableFundingSource(s *string) *ResearchProjectCreate {
	if s != nil {
		rpc.SetFundingSource(*s)
	}
	return rpc
}

// SetFundingAmount sets the "funding_amount" field.
func (rpc *ResearchProjectCreate) SetFundingAmount(f float64) *ResearchProjectCreate {
	rpc.mutation.SetFundingAmount(f)
	return rpc
}

// SetNillableFundingAmount sets the "funding_amount" field if the given value is not nil.
func (rpc *ResearchProjectCreate) SetNillableFundingAmount(f *float64) *ResearchProjectCreate {
	if f != nil {
		rpc.SetFundingAmount(*f)
	}
	return rpc
}

// SetSortOrder sets the "sort_order" field.
func (rpc *ResearchProjectCreate) SetSortOrder(i int) *ResearchProjectCreate {
	rpc.mutation.SetSortOrder(i)
	return rpc
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (rpc *ResearchProjectCreate) SetNillableSortOrder(i *int) *ResearchProjectCreate {
	if i != nil {
		rpc.SetSortOrder(*i)
	}
	return rpc
}

// SetCreatedAt sets the "created_at" field.
func (rpc *ResearchProjectCreate) SetCreatedAt(t time.Time) *ResearchProjectCreate {
	rpc.mutation.SetCreatedAt(t)
	return rpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rpc *ResearchProjectCreate) SetNillableCreatedAt(t *time.Time) *ResearchProjectCreate {
	if t != nil {
		rpc.SetCreatedAt(*t)
	}
	return rpc
}

// SetUpdatedAt sets the "updated_at" field.
func (rpc *ResearchProjectCreate) SetUpdatedAt(t time.Time) *ResearchProjectCreate {
	rpc.mutation.SetUpdatedAt(t)
	return rpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rpc *ResearchProjectCreate) SetNillableUpdatedAt(t *time.Time) *ResearchProjectCreate {
	if t != nil {
		rpc.SetUpdatedAt(*t)
	}
	return rpc
}

// SetID sets the "id" field.
func (rpc *ResearchProjectCreate) SetID(u uuid.UUID) *ResearchProjectCreate {
	rpc.mutation.SetID(u)
	return rpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rpc *ResearchProjectCreate) SetNillableID(u *uuid.UUID) *ResearchProjectCreate {
	if u != nil {
		rpc.SetID(*u)
	}
	return rpc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (rpc *ResearchProjectCreate) SetUserID(id uuid.UUID) *ResearchProjectCreate {
	rpc.mutation.SetUserID(id)
	return rpc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (rpc *ResearchProjectCreate) SetNillableUserID(id *uuid.UUID) *ResearchProjectCreate {
	if id != nil {
		rpc = rpc.SetUserID(*id)
	}
	return rpc
}

// SetUser sets the "user" edge to the User entity.
func (rpc *ResearchProjectCreate) SetUser(u *User) *ResearchProjectCreate {
	return rpc.SetUserID(u.ID)
}

// Mutation returns the ResearchProjectMutation object of the builder.
func (rpc *ResearchProjectCreate) Mutation() *ResearchProjectMutation {
	return rpc.mutation
}

// Save creates the ResearchProject in the database.
func (rpc *ResearchProjectCreate) Save(ctx context.Context) (*ResearchProject, error) {
	rpc.defaults()
	return withHooks(ctx, rpc.sqlSave, rpc.mutation, rpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rpc *ResearchProjectCreate) SaveX(ctx context.Context) *ResearchProject {
	v, err := rpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpc *ResearchProjectCreate) Exec(ctx context.Context) error {
	_, err := rpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpc *ResearchProjectCreate) ExecX(ctx context.Context) {
	if err := rpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpc *ResearchProjectCreate) defaults() {
	if _, ok := rpc.mutation.IsOngoing(); !ok {
		v := researchproject.DefaultIsOngoing
		rpc.mutation.SetIsOngoing(v)
	}
	if _, ok := rpc.mutation.SortOrder(); !ok {
		v := researchproject.DefaultSortOrder
		rpc.mutation.SetSortOrder(v)
	}
	if _, ok := rpc.mutation.CreatedAt(); !ok {
		v := researchproject.DefaultCreatedAt()
		rpc.mutation.SetCreatedAt(v)
	}
	if _, ok := rpc.mutation.UpdatedAt(); !ok {
		v := researchproject.DefaultUpdatedAt()
		rpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rpc.mutation.ID(); !ok {
		v := researchproject.DefaultID()
		rpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpc *ResearchProjectCreate) check() error {
	if _, ok := rpc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "ResearchProject.title"`)}
	}
	if v, ok := rpc.mutation.Title(); ok {
		if err := researchproject.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "ResearchProject.title": %w`, err)}
		}
	}
	if _, ok := rpc.mutation.IsOngoing(); !ok {
		return &ValidationError{Name: "is_ongoing", err: errors.New(`ent: missing required field "ResearchProject.is_ongoing"`)}
	}
	if v, ok := rpc.mutation.Location(); ok {
		if err := researchproject.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "ResearchProject.location": %w`, err)}
		}
	}
	if v, ok := rpc.mutation.ResearchType(); ok {
		if err := researchproject.ResearchTypeValidator(v); err != nil {
			return &ValidationError{Name: "research_type", err: fmt.Errorf(`ent: validator failed for field "ResearchProject.research_type": %w`, err)}
		}
	}
	if v, ok := rpc.mutation.FundingSource(); ok {
		if err := researchproject.FundingSourceValidator(v); err != nil {
			return &ValidationError{Name: "funding_source", err: fmt.Errorf(`ent: validator failed for field "ResearchProject.funding_source": %w`, err)}
		}
	}
	if _, ok := rpc.mutation.SortOrder(); !ok {
		return &ValidationError{Name: "sort_order", err: errors.New(`ent: missing required field "ResearchProject.sort_order"`)}
	}
	if _, ok := rpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ResearchProject.created_at"`)}
	}
	if _, ok := rpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ResearchProject.updated_at"`)}
	}
	return nil
}

func (rpc *ResearchProjectCreate) sqlSave(ctx context.Context) (*ResearchProject, error) {
	if err := rpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rpc.mutation.id = &_node.ID
	rpc.mutation.done = true
	return _node, nil
}

func (rpc *ResearchProjectCreate) createSpec() (*ResearchProject, *sqlgraph.CreateSpec) {
	var (
		_node = &ResearchProject{config: rpc.config}
		_spec = sqlgraph.NewCreateSpec(researchproject.Table, sqlgraph.NewFieldSpec(researchproject.FieldID, field.TypeUUID))
	)
	if id, ok := rpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rpc.mutation.Title(); ok {
		_spec.SetField(researchproject.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := rpc.mutation.StartDate(); ok {
		_spec.SetField(researchproject.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := rpc.mutation.EndDate(); ok {
		_spec.SetField(researchproject.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := rpc.mutation.IsOngoing(); ok {
		_spec.SetField(researchproject.FieldIsOngoing, field.TypeBool, value)
		_node.IsOngoing = value
	}
	if value, ok := rpc.mutation.Location(); ok {
		_spec.SetField(researchproject.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := rpc.mutation.ResearchType(); ok {
		_spec.SetField(researchproject.FieldResearchType, field.TypeString, value)
		_node.ResearchType = value
	}
	if value, ok := rpc.mutation.FundingSource(); ok {
		_spec.SetField(researchproject.FieldFundingSource, field.TypeString, value)
		_node.FundingSource = value
	}
	if value, ok := rpc.mutation.FundingAmount(); ok {
		_spec.SetField(researchproject.FieldFundingAmount, field.TypeFloat64, value)
		_node.FundingAmount = value
	}
	if value, ok := rpc.mutation.SortOrder(); ok {
		_spec.SetField(researchproject.FieldSortOrder, field.TypeInt, value)
		_node.SortOrder = value
	}
	if value, ok := rpc.mutation.CreatedAt(); ok {
		_spec.SetField(researchproject.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rpc.mutation.UpdatedAt(); ok {
		_spec.SetField(researchproject.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := rpc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   researchproject.UserTable,
			Columns: []string{researchproject.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_research_projects = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ResearchProjectCreateBulk is the builder for creating many ResearchProject entities in bulk.
type ResearchProjectCreateBulk struct {
	config
	err      error
	builders []*ResearchProjectCreate
}

// Save creates the ResearchProject entities in the database.
func (rpcb *ResearchProjectCreateBulk) Save(ctx context.Context) ([]*ResearchProject, error) {
	if rpcb.err != nil {
		return nil, rpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rpcb.builders))
	nodes := make([]*ResearchProject, len(rpcb.builders))
	mutators := make([]Mutator, len(rpcb.builders))
	for i := range rpcb.builders {
		func(i int, root context.Context) {
			builder := rpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResearchProjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rpcb *ResearchProjectCreateBulk) SaveX(ctx context.Context) []*ResearchProject {
	v, err := rpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpcb *ResearchProjectCreateBulk) Exec(ctx context.Context) error {
	_, err := rpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpcb *ResearchProjectCreateBulk) ExecX(ctx context.Context) {
	if err := rpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
