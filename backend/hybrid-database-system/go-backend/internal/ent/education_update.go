// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/education"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// EducationUpdate is the builder for updating Education entities.
type EducationUpdate struct {
	config
	hooks    []Hook
	mutation *EducationMutation
}

// Where appends a list predicates to the EducationUpdate builder.
func (eu *EducationUpdate) Where(ps ...predicate.Education) *EducationUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetInstitution sets the "institution" field.
func (eu *EducationUpdate) SetInstitution(s string) *EducationUpdate {
	eu.mutation.SetInstitution(s)
	return eu
}

// SetNillableInstitution sets the "institution" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableInstitution(s *string) *EducationUpdate {
	if s != nil {
		eu.SetInstitution(*s)
	}
	return eu
}

// SetDegree sets the "degree" field.
func (eu *EducationUpdate) SetDegree(s string) *EducationUpdate {
	eu.mutation.SetDegree(s)
	return eu
}

// SetNillableDegree sets the "degree" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableDegree(s *string) *EducationUpdate {
	if s != nil {
		eu.SetDegree(*s)
	}
	return eu
}

// SetFieldOfStudy sets the "field_of_study" field.
func (eu *EducationUpdate) SetFieldOfStudy(s string) *EducationUpdate {
	eu.mutation.SetFieldOfStudy(s)
	return eu
}

// SetNillableFieldOfStudy sets the "field_of_study" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableFieldOfStudy(s *string) *EducationUpdate {
	if s != nil {
		eu.SetFieldOfStudy(*s)
	}
	return eu
}

// ClearFieldOfStudy clears the value of the "field_of_study" field.
func (eu *EducationUpdate) ClearFieldOfStudy() *EducationUpdate {
	eu.mutation.ClearFieldOfStudy()
	return eu
}

// SetStartDate sets the "start_date" field.
func (eu *EducationUpdate) SetStartDate(t time.Time) *EducationUpdate {
	eu.mutation.SetStartDate(t)
	return eu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableStartDate(t *time.Time) *EducationUpdate {
	if t != nil {
		eu.SetStartDate(*t)
	}
	return eu
}

// ClearStartDate clears the value of the "start_date" field.
func (eu *EducationUpdate) ClearStartDate() *EducationUpdate {
	eu.mutation.ClearStartDate()
	return eu
}

// SetEndDate sets the "end_date" field.
func (eu *EducationUpdate) SetEndDate(t time.Time) *EducationUpdate {
	eu.mutation.SetEndDate(t)
	return eu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableEndDate(t *time.Time) *EducationUpdate {
	if t != nil {
		eu.SetEndDate(*t)
	}
	return eu
}

// ClearEndDate clears the value of the "end_date" field.
func (eu *EducationUpdate) ClearEndDate() *EducationUpdate {
	eu.mutation.ClearEndDate()
	return eu
}

// SetIsCurrent sets the "is_current" field.
func (eu *EducationUpdate) SetIsCurrent(b bool) *EducationUpdate {
	eu.mutation.SetIsCurrent(b)
	return eu
}

// SetNillableIsCurrent sets the "is_current" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableIsCurrent(b *bool) *EducationUpdate {
	if b != nil {
		eu.SetIsCurrent(*b)
	}
	return eu
}

// SetGpa sets the "gpa" field.
func (eu *EducationUpdate) SetGpa(s string) *EducationUpdate {
	eu.mutation.SetGpa(s)
	return eu
}

// SetNillableGpa sets the "gpa" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableGpa(s *string) *EducationUpdate {
	if s != nil {
		eu.SetGpa(*s)
	}
	return eu
}

// ClearGpa clears the value of the "gpa" field.
func (eu *EducationUpdate) ClearGpa() *EducationUpdate {
	eu.mutation.ClearGpa()
	return eu
}

// SetLocation sets the "location" field.
func (eu *EducationUpdate) SetLocation(s string) *EducationUpdate {
	eu.mutation.SetLocation(s)
	return eu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableLocation(s *string) *EducationUpdate {
	if s != nil {
		eu.SetLocation(*s)
	}
	return eu
}

// ClearLocation clears the value of the "location" field.
func (eu *EducationUpdate) ClearLocation() *EducationUpdate {
	eu.mutation.ClearLocation()
	return eu
}

// SetInstitutionWebsite sets the "institution_website" field.
func (eu *EducationUpdate) SetInstitutionWebsite(s string) *EducationUpdate {
	eu.mutation.SetInstitutionWebsite(s)
	return eu
}

// SetNillableInstitutionWebsite sets the "institution_website" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableInstitutionWebsite(s *string) *EducationUpdate {
	if s != nil {
		eu.SetInstitutionWebsite(*s)
	}
	return eu
}

// ClearInstitutionWebsite clears the value of the "institution_website" field.
func (eu *EducationUpdate) ClearInstitutionWebsite() *EducationUpdate {
	eu.mutation.ClearInstitutionWebsite()
	return eu
}

// SetInstitutionLogoURL sets the "institution_logo_url" field.
func (eu *EducationUpdate) SetInstitutionLogoURL(s string) *EducationUpdate {
	eu.mutation.SetInstitutionLogoURL(s)
	return eu
}

// SetNillableInstitutionLogoURL sets the "institution_logo_url" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableInstitutionLogoURL(s *string) *EducationUpdate {
	if s != nil {
		eu.SetInstitutionLogoURL(*s)
	}
	return eu
}

// ClearInstitutionLogoURL clears the value of the "institution_logo_url" field.
func (eu *EducationUpdate) ClearInstitutionLogoURL() *EducationUpdate {
	eu.mutation.ClearInstitutionLogoURL()
	return eu
}

// SetSortOrder sets the "sort_order" field.
func (eu *EducationUpdate) SetSortOrder(i int) *EducationUpdate {
	eu.mutation.ResetSortOrder()
	eu.mutation.SetSortOrder(i)
	return eu
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableSortOrder(i *int) *EducationUpdate {
	if i != nil {
		eu.SetSortOrder(*i)
	}
	return eu
}

// AddSortOrder adds i to the "sort_order" field.
func (eu *EducationUpdate) AddSortOrder(i int) *EducationUpdate {
	eu.mutation.AddSortOrder(i)
	return eu
}

// SetCreatedAt sets the "created_at" field.
func (eu *EducationUpdate) SetCreatedAt(t time.Time) *EducationUpdate {
	eu.mutation.SetCreatedAt(t)
	return eu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableCreatedAt(t *time.Time) *EducationUpdate {
	if t != nil {
		eu.SetCreatedAt(*t)
	}
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EducationUpdate) SetUpdatedAt(t time.Time) *EducationUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (eu *EducationUpdate) SetUserID(id uuid.UUID) *EducationUpdate {
	eu.mutation.SetUserID(id)
	return eu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (eu *EducationUpdate) SetNillableUserID(id *uuid.UUID) *EducationUpdate {
	if id != nil {
		eu = eu.SetUserID(*id)
	}
	return eu
}

// SetUser sets the "user" edge to the User entity.
func (eu *EducationUpdate) SetUser(u *User) *EducationUpdate {
	return eu.SetUserID(u.ID)
}

// Mutation returns the EducationMutation object of the builder.
func (eu *EducationUpdate) Mutation() *EducationMutation {
	return eu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (eu *EducationUpdate) ClearUser() *EducationUpdate {
	eu.mutation.ClearUser()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EducationUpdate) Save(ctx context.Context) (int, error) {
	eu.defaults()
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EducationUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EducationUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EducationUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EducationUpdate) defaults() {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		v := education.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EducationUpdate) check() error {
	if v, ok := eu.mutation.Institution(); ok {
		if err := education.InstitutionValidator(v); err != nil {
			return &ValidationError{Name: "institution", err: fmt.Errorf(`ent: validator failed for field "Education.institution": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Degree(); ok {
		if err := education.DegreeValidator(v); err != nil {
			return &ValidationError{Name: "degree", err: fmt.Errorf(`ent: validator failed for field "Education.degree": %w`, err)}
		}
	}
	if v, ok := eu.mutation.FieldOfStudy(); ok {
		if err := education.FieldOfStudyValidator(v); err != nil {
			return &ValidationError{Name: "field_of_study", err: fmt.Errorf(`ent: validator failed for field "Education.field_of_study": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Gpa(); ok {
		if err := education.GpaValidator(v); err != nil {
			return &ValidationError{Name: "gpa", err: fmt.Errorf(`ent: validator failed for field "Education.gpa": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Location(); ok {
		if err := education.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "Education.location": %w`, err)}
		}
	}
	if v, ok := eu.mutation.InstitutionWebsite(); ok {
		if err := education.InstitutionWebsiteValidator(v); err != nil {
			return &ValidationError{Name: "institution_website", err: fmt.Errorf(`ent: validator failed for field "Education.institution_website": %w`, err)}
		}
	}
	if v, ok := eu.mutation.InstitutionLogoURL(); ok {
		if err := education.InstitutionLogoURLValidator(v); err != nil {
			return &ValidationError{Name: "institution_logo_url", err: fmt.Errorf(`ent: validator failed for field "Education.institution_logo_url": %w`, err)}
		}
	}
	return nil
}

func (eu *EducationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(education.Table, education.Columns, sqlgraph.NewFieldSpec(education.FieldID, field.TypeUUID))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Institution(); ok {
		_spec.SetField(education.FieldInstitution, field.TypeString, value)
	}
	if value, ok := eu.mutation.Degree(); ok {
		_spec.SetField(education.FieldDegree, field.TypeString, value)
	}
	if value, ok := eu.mutation.FieldOfStudy(); ok {
		_spec.SetField(education.FieldFieldOfStudy, field.TypeString, value)
	}
	if eu.mutation.FieldOfStudyCleared() {
		_spec.ClearField(education.FieldFieldOfStudy, field.TypeString)
	}
	if value, ok := eu.mutation.StartDate(); ok {
		_spec.SetField(education.FieldStartDate, field.TypeTime, value)
	}
	if eu.mutation.StartDateCleared() {
		_spec.ClearField(education.FieldStartDate, field.TypeTime)
	}
	if value, ok := eu.mutation.EndDate(); ok {
		_spec.SetField(education.FieldEndDate, field.TypeTime, value)
	}
	if eu.mutation.EndDateCleared() {
		_spec.ClearField(education.FieldEndDate, field.TypeTime)
	}
	if value, ok := eu.mutation.IsCurrent(); ok {
		_spec.SetField(education.FieldIsCurrent, field.TypeBool, value)
	}
	if value, ok := eu.mutation.Gpa(); ok {
		_spec.SetField(education.FieldGpa, field.TypeString, value)
	}
	if eu.mutation.GpaCleared() {
		_spec.ClearField(education.FieldGpa, field.TypeString)
	}
	if value, ok := eu.mutation.Location(); ok {
		_spec.SetField(education.FieldLocation, field.TypeString, value)
	}
	if eu.mutation.LocationCleared() {
		_spec.ClearField(education.FieldLocation, field.TypeString)
	}
	if value, ok := eu.mutation.InstitutionWebsite(); ok {
		_spec.SetField(education.FieldInstitutionWebsite, field.TypeString, value)
	}
	if eu.mutation.InstitutionWebsiteCleared() {
		_spec.ClearField(education.FieldInstitutionWebsite, field.TypeString)
	}
	if value, ok := eu.mutation.InstitutionLogoURL(); ok {
		_spec.SetField(education.FieldInstitutionLogoURL, field.TypeString, value)
	}
	if eu.mutation.InstitutionLogoURLCleared() {
		_spec.ClearField(education.FieldInstitutionLogoURL, field.TypeString)
	}
	if value, ok := eu.mutation.SortOrder(); ok {
		_spec.SetField(education.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedSortOrder(); ok {
		_spec.AddField(education.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := eu.mutation.CreatedAt(); ok {
		_spec.SetField(education.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(education.FieldUpdatedAt, field.TypeTime, value)
	}
	if eu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   education.UserTable,
			Columns: []string{education.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   education.UserTable,
			Columns: []string{education.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{education.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EducationUpdateOne is the builder for updating a single Education entity.
type EducationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EducationMutation
}

// SetInstitution sets the "institution" field.
func (euo *EducationUpdateOne) SetInstitution(s string) *EducationUpdateOne {
	euo.mutation.SetInstitution(s)
	return euo
}

// SetNillableInstitution sets the "institution" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableInstitution(s *string) *EducationUpdateOne {
	if s != nil {
		euo.SetInstitution(*s)
	}
	return euo
}

// SetDegree sets the "degree" field.
func (euo *EducationUpdateOne) SetDegree(s string) *EducationUpdateOne {
	euo.mutation.SetDegree(s)
	return euo
}

// SetNillableDegree sets the "degree" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableDegree(s *string) *EducationUpdateOne {
	if s != nil {
		euo.SetDegree(*s)
	}
	return euo
}

// SetFieldOfStudy sets the "field_of_study" field.
func (euo *EducationUpdateOne) SetFieldOfStudy(s string) *EducationUpdateOne {
	euo.mutation.SetFieldOfStudy(s)
	return euo
}

// SetNillableFieldOfStudy sets the "field_of_study" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableFieldOfStudy(s *string) *EducationUpdateOne {
	if s != nil {
		euo.SetFieldOfStudy(*s)
	}
	return euo
}

// ClearFieldOfStudy clears the value of the "field_of_study" field.
func (euo *EducationUpdateOne) ClearFieldOfStudy() *EducationUpdateOne {
	euo.mutation.ClearFieldOfStudy()
	return euo
}

// SetStartDate sets the "start_date" field.
func (euo *EducationUpdateOne) SetStartDate(t time.Time) *EducationUpdateOne {
	euo.mutation.SetStartDate(t)
	return euo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableStartDate(t *time.Time) *EducationUpdateOne {
	if t != nil {
		euo.SetStartDate(*t)
	}
	return euo
}

// ClearStartDate clears the value of the "start_date" field.
func (euo *EducationUpdateOne) ClearStartDate() *EducationUpdateOne {
	euo.mutation.ClearStartDate()
	return euo
}

// SetEndDate sets the "end_date" field.
func (euo *EducationUpdateOne) SetEndDate(t time.Time) *EducationUpdateOne {
	euo.mutation.SetEndDate(t)
	return euo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableEndDate(t *time.Time) *EducationUpdateOne {
	if t != nil {
		euo.SetEndDate(*t)
	}
	return euo
}

// ClearEndDate clears the value of the "end_date" field.
func (euo *EducationUpdateOne) ClearEndDate() *EducationUpdateOne {
	euo.mutation.ClearEndDate()
	return euo
}

// SetIsCurrent sets the "is_current" field.
func (euo *EducationUpdateOne) SetIsCurrent(b bool) *EducationUpdateOne {
	euo.mutation.SetIsCurrent(b)
	return euo
}

// SetNillableIsCurrent sets the "is_current" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableIsCurrent(b *bool) *EducationUpdateOne {
	if b != nil {
		euo.SetIsCurrent(*b)
	}
	return euo
}

// SetGpa sets the "gpa" field.
func (euo *EducationUpdateOne) SetGpa(s string) *EducationUpdateOne {
	euo.mutation.SetGpa(s)
	return euo
}

// SetNillableGpa sets the "gpa" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableGpa(s *string) *EducationUpdateOne {
	if s != nil {
		euo.SetGpa(*s)
	}
	return euo
}

// ClearGpa clears the value of the "gpa" field.
func (euo *EducationUpdateOne) ClearGpa() *EducationUpdateOne {
	euo.mutation.ClearGpa()
	return euo
}

// SetLocation sets the "location" field.
func (euo *EducationUpdateOne) SetLocation(s string) *EducationUpdateOne {
	euo.mutation.SetLocation(s)
	return euo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableLocation(s *string) *EducationUpdateOne {
	if s != nil {
		euo.SetLocation(*s)
	}
	return euo
}

// ClearLocation clears the value of the "location" field.
func (euo *EducationUpdateOne) ClearLocation() *EducationUpdateOne {
	euo.mutation.ClearLocation()
	return euo
}

// SetInstitutionWebsite sets the "institution_website" field.
func (euo *EducationUpdateOne) SetInstitutionWebsite(s string) *EducationUpdateOne {
	euo.mutation.SetInstitutionWebsite(s)
	return euo
}

// SetNillableInstitutionWebsite sets the "institution_website" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableInstitutionWebsite(s *string) *EducationUpdateOne {
	if s != nil {
		euo.SetInstitutionWebsite(*s)
	}
	return euo
}

// ClearInstitutionWebsite clears the value of the "institution_website" field.
func (euo *EducationUpdateOne) ClearInstitutionWebsite() *EducationUpdateOne {
	euo.mutation.ClearInstitutionWebsite()
	return euo
}

// SetInstitutionLogoURL sets the "institution_logo_url" field.
func (euo *EducationUpdateOne) SetInstitutionLogoURL(s string) *EducationUpdateOne {
	euo.mutation.SetInstitutionLogoURL(s)
	return euo
}

// SetNillableInstitutionLogoURL sets the "institution_logo_url" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableInstitutionLogoURL(s *string) *EducationUpdateOne {
	if s != nil {
		euo.SetInstitutionLogoURL(*s)
	}
	return euo
}

// ClearInstitutionLogoURL clears the value of the "institution_logo_url" field.
func (euo *EducationUpdateOne) ClearInstitutionLogoURL() *EducationUpdateOne {
	euo.mutation.ClearInstitutionLogoURL()
	return euo
}

// SetSortOrder sets the "sort_order" field.
func (euo *EducationUpdateOne) SetSortOrder(i int) *EducationUpdateOne {
	euo.mutation.ResetSortOrder()
	euo.mutation.SetSortOrder(i)
	return euo
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableSortOrder(i *int) *EducationUpdateOne {
	if i != nil {
		euo.SetSortOrder(*i)
	}
	return euo
}

// AddSortOrder adds i to the "sort_order" field.
func (euo *EducationUpdateOne) AddSortOrder(i int) *EducationUpdateOne {
	euo.mutation.AddSortOrder(i)
	return euo
}

// SetCreatedAt sets the "created_at" field.
func (euo *EducationUpdateOne) SetCreatedAt(t time.Time) *EducationUpdateOne {
	euo.mutation.SetCreatedAt(t)
	return euo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableCreatedAt(t *time.Time) *EducationUpdateOne {
	if t != nil {
		euo.SetCreatedAt(*t)
	}
	return euo
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EducationUpdateOne) SetUpdatedAt(t time.Time) *EducationUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (euo *EducationUpdateOne) SetUserID(id uuid.UUID) *EducationUpdateOne {
	euo.mutation.SetUserID(id)
	return euo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableUserID(id *uuid.UUID) *EducationUpdateOne {
	if id != nil {
		euo = euo.SetUserID(*id)
	}
	return euo
}

// SetUser sets the "user" edge to the User entity.
func (euo *EducationUpdateOne) SetUser(u *User) *EducationUpdateOne {
	return euo.SetUserID(u.ID)
}

// Mutation returns the EducationMutation object of the builder.
func (euo *EducationUpdateOne) Mutation() *EducationMutation {
	return euo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (euo *EducationUpdateOne) ClearUser() *EducationUpdateOne {
	euo.mutation.ClearUser()
	return euo
}

// Where appends a list predicates to the EducationUpdate builder.
func (euo *EducationUpdateOne) Where(ps ...predicate.Education) *EducationUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EducationUpdateOne) Select(field string, fields ...string) *EducationUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Education entity.
func (euo *EducationUpdateOne) Save(ctx context.Context) (*Education, error) {
	euo.defaults()
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EducationUpdateOne) SaveX(ctx context.Context) *Education {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EducationUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EducationUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EducationUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		v := education.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EducationUpdateOne) check() error {
	if v, ok := euo.mutation.Institution(); ok {
		if err := education.InstitutionValidator(v); err != nil {
			return &ValidationError{Name: "institution", err: fmt.Errorf(`ent: validator failed for field "Education.institution": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Degree(); ok {
		if err := education.DegreeValidator(v); err != nil {
			return &ValidationError{Name: "degree", err: fmt.Errorf(`ent: validator failed for field "Education.degree": %w`, err)}
		}
	}
	if v, ok := euo.mutation.FieldOfStudy(); ok {
		if err := education.FieldOfStudyValidator(v); err != nil {
			return &ValidationError{Name: "field_of_study", err: fmt.Errorf(`ent: validator failed for field "Education.field_of_study": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Gpa(); ok {
		if err := education.GpaValidator(v); err != nil {
			return &ValidationError{Name: "gpa", err: fmt.Errorf(`ent: validator failed for field "Education.gpa": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Location(); ok {
		if err := education.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "Education.location": %w`, err)}
		}
	}
	if v, ok := euo.mutation.InstitutionWebsite(); ok {
		if err := education.InstitutionWebsiteValidator(v); err != nil {
			return &ValidationError{Name: "institution_website", err: fmt.Errorf(`ent: validator failed for field "Education.institution_website": %w`, err)}
		}
	}
	if v, ok := euo.mutation.InstitutionLogoURL(); ok {
		if err := education.InstitutionLogoURLValidator(v); err != nil {
			return &ValidationError{Name: "institution_logo_url", err: fmt.Errorf(`ent: validator failed for field "Education.institution_logo_url": %w`, err)}
		}
	}
	return nil
}

func (euo *EducationUpdateOne) sqlSave(ctx context.Context) (_node *Education, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(education.Table, education.Columns, sqlgraph.NewFieldSpec(education.FieldID, field.TypeUUID))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Education.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, education.FieldID)
		for _, f := range fields {
			if !education.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != education.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Institution(); ok {
		_spec.SetField(education.FieldInstitution, field.TypeString, value)
	}
	if value, ok := euo.mutation.Degree(); ok {
		_spec.SetField(education.FieldDegree, field.TypeString, value)
	}
	if value, ok := euo.mutation.FieldOfStudy(); ok {
		_spec.SetField(education.FieldFieldOfStudy, field.TypeString, value)
	}
	if euo.mutation.FieldOfStudyCleared() {
		_spec.ClearField(education.FieldFieldOfStudy, field.TypeString)
	}
	if value, ok := euo.mutation.StartDate(); ok {
		_spec.SetField(education.FieldStartDate, field.TypeTime, value)
	}
	if euo.mutation.StartDateCleared() {
		_spec.ClearField(education.FieldStartDate, field.TypeTime)
	}
	if value, ok := euo.mutation.EndDate(); ok {
		_spec.SetField(education.FieldEndDate, field.TypeTime, value)
	}
	if euo.mutation.EndDateCleared() {
		_spec.ClearField(education.FieldEndDate, field.TypeTime)
	}
	if value, ok := euo.mutation.IsCurrent(); ok {
		_spec.SetField(education.FieldIsCurrent, field.TypeBool, value)
	}
	if value, ok := euo.mutation.Gpa(); ok {
		_spec.SetField(education.FieldGpa, field.TypeString, value)
	}
	if euo.mutation.GpaCleared() {
		_spec.ClearField(education.FieldGpa, field.TypeString)
	}
	if value, ok := euo.mutation.Location(); ok {
		_spec.SetField(education.FieldLocation, field.TypeString, value)
	}
	if euo.mutation.LocationCleared() {
		_spec.ClearField(education.FieldLocation, field.TypeString)
	}
	if value, ok := euo.mutation.InstitutionWebsite(); ok {
		_spec.SetField(education.FieldInstitutionWebsite, field.TypeString, value)
	}
	if euo.mutation.InstitutionWebsiteCleared() {
		_spec.ClearField(education.FieldInstitutionWebsite, field.TypeString)
	}
	if value, ok := euo.mutation.InstitutionLogoURL(); ok {
		_spec.SetField(education.FieldInstitutionLogoURL, field.TypeString, value)
	}
	if euo.mutation.InstitutionLogoURLCleared() {
		_spec.ClearField(education.FieldInstitutionLogoURL, field.TypeString)
	}
	if value, ok := euo.mutation.SortOrder(); ok {
		_spec.SetField(education.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedSortOrder(); ok {
		_spec.AddField(education.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := euo.mutation.CreatedAt(); ok {
		_spec.SetField(education.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(education.FieldUpdatedAt, field.TypeTime, value)
	}
	if euo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   education.UserTable,
			Columns: []string{education.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   education.UserTable,
			Columns: []string{education.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Education{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{education.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
