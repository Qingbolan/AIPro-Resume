// Code generated by ent, DO NOT EDIT.

package blogcategory

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldEQ(FieldName, v))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldEQ(FieldSlug, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldEQ(FieldDescription, v))
}

// Color applies equality check predicate on the "color" field. It's identical to ColorEQ.
func Color(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldEQ(FieldColor, v))
}

// Icon applies equality check predicate on the "icon" field. It's identical to IconEQ.
func Icon(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldEQ(FieldIcon, v))
}

// PostCount applies equality check predicate on the "post_count" field. It's identical to PostCountEQ.
func PostCount(v int) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldEQ(FieldPostCount, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldContainsFold(FieldName, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldContainsFold(FieldSlug, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldContainsFold(FieldDescription, v))
}

// ColorEQ applies the EQ predicate on the "color" field.
func ColorEQ(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldEQ(FieldColor, v))
}

// ColorNEQ applies the NEQ predicate on the "color" field.
func ColorNEQ(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldNEQ(FieldColor, v))
}

// ColorIn applies the In predicate on the "color" field.
func ColorIn(vs ...string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldIn(FieldColor, vs...))
}

// ColorNotIn applies the NotIn predicate on the "color" field.
func ColorNotIn(vs ...string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldNotIn(FieldColor, vs...))
}

// ColorGT applies the GT predicate on the "color" field.
func ColorGT(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldGT(FieldColor, v))
}

// ColorGTE applies the GTE predicate on the "color" field.
func ColorGTE(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldGTE(FieldColor, v))
}

// ColorLT applies the LT predicate on the "color" field.
func ColorLT(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldLT(FieldColor, v))
}

// ColorLTE applies the LTE predicate on the "color" field.
func ColorLTE(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldLTE(FieldColor, v))
}

// ColorContains applies the Contains predicate on the "color" field.
func ColorContains(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldContains(FieldColor, v))
}

// ColorHasPrefix applies the HasPrefix predicate on the "color" field.
func ColorHasPrefix(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldHasPrefix(FieldColor, v))
}

// ColorHasSuffix applies the HasSuffix predicate on the "color" field.
func ColorHasSuffix(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldHasSuffix(FieldColor, v))
}

// ColorIsNil applies the IsNil predicate on the "color" field.
func ColorIsNil() predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldIsNull(FieldColor))
}

// ColorNotNil applies the NotNil predicate on the "color" field.
func ColorNotNil() predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldNotNull(FieldColor))
}

// ColorEqualFold applies the EqualFold predicate on the "color" field.
func ColorEqualFold(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldEqualFold(FieldColor, v))
}

// ColorContainsFold applies the ContainsFold predicate on the "color" field.
func ColorContainsFold(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldContainsFold(FieldColor, v))
}

// IconEQ applies the EQ predicate on the "icon" field.
func IconEQ(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldEQ(FieldIcon, v))
}

// IconNEQ applies the NEQ predicate on the "icon" field.
func IconNEQ(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldNEQ(FieldIcon, v))
}

// IconIn applies the In predicate on the "icon" field.
func IconIn(vs ...string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldIn(FieldIcon, vs...))
}

// IconNotIn applies the NotIn predicate on the "icon" field.
func IconNotIn(vs ...string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldNotIn(FieldIcon, vs...))
}

// IconGT applies the GT predicate on the "icon" field.
func IconGT(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldGT(FieldIcon, v))
}

// IconGTE applies the GTE predicate on the "icon" field.
func IconGTE(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldGTE(FieldIcon, v))
}

// IconLT applies the LT predicate on the "icon" field.
func IconLT(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldLT(FieldIcon, v))
}

// IconLTE applies the LTE predicate on the "icon" field.
func IconLTE(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldLTE(FieldIcon, v))
}

// IconContains applies the Contains predicate on the "icon" field.
func IconContains(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldContains(FieldIcon, v))
}

// IconHasPrefix applies the HasPrefix predicate on the "icon" field.
func IconHasPrefix(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldHasPrefix(FieldIcon, v))
}

// IconHasSuffix applies the HasSuffix predicate on the "icon" field.
func IconHasSuffix(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldHasSuffix(FieldIcon, v))
}

// IconIsNil applies the IsNil predicate on the "icon" field.
func IconIsNil() predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldIsNull(FieldIcon))
}

// IconNotNil applies the NotNil predicate on the "icon" field.
func IconNotNil() predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldNotNull(FieldIcon))
}

// IconEqualFold applies the EqualFold predicate on the "icon" field.
func IconEqualFold(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldEqualFold(FieldIcon, v))
}

// IconContainsFold applies the ContainsFold predicate on the "icon" field.
func IconContainsFold(v string) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldContainsFold(FieldIcon, v))
}

// PostCountEQ applies the EQ predicate on the "post_count" field.
func PostCountEQ(v int) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldEQ(FieldPostCount, v))
}

// PostCountNEQ applies the NEQ predicate on the "post_count" field.
func PostCountNEQ(v int) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldNEQ(FieldPostCount, v))
}

// PostCountIn applies the In predicate on the "post_count" field.
func PostCountIn(vs ...int) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldIn(FieldPostCount, vs...))
}

// PostCountNotIn applies the NotIn predicate on the "post_count" field.
func PostCountNotIn(vs ...int) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldNotIn(FieldPostCount, vs...))
}

// PostCountGT applies the GT predicate on the "post_count" field.
func PostCountGT(v int) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldGT(FieldPostCount, v))
}

// PostCountGTE applies the GTE predicate on the "post_count" field.
func PostCountGTE(v int) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldGTE(FieldPostCount, v))
}

// PostCountLT applies the LT predicate on the "post_count" field.
func PostCountLT(v int) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldLT(FieldPostCount, v))
}

// PostCountLTE applies the LTE predicate on the "post_count" field.
func PostCountLTE(v int) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldLTE(FieldPostCount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BlogCategory {
	return predicate.BlogCategory(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasBlogPosts applies the HasEdge predicate on the "blog_posts" edge.
func HasBlogPosts() predicate.BlogCategory {
	return predicate.BlogCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BlogPostsTable, BlogPostsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlogPostsWith applies the HasEdge predicate on the "blog_posts" edge with a given conditions (other predicates).
func HasBlogPostsWith(preds ...predicate.BlogPost) predicate.BlogCategory {
	return predicate.BlogCategory(func(s *sql.Selector) {
		step := newBlogPostsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BlogCategory) predicate.BlogCategory {
	return predicate.BlogCategory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BlogCategory) predicate.BlogCategory {
	return predicate.BlogCategory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BlogCategory) predicate.BlogCategory {
	return predicate.BlogCategory(sql.NotPredicates(p))
}
