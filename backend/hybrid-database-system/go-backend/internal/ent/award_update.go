// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/award"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AwardUpdate is the builder for updating Award entities.
type AwardUpdate struct {
	config
	hooks    []Hook
	mutation *AwardMutation
}

// Where appends a list predicates to the AwardUpdate builder.
func (au *AwardUpdate) Where(ps ...predicate.Award) *AwardUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetTitle sets the "title" field.
func (au *AwardUpdate) SetTitle(s string) *AwardUpdate {
	au.mutation.SetTitle(s)
	return au
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (au *AwardUpdate) SetNillableTitle(s *string) *AwardUpdate {
	if s != nil {
		au.SetTitle(*s)
	}
	return au
}

// SetAwardingOrganization sets the "awarding_organization" field.
func (au *AwardUpdate) SetAwardingOrganization(s string) *AwardUpdate {
	au.mutation.SetAwardingOrganization(s)
	return au
}

// SetNillableAwardingOrganization sets the "awarding_organization" field if the given value is not nil.
func (au *AwardUpdate) SetNillableAwardingOrganization(s *string) *AwardUpdate {
	if s != nil {
		au.SetAwardingOrganization(*s)
	}
	return au
}

// SetAwardDate sets the "award_date" field.
func (au *AwardUpdate) SetAwardDate(t time.Time) *AwardUpdate {
	au.mutation.SetAwardDate(t)
	return au
}

// SetNillableAwardDate sets the "award_date" field if the given value is not nil.
func (au *AwardUpdate) SetNillableAwardDate(t *time.Time) *AwardUpdate {
	if t != nil {
		au.SetAwardDate(*t)
	}
	return au
}

// ClearAwardDate clears the value of the "award_date" field.
func (au *AwardUpdate) ClearAwardDate() *AwardUpdate {
	au.mutation.ClearAwardDate()
	return au
}

// SetAwardType sets the "award_type" field.
func (au *AwardUpdate) SetAwardType(s string) *AwardUpdate {
	au.mutation.SetAwardType(s)
	return au
}

// SetNillableAwardType sets the "award_type" field if the given value is not nil.
func (au *AwardUpdate) SetNillableAwardType(s *string) *AwardUpdate {
	if s != nil {
		au.SetAwardType(*s)
	}
	return au
}

// ClearAwardType clears the value of the "award_type" field.
func (au *AwardUpdate) ClearAwardType() *AwardUpdate {
	au.mutation.ClearAwardType()
	return au
}

// SetAmount sets the "amount" field.
func (au *AwardUpdate) SetAmount(f float64) *AwardUpdate {
	au.mutation.ResetAmount()
	au.mutation.SetAmount(f)
	return au
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (au *AwardUpdate) SetNillableAmount(f *float64) *AwardUpdate {
	if f != nil {
		au.SetAmount(*f)
	}
	return au
}

// AddAmount adds f to the "amount" field.
func (au *AwardUpdate) AddAmount(f float64) *AwardUpdate {
	au.mutation.AddAmount(f)
	return au
}

// ClearAmount clears the value of the "amount" field.
func (au *AwardUpdate) ClearAmount() *AwardUpdate {
	au.mutation.ClearAmount()
	return au
}

// SetDescription sets the "description" field.
func (au *AwardUpdate) SetDescription(s string) *AwardUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *AwardUpdate) SetNillableDescription(s *string) *AwardUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// ClearDescription clears the value of the "description" field.
func (au *AwardUpdate) ClearDescription() *AwardUpdate {
	au.mutation.ClearDescription()
	return au
}

// SetCertificateURL sets the "certificate_url" field.
func (au *AwardUpdate) SetCertificateURL(s string) *AwardUpdate {
	au.mutation.SetCertificateURL(s)
	return au
}

// SetNillableCertificateURL sets the "certificate_url" field if the given value is not nil.
func (au *AwardUpdate) SetNillableCertificateURL(s *string) *AwardUpdate {
	if s != nil {
		au.SetCertificateURL(*s)
	}
	return au
}

// ClearCertificateURL clears the value of the "certificate_url" field.
func (au *AwardUpdate) ClearCertificateURL() *AwardUpdate {
	au.mutation.ClearCertificateURL()
	return au
}

// SetSortOrder sets the "sort_order" field.
func (au *AwardUpdate) SetSortOrder(i int) *AwardUpdate {
	au.mutation.ResetSortOrder()
	au.mutation.SetSortOrder(i)
	return au
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (au *AwardUpdate) SetNillableSortOrder(i *int) *AwardUpdate {
	if i != nil {
		au.SetSortOrder(*i)
	}
	return au
}

// AddSortOrder adds i to the "sort_order" field.
func (au *AwardUpdate) AddSortOrder(i int) *AwardUpdate {
	au.mutation.AddSortOrder(i)
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *AwardUpdate) SetCreatedAt(t time.Time) *AwardUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *AwardUpdate) SetNillableCreatedAt(t *time.Time) *AwardUpdate {
	if t != nil {
		au.SetCreatedAt(*t)
	}
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AwardUpdate) SetUpdatedAt(t time.Time) *AwardUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetUserID sets the "user" edge to the User entity by ID.
func (au *AwardUpdate) SetUserID(id uuid.UUID) *AwardUpdate {
	au.mutation.SetUserID(id)
	return au
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (au *AwardUpdate) SetNillableUserID(id *uuid.UUID) *AwardUpdate {
	if id != nil {
		au = au.SetUserID(*id)
	}
	return au
}

// SetUser sets the "user" edge to the User entity.
func (au *AwardUpdate) SetUser(u *User) *AwardUpdate {
	return au.SetUserID(u.ID)
}

// Mutation returns the AwardMutation object of the builder.
func (au *AwardUpdate) Mutation() *AwardMutation {
	return au.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (au *AwardUpdate) ClearUser() *AwardUpdate {
	au.mutation.ClearUser()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AwardUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AwardUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AwardUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AwardUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AwardUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := award.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AwardUpdate) check() error {
	if v, ok := au.mutation.Title(); ok {
		if err := award.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Award.title": %w`, err)}
		}
	}
	if v, ok := au.mutation.AwardingOrganization(); ok {
		if err := award.AwardingOrganizationValidator(v); err != nil {
			return &ValidationError{Name: "awarding_organization", err: fmt.Errorf(`ent: validator failed for field "Award.awarding_organization": %w`, err)}
		}
	}
	if v, ok := au.mutation.AwardType(); ok {
		if err := award.AwardTypeValidator(v); err != nil {
			return &ValidationError{Name: "award_type", err: fmt.Errorf(`ent: validator failed for field "Award.award_type": %w`, err)}
		}
	}
	if v, ok := au.mutation.CertificateURL(); ok {
		if err := award.CertificateURLValidator(v); err != nil {
			return &ValidationError{Name: "certificate_url", err: fmt.Errorf(`ent: validator failed for field "Award.certificate_url": %w`, err)}
		}
	}
	return nil
}

func (au *AwardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(award.Table, award.Columns, sqlgraph.NewFieldSpec(award.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Title(); ok {
		_spec.SetField(award.FieldTitle, field.TypeString, value)
	}
	if value, ok := au.mutation.AwardingOrganization(); ok {
		_spec.SetField(award.FieldAwardingOrganization, field.TypeString, value)
	}
	if value, ok := au.mutation.AwardDate(); ok {
		_spec.SetField(award.FieldAwardDate, field.TypeTime, value)
	}
	if au.mutation.AwardDateCleared() {
		_spec.ClearField(award.FieldAwardDate, field.TypeTime)
	}
	if value, ok := au.mutation.AwardType(); ok {
		_spec.SetField(award.FieldAwardType, field.TypeString, value)
	}
	if au.mutation.AwardTypeCleared() {
		_spec.ClearField(award.FieldAwardType, field.TypeString)
	}
	if value, ok := au.mutation.Amount(); ok {
		_spec.SetField(award.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedAmount(); ok {
		_spec.AddField(award.FieldAmount, field.TypeFloat64, value)
	}
	if au.mutation.AmountCleared() {
		_spec.ClearField(award.FieldAmount, field.TypeFloat64)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(award.FieldDescription, field.TypeString, value)
	}
	if au.mutation.DescriptionCleared() {
		_spec.ClearField(award.FieldDescription, field.TypeString)
	}
	if value, ok := au.mutation.CertificateURL(); ok {
		_spec.SetField(award.FieldCertificateURL, field.TypeString, value)
	}
	if au.mutation.CertificateURLCleared() {
		_spec.ClearField(award.FieldCertificateURL, field.TypeString)
	}
	if value, ok := au.mutation.SortOrder(); ok {
		_spec.SetField(award.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedSortOrder(); ok {
		_spec.AddField(award.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.SetField(award.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(award.FieldUpdatedAt, field.TypeTime, value)
	}
	if au.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   award.UserTable,
			Columns: []string{award.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   award.UserTable,
			Columns: []string{award.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{award.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AwardUpdateOne is the builder for updating a single Award entity.
type AwardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AwardMutation
}

// SetTitle sets the "title" field.
func (auo *AwardUpdateOne) SetTitle(s string) *AwardUpdateOne {
	auo.mutation.SetTitle(s)
	return auo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (auo *AwardUpdateOne) SetNillableTitle(s *string) *AwardUpdateOne {
	if s != nil {
		auo.SetTitle(*s)
	}
	return auo
}

// SetAwardingOrganization sets the "awarding_organization" field.
func (auo *AwardUpdateOne) SetAwardingOrganization(s string) *AwardUpdateOne {
	auo.mutation.SetAwardingOrganization(s)
	return auo
}

// SetNillableAwardingOrganization sets the "awarding_organization" field if the given value is not nil.
func (auo *AwardUpdateOne) SetNillableAwardingOrganization(s *string) *AwardUpdateOne {
	if s != nil {
		auo.SetAwardingOrganization(*s)
	}
	return auo
}

// SetAwardDate sets the "award_date" field.
func (auo *AwardUpdateOne) SetAwardDate(t time.Time) *AwardUpdateOne {
	auo.mutation.SetAwardDate(t)
	return auo
}

// SetNillableAwardDate sets the "award_date" field if the given value is not nil.
func (auo *AwardUpdateOne) SetNillableAwardDate(t *time.Time) *AwardUpdateOne {
	if t != nil {
		auo.SetAwardDate(*t)
	}
	return auo
}

// ClearAwardDate clears the value of the "award_date" field.
func (auo *AwardUpdateOne) ClearAwardDate() *AwardUpdateOne {
	auo.mutation.ClearAwardDate()
	return auo
}

// SetAwardType sets the "award_type" field.
func (auo *AwardUpdateOne) SetAwardType(s string) *AwardUpdateOne {
	auo.mutation.SetAwardType(s)
	return auo
}

// SetNillableAwardType sets the "award_type" field if the given value is not nil.
func (auo *AwardUpdateOne) SetNillableAwardType(s *string) *AwardUpdateOne {
	if s != nil {
		auo.SetAwardType(*s)
	}
	return auo
}

// ClearAwardType clears the value of the "award_type" field.
func (auo *AwardUpdateOne) ClearAwardType() *AwardUpdateOne {
	auo.mutation.ClearAwardType()
	return auo
}

// SetAmount sets the "amount" field.
func (auo *AwardUpdateOne) SetAmount(f float64) *AwardUpdateOne {
	auo.mutation.ResetAmount()
	auo.mutation.SetAmount(f)
	return auo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (auo *AwardUpdateOne) SetNillableAmount(f *float64) *AwardUpdateOne {
	if f != nil {
		auo.SetAmount(*f)
	}
	return auo
}

// AddAmount adds f to the "amount" field.
func (auo *AwardUpdateOne) AddAmount(f float64) *AwardUpdateOne {
	auo.mutation.AddAmount(f)
	return auo
}

// ClearAmount clears the value of the "amount" field.
func (auo *AwardUpdateOne) ClearAmount() *AwardUpdateOne {
	auo.mutation.ClearAmount()
	return auo
}

// SetDescription sets the "description" field.
func (auo *AwardUpdateOne) SetDescription(s string) *AwardUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *AwardUpdateOne) SetNillableDescription(s *string) *AwardUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// ClearDescription clears the value of the "description" field.
func (auo *AwardUpdateOne) ClearDescription() *AwardUpdateOne {
	auo.mutation.ClearDescription()
	return auo
}

// SetCertificateURL sets the "certificate_url" field.
func (auo *AwardUpdateOne) SetCertificateURL(s string) *AwardUpdateOne {
	auo.mutation.SetCertificateURL(s)
	return auo
}

// SetNillableCertificateURL sets the "certificate_url" field if the given value is not nil.
func (auo *AwardUpdateOne) SetNillableCertificateURL(s *string) *AwardUpdateOne {
	if s != nil {
		auo.SetCertificateURL(*s)
	}
	return auo
}

// ClearCertificateURL clears the value of the "certificate_url" field.
func (auo *AwardUpdateOne) ClearCertificateURL() *AwardUpdateOne {
	auo.mutation.ClearCertificateURL()
	return auo
}

// SetSortOrder sets the "sort_order" field.
func (auo *AwardUpdateOne) SetSortOrder(i int) *AwardUpdateOne {
	auo.mutation.ResetSortOrder()
	auo.mutation.SetSortOrder(i)
	return auo
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (auo *AwardUpdateOne) SetNillableSortOrder(i *int) *AwardUpdateOne {
	if i != nil {
		auo.SetSortOrder(*i)
	}
	return auo
}

// AddSortOrder adds i to the "sort_order" field.
func (auo *AwardUpdateOne) AddSortOrder(i int) *AwardUpdateOne {
	auo.mutation.AddSortOrder(i)
	return auo
}

// SetCreatedAt sets the "created_at" field.
func (auo *AwardUpdateOne) SetCreatedAt(t time.Time) *AwardUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *AwardUpdateOne) SetNillableCreatedAt(t *time.Time) *AwardUpdateOne {
	if t != nil {
		auo.SetCreatedAt(*t)
	}
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AwardUpdateOne) SetUpdatedAt(t time.Time) *AwardUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (auo *AwardUpdateOne) SetUserID(id uuid.UUID) *AwardUpdateOne {
	auo.mutation.SetUserID(id)
	return auo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (auo *AwardUpdateOne) SetNillableUserID(id *uuid.UUID) *AwardUpdateOne {
	if id != nil {
		auo = auo.SetUserID(*id)
	}
	return auo
}

// SetUser sets the "user" edge to the User entity.
func (auo *AwardUpdateOne) SetUser(u *User) *AwardUpdateOne {
	return auo.SetUserID(u.ID)
}

// Mutation returns the AwardMutation object of the builder.
func (auo *AwardUpdateOne) Mutation() *AwardMutation {
	return auo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (auo *AwardUpdateOne) ClearUser() *AwardUpdateOne {
	auo.mutation.ClearUser()
	return auo
}

// Where appends a list predicates to the AwardUpdate builder.
func (auo *AwardUpdateOne) Where(ps ...predicate.Award) *AwardUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AwardUpdateOne) Select(field string, fields ...string) *AwardUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Award entity.
func (auo *AwardUpdateOne) Save(ctx context.Context) (*Award, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AwardUpdateOne) SaveX(ctx context.Context) *Award {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AwardUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AwardUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AwardUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := award.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AwardUpdateOne) check() error {
	if v, ok := auo.mutation.Title(); ok {
		if err := award.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Award.title": %w`, err)}
		}
	}
	if v, ok := auo.mutation.AwardingOrganization(); ok {
		if err := award.AwardingOrganizationValidator(v); err != nil {
			return &ValidationError{Name: "awarding_organization", err: fmt.Errorf(`ent: validator failed for field "Award.awarding_organization": %w`, err)}
		}
	}
	if v, ok := auo.mutation.AwardType(); ok {
		if err := award.AwardTypeValidator(v); err != nil {
			return &ValidationError{Name: "award_type", err: fmt.Errorf(`ent: validator failed for field "Award.award_type": %w`, err)}
		}
	}
	if v, ok := auo.mutation.CertificateURL(); ok {
		if err := award.CertificateURLValidator(v); err != nil {
			return &ValidationError{Name: "certificate_url", err: fmt.Errorf(`ent: validator failed for field "Award.certificate_url": %w`, err)}
		}
	}
	return nil
}

func (auo *AwardUpdateOne) sqlSave(ctx context.Context) (_node *Award, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(award.Table, award.Columns, sqlgraph.NewFieldSpec(award.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Award.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, award.FieldID)
		for _, f := range fields {
			if !award.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != award.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Title(); ok {
		_spec.SetField(award.FieldTitle, field.TypeString, value)
	}
	if value, ok := auo.mutation.AwardingOrganization(); ok {
		_spec.SetField(award.FieldAwardingOrganization, field.TypeString, value)
	}
	if value, ok := auo.mutation.AwardDate(); ok {
		_spec.SetField(award.FieldAwardDate, field.TypeTime, value)
	}
	if auo.mutation.AwardDateCleared() {
		_spec.ClearField(award.FieldAwardDate, field.TypeTime)
	}
	if value, ok := auo.mutation.AwardType(); ok {
		_spec.SetField(award.FieldAwardType, field.TypeString, value)
	}
	if auo.mutation.AwardTypeCleared() {
		_spec.ClearField(award.FieldAwardType, field.TypeString)
	}
	if value, ok := auo.mutation.Amount(); ok {
		_spec.SetField(award.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedAmount(); ok {
		_spec.AddField(award.FieldAmount, field.TypeFloat64, value)
	}
	if auo.mutation.AmountCleared() {
		_spec.ClearField(award.FieldAmount, field.TypeFloat64)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(award.FieldDescription, field.TypeString, value)
	}
	if auo.mutation.DescriptionCleared() {
		_spec.ClearField(award.FieldDescription, field.TypeString)
	}
	if value, ok := auo.mutation.CertificateURL(); ok {
		_spec.SetField(award.FieldCertificateURL, field.TypeString, value)
	}
	if auo.mutation.CertificateURLCleared() {
		_spec.ClearField(award.FieldCertificateURL, field.TypeString)
	}
	if value, ok := auo.mutation.SortOrder(); ok {
		_spec.SetField(award.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedSortOrder(); ok {
		_spec.AddField(award.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.SetField(award.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(award.FieldUpdatedAt, field.TypeTime, value)
	}
	if auo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   award.UserTable,
			Columns: []string{award.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   award.UserTable,
			Columns: []string{award.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Award{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{award.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
