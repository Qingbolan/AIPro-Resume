// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/publication"
	"silan-backend/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PublicationUpdate is the builder for updating Publication entities.
type PublicationUpdate struct {
	config
	hooks    []Hook
	mutation *PublicationMutation
}

// Where appends a list predicates to the PublicationUpdate builder.
func (pu *PublicationUpdate) Where(ps ...predicate.Publication) *PublicationUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUserID sets the "user_id" field.
func (pu *PublicationUpdate) SetUserID(u uuid.UUID) *PublicationUpdate {
	pu.mutation.SetUserID(u)
	return pu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pu *PublicationUpdate) SetNillableUserID(u *uuid.UUID) *PublicationUpdate {
	if u != nil {
		pu.SetUserID(*u)
	}
	return pu
}

// SetTitle sets the "title" field.
func (pu *PublicationUpdate) SetTitle(s string) *PublicationUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pu *PublicationUpdate) SetNillableTitle(s *string) *PublicationUpdate {
	if s != nil {
		pu.SetTitle(*s)
	}
	return pu
}

// SetPublicationType sets the "publication_type" field.
func (pu *PublicationUpdate) SetPublicationType(s string) *PublicationUpdate {
	pu.mutation.SetPublicationType(s)
	return pu
}

// SetNillablePublicationType sets the "publication_type" field if the given value is not nil.
func (pu *PublicationUpdate) SetNillablePublicationType(s *string) *PublicationUpdate {
	if s != nil {
		pu.SetPublicationType(*s)
	}
	return pu
}

// SetJournalName sets the "journal_name" field.
func (pu *PublicationUpdate) SetJournalName(s string) *PublicationUpdate {
	pu.mutation.SetJournalName(s)
	return pu
}

// SetNillableJournalName sets the "journal_name" field if the given value is not nil.
func (pu *PublicationUpdate) SetNillableJournalName(s *string) *PublicationUpdate {
	if s != nil {
		pu.SetJournalName(*s)
	}
	return pu
}

// ClearJournalName clears the value of the "journal_name" field.
func (pu *PublicationUpdate) ClearJournalName() *PublicationUpdate {
	pu.mutation.ClearJournalName()
	return pu
}

// SetConferenceName sets the "conference_name" field.
func (pu *PublicationUpdate) SetConferenceName(s string) *PublicationUpdate {
	pu.mutation.SetConferenceName(s)
	return pu
}

// SetNillableConferenceName sets the "conference_name" field if the given value is not nil.
func (pu *PublicationUpdate) SetNillableConferenceName(s *string) *PublicationUpdate {
	if s != nil {
		pu.SetConferenceName(*s)
	}
	return pu
}

// ClearConferenceName clears the value of the "conference_name" field.
func (pu *PublicationUpdate) ClearConferenceName() *PublicationUpdate {
	pu.mutation.ClearConferenceName()
	return pu
}

// SetVolume sets the "volume" field.
func (pu *PublicationUpdate) SetVolume(s string) *PublicationUpdate {
	pu.mutation.SetVolume(s)
	return pu
}

// SetNillableVolume sets the "volume" field if the given value is not nil.
func (pu *PublicationUpdate) SetNillableVolume(s *string) *PublicationUpdate {
	if s != nil {
		pu.SetVolume(*s)
	}
	return pu
}

// ClearVolume clears the value of the "volume" field.
func (pu *PublicationUpdate) ClearVolume() *PublicationUpdate {
	pu.mutation.ClearVolume()
	return pu
}

// SetIssue sets the "issue" field.
func (pu *PublicationUpdate) SetIssue(s string) *PublicationUpdate {
	pu.mutation.SetIssue(s)
	return pu
}

// SetNillableIssue sets the "issue" field if the given value is not nil.
func (pu *PublicationUpdate) SetNillableIssue(s *string) *PublicationUpdate {
	if s != nil {
		pu.SetIssue(*s)
	}
	return pu
}

// ClearIssue clears the value of the "issue" field.
func (pu *PublicationUpdate) ClearIssue() *PublicationUpdate {
	pu.mutation.ClearIssue()
	return pu
}

// SetPages sets the "pages" field.
func (pu *PublicationUpdate) SetPages(s string) *PublicationUpdate {
	pu.mutation.SetPages(s)
	return pu
}

// SetNillablePages sets the "pages" field if the given value is not nil.
func (pu *PublicationUpdate) SetNillablePages(s *string) *PublicationUpdate {
	if s != nil {
		pu.SetPages(*s)
	}
	return pu
}

// ClearPages clears the value of the "pages" field.
func (pu *PublicationUpdate) ClearPages() *PublicationUpdate {
	pu.mutation.ClearPages()
	return pu
}

// SetPublicationDate sets the "publication_date" field.
func (pu *PublicationUpdate) SetPublicationDate(t time.Time) *PublicationUpdate {
	pu.mutation.SetPublicationDate(t)
	return pu
}

// SetNillablePublicationDate sets the "publication_date" field if the given value is not nil.
func (pu *PublicationUpdate) SetNillablePublicationDate(t *time.Time) *PublicationUpdate {
	if t != nil {
		pu.SetPublicationDate(*t)
	}
	return pu
}

// ClearPublicationDate clears the value of the "publication_date" field.
func (pu *PublicationUpdate) ClearPublicationDate() *PublicationUpdate {
	pu.mutation.ClearPublicationDate()
	return pu
}

// SetDoi sets the "doi" field.
func (pu *PublicationUpdate) SetDoi(s string) *PublicationUpdate {
	pu.mutation.SetDoi(s)
	return pu
}

// SetNillableDoi sets the "doi" field if the given value is not nil.
func (pu *PublicationUpdate) SetNillableDoi(s *string) *PublicationUpdate {
	if s != nil {
		pu.SetDoi(*s)
	}
	return pu
}

// ClearDoi clears the value of the "doi" field.
func (pu *PublicationUpdate) ClearDoi() *PublicationUpdate {
	pu.mutation.ClearDoi()
	return pu
}

// SetIsbn sets the "isbn" field.
func (pu *PublicationUpdate) SetIsbn(s string) *PublicationUpdate {
	pu.mutation.SetIsbn(s)
	return pu
}

// SetNillableIsbn sets the "isbn" field if the given value is not nil.
func (pu *PublicationUpdate) SetNillableIsbn(s *string) *PublicationUpdate {
	if s != nil {
		pu.SetIsbn(*s)
	}
	return pu
}

// ClearIsbn clears the value of the "isbn" field.
func (pu *PublicationUpdate) ClearIsbn() *PublicationUpdate {
	pu.mutation.ClearIsbn()
	return pu
}

// SetURL sets the "url" field.
func (pu *PublicationUpdate) SetURL(s string) *PublicationUpdate {
	pu.mutation.SetURL(s)
	return pu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (pu *PublicationUpdate) SetNillableURL(s *string) *PublicationUpdate {
	if s != nil {
		pu.SetURL(*s)
	}
	return pu
}

// ClearURL clears the value of the "url" field.
func (pu *PublicationUpdate) ClearURL() *PublicationUpdate {
	pu.mutation.ClearURL()
	return pu
}

// SetPdfURL sets the "pdf_url" field.
func (pu *PublicationUpdate) SetPdfURL(s string) *PublicationUpdate {
	pu.mutation.SetPdfURL(s)
	return pu
}

// SetNillablePdfURL sets the "pdf_url" field if the given value is not nil.
func (pu *PublicationUpdate) SetNillablePdfURL(s *string) *PublicationUpdate {
	if s != nil {
		pu.SetPdfURL(*s)
	}
	return pu
}

// ClearPdfURL clears the value of the "pdf_url" field.
func (pu *PublicationUpdate) ClearPdfURL() *PublicationUpdate {
	pu.mutation.ClearPdfURL()
	return pu
}

// SetCitationCount sets the "citation_count" field.
func (pu *PublicationUpdate) SetCitationCount(i int) *PublicationUpdate {
	pu.mutation.ResetCitationCount()
	pu.mutation.SetCitationCount(i)
	return pu
}

// SetNillableCitationCount sets the "citation_count" field if the given value is not nil.
func (pu *PublicationUpdate) SetNillableCitationCount(i *int) *PublicationUpdate {
	if i != nil {
		pu.SetCitationCount(*i)
	}
	return pu
}

// AddCitationCount adds i to the "citation_count" field.
func (pu *PublicationUpdate) AddCitationCount(i int) *PublicationUpdate {
	pu.mutation.AddCitationCount(i)
	return pu
}

// SetIsPeerReviewed sets the "is_peer_reviewed" field.
func (pu *PublicationUpdate) SetIsPeerReviewed(b bool) *PublicationUpdate {
	pu.mutation.SetIsPeerReviewed(b)
	return pu
}

// SetNillableIsPeerReviewed sets the "is_peer_reviewed" field if the given value is not nil.
func (pu *PublicationUpdate) SetNillableIsPeerReviewed(b *bool) *PublicationUpdate {
	if b != nil {
		pu.SetIsPeerReviewed(*b)
	}
	return pu
}

// SetSortOrder sets the "sort_order" field.
func (pu *PublicationUpdate) SetSortOrder(i int) *PublicationUpdate {
	pu.mutation.ResetSortOrder()
	pu.mutation.SetSortOrder(i)
	return pu
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (pu *PublicationUpdate) SetNillableSortOrder(i *int) *PublicationUpdate {
	if i != nil {
		pu.SetSortOrder(*i)
	}
	return pu
}

// AddSortOrder adds i to the "sort_order" field.
func (pu *PublicationUpdate) AddSortOrder(i int) *PublicationUpdate {
	pu.mutation.AddSortOrder(i)
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PublicationUpdate) SetCreatedAt(t time.Time) *PublicationUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PublicationUpdate) SetNillableCreatedAt(t *time.Time) *PublicationUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PublicationUpdate) SetUpdatedAt(t time.Time) *PublicationUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pu *PublicationUpdate) SetUserID(id uuid.UUID) *PublicationUpdate {
	pu.mutation.SetUserID(id)
	return pu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (pu *PublicationUpdate) SetNillableUserID(id *uuid.UUID) *PublicationUpdate {
	if id != nil {
		pu = pu.SetUserID(*id)
	}
	return pu
}

// SetUser sets the "user" edge to the User entity.
func (pu *PublicationUpdate) SetUser(u *User) *PublicationUpdate {
	return pu.SetUserID(u.ID)
}

// Mutation returns the PublicationMutation object of the builder.
func (pu *PublicationUpdate) Mutation() *PublicationMutation {
	return pu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pu *PublicationUpdate) ClearUser() *PublicationUpdate {
	pu.mutation.ClearUser()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PublicationUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PublicationUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PublicationUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PublicationUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PublicationUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := publication.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PublicationUpdate) check() error {
	if v, ok := pu.mutation.Title(); ok {
		if err := publication.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Publication.title": %w`, err)}
		}
	}
	if v, ok := pu.mutation.PublicationType(); ok {
		if err := publication.PublicationTypeValidator(v); err != nil {
			return &ValidationError{Name: "publication_type", err: fmt.Errorf(`ent: validator failed for field "Publication.publication_type": %w`, err)}
		}
	}
	if v, ok := pu.mutation.JournalName(); ok {
		if err := publication.JournalNameValidator(v); err != nil {
			return &ValidationError{Name: "journal_name", err: fmt.Errorf(`ent: validator failed for field "Publication.journal_name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.ConferenceName(); ok {
		if err := publication.ConferenceNameValidator(v); err != nil {
			return &ValidationError{Name: "conference_name", err: fmt.Errorf(`ent: validator failed for field "Publication.conference_name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Volume(); ok {
		if err := publication.VolumeValidator(v); err != nil {
			return &ValidationError{Name: "volume", err: fmt.Errorf(`ent: validator failed for field "Publication.volume": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Issue(); ok {
		if err := publication.IssueValidator(v); err != nil {
			return &ValidationError{Name: "issue", err: fmt.Errorf(`ent: validator failed for field "Publication.issue": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Pages(); ok {
		if err := publication.PagesValidator(v); err != nil {
			return &ValidationError{Name: "pages", err: fmt.Errorf(`ent: validator failed for field "Publication.pages": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Doi(); ok {
		if err := publication.DoiValidator(v); err != nil {
			return &ValidationError{Name: "doi", err: fmt.Errorf(`ent: validator failed for field "Publication.doi": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Isbn(); ok {
		if err := publication.IsbnValidator(v); err != nil {
			return &ValidationError{Name: "isbn", err: fmt.Errorf(`ent: validator failed for field "Publication.isbn": %w`, err)}
		}
	}
	if v, ok := pu.mutation.URL(); ok {
		if err := publication.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Publication.url": %w`, err)}
		}
	}
	if v, ok := pu.mutation.PdfURL(); ok {
		if err := publication.PdfURLValidator(v); err != nil {
			return &ValidationError{Name: "pdf_url", err: fmt.Errorf(`ent: validator failed for field "Publication.pdf_url": %w`, err)}
		}
	}
	return nil
}

func (pu *PublicationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(publication.Table, publication.Columns, sqlgraph.NewFieldSpec(publication.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UserID(); ok {
		_spec.SetField(publication.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(publication.FieldTitle, field.TypeString, value)
	}
	if value, ok := pu.mutation.PublicationType(); ok {
		_spec.SetField(publication.FieldPublicationType, field.TypeString, value)
	}
	if value, ok := pu.mutation.JournalName(); ok {
		_spec.SetField(publication.FieldJournalName, field.TypeString, value)
	}
	if pu.mutation.JournalNameCleared() {
		_spec.ClearField(publication.FieldJournalName, field.TypeString)
	}
	if value, ok := pu.mutation.ConferenceName(); ok {
		_spec.SetField(publication.FieldConferenceName, field.TypeString, value)
	}
	if pu.mutation.ConferenceNameCleared() {
		_spec.ClearField(publication.FieldConferenceName, field.TypeString)
	}
	if value, ok := pu.mutation.Volume(); ok {
		_spec.SetField(publication.FieldVolume, field.TypeString, value)
	}
	if pu.mutation.VolumeCleared() {
		_spec.ClearField(publication.FieldVolume, field.TypeString)
	}
	if value, ok := pu.mutation.Issue(); ok {
		_spec.SetField(publication.FieldIssue, field.TypeString, value)
	}
	if pu.mutation.IssueCleared() {
		_spec.ClearField(publication.FieldIssue, field.TypeString)
	}
	if value, ok := pu.mutation.Pages(); ok {
		_spec.SetField(publication.FieldPages, field.TypeString, value)
	}
	if pu.mutation.PagesCleared() {
		_spec.ClearField(publication.FieldPages, field.TypeString)
	}
	if value, ok := pu.mutation.PublicationDate(); ok {
		_spec.SetField(publication.FieldPublicationDate, field.TypeTime, value)
	}
	if pu.mutation.PublicationDateCleared() {
		_spec.ClearField(publication.FieldPublicationDate, field.TypeTime)
	}
	if value, ok := pu.mutation.Doi(); ok {
		_spec.SetField(publication.FieldDoi, field.TypeString, value)
	}
	if pu.mutation.DoiCleared() {
		_spec.ClearField(publication.FieldDoi, field.TypeString)
	}
	if value, ok := pu.mutation.Isbn(); ok {
		_spec.SetField(publication.FieldIsbn, field.TypeString, value)
	}
	if pu.mutation.IsbnCleared() {
		_spec.ClearField(publication.FieldIsbn, field.TypeString)
	}
	if value, ok := pu.mutation.URL(); ok {
		_spec.SetField(publication.FieldURL, field.TypeString, value)
	}
	if pu.mutation.URLCleared() {
		_spec.ClearField(publication.FieldURL, field.TypeString)
	}
	if value, ok := pu.mutation.PdfURL(); ok {
		_spec.SetField(publication.FieldPdfURL, field.TypeString, value)
	}
	if pu.mutation.PdfURLCleared() {
		_spec.ClearField(publication.FieldPdfURL, field.TypeString)
	}
	if value, ok := pu.mutation.CitationCount(); ok {
		_spec.SetField(publication.FieldCitationCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedCitationCount(); ok {
		_spec.AddField(publication.FieldCitationCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.IsPeerReviewed(); ok {
		_spec.SetField(publication.FieldIsPeerReviewed, field.TypeBool, value)
	}
	if value, ok := pu.mutation.SortOrder(); ok {
		_spec.SetField(publication.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedSortOrder(); ok {
		_spec.AddField(publication.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(publication.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(publication.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   publication.UserTable,
			Columns: []string{publication.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   publication.UserTable,
			Columns: []string{publication.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publication.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PublicationUpdateOne is the builder for updating a single Publication entity.
type PublicationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PublicationMutation
}

// SetUserID sets the "user_id" field.
func (puo *PublicationUpdateOne) SetUserID(u uuid.UUID) *PublicationUpdateOne {
	puo.mutation.SetUserID(u)
	return puo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (puo *PublicationUpdateOne) SetNillableUserID(u *uuid.UUID) *PublicationUpdateOne {
	if u != nil {
		puo.SetUserID(*u)
	}
	return puo
}

// SetTitle sets the "title" field.
func (puo *PublicationUpdateOne) SetTitle(s string) *PublicationUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puo *PublicationUpdateOne) SetNillableTitle(s *string) *PublicationUpdateOne {
	if s != nil {
		puo.SetTitle(*s)
	}
	return puo
}

// SetPublicationType sets the "publication_type" field.
func (puo *PublicationUpdateOne) SetPublicationType(s string) *PublicationUpdateOne {
	puo.mutation.SetPublicationType(s)
	return puo
}

// SetNillablePublicationType sets the "publication_type" field if the given value is not nil.
func (puo *PublicationUpdateOne) SetNillablePublicationType(s *string) *PublicationUpdateOne {
	if s != nil {
		puo.SetPublicationType(*s)
	}
	return puo
}

// SetJournalName sets the "journal_name" field.
func (puo *PublicationUpdateOne) SetJournalName(s string) *PublicationUpdateOne {
	puo.mutation.SetJournalName(s)
	return puo
}

// SetNillableJournalName sets the "journal_name" field if the given value is not nil.
func (puo *PublicationUpdateOne) SetNillableJournalName(s *string) *PublicationUpdateOne {
	if s != nil {
		puo.SetJournalName(*s)
	}
	return puo
}

// ClearJournalName clears the value of the "journal_name" field.
func (puo *PublicationUpdateOne) ClearJournalName() *PublicationUpdateOne {
	puo.mutation.ClearJournalName()
	return puo
}

// SetConferenceName sets the "conference_name" field.
func (puo *PublicationUpdateOne) SetConferenceName(s string) *PublicationUpdateOne {
	puo.mutation.SetConferenceName(s)
	return puo
}

// SetNillableConferenceName sets the "conference_name" field if the given value is not nil.
func (puo *PublicationUpdateOne) SetNillableConferenceName(s *string) *PublicationUpdateOne {
	if s != nil {
		puo.SetConferenceName(*s)
	}
	return puo
}

// ClearConferenceName clears the value of the "conference_name" field.
func (puo *PublicationUpdateOne) ClearConferenceName() *PublicationUpdateOne {
	puo.mutation.ClearConferenceName()
	return puo
}

// SetVolume sets the "volume" field.
func (puo *PublicationUpdateOne) SetVolume(s string) *PublicationUpdateOne {
	puo.mutation.SetVolume(s)
	return puo
}

// SetNillableVolume sets the "volume" field if the given value is not nil.
func (puo *PublicationUpdateOne) SetNillableVolume(s *string) *PublicationUpdateOne {
	if s != nil {
		puo.SetVolume(*s)
	}
	return puo
}

// ClearVolume clears the value of the "volume" field.
func (puo *PublicationUpdateOne) ClearVolume() *PublicationUpdateOne {
	puo.mutation.ClearVolume()
	return puo
}

// SetIssue sets the "issue" field.
func (puo *PublicationUpdateOne) SetIssue(s string) *PublicationUpdateOne {
	puo.mutation.SetIssue(s)
	return puo
}

// SetNillableIssue sets the "issue" field if the given value is not nil.
func (puo *PublicationUpdateOne) SetNillableIssue(s *string) *PublicationUpdateOne {
	if s != nil {
		puo.SetIssue(*s)
	}
	return puo
}

// ClearIssue clears the value of the "issue" field.
func (puo *PublicationUpdateOne) ClearIssue() *PublicationUpdateOne {
	puo.mutation.ClearIssue()
	return puo
}

// SetPages sets the "pages" field.
func (puo *PublicationUpdateOne) SetPages(s string) *PublicationUpdateOne {
	puo.mutation.SetPages(s)
	return puo
}

// SetNillablePages sets the "pages" field if the given value is not nil.
func (puo *PublicationUpdateOne) SetNillablePages(s *string) *PublicationUpdateOne {
	if s != nil {
		puo.SetPages(*s)
	}
	return puo
}

// ClearPages clears the value of the "pages" field.
func (puo *PublicationUpdateOne) ClearPages() *PublicationUpdateOne {
	puo.mutation.ClearPages()
	return puo
}

// SetPublicationDate sets the "publication_date" field.
func (puo *PublicationUpdateOne) SetPublicationDate(t time.Time) *PublicationUpdateOne {
	puo.mutation.SetPublicationDate(t)
	return puo
}

// SetNillablePublicationDate sets the "publication_date" field if the given value is not nil.
func (puo *PublicationUpdateOne) SetNillablePublicationDate(t *time.Time) *PublicationUpdateOne {
	if t != nil {
		puo.SetPublicationDate(*t)
	}
	return puo
}

// ClearPublicationDate clears the value of the "publication_date" field.
func (puo *PublicationUpdateOne) ClearPublicationDate() *PublicationUpdateOne {
	puo.mutation.ClearPublicationDate()
	return puo
}

// SetDoi sets the "doi" field.
func (puo *PublicationUpdateOne) SetDoi(s string) *PublicationUpdateOne {
	puo.mutation.SetDoi(s)
	return puo
}

// SetNillableDoi sets the "doi" field if the given value is not nil.
func (puo *PublicationUpdateOne) SetNillableDoi(s *string) *PublicationUpdateOne {
	if s != nil {
		puo.SetDoi(*s)
	}
	return puo
}

// ClearDoi clears the value of the "doi" field.
func (puo *PublicationUpdateOne) ClearDoi() *PublicationUpdateOne {
	puo.mutation.ClearDoi()
	return puo
}

// SetIsbn sets the "isbn" field.
func (puo *PublicationUpdateOne) SetIsbn(s string) *PublicationUpdateOne {
	puo.mutation.SetIsbn(s)
	return puo
}

// SetNillableIsbn sets the "isbn" field if the given value is not nil.
func (puo *PublicationUpdateOne) SetNillableIsbn(s *string) *PublicationUpdateOne {
	if s != nil {
		puo.SetIsbn(*s)
	}
	return puo
}

// ClearIsbn clears the value of the "isbn" field.
func (puo *PublicationUpdateOne) ClearIsbn() *PublicationUpdateOne {
	puo.mutation.ClearIsbn()
	return puo
}

// SetURL sets the "url" field.
func (puo *PublicationUpdateOne) SetURL(s string) *PublicationUpdateOne {
	puo.mutation.SetURL(s)
	return puo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (puo *PublicationUpdateOne) SetNillableURL(s *string) *PublicationUpdateOne {
	if s != nil {
		puo.SetURL(*s)
	}
	return puo
}

// ClearURL clears the value of the "url" field.
func (puo *PublicationUpdateOne) ClearURL() *PublicationUpdateOne {
	puo.mutation.ClearURL()
	return puo
}

// SetPdfURL sets the "pdf_url" field.
func (puo *PublicationUpdateOne) SetPdfURL(s string) *PublicationUpdateOne {
	puo.mutation.SetPdfURL(s)
	return puo
}

// SetNillablePdfURL sets the "pdf_url" field if the given value is not nil.
func (puo *PublicationUpdateOne) SetNillablePdfURL(s *string) *PublicationUpdateOne {
	if s != nil {
		puo.SetPdfURL(*s)
	}
	return puo
}

// ClearPdfURL clears the value of the "pdf_url" field.
func (puo *PublicationUpdateOne) ClearPdfURL() *PublicationUpdateOne {
	puo.mutation.ClearPdfURL()
	return puo
}

// SetCitationCount sets the "citation_count" field.
func (puo *PublicationUpdateOne) SetCitationCount(i int) *PublicationUpdateOne {
	puo.mutation.ResetCitationCount()
	puo.mutation.SetCitationCount(i)
	return puo
}

// SetNillableCitationCount sets the "citation_count" field if the given value is not nil.
func (puo *PublicationUpdateOne) SetNillableCitationCount(i *int) *PublicationUpdateOne {
	if i != nil {
		puo.SetCitationCount(*i)
	}
	return puo
}

// AddCitationCount adds i to the "citation_count" field.
func (puo *PublicationUpdateOne) AddCitationCount(i int) *PublicationUpdateOne {
	puo.mutation.AddCitationCount(i)
	return puo
}

// SetIsPeerReviewed sets the "is_peer_reviewed" field.
func (puo *PublicationUpdateOne) SetIsPeerReviewed(b bool) *PublicationUpdateOne {
	puo.mutation.SetIsPeerReviewed(b)
	return puo
}

// SetNillableIsPeerReviewed sets the "is_peer_reviewed" field if the given value is not nil.
func (puo *PublicationUpdateOne) SetNillableIsPeerReviewed(b *bool) *PublicationUpdateOne {
	if b != nil {
		puo.SetIsPeerReviewed(*b)
	}
	return puo
}

// SetSortOrder sets the "sort_order" field.
func (puo *PublicationUpdateOne) SetSortOrder(i int) *PublicationUpdateOne {
	puo.mutation.ResetSortOrder()
	puo.mutation.SetSortOrder(i)
	return puo
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (puo *PublicationUpdateOne) SetNillableSortOrder(i *int) *PublicationUpdateOne {
	if i != nil {
		puo.SetSortOrder(*i)
	}
	return puo
}

// AddSortOrder adds i to the "sort_order" field.
func (puo *PublicationUpdateOne) AddSortOrder(i int) *PublicationUpdateOne {
	puo.mutation.AddSortOrder(i)
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *PublicationUpdateOne) SetCreatedAt(t time.Time) *PublicationUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PublicationUpdateOne) SetNillableCreatedAt(t *time.Time) *PublicationUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PublicationUpdateOne) SetUpdatedAt(t time.Time) *PublicationUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (puo *PublicationUpdateOne) SetUserID(id uuid.UUID) *PublicationUpdateOne {
	puo.mutation.SetUserID(id)
	return puo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (puo *PublicationUpdateOne) SetNillableUserID(id *uuid.UUID) *PublicationUpdateOne {
	if id != nil {
		puo = puo.SetUserID(*id)
	}
	return puo
}

// SetUser sets the "user" edge to the User entity.
func (puo *PublicationUpdateOne) SetUser(u *User) *PublicationUpdateOne {
	return puo.SetUserID(u.ID)
}

// Mutation returns the PublicationMutation object of the builder.
func (puo *PublicationUpdateOne) Mutation() *PublicationMutation {
	return puo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (puo *PublicationUpdateOne) ClearUser() *PublicationUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// Where appends a list predicates to the PublicationUpdate builder.
func (puo *PublicationUpdateOne) Where(ps ...predicate.Publication) *PublicationUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PublicationUpdateOne) Select(field string, fields ...string) *PublicationUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Publication entity.
func (puo *PublicationUpdateOne) Save(ctx context.Context) (*Publication, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PublicationUpdateOne) SaveX(ctx context.Context) *Publication {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PublicationUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PublicationUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PublicationUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := publication.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PublicationUpdateOne) check() error {
	if v, ok := puo.mutation.Title(); ok {
		if err := publication.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Publication.title": %w`, err)}
		}
	}
	if v, ok := puo.mutation.PublicationType(); ok {
		if err := publication.PublicationTypeValidator(v); err != nil {
			return &ValidationError{Name: "publication_type", err: fmt.Errorf(`ent: validator failed for field "Publication.publication_type": %w`, err)}
		}
	}
	if v, ok := puo.mutation.JournalName(); ok {
		if err := publication.JournalNameValidator(v); err != nil {
			return &ValidationError{Name: "journal_name", err: fmt.Errorf(`ent: validator failed for field "Publication.journal_name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.ConferenceName(); ok {
		if err := publication.ConferenceNameValidator(v); err != nil {
			return &ValidationError{Name: "conference_name", err: fmt.Errorf(`ent: validator failed for field "Publication.conference_name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Volume(); ok {
		if err := publication.VolumeValidator(v); err != nil {
			return &ValidationError{Name: "volume", err: fmt.Errorf(`ent: validator failed for field "Publication.volume": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Issue(); ok {
		if err := publication.IssueValidator(v); err != nil {
			return &ValidationError{Name: "issue", err: fmt.Errorf(`ent: validator failed for field "Publication.issue": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Pages(); ok {
		if err := publication.PagesValidator(v); err != nil {
			return &ValidationError{Name: "pages", err: fmt.Errorf(`ent: validator failed for field "Publication.pages": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Doi(); ok {
		if err := publication.DoiValidator(v); err != nil {
			return &ValidationError{Name: "doi", err: fmt.Errorf(`ent: validator failed for field "Publication.doi": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Isbn(); ok {
		if err := publication.IsbnValidator(v); err != nil {
			return &ValidationError{Name: "isbn", err: fmt.Errorf(`ent: validator failed for field "Publication.isbn": %w`, err)}
		}
	}
	if v, ok := puo.mutation.URL(); ok {
		if err := publication.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Publication.url": %w`, err)}
		}
	}
	if v, ok := puo.mutation.PdfURL(); ok {
		if err := publication.PdfURLValidator(v); err != nil {
			return &ValidationError{Name: "pdf_url", err: fmt.Errorf(`ent: validator failed for field "Publication.pdf_url": %w`, err)}
		}
	}
	return nil
}

func (puo *PublicationUpdateOne) sqlSave(ctx context.Context) (_node *Publication, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(publication.Table, publication.Columns, sqlgraph.NewFieldSpec(publication.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Publication.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, publication.FieldID)
		for _, f := range fields {
			if !publication.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != publication.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UserID(); ok {
		_spec.SetField(publication.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(publication.FieldTitle, field.TypeString, value)
	}
	if value, ok := puo.mutation.PublicationType(); ok {
		_spec.SetField(publication.FieldPublicationType, field.TypeString, value)
	}
	if value, ok := puo.mutation.JournalName(); ok {
		_spec.SetField(publication.FieldJournalName, field.TypeString, value)
	}
	if puo.mutation.JournalNameCleared() {
		_spec.ClearField(publication.FieldJournalName, field.TypeString)
	}
	if value, ok := puo.mutation.ConferenceName(); ok {
		_spec.SetField(publication.FieldConferenceName, field.TypeString, value)
	}
	if puo.mutation.ConferenceNameCleared() {
		_spec.ClearField(publication.FieldConferenceName, field.TypeString)
	}
	if value, ok := puo.mutation.Volume(); ok {
		_spec.SetField(publication.FieldVolume, field.TypeString, value)
	}
	if puo.mutation.VolumeCleared() {
		_spec.ClearField(publication.FieldVolume, field.TypeString)
	}
	if value, ok := puo.mutation.Issue(); ok {
		_spec.SetField(publication.FieldIssue, field.TypeString, value)
	}
	if puo.mutation.IssueCleared() {
		_spec.ClearField(publication.FieldIssue, field.TypeString)
	}
	if value, ok := puo.mutation.Pages(); ok {
		_spec.SetField(publication.FieldPages, field.TypeString, value)
	}
	if puo.mutation.PagesCleared() {
		_spec.ClearField(publication.FieldPages, field.TypeString)
	}
	if value, ok := puo.mutation.PublicationDate(); ok {
		_spec.SetField(publication.FieldPublicationDate, field.TypeTime, value)
	}
	if puo.mutation.PublicationDateCleared() {
		_spec.ClearField(publication.FieldPublicationDate, field.TypeTime)
	}
	if value, ok := puo.mutation.Doi(); ok {
		_spec.SetField(publication.FieldDoi, field.TypeString, value)
	}
	if puo.mutation.DoiCleared() {
		_spec.ClearField(publication.FieldDoi, field.TypeString)
	}
	if value, ok := puo.mutation.Isbn(); ok {
		_spec.SetField(publication.FieldIsbn, field.TypeString, value)
	}
	if puo.mutation.IsbnCleared() {
		_spec.ClearField(publication.FieldIsbn, field.TypeString)
	}
	if value, ok := puo.mutation.URL(); ok {
		_spec.SetField(publication.FieldURL, field.TypeString, value)
	}
	if puo.mutation.URLCleared() {
		_spec.ClearField(publication.FieldURL, field.TypeString)
	}
	if value, ok := puo.mutation.PdfURL(); ok {
		_spec.SetField(publication.FieldPdfURL, field.TypeString, value)
	}
	if puo.mutation.PdfURLCleared() {
		_spec.ClearField(publication.FieldPdfURL, field.TypeString)
	}
	if value, ok := puo.mutation.CitationCount(); ok {
		_spec.SetField(publication.FieldCitationCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedCitationCount(); ok {
		_spec.AddField(publication.FieldCitationCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.IsPeerReviewed(); ok {
		_spec.SetField(publication.FieldIsPeerReviewed, field.TypeBool, value)
	}
	if value, ok := puo.mutation.SortOrder(); ok {
		_spec.SetField(publication.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedSortOrder(); ok {
		_spec.AddField(publication.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(publication.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(publication.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   publication.UserTable,
			Columns: []string{publication.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   publication.UserTable,
			Columns: []string{publication.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Publication{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publication.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
