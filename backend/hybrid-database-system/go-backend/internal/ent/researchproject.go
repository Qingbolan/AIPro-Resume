// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/researchproject"
	"silan-backend/internal/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ResearchProject is the model entity for the ResearchProject schema.
type ResearchProject struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// IsOngoing holds the value of the "is_ongoing" field.
	IsOngoing bool `json:"is_ongoing,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// ResearchType holds the value of the "research_type" field.
	ResearchType string `json:"research_type,omitempty"`
	// FundingSource holds the value of the "funding_source" field.
	FundingSource string `json:"funding_source,omitempty"`
	// FundingAmount holds the value of the "funding_amount" field.
	FundingAmount float64 `json:"funding_amount,omitempty"`
	// SortOrder holds the value of the "sort_order" field.
	SortOrder int `json:"sort_order,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResearchProjectQuery when eager-loading is set.
	Edges                  ResearchProjectEdges `json:"edges"`
	user_research_projects *uuid.UUID
	selectValues           sql.SelectValues
}

// ResearchProjectEdges holds the relations/edges for other nodes in the graph.
type ResearchProjectEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResearchProjectEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResearchProject) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case researchproject.FieldIsOngoing:
			values[i] = new(sql.NullBool)
		case researchproject.FieldFundingAmount:
			values[i] = new(sql.NullFloat64)
		case researchproject.FieldSortOrder:
			values[i] = new(sql.NullInt64)
		case researchproject.FieldTitle, researchproject.FieldLocation, researchproject.FieldResearchType, researchproject.FieldFundingSource:
			values[i] = new(sql.NullString)
		case researchproject.FieldStartDate, researchproject.FieldEndDate, researchproject.FieldCreatedAt, researchproject.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case researchproject.FieldID, researchproject.FieldUserID:
			values[i] = new(uuid.UUID)
		case researchproject.ForeignKeys[0]: // user_research_projects
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResearchProject fields.
func (rp *ResearchProject) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case researchproject.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rp.ID = *value
			}
		case researchproject.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				rp.UserID = *value
			}
		case researchproject.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				rp.Title = value.String
			}
		case researchproject.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				rp.StartDate = value.Time
			}
		case researchproject.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				rp.EndDate = value.Time
			}
		case researchproject.FieldIsOngoing:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_ongoing", values[i])
			} else if value.Valid {
				rp.IsOngoing = value.Bool
			}
		case researchproject.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				rp.Location = value.String
			}
		case researchproject.FieldResearchType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field research_type", values[i])
			} else if value.Valid {
				rp.ResearchType = value.String
			}
		case researchproject.FieldFundingSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field funding_source", values[i])
			} else if value.Valid {
				rp.FundingSource = value.String
			}
		case researchproject.FieldFundingAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field funding_amount", values[i])
			} else if value.Valid {
				rp.FundingAmount = value.Float64
			}
		case researchproject.FieldSortOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_order", values[i])
			} else if value.Valid {
				rp.SortOrder = int(value.Int64)
			}
		case researchproject.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rp.CreatedAt = value.Time
			}
		case researchproject.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rp.UpdatedAt = value.Time
			}
		case researchproject.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_research_projects", values[i])
			} else if value.Valid {
				rp.user_research_projects = new(uuid.UUID)
				*rp.user_research_projects = *value.S.(*uuid.UUID)
			}
		default:
			rp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ResearchProject.
// This includes values selected through modifiers, order, etc.
func (rp *ResearchProject) Value(name string) (ent.Value, error) {
	return rp.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the ResearchProject entity.
func (rp *ResearchProject) QueryUser() *UserQuery {
	return NewResearchProjectClient(rp.config).QueryUser(rp)
}

// Update returns a builder for updating this ResearchProject.
// Note that you need to call ResearchProject.Unwrap() before calling this method if this ResearchProject
// was returned from a transaction, and the transaction was committed or rolled back.
func (rp *ResearchProject) Update() *ResearchProjectUpdateOne {
	return NewResearchProjectClient(rp.config).UpdateOne(rp)
}

// Unwrap unwraps the ResearchProject entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rp *ResearchProject) Unwrap() *ResearchProject {
	_tx, ok := rp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ResearchProject is not a transactional entity")
	}
	rp.config.driver = _tx.drv
	return rp
}

// String implements the fmt.Stringer.
func (rp *ResearchProject) String() string {
	var builder strings.Builder
	builder.WriteString("ResearchProject(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rp.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", rp.UserID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(rp.Title)
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(rp.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(rp.EndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_ongoing=")
	builder.WriteString(fmt.Sprintf("%v", rp.IsOngoing))
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(rp.Location)
	builder.WriteString(", ")
	builder.WriteString("research_type=")
	builder.WriteString(rp.ResearchType)
	builder.WriteString(", ")
	builder.WriteString("funding_source=")
	builder.WriteString(rp.FundingSource)
	builder.WriteString(", ")
	builder.WriteString("funding_amount=")
	builder.WriteString(fmt.Sprintf("%v", rp.FundingAmount))
	builder.WriteString(", ")
	builder.WriteString("sort_order=")
	builder.WriteString(fmt.Sprintf("%v", rp.SortOrder))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rp.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ResearchProjects is a parsable slice of ResearchProject.
type ResearchProjects []*ResearchProject
