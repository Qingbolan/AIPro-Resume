// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"silan-backend/internal/ent/blogcomment"
	"silan-backend/internal/ent/blogpost"
	"silan-backend/internal/ent/predicate"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BlogCommentQuery is the builder for querying BlogComment entities.
type BlogCommentQuery struct {
	config
	ctx         *QueryContext
	order       []blogcomment.OrderOption
	inters      []Interceptor
	predicates  []predicate.BlogComment
	withPost    *BlogPostQuery
	withParent  *BlogCommentQuery
	withReplies *BlogCommentQuery
	withFKs     bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BlogCommentQuery builder.
func (bcq *BlogCommentQuery) Where(ps ...predicate.BlogComment) *BlogCommentQuery {
	bcq.predicates = append(bcq.predicates, ps...)
	return bcq
}

// Limit the number of records to be returned by this query.
func (bcq *BlogCommentQuery) Limit(limit int) *BlogCommentQuery {
	bcq.ctx.Limit = &limit
	return bcq
}

// Offset to start from.
func (bcq *BlogCommentQuery) Offset(offset int) *BlogCommentQuery {
	bcq.ctx.Offset = &offset
	return bcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (bcq *BlogCommentQuery) Unique(unique bool) *BlogCommentQuery {
	bcq.ctx.Unique = &unique
	return bcq
}

// Order specifies how the records should be ordered.
func (bcq *BlogCommentQuery) Order(o ...blogcomment.OrderOption) *BlogCommentQuery {
	bcq.order = append(bcq.order, o...)
	return bcq
}

// QueryPost chains the current query on the "post" edge.
func (bcq *BlogCommentQuery) QueryPost() *BlogPostQuery {
	query := (&BlogPostClient{config: bcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(blogcomment.Table, blogcomment.FieldID, selector),
			sqlgraph.To(blogpost.Table, blogpost.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, blogcomment.PostTable, blogcomment.PostColumn),
		)
		fromU = sqlgraph.SetNeighbors(bcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParent chains the current query on the "parent" edge.
func (bcq *BlogCommentQuery) QueryParent() *BlogCommentQuery {
	query := (&BlogCommentClient{config: bcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(blogcomment.Table, blogcomment.FieldID, selector),
			sqlgraph.To(blogcomment.Table, blogcomment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, blogcomment.ParentTable, blogcomment.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(bcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReplies chains the current query on the "replies" edge.
func (bcq *BlogCommentQuery) QueryReplies() *BlogCommentQuery {
	query := (&BlogCommentClient{config: bcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(blogcomment.Table, blogcomment.FieldID, selector),
			sqlgraph.To(blogcomment.Table, blogcomment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, blogcomment.RepliesTable, blogcomment.RepliesColumn),
		)
		fromU = sqlgraph.SetNeighbors(bcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BlogComment entity from the query.
// Returns a *NotFoundError when no BlogComment was found.
func (bcq *BlogCommentQuery) First(ctx context.Context) (*BlogComment, error) {
	nodes, err := bcq.Limit(1).All(setContextOp(ctx, bcq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{blogcomment.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bcq *BlogCommentQuery) FirstX(ctx context.Context) *BlogComment {
	node, err := bcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BlogComment ID from the query.
// Returns a *NotFoundError when no BlogComment ID was found.
func (bcq *BlogCommentQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = bcq.Limit(1).IDs(setContextOp(ctx, bcq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{blogcomment.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (bcq *BlogCommentQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := bcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BlogComment entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BlogComment entity is found.
// Returns a *NotFoundError when no BlogComment entities are found.
func (bcq *BlogCommentQuery) Only(ctx context.Context) (*BlogComment, error) {
	nodes, err := bcq.Limit(2).All(setContextOp(ctx, bcq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{blogcomment.Label}
	default:
		return nil, &NotSingularError{blogcomment.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bcq *BlogCommentQuery) OnlyX(ctx context.Context) *BlogComment {
	node, err := bcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BlogComment ID in the query.
// Returns a *NotSingularError when more than one BlogComment ID is found.
// Returns a *NotFoundError when no entities are found.
func (bcq *BlogCommentQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = bcq.Limit(2).IDs(setContextOp(ctx, bcq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{blogcomment.Label}
	default:
		err = &NotSingularError{blogcomment.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bcq *BlogCommentQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := bcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BlogComments.
func (bcq *BlogCommentQuery) All(ctx context.Context) ([]*BlogComment, error) {
	ctx = setContextOp(ctx, bcq.ctx, ent.OpQueryAll)
	if err := bcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BlogComment, *BlogCommentQuery]()
	return withInterceptors[[]*BlogComment](ctx, bcq, qr, bcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (bcq *BlogCommentQuery) AllX(ctx context.Context) []*BlogComment {
	nodes, err := bcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BlogComment IDs.
func (bcq *BlogCommentQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if bcq.ctx.Unique == nil && bcq.path != nil {
		bcq.Unique(true)
	}
	ctx = setContextOp(ctx, bcq.ctx, ent.OpQueryIDs)
	if err = bcq.Select(blogcomment.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bcq *BlogCommentQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := bcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bcq *BlogCommentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, bcq.ctx, ent.OpQueryCount)
	if err := bcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, bcq, querierCount[*BlogCommentQuery](), bcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (bcq *BlogCommentQuery) CountX(ctx context.Context) int {
	count, err := bcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bcq *BlogCommentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, bcq.ctx, ent.OpQueryExist)
	switch _, err := bcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (bcq *BlogCommentQuery) ExistX(ctx context.Context) bool {
	exist, err := bcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BlogCommentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bcq *BlogCommentQuery) Clone() *BlogCommentQuery {
	if bcq == nil {
		return nil
	}
	return &BlogCommentQuery{
		config:      bcq.config,
		ctx:         bcq.ctx.Clone(),
		order:       append([]blogcomment.OrderOption{}, bcq.order...),
		inters:      append([]Interceptor{}, bcq.inters...),
		predicates:  append([]predicate.BlogComment{}, bcq.predicates...),
		withPost:    bcq.withPost.Clone(),
		withParent:  bcq.withParent.Clone(),
		withReplies: bcq.withReplies.Clone(),
		// clone intermediate query.
		sql:  bcq.sql.Clone(),
		path: bcq.path,
	}
}

// WithPost tells the query-builder to eager-load the nodes that are connected to
// the "post" edge. The optional arguments are used to configure the query builder of the edge.
func (bcq *BlogCommentQuery) WithPost(opts ...func(*BlogPostQuery)) *BlogCommentQuery {
	query := (&BlogPostClient{config: bcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bcq.withPost = query
	return bcq
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (bcq *BlogCommentQuery) WithParent(opts ...func(*BlogCommentQuery)) *BlogCommentQuery {
	query := (&BlogCommentClient{config: bcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bcq.withParent = query
	return bcq
}

// WithReplies tells the query-builder to eager-load the nodes that are connected to
// the "replies" edge. The optional arguments are used to configure the query builder of the edge.
func (bcq *BlogCommentQuery) WithReplies(opts ...func(*BlogCommentQuery)) *BlogCommentQuery {
	query := (&BlogCommentClient{config: bcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bcq.withReplies = query
	return bcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		BlogPostID uuid.UUID `json:"blog_post_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BlogComment.Query().
//		GroupBy(blogcomment.FieldBlogPostID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (bcq *BlogCommentQuery) GroupBy(field string, fields ...string) *BlogCommentGroupBy {
	bcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BlogCommentGroupBy{build: bcq}
	grbuild.flds = &bcq.ctx.Fields
	grbuild.label = blogcomment.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		BlogPostID uuid.UUID `json:"blog_post_id,omitempty"`
//	}
//
//	client.BlogComment.Query().
//		Select(blogcomment.FieldBlogPostID).
//		Scan(ctx, &v)
func (bcq *BlogCommentQuery) Select(fields ...string) *BlogCommentSelect {
	bcq.ctx.Fields = append(bcq.ctx.Fields, fields...)
	sbuild := &BlogCommentSelect{BlogCommentQuery: bcq}
	sbuild.label = blogcomment.Label
	sbuild.flds, sbuild.scan = &bcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BlogCommentSelect configured with the given aggregations.
func (bcq *BlogCommentQuery) Aggregate(fns ...AggregateFunc) *BlogCommentSelect {
	return bcq.Select().Aggregate(fns...)
}

func (bcq *BlogCommentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range bcq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, bcq); err != nil {
				return err
			}
		}
	}
	for _, f := range bcq.ctx.Fields {
		if !blogcomment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if bcq.path != nil {
		prev, err := bcq.path(ctx)
		if err != nil {
			return err
		}
		bcq.sql = prev
	}
	return nil
}

func (bcq *BlogCommentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BlogComment, error) {
	var (
		nodes       = []*BlogComment{}
		withFKs     = bcq.withFKs
		_spec       = bcq.querySpec()
		loadedTypes = [3]bool{
			bcq.withPost != nil,
			bcq.withParent != nil,
			bcq.withReplies != nil,
		}
	)
	if bcq.withPost != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, blogcomment.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BlogComment).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BlogComment{config: bcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, bcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := bcq.withPost; query != nil {
		if err := bcq.loadPost(ctx, query, nodes, nil,
			func(n *BlogComment, e *BlogPost) { n.Edges.Post = e }); err != nil {
			return nil, err
		}
	}
	if query := bcq.withParent; query != nil {
		if err := bcq.loadParent(ctx, query, nodes, nil,
			func(n *BlogComment, e *BlogComment) { n.Edges.Parent = e }); err != nil {
			return nil, err
		}
	}
	if query := bcq.withReplies; query != nil {
		if err := bcq.loadReplies(ctx, query, nodes,
			func(n *BlogComment) { n.Edges.Replies = []*BlogComment{} },
			func(n *BlogComment, e *BlogComment) { n.Edges.Replies = append(n.Edges.Replies, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (bcq *BlogCommentQuery) loadPost(ctx context.Context, query *BlogPostQuery, nodes []*BlogComment, init func(*BlogComment), assign func(*BlogComment, *BlogPost)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*BlogComment)
	for i := range nodes {
		if nodes[i].blog_post_comments == nil {
			continue
		}
		fk := *nodes[i].blog_post_comments
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(blogpost.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "blog_post_comments" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bcq *BlogCommentQuery) loadParent(ctx context.Context, query *BlogCommentQuery, nodes []*BlogComment, init func(*BlogComment), assign func(*BlogComment, *BlogComment)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*BlogComment)
	for i := range nodes {
		fk := nodes[i].ParentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(blogcomment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "parent_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bcq *BlogCommentQuery) loadReplies(ctx context.Context, query *BlogCommentQuery, nodes []*BlogComment, init func(*BlogComment), assign func(*BlogComment, *BlogComment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*BlogComment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(blogcomment.FieldParentID)
	}
	query.Where(predicate.BlogComment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(blogcomment.RepliesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ParentID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "parent_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (bcq *BlogCommentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bcq.querySpec()
	_spec.Node.Columns = bcq.ctx.Fields
	if len(bcq.ctx.Fields) > 0 {
		_spec.Unique = bcq.ctx.Unique != nil && *bcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, bcq.driver, _spec)
}

func (bcq *BlogCommentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(blogcomment.Table, blogcomment.Columns, sqlgraph.NewFieldSpec(blogcomment.FieldID, field.TypeUUID))
	_spec.From = bcq.sql
	if unique := bcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if bcq.path != nil {
		_spec.Unique = true
	}
	if fields := bcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blogcomment.FieldID)
		for i := range fields {
			if fields[i] != blogcomment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if bcq.withParent != nil {
			_spec.Node.AddColumnOnce(blogcomment.FieldParentID)
		}
	}
	if ps := bcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (bcq *BlogCommentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(bcq.driver.Dialect())
	t1 := builder.Table(blogcomment.Table)
	columns := bcq.ctx.Fields
	if len(columns) == 0 {
		columns = blogcomment.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if bcq.sql != nil {
		selector = bcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if bcq.ctx.Unique != nil && *bcq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range bcq.predicates {
		p(selector)
	}
	for _, p := range bcq.order {
		p(selector)
	}
	if offset := bcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BlogCommentGroupBy is the group-by builder for BlogComment entities.
type BlogCommentGroupBy struct {
	selector
	build *BlogCommentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bcgb *BlogCommentGroupBy) Aggregate(fns ...AggregateFunc) *BlogCommentGroupBy {
	bcgb.fns = append(bcgb.fns, fns...)
	return bcgb
}

// Scan applies the selector query and scans the result into the given value.
func (bcgb *BlogCommentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bcgb.build.ctx, ent.OpQueryGroupBy)
	if err := bcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BlogCommentQuery, *BlogCommentGroupBy](ctx, bcgb.build, bcgb, bcgb.build.inters, v)
}

func (bcgb *BlogCommentGroupBy) sqlScan(ctx context.Context, root *BlogCommentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(bcgb.fns))
	for _, fn := range bcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*bcgb.flds)+len(bcgb.fns))
		for _, f := range *bcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*bcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BlogCommentSelect is the builder for selecting fields of BlogComment entities.
type BlogCommentSelect struct {
	*BlogCommentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bcs *BlogCommentSelect) Aggregate(fns ...AggregateFunc) *BlogCommentSelect {
	bcs.fns = append(bcs.fns, fns...)
	return bcs
}

// Scan applies the selector query and scans the result into the given value.
func (bcs *BlogCommentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bcs.ctx, ent.OpQuerySelect)
	if err := bcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BlogCommentQuery, *BlogCommentSelect](ctx, bcs.BlogCommentQuery, bcs, bcs.inters, v)
}

func (bcs *BlogCommentSelect) sqlScan(ctx context.Context, root *BlogCommentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bcs.fns))
	for _, fn := range bcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
