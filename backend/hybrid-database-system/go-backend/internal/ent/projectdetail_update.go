// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/predicate"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/projectdetail"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProjectDetailUpdate is the builder for updating ProjectDetail entities.
type ProjectDetailUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectDetailMutation
}

// Where appends a list predicates to the ProjectDetailUpdate builder.
func (pdu *ProjectDetailUpdate) Where(ps ...predicate.ProjectDetail) *ProjectDetailUpdate {
	pdu.mutation.Where(ps...)
	return pdu
}

// SetFullDescription sets the "full_description" field.
func (pdu *ProjectDetailUpdate) SetFullDescription(s string) *ProjectDetailUpdate {
	pdu.mutation.SetFullDescription(s)
	return pdu
}

// SetNillableFullDescription sets the "full_description" field if the given value is not nil.
func (pdu *ProjectDetailUpdate) SetNillableFullDescription(s *string) *ProjectDetailUpdate {
	if s != nil {
		pdu.SetFullDescription(*s)
	}
	return pdu
}

// ClearFullDescription clears the value of the "full_description" field.
func (pdu *ProjectDetailUpdate) ClearFullDescription() *ProjectDetailUpdate {
	pdu.mutation.ClearFullDescription()
	return pdu
}

// SetFeatures sets the "features" field.
func (pdu *ProjectDetailUpdate) SetFeatures(s []string) *ProjectDetailUpdate {
	pdu.mutation.SetFeatures(s)
	return pdu
}

// AppendFeatures appends s to the "features" field.
func (pdu *ProjectDetailUpdate) AppendFeatures(s []string) *ProjectDetailUpdate {
	pdu.mutation.AppendFeatures(s)
	return pdu
}

// ClearFeatures clears the value of the "features" field.
func (pdu *ProjectDetailUpdate) ClearFeatures() *ProjectDetailUpdate {
	pdu.mutation.ClearFeatures()
	return pdu
}

// SetKeyAchievements sets the "key_achievements" field.
func (pdu *ProjectDetailUpdate) SetKeyAchievements(s []string) *ProjectDetailUpdate {
	pdu.mutation.SetKeyAchievements(s)
	return pdu
}

// AppendKeyAchievements appends s to the "key_achievements" field.
func (pdu *ProjectDetailUpdate) AppendKeyAchievements(s []string) *ProjectDetailUpdate {
	pdu.mutation.AppendKeyAchievements(s)
	return pdu
}

// ClearKeyAchievements clears the value of the "key_achievements" field.
func (pdu *ProjectDetailUpdate) ClearKeyAchievements() *ProjectDetailUpdate {
	pdu.mutation.ClearKeyAchievements()
	return pdu
}

// SetChallengesFaced sets the "challenges_faced" field.
func (pdu *ProjectDetailUpdate) SetChallengesFaced(s []string) *ProjectDetailUpdate {
	pdu.mutation.SetChallengesFaced(s)
	return pdu
}

// AppendChallengesFaced appends s to the "challenges_faced" field.
func (pdu *ProjectDetailUpdate) AppendChallengesFaced(s []string) *ProjectDetailUpdate {
	pdu.mutation.AppendChallengesFaced(s)
	return pdu
}

// ClearChallengesFaced clears the value of the "challenges_faced" field.
func (pdu *ProjectDetailUpdate) ClearChallengesFaced() *ProjectDetailUpdate {
	pdu.mutation.ClearChallengesFaced()
	return pdu
}

// SetLessonsLearned sets the "lessons_learned" field.
func (pdu *ProjectDetailUpdate) SetLessonsLearned(s []string) *ProjectDetailUpdate {
	pdu.mutation.SetLessonsLearned(s)
	return pdu
}

// AppendLessonsLearned appends s to the "lessons_learned" field.
func (pdu *ProjectDetailUpdate) AppendLessonsLearned(s []string) *ProjectDetailUpdate {
	pdu.mutation.AppendLessonsLearned(s)
	return pdu
}

// ClearLessonsLearned clears the value of the "lessons_learned" field.
func (pdu *ProjectDetailUpdate) ClearLessonsLearned() *ProjectDetailUpdate {
	pdu.mutation.ClearLessonsLearned()
	return pdu
}

// SetTechnicalOverview sets the "technical_overview" field.
func (pdu *ProjectDetailUpdate) SetTechnicalOverview(s string) *ProjectDetailUpdate {
	pdu.mutation.SetTechnicalOverview(s)
	return pdu
}

// SetNillableTechnicalOverview sets the "technical_overview" field if the given value is not nil.
func (pdu *ProjectDetailUpdate) SetNillableTechnicalOverview(s *string) *ProjectDetailUpdate {
	if s != nil {
		pdu.SetTechnicalOverview(*s)
	}
	return pdu
}

// ClearTechnicalOverview clears the value of the "technical_overview" field.
func (pdu *ProjectDetailUpdate) ClearTechnicalOverview() *ProjectDetailUpdate {
	pdu.mutation.ClearTechnicalOverview()
	return pdu
}

// SetInstallationInstructions sets the "installation_instructions" field.
func (pdu *ProjectDetailUpdate) SetInstallationInstructions(s string) *ProjectDetailUpdate {
	pdu.mutation.SetInstallationInstructions(s)
	return pdu
}

// SetNillableInstallationInstructions sets the "installation_instructions" field if the given value is not nil.
func (pdu *ProjectDetailUpdate) SetNillableInstallationInstructions(s *string) *ProjectDetailUpdate {
	if s != nil {
		pdu.SetInstallationInstructions(*s)
	}
	return pdu
}

// ClearInstallationInstructions clears the value of the "installation_instructions" field.
func (pdu *ProjectDetailUpdate) ClearInstallationInstructions() *ProjectDetailUpdate {
	pdu.mutation.ClearInstallationInstructions()
	return pdu
}

// SetUsageInstructions sets the "usage_instructions" field.
func (pdu *ProjectDetailUpdate) SetUsageInstructions(s string) *ProjectDetailUpdate {
	pdu.mutation.SetUsageInstructions(s)
	return pdu
}

// SetNillableUsageInstructions sets the "usage_instructions" field if the given value is not nil.
func (pdu *ProjectDetailUpdate) SetNillableUsageInstructions(s *string) *ProjectDetailUpdate {
	if s != nil {
		pdu.SetUsageInstructions(*s)
	}
	return pdu
}

// ClearUsageInstructions clears the value of the "usage_instructions" field.
func (pdu *ProjectDetailUpdate) ClearUsageInstructions() *ProjectDetailUpdate {
	pdu.mutation.ClearUsageInstructions()
	return pdu
}

// SetAPIDocumentation sets the "api_documentation" field.
func (pdu *ProjectDetailUpdate) SetAPIDocumentation(s string) *ProjectDetailUpdate {
	pdu.mutation.SetAPIDocumentation(s)
	return pdu
}

// SetNillableAPIDocumentation sets the "api_documentation" field if the given value is not nil.
func (pdu *ProjectDetailUpdate) SetNillableAPIDocumentation(s *string) *ProjectDetailUpdate {
	if s != nil {
		pdu.SetAPIDocumentation(*s)
	}
	return pdu
}

// ClearAPIDocumentation clears the value of the "api_documentation" field.
func (pdu *ProjectDetailUpdate) ClearAPIDocumentation() *ProjectDetailUpdate {
	pdu.mutation.ClearAPIDocumentation()
	return pdu
}

// SetDeploymentNotes sets the "deployment_notes" field.
func (pdu *ProjectDetailUpdate) SetDeploymentNotes(s string) *ProjectDetailUpdate {
	pdu.mutation.SetDeploymentNotes(s)
	return pdu
}

// SetNillableDeploymentNotes sets the "deployment_notes" field if the given value is not nil.
func (pdu *ProjectDetailUpdate) SetNillableDeploymentNotes(s *string) *ProjectDetailUpdate {
	if s != nil {
		pdu.SetDeploymentNotes(*s)
	}
	return pdu
}

// ClearDeploymentNotes clears the value of the "deployment_notes" field.
func (pdu *ProjectDetailUpdate) ClearDeploymentNotes() *ProjectDetailUpdate {
	pdu.mutation.ClearDeploymentNotes()
	return pdu
}

// SetFutureEnhancements sets the "future_enhancements" field.
func (pdu *ProjectDetailUpdate) SetFutureEnhancements(s string) *ProjectDetailUpdate {
	pdu.mutation.SetFutureEnhancements(s)
	return pdu
}

// SetNillableFutureEnhancements sets the "future_enhancements" field if the given value is not nil.
func (pdu *ProjectDetailUpdate) SetNillableFutureEnhancements(s *string) *ProjectDetailUpdate {
	if s != nil {
		pdu.SetFutureEnhancements(*s)
	}
	return pdu
}

// ClearFutureEnhancements clears the value of the "future_enhancements" field.
func (pdu *ProjectDetailUpdate) ClearFutureEnhancements() *ProjectDetailUpdate {
	pdu.mutation.ClearFutureEnhancements()
	return pdu
}

// SetTeamMembers sets the "team_members" field.
func (pdu *ProjectDetailUpdate) SetTeamMembers(s []string) *ProjectDetailUpdate {
	pdu.mutation.SetTeamMembers(s)
	return pdu
}

// AppendTeamMembers appends s to the "team_members" field.
func (pdu *ProjectDetailUpdate) AppendTeamMembers(s []string) *ProjectDetailUpdate {
	pdu.mutation.AppendTeamMembers(s)
	return pdu
}

// ClearTeamMembers clears the value of the "team_members" field.
func (pdu *ProjectDetailUpdate) ClearTeamMembers() *ProjectDetailUpdate {
	pdu.mutation.ClearTeamMembers()
	return pdu
}

// SetProjectDuration sets the "project_duration" field.
func (pdu *ProjectDetailUpdate) SetProjectDuration(s string) *ProjectDetailUpdate {
	pdu.mutation.SetProjectDuration(s)
	return pdu
}

// SetNillableProjectDuration sets the "project_duration" field if the given value is not nil.
func (pdu *ProjectDetailUpdate) SetNillableProjectDuration(s *string) *ProjectDetailUpdate {
	if s != nil {
		pdu.SetProjectDuration(*s)
	}
	return pdu
}

// ClearProjectDuration clears the value of the "project_duration" field.
func (pdu *ProjectDetailUpdate) ClearProjectDuration() *ProjectDetailUpdate {
	pdu.mutation.ClearProjectDuration()
	return pdu
}

// SetTargetAudience sets the "target_audience" field.
func (pdu *ProjectDetailUpdate) SetTargetAudience(s string) *ProjectDetailUpdate {
	pdu.mutation.SetTargetAudience(s)
	return pdu
}

// SetNillableTargetAudience sets the "target_audience" field if the given value is not nil.
func (pdu *ProjectDetailUpdate) SetNillableTargetAudience(s *string) *ProjectDetailUpdate {
	if s != nil {
		pdu.SetTargetAudience(*s)
	}
	return pdu
}

// ClearTargetAudience clears the value of the "target_audience" field.
func (pdu *ProjectDetailUpdate) ClearTargetAudience() *ProjectDetailUpdate {
	pdu.mutation.ClearTargetAudience()
	return pdu
}

// SetPerformanceMetrics sets the "performance_metrics" field.
func (pdu *ProjectDetailUpdate) SetPerformanceMetrics(m map[string]interface{}) *ProjectDetailUpdate {
	pdu.mutation.SetPerformanceMetrics(m)
	return pdu
}

// ClearPerformanceMetrics clears the value of the "performance_metrics" field.
func (pdu *ProjectDetailUpdate) ClearPerformanceMetrics() *ProjectDetailUpdate {
	pdu.mutation.ClearPerformanceMetrics()
	return pdu
}

// SetTestingApproach sets the "testing_approach" field.
func (pdu *ProjectDetailUpdate) SetTestingApproach(m map[string]interface{}) *ProjectDetailUpdate {
	pdu.mutation.SetTestingApproach(m)
	return pdu
}

// ClearTestingApproach clears the value of the "testing_approach" field.
func (pdu *ProjectDetailUpdate) ClearTestingApproach() *ProjectDetailUpdate {
	pdu.mutation.ClearTestingApproach()
	return pdu
}

// SetCreatedAt sets the "created_at" field.
func (pdu *ProjectDetailUpdate) SetCreatedAt(t time.Time) *ProjectDetailUpdate {
	pdu.mutation.SetCreatedAt(t)
	return pdu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pdu *ProjectDetailUpdate) SetNillableCreatedAt(t *time.Time) *ProjectDetailUpdate {
	if t != nil {
		pdu.SetCreatedAt(*t)
	}
	return pdu
}

// SetUpdatedAt sets the "updated_at" field.
func (pdu *ProjectDetailUpdate) SetUpdatedAt(t time.Time) *ProjectDetailUpdate {
	pdu.mutation.SetUpdatedAt(t)
	return pdu
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (pdu *ProjectDetailUpdate) SetProjectID(id uuid.UUID) *ProjectDetailUpdate {
	pdu.mutation.SetProjectID(id)
	return pdu
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (pdu *ProjectDetailUpdate) SetNillableProjectID(id *uuid.UUID) *ProjectDetailUpdate {
	if id != nil {
		pdu = pdu.SetProjectID(*id)
	}
	return pdu
}

// SetProject sets the "project" edge to the Project entity.
func (pdu *ProjectDetailUpdate) SetProject(p *Project) *ProjectDetailUpdate {
	return pdu.SetProjectID(p.ID)
}

// Mutation returns the ProjectDetailMutation object of the builder.
func (pdu *ProjectDetailUpdate) Mutation() *ProjectDetailMutation {
	return pdu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (pdu *ProjectDetailUpdate) ClearProject() *ProjectDetailUpdate {
	pdu.mutation.ClearProject()
	return pdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pdu *ProjectDetailUpdate) Save(ctx context.Context) (int, error) {
	pdu.defaults()
	return withHooks(ctx, pdu.sqlSave, pdu.mutation, pdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pdu *ProjectDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := pdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pdu *ProjectDetailUpdate) Exec(ctx context.Context) error {
	_, err := pdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdu *ProjectDetailUpdate) ExecX(ctx context.Context) {
	if err := pdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pdu *ProjectDetailUpdate) defaults() {
	if _, ok := pdu.mutation.UpdatedAt(); !ok {
		v := projectdetail.UpdateDefaultUpdatedAt()
		pdu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdu *ProjectDetailUpdate) check() error {
	if v, ok := pdu.mutation.ProjectDuration(); ok {
		if err := projectdetail.ProjectDurationValidator(v); err != nil {
			return &ValidationError{Name: "project_duration", err: fmt.Errorf(`ent: validator failed for field "ProjectDetail.project_duration": %w`, err)}
		}
	}
	if v, ok := pdu.mutation.TargetAudience(); ok {
		if err := projectdetail.TargetAudienceValidator(v); err != nil {
			return &ValidationError{Name: "target_audience", err: fmt.Errorf(`ent: validator failed for field "ProjectDetail.target_audience": %w`, err)}
		}
	}
	return nil
}

func (pdu *ProjectDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectdetail.Table, projectdetail.Columns, sqlgraph.NewFieldSpec(projectdetail.FieldID, field.TypeUUID))
	if ps := pdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pdu.mutation.FullDescription(); ok {
		_spec.SetField(projectdetail.FieldFullDescription, field.TypeString, value)
	}
	if pdu.mutation.FullDescriptionCleared() {
		_spec.ClearField(projectdetail.FieldFullDescription, field.TypeString)
	}
	if value, ok := pdu.mutation.Features(); ok {
		_spec.SetField(projectdetail.FieldFeatures, field.TypeJSON, value)
	}
	if value, ok := pdu.mutation.AppendedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, projectdetail.FieldFeatures, value)
		})
	}
	if pdu.mutation.FeaturesCleared() {
		_spec.ClearField(projectdetail.FieldFeatures, field.TypeJSON)
	}
	if value, ok := pdu.mutation.KeyAchievements(); ok {
		_spec.SetField(projectdetail.FieldKeyAchievements, field.TypeJSON, value)
	}
	if value, ok := pdu.mutation.AppendedKeyAchievements(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, projectdetail.FieldKeyAchievements, value)
		})
	}
	if pdu.mutation.KeyAchievementsCleared() {
		_spec.ClearField(projectdetail.FieldKeyAchievements, field.TypeJSON)
	}
	if value, ok := pdu.mutation.ChallengesFaced(); ok {
		_spec.SetField(projectdetail.FieldChallengesFaced, field.TypeJSON, value)
	}
	if value, ok := pdu.mutation.AppendedChallengesFaced(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, projectdetail.FieldChallengesFaced, value)
		})
	}
	if pdu.mutation.ChallengesFacedCleared() {
		_spec.ClearField(projectdetail.FieldChallengesFaced, field.TypeJSON)
	}
	if value, ok := pdu.mutation.LessonsLearned(); ok {
		_spec.SetField(projectdetail.FieldLessonsLearned, field.TypeJSON, value)
	}
	if value, ok := pdu.mutation.AppendedLessonsLearned(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, projectdetail.FieldLessonsLearned, value)
		})
	}
	if pdu.mutation.LessonsLearnedCleared() {
		_spec.ClearField(projectdetail.FieldLessonsLearned, field.TypeJSON)
	}
	if value, ok := pdu.mutation.TechnicalOverview(); ok {
		_spec.SetField(projectdetail.FieldTechnicalOverview, field.TypeString, value)
	}
	if pdu.mutation.TechnicalOverviewCleared() {
		_spec.ClearField(projectdetail.FieldTechnicalOverview, field.TypeString)
	}
	if value, ok := pdu.mutation.InstallationInstructions(); ok {
		_spec.SetField(projectdetail.FieldInstallationInstructions, field.TypeString, value)
	}
	if pdu.mutation.InstallationInstructionsCleared() {
		_spec.ClearField(projectdetail.FieldInstallationInstructions, field.TypeString)
	}
	if value, ok := pdu.mutation.UsageInstructions(); ok {
		_spec.SetField(projectdetail.FieldUsageInstructions, field.TypeString, value)
	}
	if pdu.mutation.UsageInstructionsCleared() {
		_spec.ClearField(projectdetail.FieldUsageInstructions, field.TypeString)
	}
	if value, ok := pdu.mutation.APIDocumentation(); ok {
		_spec.SetField(projectdetail.FieldAPIDocumentation, field.TypeString, value)
	}
	if pdu.mutation.APIDocumentationCleared() {
		_spec.ClearField(projectdetail.FieldAPIDocumentation, field.TypeString)
	}
	if value, ok := pdu.mutation.DeploymentNotes(); ok {
		_spec.SetField(projectdetail.FieldDeploymentNotes, field.TypeString, value)
	}
	if pdu.mutation.DeploymentNotesCleared() {
		_spec.ClearField(projectdetail.FieldDeploymentNotes, field.TypeString)
	}
	if value, ok := pdu.mutation.FutureEnhancements(); ok {
		_spec.SetField(projectdetail.FieldFutureEnhancements, field.TypeString, value)
	}
	if pdu.mutation.FutureEnhancementsCleared() {
		_spec.ClearField(projectdetail.FieldFutureEnhancements, field.TypeString)
	}
	if value, ok := pdu.mutation.TeamMembers(); ok {
		_spec.SetField(projectdetail.FieldTeamMembers, field.TypeJSON, value)
	}
	if value, ok := pdu.mutation.AppendedTeamMembers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, projectdetail.FieldTeamMembers, value)
		})
	}
	if pdu.mutation.TeamMembersCleared() {
		_spec.ClearField(projectdetail.FieldTeamMembers, field.TypeJSON)
	}
	if value, ok := pdu.mutation.ProjectDuration(); ok {
		_spec.SetField(projectdetail.FieldProjectDuration, field.TypeString, value)
	}
	if pdu.mutation.ProjectDurationCleared() {
		_spec.ClearField(projectdetail.FieldProjectDuration, field.TypeString)
	}
	if value, ok := pdu.mutation.TargetAudience(); ok {
		_spec.SetField(projectdetail.FieldTargetAudience, field.TypeString, value)
	}
	if pdu.mutation.TargetAudienceCleared() {
		_spec.ClearField(projectdetail.FieldTargetAudience, field.TypeString)
	}
	if value, ok := pdu.mutation.PerformanceMetrics(); ok {
		_spec.SetField(projectdetail.FieldPerformanceMetrics, field.TypeJSON, value)
	}
	if pdu.mutation.PerformanceMetricsCleared() {
		_spec.ClearField(projectdetail.FieldPerformanceMetrics, field.TypeJSON)
	}
	if value, ok := pdu.mutation.TestingApproach(); ok {
		_spec.SetField(projectdetail.FieldTestingApproach, field.TypeJSON, value)
	}
	if pdu.mutation.TestingApproachCleared() {
		_spec.ClearField(projectdetail.FieldTestingApproach, field.TypeJSON)
	}
	if value, ok := pdu.mutation.CreatedAt(); ok {
		_spec.SetField(projectdetail.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pdu.mutation.UpdatedAt(); ok {
		_spec.SetField(projectdetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if pdu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   projectdetail.ProjectTable,
			Columns: []string{projectdetail.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pdu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   projectdetail.ProjectTable,
			Columns: []string{projectdetail.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pdu.mutation.done = true
	return n, nil
}

// ProjectDetailUpdateOne is the builder for updating a single ProjectDetail entity.
type ProjectDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectDetailMutation
}

// SetFullDescription sets the "full_description" field.
func (pduo *ProjectDetailUpdateOne) SetFullDescription(s string) *ProjectDetailUpdateOne {
	pduo.mutation.SetFullDescription(s)
	return pduo
}

// SetNillableFullDescription sets the "full_description" field if the given value is not nil.
func (pduo *ProjectDetailUpdateOne) SetNillableFullDescription(s *string) *ProjectDetailUpdateOne {
	if s != nil {
		pduo.SetFullDescription(*s)
	}
	return pduo
}

// ClearFullDescription clears the value of the "full_description" field.
func (pduo *ProjectDetailUpdateOne) ClearFullDescription() *ProjectDetailUpdateOne {
	pduo.mutation.ClearFullDescription()
	return pduo
}

// SetFeatures sets the "features" field.
func (pduo *ProjectDetailUpdateOne) SetFeatures(s []string) *ProjectDetailUpdateOne {
	pduo.mutation.SetFeatures(s)
	return pduo
}

// AppendFeatures appends s to the "features" field.
func (pduo *ProjectDetailUpdateOne) AppendFeatures(s []string) *ProjectDetailUpdateOne {
	pduo.mutation.AppendFeatures(s)
	return pduo
}

// ClearFeatures clears the value of the "features" field.
func (pduo *ProjectDetailUpdateOne) ClearFeatures() *ProjectDetailUpdateOne {
	pduo.mutation.ClearFeatures()
	return pduo
}

// SetKeyAchievements sets the "key_achievements" field.
func (pduo *ProjectDetailUpdateOne) SetKeyAchievements(s []string) *ProjectDetailUpdateOne {
	pduo.mutation.SetKeyAchievements(s)
	return pduo
}

// AppendKeyAchievements appends s to the "key_achievements" field.
func (pduo *ProjectDetailUpdateOne) AppendKeyAchievements(s []string) *ProjectDetailUpdateOne {
	pduo.mutation.AppendKeyAchievements(s)
	return pduo
}

// ClearKeyAchievements clears the value of the "key_achievements" field.
func (pduo *ProjectDetailUpdateOne) ClearKeyAchievements() *ProjectDetailUpdateOne {
	pduo.mutation.ClearKeyAchievements()
	return pduo
}

// SetChallengesFaced sets the "challenges_faced" field.
func (pduo *ProjectDetailUpdateOne) SetChallengesFaced(s []string) *ProjectDetailUpdateOne {
	pduo.mutation.SetChallengesFaced(s)
	return pduo
}

// AppendChallengesFaced appends s to the "challenges_faced" field.
func (pduo *ProjectDetailUpdateOne) AppendChallengesFaced(s []string) *ProjectDetailUpdateOne {
	pduo.mutation.AppendChallengesFaced(s)
	return pduo
}

// ClearChallengesFaced clears the value of the "challenges_faced" field.
func (pduo *ProjectDetailUpdateOne) ClearChallengesFaced() *ProjectDetailUpdateOne {
	pduo.mutation.ClearChallengesFaced()
	return pduo
}

// SetLessonsLearned sets the "lessons_learned" field.
func (pduo *ProjectDetailUpdateOne) SetLessonsLearned(s []string) *ProjectDetailUpdateOne {
	pduo.mutation.SetLessonsLearned(s)
	return pduo
}

// AppendLessonsLearned appends s to the "lessons_learned" field.
func (pduo *ProjectDetailUpdateOne) AppendLessonsLearned(s []string) *ProjectDetailUpdateOne {
	pduo.mutation.AppendLessonsLearned(s)
	return pduo
}

// ClearLessonsLearned clears the value of the "lessons_learned" field.
func (pduo *ProjectDetailUpdateOne) ClearLessonsLearned() *ProjectDetailUpdateOne {
	pduo.mutation.ClearLessonsLearned()
	return pduo
}

// SetTechnicalOverview sets the "technical_overview" field.
func (pduo *ProjectDetailUpdateOne) SetTechnicalOverview(s string) *ProjectDetailUpdateOne {
	pduo.mutation.SetTechnicalOverview(s)
	return pduo
}

// SetNillableTechnicalOverview sets the "technical_overview" field if the given value is not nil.
func (pduo *ProjectDetailUpdateOne) SetNillableTechnicalOverview(s *string) *ProjectDetailUpdateOne {
	if s != nil {
		pduo.SetTechnicalOverview(*s)
	}
	return pduo
}

// ClearTechnicalOverview clears the value of the "technical_overview" field.
func (pduo *ProjectDetailUpdateOne) ClearTechnicalOverview() *ProjectDetailUpdateOne {
	pduo.mutation.ClearTechnicalOverview()
	return pduo
}

// SetInstallationInstructions sets the "installation_instructions" field.
func (pduo *ProjectDetailUpdateOne) SetInstallationInstructions(s string) *ProjectDetailUpdateOne {
	pduo.mutation.SetInstallationInstructions(s)
	return pduo
}

// SetNillableInstallationInstructions sets the "installation_instructions" field if the given value is not nil.
func (pduo *ProjectDetailUpdateOne) SetNillableInstallationInstructions(s *string) *ProjectDetailUpdateOne {
	if s != nil {
		pduo.SetInstallationInstructions(*s)
	}
	return pduo
}

// ClearInstallationInstructions clears the value of the "installation_instructions" field.
func (pduo *ProjectDetailUpdateOne) ClearInstallationInstructions() *ProjectDetailUpdateOne {
	pduo.mutation.ClearInstallationInstructions()
	return pduo
}

// SetUsageInstructions sets the "usage_instructions" field.
func (pduo *ProjectDetailUpdateOne) SetUsageInstructions(s string) *ProjectDetailUpdateOne {
	pduo.mutation.SetUsageInstructions(s)
	return pduo
}

// SetNillableUsageInstructions sets the "usage_instructions" field if the given value is not nil.
func (pduo *ProjectDetailUpdateOne) SetNillableUsageInstructions(s *string) *ProjectDetailUpdateOne {
	if s != nil {
		pduo.SetUsageInstructions(*s)
	}
	return pduo
}

// ClearUsageInstructions clears the value of the "usage_instructions" field.
func (pduo *ProjectDetailUpdateOne) ClearUsageInstructions() *ProjectDetailUpdateOne {
	pduo.mutation.ClearUsageInstructions()
	return pduo
}

// SetAPIDocumentation sets the "api_documentation" field.
func (pduo *ProjectDetailUpdateOne) SetAPIDocumentation(s string) *ProjectDetailUpdateOne {
	pduo.mutation.SetAPIDocumentation(s)
	return pduo
}

// SetNillableAPIDocumentation sets the "api_documentation" field if the given value is not nil.
func (pduo *ProjectDetailUpdateOne) SetNillableAPIDocumentation(s *string) *ProjectDetailUpdateOne {
	if s != nil {
		pduo.SetAPIDocumentation(*s)
	}
	return pduo
}

// ClearAPIDocumentation clears the value of the "api_documentation" field.
func (pduo *ProjectDetailUpdateOne) ClearAPIDocumentation() *ProjectDetailUpdateOne {
	pduo.mutation.ClearAPIDocumentation()
	return pduo
}

// SetDeploymentNotes sets the "deployment_notes" field.
func (pduo *ProjectDetailUpdateOne) SetDeploymentNotes(s string) *ProjectDetailUpdateOne {
	pduo.mutation.SetDeploymentNotes(s)
	return pduo
}

// SetNillableDeploymentNotes sets the "deployment_notes" field if the given value is not nil.
func (pduo *ProjectDetailUpdateOne) SetNillableDeploymentNotes(s *string) *ProjectDetailUpdateOne {
	if s != nil {
		pduo.SetDeploymentNotes(*s)
	}
	return pduo
}

// ClearDeploymentNotes clears the value of the "deployment_notes" field.
func (pduo *ProjectDetailUpdateOne) ClearDeploymentNotes() *ProjectDetailUpdateOne {
	pduo.mutation.ClearDeploymentNotes()
	return pduo
}

// SetFutureEnhancements sets the "future_enhancements" field.
func (pduo *ProjectDetailUpdateOne) SetFutureEnhancements(s string) *ProjectDetailUpdateOne {
	pduo.mutation.SetFutureEnhancements(s)
	return pduo
}

// SetNillableFutureEnhancements sets the "future_enhancements" field if the given value is not nil.
func (pduo *ProjectDetailUpdateOne) SetNillableFutureEnhancements(s *string) *ProjectDetailUpdateOne {
	if s != nil {
		pduo.SetFutureEnhancements(*s)
	}
	return pduo
}

// ClearFutureEnhancements clears the value of the "future_enhancements" field.
func (pduo *ProjectDetailUpdateOne) ClearFutureEnhancements() *ProjectDetailUpdateOne {
	pduo.mutation.ClearFutureEnhancements()
	return pduo
}

// SetTeamMembers sets the "team_members" field.
func (pduo *ProjectDetailUpdateOne) SetTeamMembers(s []string) *ProjectDetailUpdateOne {
	pduo.mutation.SetTeamMembers(s)
	return pduo
}

// AppendTeamMembers appends s to the "team_members" field.
func (pduo *ProjectDetailUpdateOne) AppendTeamMembers(s []string) *ProjectDetailUpdateOne {
	pduo.mutation.AppendTeamMembers(s)
	return pduo
}

// ClearTeamMembers clears the value of the "team_members" field.
func (pduo *ProjectDetailUpdateOne) ClearTeamMembers() *ProjectDetailUpdateOne {
	pduo.mutation.ClearTeamMembers()
	return pduo
}

// SetProjectDuration sets the "project_duration" field.
func (pduo *ProjectDetailUpdateOne) SetProjectDuration(s string) *ProjectDetailUpdateOne {
	pduo.mutation.SetProjectDuration(s)
	return pduo
}

// SetNillableProjectDuration sets the "project_duration" field if the given value is not nil.
func (pduo *ProjectDetailUpdateOne) SetNillableProjectDuration(s *string) *ProjectDetailUpdateOne {
	if s != nil {
		pduo.SetProjectDuration(*s)
	}
	return pduo
}

// ClearProjectDuration clears the value of the "project_duration" field.
func (pduo *ProjectDetailUpdateOne) ClearProjectDuration() *ProjectDetailUpdateOne {
	pduo.mutation.ClearProjectDuration()
	return pduo
}

// SetTargetAudience sets the "target_audience" field.
func (pduo *ProjectDetailUpdateOne) SetTargetAudience(s string) *ProjectDetailUpdateOne {
	pduo.mutation.SetTargetAudience(s)
	return pduo
}

// SetNillableTargetAudience sets the "target_audience" field if the given value is not nil.
func (pduo *ProjectDetailUpdateOne) SetNillableTargetAudience(s *string) *ProjectDetailUpdateOne {
	if s != nil {
		pduo.SetTargetAudience(*s)
	}
	return pduo
}

// ClearTargetAudience clears the value of the "target_audience" field.
func (pduo *ProjectDetailUpdateOne) ClearTargetAudience() *ProjectDetailUpdateOne {
	pduo.mutation.ClearTargetAudience()
	return pduo
}

// SetPerformanceMetrics sets the "performance_metrics" field.
func (pduo *ProjectDetailUpdateOne) SetPerformanceMetrics(m map[string]interface{}) *ProjectDetailUpdateOne {
	pduo.mutation.SetPerformanceMetrics(m)
	return pduo
}

// ClearPerformanceMetrics clears the value of the "performance_metrics" field.
func (pduo *ProjectDetailUpdateOne) ClearPerformanceMetrics() *ProjectDetailUpdateOne {
	pduo.mutation.ClearPerformanceMetrics()
	return pduo
}

// SetTestingApproach sets the "testing_approach" field.
func (pduo *ProjectDetailUpdateOne) SetTestingApproach(m map[string]interface{}) *ProjectDetailUpdateOne {
	pduo.mutation.SetTestingApproach(m)
	return pduo
}

// ClearTestingApproach clears the value of the "testing_approach" field.
func (pduo *ProjectDetailUpdateOne) ClearTestingApproach() *ProjectDetailUpdateOne {
	pduo.mutation.ClearTestingApproach()
	return pduo
}

// SetCreatedAt sets the "created_at" field.
func (pduo *ProjectDetailUpdateOne) SetCreatedAt(t time.Time) *ProjectDetailUpdateOne {
	pduo.mutation.SetCreatedAt(t)
	return pduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pduo *ProjectDetailUpdateOne) SetNillableCreatedAt(t *time.Time) *ProjectDetailUpdateOne {
	if t != nil {
		pduo.SetCreatedAt(*t)
	}
	return pduo
}

// SetUpdatedAt sets the "updated_at" field.
func (pduo *ProjectDetailUpdateOne) SetUpdatedAt(t time.Time) *ProjectDetailUpdateOne {
	pduo.mutation.SetUpdatedAt(t)
	return pduo
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (pduo *ProjectDetailUpdateOne) SetProjectID(id uuid.UUID) *ProjectDetailUpdateOne {
	pduo.mutation.SetProjectID(id)
	return pduo
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (pduo *ProjectDetailUpdateOne) SetNillableProjectID(id *uuid.UUID) *ProjectDetailUpdateOne {
	if id != nil {
		pduo = pduo.SetProjectID(*id)
	}
	return pduo
}

// SetProject sets the "project" edge to the Project entity.
func (pduo *ProjectDetailUpdateOne) SetProject(p *Project) *ProjectDetailUpdateOne {
	return pduo.SetProjectID(p.ID)
}

// Mutation returns the ProjectDetailMutation object of the builder.
func (pduo *ProjectDetailUpdateOne) Mutation() *ProjectDetailMutation {
	return pduo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (pduo *ProjectDetailUpdateOne) ClearProject() *ProjectDetailUpdateOne {
	pduo.mutation.ClearProject()
	return pduo
}

// Where appends a list predicates to the ProjectDetailUpdate builder.
func (pduo *ProjectDetailUpdateOne) Where(ps ...predicate.ProjectDetail) *ProjectDetailUpdateOne {
	pduo.mutation.Where(ps...)
	return pduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pduo *ProjectDetailUpdateOne) Select(field string, fields ...string) *ProjectDetailUpdateOne {
	pduo.fields = append([]string{field}, fields...)
	return pduo
}

// Save executes the query and returns the updated ProjectDetail entity.
func (pduo *ProjectDetailUpdateOne) Save(ctx context.Context) (*ProjectDetail, error) {
	pduo.defaults()
	return withHooks(ctx, pduo.sqlSave, pduo.mutation, pduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pduo *ProjectDetailUpdateOne) SaveX(ctx context.Context) *ProjectDetail {
	node, err := pduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pduo *ProjectDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := pduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pduo *ProjectDetailUpdateOne) ExecX(ctx context.Context) {
	if err := pduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pduo *ProjectDetailUpdateOne) defaults() {
	if _, ok := pduo.mutation.UpdatedAt(); !ok {
		v := projectdetail.UpdateDefaultUpdatedAt()
		pduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pduo *ProjectDetailUpdateOne) check() error {
	if v, ok := pduo.mutation.ProjectDuration(); ok {
		if err := projectdetail.ProjectDurationValidator(v); err != nil {
			return &ValidationError{Name: "project_duration", err: fmt.Errorf(`ent: validator failed for field "ProjectDetail.project_duration": %w`, err)}
		}
	}
	if v, ok := pduo.mutation.TargetAudience(); ok {
		if err := projectdetail.TargetAudienceValidator(v); err != nil {
			return &ValidationError{Name: "target_audience", err: fmt.Errorf(`ent: validator failed for field "ProjectDetail.target_audience": %w`, err)}
		}
	}
	return nil
}

func (pduo *ProjectDetailUpdateOne) sqlSave(ctx context.Context) (_node *ProjectDetail, err error) {
	if err := pduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectdetail.Table, projectdetail.Columns, sqlgraph.NewFieldSpec(projectdetail.FieldID, field.TypeUUID))
	id, ok := pduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProjectDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectdetail.FieldID)
		for _, f := range fields {
			if !projectdetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != projectdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pduo.mutation.FullDescription(); ok {
		_spec.SetField(projectdetail.FieldFullDescription, field.TypeString, value)
	}
	if pduo.mutation.FullDescriptionCleared() {
		_spec.ClearField(projectdetail.FieldFullDescription, field.TypeString)
	}
	if value, ok := pduo.mutation.Features(); ok {
		_spec.SetField(projectdetail.FieldFeatures, field.TypeJSON, value)
	}
	if value, ok := pduo.mutation.AppendedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, projectdetail.FieldFeatures, value)
		})
	}
	if pduo.mutation.FeaturesCleared() {
		_spec.ClearField(projectdetail.FieldFeatures, field.TypeJSON)
	}
	if value, ok := pduo.mutation.KeyAchievements(); ok {
		_spec.SetField(projectdetail.FieldKeyAchievements, field.TypeJSON, value)
	}
	if value, ok := pduo.mutation.AppendedKeyAchievements(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, projectdetail.FieldKeyAchievements, value)
		})
	}
	if pduo.mutation.KeyAchievementsCleared() {
		_spec.ClearField(projectdetail.FieldKeyAchievements, field.TypeJSON)
	}
	if value, ok := pduo.mutation.ChallengesFaced(); ok {
		_spec.SetField(projectdetail.FieldChallengesFaced, field.TypeJSON, value)
	}
	if value, ok := pduo.mutation.AppendedChallengesFaced(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, projectdetail.FieldChallengesFaced, value)
		})
	}
	if pduo.mutation.ChallengesFacedCleared() {
		_spec.ClearField(projectdetail.FieldChallengesFaced, field.TypeJSON)
	}
	if value, ok := pduo.mutation.LessonsLearned(); ok {
		_spec.SetField(projectdetail.FieldLessonsLearned, field.TypeJSON, value)
	}
	if value, ok := pduo.mutation.AppendedLessonsLearned(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, projectdetail.FieldLessonsLearned, value)
		})
	}
	if pduo.mutation.LessonsLearnedCleared() {
		_spec.ClearField(projectdetail.FieldLessonsLearned, field.TypeJSON)
	}
	if value, ok := pduo.mutation.TechnicalOverview(); ok {
		_spec.SetField(projectdetail.FieldTechnicalOverview, field.TypeString, value)
	}
	if pduo.mutation.TechnicalOverviewCleared() {
		_spec.ClearField(projectdetail.FieldTechnicalOverview, field.TypeString)
	}
	if value, ok := pduo.mutation.InstallationInstructions(); ok {
		_spec.SetField(projectdetail.FieldInstallationInstructions, field.TypeString, value)
	}
	if pduo.mutation.InstallationInstructionsCleared() {
		_spec.ClearField(projectdetail.FieldInstallationInstructions, field.TypeString)
	}
	if value, ok := pduo.mutation.UsageInstructions(); ok {
		_spec.SetField(projectdetail.FieldUsageInstructions, field.TypeString, value)
	}
	if pduo.mutation.UsageInstructionsCleared() {
		_spec.ClearField(projectdetail.FieldUsageInstructions, field.TypeString)
	}
	if value, ok := pduo.mutation.APIDocumentation(); ok {
		_spec.SetField(projectdetail.FieldAPIDocumentation, field.TypeString, value)
	}
	if pduo.mutation.APIDocumentationCleared() {
		_spec.ClearField(projectdetail.FieldAPIDocumentation, field.TypeString)
	}
	if value, ok := pduo.mutation.DeploymentNotes(); ok {
		_spec.SetField(projectdetail.FieldDeploymentNotes, field.TypeString, value)
	}
	if pduo.mutation.DeploymentNotesCleared() {
		_spec.ClearField(projectdetail.FieldDeploymentNotes, field.TypeString)
	}
	if value, ok := pduo.mutation.FutureEnhancements(); ok {
		_spec.SetField(projectdetail.FieldFutureEnhancements, field.TypeString, value)
	}
	if pduo.mutation.FutureEnhancementsCleared() {
		_spec.ClearField(projectdetail.FieldFutureEnhancements, field.TypeString)
	}
	if value, ok := pduo.mutation.TeamMembers(); ok {
		_spec.SetField(projectdetail.FieldTeamMembers, field.TypeJSON, value)
	}
	if value, ok := pduo.mutation.AppendedTeamMembers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, projectdetail.FieldTeamMembers, value)
		})
	}
	if pduo.mutation.TeamMembersCleared() {
		_spec.ClearField(projectdetail.FieldTeamMembers, field.TypeJSON)
	}
	if value, ok := pduo.mutation.ProjectDuration(); ok {
		_spec.SetField(projectdetail.FieldProjectDuration, field.TypeString, value)
	}
	if pduo.mutation.ProjectDurationCleared() {
		_spec.ClearField(projectdetail.FieldProjectDuration, field.TypeString)
	}
	if value, ok := pduo.mutation.TargetAudience(); ok {
		_spec.SetField(projectdetail.FieldTargetAudience, field.TypeString, value)
	}
	if pduo.mutation.TargetAudienceCleared() {
		_spec.ClearField(projectdetail.FieldTargetAudience, field.TypeString)
	}
	if value, ok := pduo.mutation.PerformanceMetrics(); ok {
		_spec.SetField(projectdetail.FieldPerformanceMetrics, field.TypeJSON, value)
	}
	if pduo.mutation.PerformanceMetricsCleared() {
		_spec.ClearField(projectdetail.FieldPerformanceMetrics, field.TypeJSON)
	}
	if value, ok := pduo.mutation.TestingApproach(); ok {
		_spec.SetField(projectdetail.FieldTestingApproach, field.TypeJSON, value)
	}
	if pduo.mutation.TestingApproachCleared() {
		_spec.ClearField(projectdetail.FieldTestingApproach, field.TypeJSON)
	}
	if value, ok := pduo.mutation.CreatedAt(); ok {
		_spec.SetField(projectdetail.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pduo.mutation.UpdatedAt(); ok {
		_spec.SetField(projectdetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if pduo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   projectdetail.ProjectTable,
			Columns: []string{projectdetail.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pduo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   projectdetail.ProjectTable,
			Columns: []string{projectdetail.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProjectDetail{config: pduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pduo.mutation.done = true
	return _node, nil
}
