// Code generated by ent, DO NOT EDIT.

package publication

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the publication type in the database.
	Label = "publication"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldPublicationType holds the string denoting the publication_type field in the database.
	FieldPublicationType = "publication_type"
	// FieldJournalName holds the string denoting the journal_name field in the database.
	FieldJournalName = "journal_name"
	// FieldConferenceName holds the string denoting the conference_name field in the database.
	FieldConferenceName = "conference_name"
	// FieldVolume holds the string denoting the volume field in the database.
	FieldVolume = "volume"
	// FieldIssue holds the string denoting the issue field in the database.
	FieldIssue = "issue"
	// FieldPages holds the string denoting the pages field in the database.
	FieldPages = "pages"
	// FieldPublicationDate holds the string denoting the publication_date field in the database.
	FieldPublicationDate = "publication_date"
	// FieldDoi holds the string denoting the doi field in the database.
	FieldDoi = "doi"
	// FieldIsbn holds the string denoting the isbn field in the database.
	FieldIsbn = "isbn"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldPdfURL holds the string denoting the pdf_url field in the database.
	FieldPdfURL = "pdf_url"
	// FieldCitationCount holds the string denoting the citation_count field in the database.
	FieldCitationCount = "citation_count"
	// FieldIsPeerReviewed holds the string denoting the is_peer_reviewed field in the database.
	FieldIsPeerReviewed = "is_peer_reviewed"
	// FieldSortOrder holds the string denoting the sort_order field in the database.
	FieldSortOrder = "sort_order"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the publication in the database.
	Table = "publications"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "publications"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_publications"
)

// Columns holds all SQL columns for publication fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldTitle,
	FieldPublicationType,
	FieldJournalName,
	FieldConferenceName,
	FieldVolume,
	FieldIssue,
	FieldPages,
	FieldPublicationDate,
	FieldDoi,
	FieldIsbn,
	FieldURL,
	FieldPdfURL,
	FieldCitationCount,
	FieldIsPeerReviewed,
	FieldSortOrder,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "publications"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_publications",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// PublicationTypeValidator is a validator for the "publication_type" field. It is called by the builders before save.
	PublicationTypeValidator func(string) error
	// JournalNameValidator is a validator for the "journal_name" field. It is called by the builders before save.
	JournalNameValidator func(string) error
	// ConferenceNameValidator is a validator for the "conference_name" field. It is called by the builders before save.
	ConferenceNameValidator func(string) error
	// VolumeValidator is a validator for the "volume" field. It is called by the builders before save.
	VolumeValidator func(string) error
	// IssueValidator is a validator for the "issue" field. It is called by the builders before save.
	IssueValidator func(string) error
	// PagesValidator is a validator for the "pages" field. It is called by the builders before save.
	PagesValidator func(string) error
	// DoiValidator is a validator for the "doi" field. It is called by the builders before save.
	DoiValidator func(string) error
	// IsbnValidator is a validator for the "isbn" field. It is called by the builders before save.
	IsbnValidator func(string) error
	// URLValidator is a validator for the "url" field. It is called by the builders before save.
	URLValidator func(string) error
	// PdfURLValidator is a validator for the "pdf_url" field. It is called by the builders before save.
	PdfURLValidator func(string) error
	// DefaultCitationCount holds the default value on creation for the "citation_count" field.
	DefaultCitationCount int
	// DefaultIsPeerReviewed holds the default value on creation for the "is_peer_reviewed" field.
	DefaultIsPeerReviewed bool
	// DefaultSortOrder holds the default value on creation for the "sort_order" field.
	DefaultSortOrder int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Publication queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByPublicationType orders the results by the publication_type field.
func ByPublicationType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublicationType, opts...).ToFunc()
}

// ByJournalName orders the results by the journal_name field.
func ByJournalName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJournalName, opts...).ToFunc()
}

// ByConferenceName orders the results by the conference_name field.
func ByConferenceName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConferenceName, opts...).ToFunc()
}

// ByVolume orders the results by the volume field.
func ByVolume(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVolume, opts...).ToFunc()
}

// ByIssue orders the results by the issue field.
func ByIssue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIssue, opts...).ToFunc()
}

// ByPages orders the results by the pages field.
func ByPages(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPages, opts...).ToFunc()
}

// ByPublicationDate orders the results by the publication_date field.
func ByPublicationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublicationDate, opts...).ToFunc()
}

// ByDoi orders the results by the doi field.
func ByDoi(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDoi, opts...).ToFunc()
}

// ByIsbn orders the results by the isbn field.
func ByIsbn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsbn, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByPdfURL orders the results by the pdf_url field.
func ByPdfURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPdfURL, opts...).ToFunc()
}

// ByCitationCount orders the results by the citation_count field.
func ByCitationCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCitationCount, opts...).ToFunc()
}

// ByIsPeerReviewed orders the results by the is_peer_reviewed field.
func ByIsPeerReviewed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPeerReviewed, opts...).ToFunc()
}

// BySortOrder orders the results by the sort_order field.
func BySortOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSortOrder, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
