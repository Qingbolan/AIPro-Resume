// Code generated by ent, DO NOT EDIT.

package publication

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Publication {
	return predicate.Publication(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Publication {
	return predicate.Publication(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Publication {
	return predicate.Publication(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Publication {
	return predicate.Publication(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Publication {
	return predicate.Publication(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Publication {
	return predicate.Publication(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Publication {
	return predicate.Publication(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldTitle, v))
}

// PublicationType applies equality check predicate on the "publication_type" field. It's identical to PublicationTypeEQ.
func PublicationType(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldPublicationType, v))
}

// JournalName applies equality check predicate on the "journal_name" field. It's identical to JournalNameEQ.
func JournalName(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldJournalName, v))
}

// ConferenceName applies equality check predicate on the "conference_name" field. It's identical to ConferenceNameEQ.
func ConferenceName(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldConferenceName, v))
}

// Volume applies equality check predicate on the "volume" field. It's identical to VolumeEQ.
func Volume(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldVolume, v))
}

// Issue applies equality check predicate on the "issue" field. It's identical to IssueEQ.
func Issue(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldIssue, v))
}

// Pages applies equality check predicate on the "pages" field. It's identical to PagesEQ.
func Pages(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldPages, v))
}

// PublicationDate applies equality check predicate on the "publication_date" field. It's identical to PublicationDateEQ.
func PublicationDate(v time.Time) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldPublicationDate, v))
}

// Doi applies equality check predicate on the "doi" field. It's identical to DoiEQ.
func Doi(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldDoi, v))
}

// Isbn applies equality check predicate on the "isbn" field. It's identical to IsbnEQ.
func Isbn(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldIsbn, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldURL, v))
}

// PdfURL applies equality check predicate on the "pdf_url" field. It's identical to PdfURLEQ.
func PdfURL(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldPdfURL, v))
}

// CitationCount applies equality check predicate on the "citation_count" field. It's identical to CitationCountEQ.
func CitationCount(v int) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldCitationCount, v))
}

// IsPeerReviewed applies equality check predicate on the "is_peer_reviewed" field. It's identical to IsPeerReviewedEQ.
func IsPeerReviewed(v bool) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldIsPeerReviewed, v))
}

// SortOrder applies equality check predicate on the "sort_order" field. It's identical to SortOrderEQ.
func SortOrder(v int) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldSortOrder, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldUpdatedAt, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Publication {
	return predicate.Publication(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Publication {
	return predicate.Publication(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Publication {
	return predicate.Publication(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Publication {
	return predicate.Publication(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Publication {
	return predicate.Publication(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Publication {
	return predicate.Publication(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Publication {
	return predicate.Publication(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Publication {
	return predicate.Publication(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Publication {
	return predicate.Publication(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Publication {
	return predicate.Publication(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Publication {
	return predicate.Publication(sql.FieldContainsFold(FieldTitle, v))
}

// PublicationTypeEQ applies the EQ predicate on the "publication_type" field.
func PublicationTypeEQ(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldPublicationType, v))
}

// PublicationTypeNEQ applies the NEQ predicate on the "publication_type" field.
func PublicationTypeNEQ(v string) predicate.Publication {
	return predicate.Publication(sql.FieldNEQ(FieldPublicationType, v))
}

// PublicationTypeIn applies the In predicate on the "publication_type" field.
func PublicationTypeIn(vs ...string) predicate.Publication {
	return predicate.Publication(sql.FieldIn(FieldPublicationType, vs...))
}

// PublicationTypeNotIn applies the NotIn predicate on the "publication_type" field.
func PublicationTypeNotIn(vs ...string) predicate.Publication {
	return predicate.Publication(sql.FieldNotIn(FieldPublicationType, vs...))
}

// PublicationTypeGT applies the GT predicate on the "publication_type" field.
func PublicationTypeGT(v string) predicate.Publication {
	return predicate.Publication(sql.FieldGT(FieldPublicationType, v))
}

// PublicationTypeGTE applies the GTE predicate on the "publication_type" field.
func PublicationTypeGTE(v string) predicate.Publication {
	return predicate.Publication(sql.FieldGTE(FieldPublicationType, v))
}

// PublicationTypeLT applies the LT predicate on the "publication_type" field.
func PublicationTypeLT(v string) predicate.Publication {
	return predicate.Publication(sql.FieldLT(FieldPublicationType, v))
}

// PublicationTypeLTE applies the LTE predicate on the "publication_type" field.
func PublicationTypeLTE(v string) predicate.Publication {
	return predicate.Publication(sql.FieldLTE(FieldPublicationType, v))
}

// PublicationTypeContains applies the Contains predicate on the "publication_type" field.
func PublicationTypeContains(v string) predicate.Publication {
	return predicate.Publication(sql.FieldContains(FieldPublicationType, v))
}

// PublicationTypeHasPrefix applies the HasPrefix predicate on the "publication_type" field.
func PublicationTypeHasPrefix(v string) predicate.Publication {
	return predicate.Publication(sql.FieldHasPrefix(FieldPublicationType, v))
}

// PublicationTypeHasSuffix applies the HasSuffix predicate on the "publication_type" field.
func PublicationTypeHasSuffix(v string) predicate.Publication {
	return predicate.Publication(sql.FieldHasSuffix(FieldPublicationType, v))
}

// PublicationTypeEqualFold applies the EqualFold predicate on the "publication_type" field.
func PublicationTypeEqualFold(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEqualFold(FieldPublicationType, v))
}

// PublicationTypeContainsFold applies the ContainsFold predicate on the "publication_type" field.
func PublicationTypeContainsFold(v string) predicate.Publication {
	return predicate.Publication(sql.FieldContainsFold(FieldPublicationType, v))
}

// JournalNameEQ applies the EQ predicate on the "journal_name" field.
func JournalNameEQ(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldJournalName, v))
}

// JournalNameNEQ applies the NEQ predicate on the "journal_name" field.
func JournalNameNEQ(v string) predicate.Publication {
	return predicate.Publication(sql.FieldNEQ(FieldJournalName, v))
}

// JournalNameIn applies the In predicate on the "journal_name" field.
func JournalNameIn(vs ...string) predicate.Publication {
	return predicate.Publication(sql.FieldIn(FieldJournalName, vs...))
}

// JournalNameNotIn applies the NotIn predicate on the "journal_name" field.
func JournalNameNotIn(vs ...string) predicate.Publication {
	return predicate.Publication(sql.FieldNotIn(FieldJournalName, vs...))
}

// JournalNameGT applies the GT predicate on the "journal_name" field.
func JournalNameGT(v string) predicate.Publication {
	return predicate.Publication(sql.FieldGT(FieldJournalName, v))
}

// JournalNameGTE applies the GTE predicate on the "journal_name" field.
func JournalNameGTE(v string) predicate.Publication {
	return predicate.Publication(sql.FieldGTE(FieldJournalName, v))
}

// JournalNameLT applies the LT predicate on the "journal_name" field.
func JournalNameLT(v string) predicate.Publication {
	return predicate.Publication(sql.FieldLT(FieldJournalName, v))
}

// JournalNameLTE applies the LTE predicate on the "journal_name" field.
func JournalNameLTE(v string) predicate.Publication {
	return predicate.Publication(sql.FieldLTE(FieldJournalName, v))
}

// JournalNameContains applies the Contains predicate on the "journal_name" field.
func JournalNameContains(v string) predicate.Publication {
	return predicate.Publication(sql.FieldContains(FieldJournalName, v))
}

// JournalNameHasPrefix applies the HasPrefix predicate on the "journal_name" field.
func JournalNameHasPrefix(v string) predicate.Publication {
	return predicate.Publication(sql.FieldHasPrefix(FieldJournalName, v))
}

// JournalNameHasSuffix applies the HasSuffix predicate on the "journal_name" field.
func JournalNameHasSuffix(v string) predicate.Publication {
	return predicate.Publication(sql.FieldHasSuffix(FieldJournalName, v))
}

// JournalNameIsNil applies the IsNil predicate on the "journal_name" field.
func JournalNameIsNil() predicate.Publication {
	return predicate.Publication(sql.FieldIsNull(FieldJournalName))
}

// JournalNameNotNil applies the NotNil predicate on the "journal_name" field.
func JournalNameNotNil() predicate.Publication {
	return predicate.Publication(sql.FieldNotNull(FieldJournalName))
}

// JournalNameEqualFold applies the EqualFold predicate on the "journal_name" field.
func JournalNameEqualFold(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEqualFold(FieldJournalName, v))
}

// JournalNameContainsFold applies the ContainsFold predicate on the "journal_name" field.
func JournalNameContainsFold(v string) predicate.Publication {
	return predicate.Publication(sql.FieldContainsFold(FieldJournalName, v))
}

// ConferenceNameEQ applies the EQ predicate on the "conference_name" field.
func ConferenceNameEQ(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldConferenceName, v))
}

// ConferenceNameNEQ applies the NEQ predicate on the "conference_name" field.
func ConferenceNameNEQ(v string) predicate.Publication {
	return predicate.Publication(sql.FieldNEQ(FieldConferenceName, v))
}

// ConferenceNameIn applies the In predicate on the "conference_name" field.
func ConferenceNameIn(vs ...string) predicate.Publication {
	return predicate.Publication(sql.FieldIn(FieldConferenceName, vs...))
}

// ConferenceNameNotIn applies the NotIn predicate on the "conference_name" field.
func ConferenceNameNotIn(vs ...string) predicate.Publication {
	return predicate.Publication(sql.FieldNotIn(FieldConferenceName, vs...))
}

// ConferenceNameGT applies the GT predicate on the "conference_name" field.
func ConferenceNameGT(v string) predicate.Publication {
	return predicate.Publication(sql.FieldGT(FieldConferenceName, v))
}

// ConferenceNameGTE applies the GTE predicate on the "conference_name" field.
func ConferenceNameGTE(v string) predicate.Publication {
	return predicate.Publication(sql.FieldGTE(FieldConferenceName, v))
}

// ConferenceNameLT applies the LT predicate on the "conference_name" field.
func ConferenceNameLT(v string) predicate.Publication {
	return predicate.Publication(sql.FieldLT(FieldConferenceName, v))
}

// ConferenceNameLTE applies the LTE predicate on the "conference_name" field.
func ConferenceNameLTE(v string) predicate.Publication {
	return predicate.Publication(sql.FieldLTE(FieldConferenceName, v))
}

// ConferenceNameContains applies the Contains predicate on the "conference_name" field.
func ConferenceNameContains(v string) predicate.Publication {
	return predicate.Publication(sql.FieldContains(FieldConferenceName, v))
}

// ConferenceNameHasPrefix applies the HasPrefix predicate on the "conference_name" field.
func ConferenceNameHasPrefix(v string) predicate.Publication {
	return predicate.Publication(sql.FieldHasPrefix(FieldConferenceName, v))
}

// ConferenceNameHasSuffix applies the HasSuffix predicate on the "conference_name" field.
func ConferenceNameHasSuffix(v string) predicate.Publication {
	return predicate.Publication(sql.FieldHasSuffix(FieldConferenceName, v))
}

// ConferenceNameIsNil applies the IsNil predicate on the "conference_name" field.
func ConferenceNameIsNil() predicate.Publication {
	return predicate.Publication(sql.FieldIsNull(FieldConferenceName))
}

// ConferenceNameNotNil applies the NotNil predicate on the "conference_name" field.
func ConferenceNameNotNil() predicate.Publication {
	return predicate.Publication(sql.FieldNotNull(FieldConferenceName))
}

// ConferenceNameEqualFold applies the EqualFold predicate on the "conference_name" field.
func ConferenceNameEqualFold(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEqualFold(FieldConferenceName, v))
}

// ConferenceNameContainsFold applies the ContainsFold predicate on the "conference_name" field.
func ConferenceNameContainsFold(v string) predicate.Publication {
	return predicate.Publication(sql.FieldContainsFold(FieldConferenceName, v))
}

// VolumeEQ applies the EQ predicate on the "volume" field.
func VolumeEQ(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldVolume, v))
}

// VolumeNEQ applies the NEQ predicate on the "volume" field.
func VolumeNEQ(v string) predicate.Publication {
	return predicate.Publication(sql.FieldNEQ(FieldVolume, v))
}

// VolumeIn applies the In predicate on the "volume" field.
func VolumeIn(vs ...string) predicate.Publication {
	return predicate.Publication(sql.FieldIn(FieldVolume, vs...))
}

// VolumeNotIn applies the NotIn predicate on the "volume" field.
func VolumeNotIn(vs ...string) predicate.Publication {
	return predicate.Publication(sql.FieldNotIn(FieldVolume, vs...))
}

// VolumeGT applies the GT predicate on the "volume" field.
func VolumeGT(v string) predicate.Publication {
	return predicate.Publication(sql.FieldGT(FieldVolume, v))
}

// VolumeGTE applies the GTE predicate on the "volume" field.
func VolumeGTE(v string) predicate.Publication {
	return predicate.Publication(sql.FieldGTE(FieldVolume, v))
}

// VolumeLT applies the LT predicate on the "volume" field.
func VolumeLT(v string) predicate.Publication {
	return predicate.Publication(sql.FieldLT(FieldVolume, v))
}

// VolumeLTE applies the LTE predicate on the "volume" field.
func VolumeLTE(v string) predicate.Publication {
	return predicate.Publication(sql.FieldLTE(FieldVolume, v))
}

// VolumeContains applies the Contains predicate on the "volume" field.
func VolumeContains(v string) predicate.Publication {
	return predicate.Publication(sql.FieldContains(FieldVolume, v))
}

// VolumeHasPrefix applies the HasPrefix predicate on the "volume" field.
func VolumeHasPrefix(v string) predicate.Publication {
	return predicate.Publication(sql.FieldHasPrefix(FieldVolume, v))
}

// VolumeHasSuffix applies the HasSuffix predicate on the "volume" field.
func VolumeHasSuffix(v string) predicate.Publication {
	return predicate.Publication(sql.FieldHasSuffix(FieldVolume, v))
}

// VolumeIsNil applies the IsNil predicate on the "volume" field.
func VolumeIsNil() predicate.Publication {
	return predicate.Publication(sql.FieldIsNull(FieldVolume))
}

// VolumeNotNil applies the NotNil predicate on the "volume" field.
func VolumeNotNil() predicate.Publication {
	return predicate.Publication(sql.FieldNotNull(FieldVolume))
}

// VolumeEqualFold applies the EqualFold predicate on the "volume" field.
func VolumeEqualFold(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEqualFold(FieldVolume, v))
}

// VolumeContainsFold applies the ContainsFold predicate on the "volume" field.
func VolumeContainsFold(v string) predicate.Publication {
	return predicate.Publication(sql.FieldContainsFold(FieldVolume, v))
}

// IssueEQ applies the EQ predicate on the "issue" field.
func IssueEQ(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldIssue, v))
}

// IssueNEQ applies the NEQ predicate on the "issue" field.
func IssueNEQ(v string) predicate.Publication {
	return predicate.Publication(sql.FieldNEQ(FieldIssue, v))
}

// IssueIn applies the In predicate on the "issue" field.
func IssueIn(vs ...string) predicate.Publication {
	return predicate.Publication(sql.FieldIn(FieldIssue, vs...))
}

// IssueNotIn applies the NotIn predicate on the "issue" field.
func IssueNotIn(vs ...string) predicate.Publication {
	return predicate.Publication(sql.FieldNotIn(FieldIssue, vs...))
}

// IssueGT applies the GT predicate on the "issue" field.
func IssueGT(v string) predicate.Publication {
	return predicate.Publication(sql.FieldGT(FieldIssue, v))
}

// IssueGTE applies the GTE predicate on the "issue" field.
func IssueGTE(v string) predicate.Publication {
	return predicate.Publication(sql.FieldGTE(FieldIssue, v))
}

// IssueLT applies the LT predicate on the "issue" field.
func IssueLT(v string) predicate.Publication {
	return predicate.Publication(sql.FieldLT(FieldIssue, v))
}

// IssueLTE applies the LTE predicate on the "issue" field.
func IssueLTE(v string) predicate.Publication {
	return predicate.Publication(sql.FieldLTE(FieldIssue, v))
}

// IssueContains applies the Contains predicate on the "issue" field.
func IssueContains(v string) predicate.Publication {
	return predicate.Publication(sql.FieldContains(FieldIssue, v))
}

// IssueHasPrefix applies the HasPrefix predicate on the "issue" field.
func IssueHasPrefix(v string) predicate.Publication {
	return predicate.Publication(sql.FieldHasPrefix(FieldIssue, v))
}

// IssueHasSuffix applies the HasSuffix predicate on the "issue" field.
func IssueHasSuffix(v string) predicate.Publication {
	return predicate.Publication(sql.FieldHasSuffix(FieldIssue, v))
}

// IssueIsNil applies the IsNil predicate on the "issue" field.
func IssueIsNil() predicate.Publication {
	return predicate.Publication(sql.FieldIsNull(FieldIssue))
}

// IssueNotNil applies the NotNil predicate on the "issue" field.
func IssueNotNil() predicate.Publication {
	return predicate.Publication(sql.FieldNotNull(FieldIssue))
}

// IssueEqualFold applies the EqualFold predicate on the "issue" field.
func IssueEqualFold(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEqualFold(FieldIssue, v))
}

// IssueContainsFold applies the ContainsFold predicate on the "issue" field.
func IssueContainsFold(v string) predicate.Publication {
	return predicate.Publication(sql.FieldContainsFold(FieldIssue, v))
}

// PagesEQ applies the EQ predicate on the "pages" field.
func PagesEQ(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldPages, v))
}

// PagesNEQ applies the NEQ predicate on the "pages" field.
func PagesNEQ(v string) predicate.Publication {
	return predicate.Publication(sql.FieldNEQ(FieldPages, v))
}

// PagesIn applies the In predicate on the "pages" field.
func PagesIn(vs ...string) predicate.Publication {
	return predicate.Publication(sql.FieldIn(FieldPages, vs...))
}

// PagesNotIn applies the NotIn predicate on the "pages" field.
func PagesNotIn(vs ...string) predicate.Publication {
	return predicate.Publication(sql.FieldNotIn(FieldPages, vs...))
}

// PagesGT applies the GT predicate on the "pages" field.
func PagesGT(v string) predicate.Publication {
	return predicate.Publication(sql.FieldGT(FieldPages, v))
}

// PagesGTE applies the GTE predicate on the "pages" field.
func PagesGTE(v string) predicate.Publication {
	return predicate.Publication(sql.FieldGTE(FieldPages, v))
}

// PagesLT applies the LT predicate on the "pages" field.
func PagesLT(v string) predicate.Publication {
	return predicate.Publication(sql.FieldLT(FieldPages, v))
}

// PagesLTE applies the LTE predicate on the "pages" field.
func PagesLTE(v string) predicate.Publication {
	return predicate.Publication(sql.FieldLTE(FieldPages, v))
}

// PagesContains applies the Contains predicate on the "pages" field.
func PagesContains(v string) predicate.Publication {
	return predicate.Publication(sql.FieldContains(FieldPages, v))
}

// PagesHasPrefix applies the HasPrefix predicate on the "pages" field.
func PagesHasPrefix(v string) predicate.Publication {
	return predicate.Publication(sql.FieldHasPrefix(FieldPages, v))
}

// PagesHasSuffix applies the HasSuffix predicate on the "pages" field.
func PagesHasSuffix(v string) predicate.Publication {
	return predicate.Publication(sql.FieldHasSuffix(FieldPages, v))
}

// PagesIsNil applies the IsNil predicate on the "pages" field.
func PagesIsNil() predicate.Publication {
	return predicate.Publication(sql.FieldIsNull(FieldPages))
}

// PagesNotNil applies the NotNil predicate on the "pages" field.
func PagesNotNil() predicate.Publication {
	return predicate.Publication(sql.FieldNotNull(FieldPages))
}

// PagesEqualFold applies the EqualFold predicate on the "pages" field.
func PagesEqualFold(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEqualFold(FieldPages, v))
}

// PagesContainsFold applies the ContainsFold predicate on the "pages" field.
func PagesContainsFold(v string) predicate.Publication {
	return predicate.Publication(sql.FieldContainsFold(FieldPages, v))
}

// PublicationDateEQ applies the EQ predicate on the "publication_date" field.
func PublicationDateEQ(v time.Time) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldPublicationDate, v))
}

// PublicationDateNEQ applies the NEQ predicate on the "publication_date" field.
func PublicationDateNEQ(v time.Time) predicate.Publication {
	return predicate.Publication(sql.FieldNEQ(FieldPublicationDate, v))
}

// PublicationDateIn applies the In predicate on the "publication_date" field.
func PublicationDateIn(vs ...time.Time) predicate.Publication {
	return predicate.Publication(sql.FieldIn(FieldPublicationDate, vs...))
}

// PublicationDateNotIn applies the NotIn predicate on the "publication_date" field.
func PublicationDateNotIn(vs ...time.Time) predicate.Publication {
	return predicate.Publication(sql.FieldNotIn(FieldPublicationDate, vs...))
}

// PublicationDateGT applies the GT predicate on the "publication_date" field.
func PublicationDateGT(v time.Time) predicate.Publication {
	return predicate.Publication(sql.FieldGT(FieldPublicationDate, v))
}

// PublicationDateGTE applies the GTE predicate on the "publication_date" field.
func PublicationDateGTE(v time.Time) predicate.Publication {
	return predicate.Publication(sql.FieldGTE(FieldPublicationDate, v))
}

// PublicationDateLT applies the LT predicate on the "publication_date" field.
func PublicationDateLT(v time.Time) predicate.Publication {
	return predicate.Publication(sql.FieldLT(FieldPublicationDate, v))
}

// PublicationDateLTE applies the LTE predicate on the "publication_date" field.
func PublicationDateLTE(v time.Time) predicate.Publication {
	return predicate.Publication(sql.FieldLTE(FieldPublicationDate, v))
}

// PublicationDateIsNil applies the IsNil predicate on the "publication_date" field.
func PublicationDateIsNil() predicate.Publication {
	return predicate.Publication(sql.FieldIsNull(FieldPublicationDate))
}

// PublicationDateNotNil applies the NotNil predicate on the "publication_date" field.
func PublicationDateNotNil() predicate.Publication {
	return predicate.Publication(sql.FieldNotNull(FieldPublicationDate))
}

// DoiEQ applies the EQ predicate on the "doi" field.
func DoiEQ(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldDoi, v))
}

// DoiNEQ applies the NEQ predicate on the "doi" field.
func DoiNEQ(v string) predicate.Publication {
	return predicate.Publication(sql.FieldNEQ(FieldDoi, v))
}

// DoiIn applies the In predicate on the "doi" field.
func DoiIn(vs ...string) predicate.Publication {
	return predicate.Publication(sql.FieldIn(FieldDoi, vs...))
}

// DoiNotIn applies the NotIn predicate on the "doi" field.
func DoiNotIn(vs ...string) predicate.Publication {
	return predicate.Publication(sql.FieldNotIn(FieldDoi, vs...))
}

// DoiGT applies the GT predicate on the "doi" field.
func DoiGT(v string) predicate.Publication {
	return predicate.Publication(sql.FieldGT(FieldDoi, v))
}

// DoiGTE applies the GTE predicate on the "doi" field.
func DoiGTE(v string) predicate.Publication {
	return predicate.Publication(sql.FieldGTE(FieldDoi, v))
}

// DoiLT applies the LT predicate on the "doi" field.
func DoiLT(v string) predicate.Publication {
	return predicate.Publication(sql.FieldLT(FieldDoi, v))
}

// DoiLTE applies the LTE predicate on the "doi" field.
func DoiLTE(v string) predicate.Publication {
	return predicate.Publication(sql.FieldLTE(FieldDoi, v))
}

// DoiContains applies the Contains predicate on the "doi" field.
func DoiContains(v string) predicate.Publication {
	return predicate.Publication(sql.FieldContains(FieldDoi, v))
}

// DoiHasPrefix applies the HasPrefix predicate on the "doi" field.
func DoiHasPrefix(v string) predicate.Publication {
	return predicate.Publication(sql.FieldHasPrefix(FieldDoi, v))
}

// DoiHasSuffix applies the HasSuffix predicate on the "doi" field.
func DoiHasSuffix(v string) predicate.Publication {
	return predicate.Publication(sql.FieldHasSuffix(FieldDoi, v))
}

// DoiIsNil applies the IsNil predicate on the "doi" field.
func DoiIsNil() predicate.Publication {
	return predicate.Publication(sql.FieldIsNull(FieldDoi))
}

// DoiNotNil applies the NotNil predicate on the "doi" field.
func DoiNotNil() predicate.Publication {
	return predicate.Publication(sql.FieldNotNull(FieldDoi))
}

// DoiEqualFold applies the EqualFold predicate on the "doi" field.
func DoiEqualFold(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEqualFold(FieldDoi, v))
}

// DoiContainsFold applies the ContainsFold predicate on the "doi" field.
func DoiContainsFold(v string) predicate.Publication {
	return predicate.Publication(sql.FieldContainsFold(FieldDoi, v))
}

// IsbnEQ applies the EQ predicate on the "isbn" field.
func IsbnEQ(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldIsbn, v))
}

// IsbnNEQ applies the NEQ predicate on the "isbn" field.
func IsbnNEQ(v string) predicate.Publication {
	return predicate.Publication(sql.FieldNEQ(FieldIsbn, v))
}

// IsbnIn applies the In predicate on the "isbn" field.
func IsbnIn(vs ...string) predicate.Publication {
	return predicate.Publication(sql.FieldIn(FieldIsbn, vs...))
}

// IsbnNotIn applies the NotIn predicate on the "isbn" field.
func IsbnNotIn(vs ...string) predicate.Publication {
	return predicate.Publication(sql.FieldNotIn(FieldIsbn, vs...))
}

// IsbnGT applies the GT predicate on the "isbn" field.
func IsbnGT(v string) predicate.Publication {
	return predicate.Publication(sql.FieldGT(FieldIsbn, v))
}

// IsbnGTE applies the GTE predicate on the "isbn" field.
func IsbnGTE(v string) predicate.Publication {
	return predicate.Publication(sql.FieldGTE(FieldIsbn, v))
}

// IsbnLT applies the LT predicate on the "isbn" field.
func IsbnLT(v string) predicate.Publication {
	return predicate.Publication(sql.FieldLT(FieldIsbn, v))
}

// IsbnLTE applies the LTE predicate on the "isbn" field.
func IsbnLTE(v string) predicate.Publication {
	return predicate.Publication(sql.FieldLTE(FieldIsbn, v))
}

// IsbnContains applies the Contains predicate on the "isbn" field.
func IsbnContains(v string) predicate.Publication {
	return predicate.Publication(sql.FieldContains(FieldIsbn, v))
}

// IsbnHasPrefix applies the HasPrefix predicate on the "isbn" field.
func IsbnHasPrefix(v string) predicate.Publication {
	return predicate.Publication(sql.FieldHasPrefix(FieldIsbn, v))
}

// IsbnHasSuffix applies the HasSuffix predicate on the "isbn" field.
func IsbnHasSuffix(v string) predicate.Publication {
	return predicate.Publication(sql.FieldHasSuffix(FieldIsbn, v))
}

// IsbnIsNil applies the IsNil predicate on the "isbn" field.
func IsbnIsNil() predicate.Publication {
	return predicate.Publication(sql.FieldIsNull(FieldIsbn))
}

// IsbnNotNil applies the NotNil predicate on the "isbn" field.
func IsbnNotNil() predicate.Publication {
	return predicate.Publication(sql.FieldNotNull(FieldIsbn))
}

// IsbnEqualFold applies the EqualFold predicate on the "isbn" field.
func IsbnEqualFold(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEqualFold(FieldIsbn, v))
}

// IsbnContainsFold applies the ContainsFold predicate on the "isbn" field.
func IsbnContainsFold(v string) predicate.Publication {
	return predicate.Publication(sql.FieldContainsFold(FieldIsbn, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Publication {
	return predicate.Publication(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Publication {
	return predicate.Publication(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Publication {
	return predicate.Publication(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Publication {
	return predicate.Publication(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Publication {
	return predicate.Publication(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Publication {
	return predicate.Publication(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Publication {
	return predicate.Publication(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Publication {
	return predicate.Publication(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Publication {
	return predicate.Publication(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Publication {
	return predicate.Publication(sql.FieldHasSuffix(FieldURL, v))
}

// URLIsNil applies the IsNil predicate on the "url" field.
func URLIsNil() predicate.Publication {
	return predicate.Publication(sql.FieldIsNull(FieldURL))
}

// URLNotNil applies the NotNil predicate on the "url" field.
func URLNotNil() predicate.Publication {
	return predicate.Publication(sql.FieldNotNull(FieldURL))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Publication {
	return predicate.Publication(sql.FieldContainsFold(FieldURL, v))
}

// PdfURLEQ applies the EQ predicate on the "pdf_url" field.
func PdfURLEQ(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldPdfURL, v))
}

// PdfURLNEQ applies the NEQ predicate on the "pdf_url" field.
func PdfURLNEQ(v string) predicate.Publication {
	return predicate.Publication(sql.FieldNEQ(FieldPdfURL, v))
}

// PdfURLIn applies the In predicate on the "pdf_url" field.
func PdfURLIn(vs ...string) predicate.Publication {
	return predicate.Publication(sql.FieldIn(FieldPdfURL, vs...))
}

// PdfURLNotIn applies the NotIn predicate on the "pdf_url" field.
func PdfURLNotIn(vs ...string) predicate.Publication {
	return predicate.Publication(sql.FieldNotIn(FieldPdfURL, vs...))
}

// PdfURLGT applies the GT predicate on the "pdf_url" field.
func PdfURLGT(v string) predicate.Publication {
	return predicate.Publication(sql.FieldGT(FieldPdfURL, v))
}

// PdfURLGTE applies the GTE predicate on the "pdf_url" field.
func PdfURLGTE(v string) predicate.Publication {
	return predicate.Publication(sql.FieldGTE(FieldPdfURL, v))
}

// PdfURLLT applies the LT predicate on the "pdf_url" field.
func PdfURLLT(v string) predicate.Publication {
	return predicate.Publication(sql.FieldLT(FieldPdfURL, v))
}

// PdfURLLTE applies the LTE predicate on the "pdf_url" field.
func PdfURLLTE(v string) predicate.Publication {
	return predicate.Publication(sql.FieldLTE(FieldPdfURL, v))
}

// PdfURLContains applies the Contains predicate on the "pdf_url" field.
func PdfURLContains(v string) predicate.Publication {
	return predicate.Publication(sql.FieldContains(FieldPdfURL, v))
}

// PdfURLHasPrefix applies the HasPrefix predicate on the "pdf_url" field.
func PdfURLHasPrefix(v string) predicate.Publication {
	return predicate.Publication(sql.FieldHasPrefix(FieldPdfURL, v))
}

// PdfURLHasSuffix applies the HasSuffix predicate on the "pdf_url" field.
func PdfURLHasSuffix(v string) predicate.Publication {
	return predicate.Publication(sql.FieldHasSuffix(FieldPdfURL, v))
}

// PdfURLIsNil applies the IsNil predicate on the "pdf_url" field.
func PdfURLIsNil() predicate.Publication {
	return predicate.Publication(sql.FieldIsNull(FieldPdfURL))
}

// PdfURLNotNil applies the NotNil predicate on the "pdf_url" field.
func PdfURLNotNil() predicate.Publication {
	return predicate.Publication(sql.FieldNotNull(FieldPdfURL))
}

// PdfURLEqualFold applies the EqualFold predicate on the "pdf_url" field.
func PdfURLEqualFold(v string) predicate.Publication {
	return predicate.Publication(sql.FieldEqualFold(FieldPdfURL, v))
}

// PdfURLContainsFold applies the ContainsFold predicate on the "pdf_url" field.
func PdfURLContainsFold(v string) predicate.Publication {
	return predicate.Publication(sql.FieldContainsFold(FieldPdfURL, v))
}

// CitationCountEQ applies the EQ predicate on the "citation_count" field.
func CitationCountEQ(v int) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldCitationCount, v))
}

// CitationCountNEQ applies the NEQ predicate on the "citation_count" field.
func CitationCountNEQ(v int) predicate.Publication {
	return predicate.Publication(sql.FieldNEQ(FieldCitationCount, v))
}

// CitationCountIn applies the In predicate on the "citation_count" field.
func CitationCountIn(vs ...int) predicate.Publication {
	return predicate.Publication(sql.FieldIn(FieldCitationCount, vs...))
}

// CitationCountNotIn applies the NotIn predicate on the "citation_count" field.
func CitationCountNotIn(vs ...int) predicate.Publication {
	return predicate.Publication(sql.FieldNotIn(FieldCitationCount, vs...))
}

// CitationCountGT applies the GT predicate on the "citation_count" field.
func CitationCountGT(v int) predicate.Publication {
	return predicate.Publication(sql.FieldGT(FieldCitationCount, v))
}

// CitationCountGTE applies the GTE predicate on the "citation_count" field.
func CitationCountGTE(v int) predicate.Publication {
	return predicate.Publication(sql.FieldGTE(FieldCitationCount, v))
}

// CitationCountLT applies the LT predicate on the "citation_count" field.
func CitationCountLT(v int) predicate.Publication {
	return predicate.Publication(sql.FieldLT(FieldCitationCount, v))
}

// CitationCountLTE applies the LTE predicate on the "citation_count" field.
func CitationCountLTE(v int) predicate.Publication {
	return predicate.Publication(sql.FieldLTE(FieldCitationCount, v))
}

// IsPeerReviewedEQ applies the EQ predicate on the "is_peer_reviewed" field.
func IsPeerReviewedEQ(v bool) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldIsPeerReviewed, v))
}

// IsPeerReviewedNEQ applies the NEQ predicate on the "is_peer_reviewed" field.
func IsPeerReviewedNEQ(v bool) predicate.Publication {
	return predicate.Publication(sql.FieldNEQ(FieldIsPeerReviewed, v))
}

// SortOrderEQ applies the EQ predicate on the "sort_order" field.
func SortOrderEQ(v int) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldSortOrder, v))
}

// SortOrderNEQ applies the NEQ predicate on the "sort_order" field.
func SortOrderNEQ(v int) predicate.Publication {
	return predicate.Publication(sql.FieldNEQ(FieldSortOrder, v))
}

// SortOrderIn applies the In predicate on the "sort_order" field.
func SortOrderIn(vs ...int) predicate.Publication {
	return predicate.Publication(sql.FieldIn(FieldSortOrder, vs...))
}

// SortOrderNotIn applies the NotIn predicate on the "sort_order" field.
func SortOrderNotIn(vs ...int) predicate.Publication {
	return predicate.Publication(sql.FieldNotIn(FieldSortOrder, vs...))
}

// SortOrderGT applies the GT predicate on the "sort_order" field.
func SortOrderGT(v int) predicate.Publication {
	return predicate.Publication(sql.FieldGT(FieldSortOrder, v))
}

// SortOrderGTE applies the GTE predicate on the "sort_order" field.
func SortOrderGTE(v int) predicate.Publication {
	return predicate.Publication(sql.FieldGTE(FieldSortOrder, v))
}

// SortOrderLT applies the LT predicate on the "sort_order" field.
func SortOrderLT(v int) predicate.Publication {
	return predicate.Publication(sql.FieldLT(FieldSortOrder, v))
}

// SortOrderLTE applies the LTE predicate on the "sort_order" field.
func SortOrderLTE(v int) predicate.Publication {
	return predicate.Publication(sql.FieldLTE(FieldSortOrder, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Publication {
	return predicate.Publication(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Publication {
	return predicate.Publication(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Publication {
	return predicate.Publication(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Publication {
	return predicate.Publication(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Publication {
	return predicate.Publication(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Publication {
	return predicate.Publication(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Publication {
	return predicate.Publication(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Publication {
	return predicate.Publication(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Publication {
	return predicate.Publication(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Publication {
	return predicate.Publication(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Publication {
	return predicate.Publication(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Publication {
	return predicate.Publication(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Publication {
	return predicate.Publication(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Publication {
	return predicate.Publication(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Publication {
	return predicate.Publication(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Publication {
	return predicate.Publication(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Publication {
	return predicate.Publication(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Publication) predicate.Publication {
	return predicate.Publication(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Publication) predicate.Publication {
	return predicate.Publication(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Publication) predicate.Publication {
	return predicate.Publication(sql.NotPredicates(p))
}
