// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/projectimage"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ProjectImage is the model entity for the ProjectImage schema.
type ProjectImage struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ProjectID holds the value of the "project_id" field.
	ProjectID uuid.UUID `json:"project_id,omitempty"`
	// ImageURL holds the value of the "image_url" field.
	ImageURL string `json:"image_url,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// AltText holds the value of the "alt_text" field.
	AltText string `json:"alt_text,omitempty"`
	// ImageType holds the value of the "image_type" field.
	ImageType projectimage.ImageType `json:"image_type,omitempty"`
	// FileName holds the value of the "file_name" field.
	FileName string `json:"file_name,omitempty"`
	// FileSize holds the value of the "file_size" field.
	FileSize int `json:"file_size,omitempty"`
	// MimeType holds the value of the "mime_type" field.
	MimeType string `json:"mime_type,omitempty"`
	// Width holds the value of the "width" field.
	Width int `json:"width,omitempty"`
	// Height holds the value of the "height" field.
	Height int `json:"height,omitempty"`
	// IsPrimary holds the value of the "is_primary" field.
	IsPrimary bool `json:"is_primary,omitempty"`
	// IsPublic holds the value of the "is_public" field.
	IsPublic bool `json:"is_public,omitempty"`
	// SortOrder holds the value of the "sort_order" field.
	SortOrder int `json:"sort_order,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectImageQuery when eager-loading is set.
	Edges          ProjectImageEdges `json:"edges"`
	project_images *uuid.UUID
	selectValues   sql.SelectValues
}

// ProjectImageEdges holds the relations/edges for other nodes in the graph.
type ProjectImageEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectImageEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectImage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case projectimage.FieldIsPrimary, projectimage.FieldIsPublic:
			values[i] = new(sql.NullBool)
		case projectimage.FieldFileSize, projectimage.FieldWidth, projectimage.FieldHeight, projectimage.FieldSortOrder:
			values[i] = new(sql.NullInt64)
		case projectimage.FieldImageURL, projectimage.FieldTitle, projectimage.FieldDescription, projectimage.FieldAltText, projectimage.FieldImageType, projectimage.FieldFileName, projectimage.FieldMimeType:
			values[i] = new(sql.NullString)
		case projectimage.FieldCreatedAt, projectimage.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case projectimage.FieldID, projectimage.FieldProjectID:
			values[i] = new(uuid.UUID)
		case projectimage.ForeignKeys[0]: // project_images
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectImage fields.
func (pi *ProjectImage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projectimage.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pi.ID = *value
			}
		case projectimage.FieldProjectID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value != nil {
				pi.ProjectID = *value
			}
		case projectimage.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				pi.ImageURL = value.String
			}
		case projectimage.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				pi.Title = value.String
			}
		case projectimage.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pi.Description = value.String
			}
		case projectimage.FieldAltText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alt_text", values[i])
			} else if value.Valid {
				pi.AltText = value.String
			}
		case projectimage.FieldImageType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_type", values[i])
			} else if value.Valid {
				pi.ImageType = projectimage.ImageType(value.String)
			}
		case projectimage.FieldFileName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_name", values[i])
			} else if value.Valid {
				pi.FileName = value.String
			}
		case projectimage.FieldFileSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field file_size", values[i])
			} else if value.Valid {
				pi.FileSize = int(value.Int64)
			}
		case projectimage.FieldMimeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mime_type", values[i])
			} else if value.Valid {
				pi.MimeType = value.String
			}
		case projectimage.FieldWidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field width", values[i])
			} else if value.Valid {
				pi.Width = int(value.Int64)
			}
		case projectimage.FieldHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				pi.Height = int(value.Int64)
			}
		case projectimage.FieldIsPrimary:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_primary", values[i])
			} else if value.Valid {
				pi.IsPrimary = value.Bool
			}
		case projectimage.FieldIsPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_public", values[i])
			} else if value.Valid {
				pi.IsPublic = value.Bool
			}
		case projectimage.FieldSortOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_order", values[i])
			} else if value.Valid {
				pi.SortOrder = int(value.Int64)
			}
		case projectimage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pi.CreatedAt = value.Time
			}
		case projectimage.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pi.UpdatedAt = value.Time
			}
		case projectimage.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field project_images", values[i])
			} else if value.Valid {
				pi.project_images = new(uuid.UUID)
				*pi.project_images = *value.S.(*uuid.UUID)
			}
		default:
			pi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProjectImage.
// This includes values selected through modifiers, order, etc.
func (pi *ProjectImage) Value(name string) (ent.Value, error) {
	return pi.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the ProjectImage entity.
func (pi *ProjectImage) QueryProject() *ProjectQuery {
	return NewProjectImageClient(pi.config).QueryProject(pi)
}

// Update returns a builder for updating this ProjectImage.
// Note that you need to call ProjectImage.Unwrap() before calling this method if this ProjectImage
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *ProjectImage) Update() *ProjectImageUpdateOne {
	return NewProjectImageClient(pi.config).UpdateOne(pi)
}

// Unwrap unwraps the ProjectImage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *ProjectImage) Unwrap() *ProjectImage {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProjectImage is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *ProjectImage) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectImage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	builder.WriteString("project_id=")
	builder.WriteString(fmt.Sprintf("%v", pi.ProjectID))
	builder.WriteString(", ")
	builder.WriteString("image_url=")
	builder.WriteString(pi.ImageURL)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(pi.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pi.Description)
	builder.WriteString(", ")
	builder.WriteString("alt_text=")
	builder.WriteString(pi.AltText)
	builder.WriteString(", ")
	builder.WriteString("image_type=")
	builder.WriteString(fmt.Sprintf("%v", pi.ImageType))
	builder.WriteString(", ")
	builder.WriteString("file_name=")
	builder.WriteString(pi.FileName)
	builder.WriteString(", ")
	builder.WriteString("file_size=")
	builder.WriteString(fmt.Sprintf("%v", pi.FileSize))
	builder.WriteString(", ")
	builder.WriteString("mime_type=")
	builder.WriteString(pi.MimeType)
	builder.WriteString(", ")
	builder.WriteString("width=")
	builder.WriteString(fmt.Sprintf("%v", pi.Width))
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(fmt.Sprintf("%v", pi.Height))
	builder.WriteString(", ")
	builder.WriteString("is_primary=")
	builder.WriteString(fmt.Sprintf("%v", pi.IsPrimary))
	builder.WriteString(", ")
	builder.WriteString("is_public=")
	builder.WriteString(fmt.Sprintf("%v", pi.IsPublic))
	builder.WriteString(", ")
	builder.WriteString("sort_order=")
	builder.WriteString(fmt.Sprintf("%v", pi.SortOrder))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pi.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProjectImages is a parsable slice of ProjectImage.
type ProjectImages []*ProjectImage
