// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/project"
	"silan-backend/internal/ent/projectdetail"
	"silan-backend/internal/ent/projectimage"
	"silan-backend/internal/ent/projecttechnology"
	"silan-backend/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProjectCreate is the builder for creating a Project entity.
type ProjectCreate struct {
	config
	mutation *ProjectMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (pc *ProjectCreate) SetUserID(u uuid.UUID) *ProjectCreate {
	pc.mutation.SetUserID(u)
	return pc
}

// SetTitle sets the "title" field.
func (pc *ProjectCreate) SetTitle(s string) *ProjectCreate {
	pc.mutation.SetTitle(s)
	return pc
}

// SetSlug sets the "slug" field.
func (pc *ProjectCreate) SetSlug(s string) *ProjectCreate {
	pc.mutation.SetSlug(s)
	return pc
}

// SetDescription sets the "description" field.
func (pc *ProjectCreate) SetDescription(s string) *ProjectCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableDescription(s *string) *ProjectCreate {
	if s != nil {
		pc.SetDescription(*s)
	}
	return pc
}

// SetProjectType sets the "project_type" field.
func (pc *ProjectCreate) SetProjectType(s string) *ProjectCreate {
	pc.mutation.SetProjectType(s)
	return pc
}

// SetNillableProjectType sets the "project_type" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableProjectType(s *string) *ProjectCreate {
	if s != nil {
		pc.SetProjectType(*s)
	}
	return pc
}

// SetStatus sets the "status" field.
func (pc *ProjectCreate) SetStatus(pr project.Status) *ProjectCreate {
	pc.mutation.SetStatus(pr)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableStatus(pr *project.Status) *ProjectCreate {
	if pr != nil {
		pc.SetStatus(*pr)
	}
	return pc
}

// SetStartDate sets the "start_date" field.
func (pc *ProjectCreate) SetStartDate(t time.Time) *ProjectCreate {
	pc.mutation.SetStartDate(t)
	return pc
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableStartDate(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetStartDate(*t)
	}
	return pc
}

// SetEndDate sets the "end_date" field.
func (pc *ProjectCreate) SetEndDate(t time.Time) *ProjectCreate {
	pc.mutation.SetEndDate(t)
	return pc
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableEndDate(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetEndDate(*t)
	}
	return pc
}

// SetGithubURL sets the "github_url" field.
func (pc *ProjectCreate) SetGithubURL(s string) *ProjectCreate {
	pc.mutation.SetGithubURL(s)
	return pc
}

// SetNillableGithubURL sets the "github_url" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableGithubURL(s *string) *ProjectCreate {
	if s != nil {
		pc.SetGithubURL(*s)
	}
	return pc
}

// SetDemoURL sets the "demo_url" field.
func (pc *ProjectCreate) SetDemoURL(s string) *ProjectCreate {
	pc.mutation.SetDemoURL(s)
	return pc
}

// SetNillableDemoURL sets the "demo_url" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableDemoURL(s *string) *ProjectCreate {
	if s != nil {
		pc.SetDemoURL(*s)
	}
	return pc
}

// SetDocumentationURL sets the "documentation_url" field.
func (pc *ProjectCreate) SetDocumentationURL(s string) *ProjectCreate {
	pc.mutation.SetDocumentationURL(s)
	return pc
}

// SetNillableDocumentationURL sets the "documentation_url" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableDocumentationURL(s *string) *ProjectCreate {
	if s != nil {
		pc.SetDocumentationURL(*s)
	}
	return pc
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (pc *ProjectCreate) SetThumbnailURL(s string) *ProjectCreate {
	pc.mutation.SetThumbnailURL(s)
	return pc
}

// SetNillableThumbnailURL sets the "thumbnail_url" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableThumbnailURL(s *string) *ProjectCreate {
	if s != nil {
		pc.SetThumbnailURL(*s)
	}
	return pc
}

// SetIsFeatured sets the "is_featured" field.
func (pc *ProjectCreate) SetIsFeatured(b bool) *ProjectCreate {
	pc.mutation.SetIsFeatured(b)
	return pc
}

// SetNillableIsFeatured sets the "is_featured" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableIsFeatured(b *bool) *ProjectCreate {
	if b != nil {
		pc.SetIsFeatured(*b)
	}
	return pc
}

// SetIsPublic sets the "is_public" field.
func (pc *ProjectCreate) SetIsPublic(b bool) *ProjectCreate {
	pc.mutation.SetIsPublic(b)
	return pc
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableIsPublic(b *bool) *ProjectCreate {
	if b != nil {
		pc.SetIsPublic(*b)
	}
	return pc
}

// SetViewCount sets the "view_count" field.
func (pc *ProjectCreate) SetViewCount(i int) *ProjectCreate {
	pc.mutation.SetViewCount(i)
	return pc
}

// SetNillableViewCount sets the "view_count" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableViewCount(i *int) *ProjectCreate {
	if i != nil {
		pc.SetViewCount(*i)
	}
	return pc
}

// SetStarCount sets the "star_count" field.
func (pc *ProjectCreate) SetStarCount(i int) *ProjectCreate {
	pc.mutation.SetStarCount(i)
	return pc
}

// SetNillableStarCount sets the "star_count" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableStarCount(i *int) *ProjectCreate {
	if i != nil {
		pc.SetStarCount(*i)
	}
	return pc
}

// SetSortOrder sets the "sort_order" field.
func (pc *ProjectCreate) SetSortOrder(i int) *ProjectCreate {
	pc.mutation.SetSortOrder(i)
	return pc
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableSortOrder(i *int) *ProjectCreate {
	if i != nil {
		pc.SetSortOrder(*i)
	}
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProjectCreate) SetCreatedAt(t time.Time) *ProjectCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableCreatedAt(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProjectCreate) SetUpdatedAt(t time.Time) *ProjectCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableUpdatedAt(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *ProjectCreate) SetID(u uuid.UUID) *ProjectCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableID(u *uuid.UUID) *ProjectCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pc *ProjectCreate) SetUserID(id uuid.UUID) *ProjectCreate {
	pc.mutation.SetUserID(id)
	return pc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (pc *ProjectCreate) SetNillableUserID(id *uuid.UUID) *ProjectCreate {
	if id != nil {
		pc = pc.SetUserID(*id)
	}
	return pc
}

// SetUser sets the "user" edge to the User entity.
func (pc *ProjectCreate) SetUser(u *User) *ProjectCreate {
	return pc.SetUserID(u.ID)
}

// AddTechnologyIDs adds the "technologies" edge to the ProjectTechnology entity by IDs.
func (pc *ProjectCreate) AddTechnologyIDs(ids ...uuid.UUID) *ProjectCreate {
	pc.mutation.AddTechnologyIDs(ids...)
	return pc
}

// AddTechnologies adds the "technologies" edges to the ProjectTechnology entity.
func (pc *ProjectCreate) AddTechnologies(p ...*ProjectTechnology) *ProjectCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddTechnologyIDs(ids...)
}

// SetDetailID sets the "detail" edge to the ProjectDetail entity by ID.
func (pc *ProjectCreate) SetDetailID(id uuid.UUID) *ProjectCreate {
	pc.mutation.SetDetailID(id)
	return pc
}

// SetNillableDetailID sets the "detail" edge to the ProjectDetail entity by ID if the given value is not nil.
func (pc *ProjectCreate) SetNillableDetailID(id *uuid.UUID) *ProjectCreate {
	if id != nil {
		pc = pc.SetDetailID(*id)
	}
	return pc
}

// SetDetail sets the "detail" edge to the ProjectDetail entity.
func (pc *ProjectCreate) SetDetail(p *ProjectDetail) *ProjectCreate {
	return pc.SetDetailID(p.ID)
}

// AddImageIDs adds the "images" edge to the ProjectImage entity by IDs.
func (pc *ProjectCreate) AddImageIDs(ids ...uuid.UUID) *ProjectCreate {
	pc.mutation.AddImageIDs(ids...)
	return pc
}

// AddImages adds the "images" edges to the ProjectImage entity.
func (pc *ProjectCreate) AddImages(p ...*ProjectImage) *ProjectCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddImageIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (pc *ProjectCreate) Mutation() *ProjectMutation {
	return pc.mutation
}

// Save creates the Project in the database.
func (pc *ProjectCreate) Save(ctx context.Context) (*Project, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProjectCreate) SaveX(ctx context.Context) *Project {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProjectCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProjectCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProjectCreate) defaults() {
	if _, ok := pc.mutation.ProjectType(); !ok {
		v := project.DefaultProjectType
		pc.mutation.SetProjectType(v)
	}
	if _, ok := pc.mutation.Status(); !ok {
		v := project.DefaultStatus
		pc.mutation.SetStatus(v)
	}
	if _, ok := pc.mutation.IsFeatured(); !ok {
		v := project.DefaultIsFeatured
		pc.mutation.SetIsFeatured(v)
	}
	if _, ok := pc.mutation.IsPublic(); !ok {
		v := project.DefaultIsPublic
		pc.mutation.SetIsPublic(v)
	}
	if _, ok := pc.mutation.ViewCount(); !ok {
		v := project.DefaultViewCount
		pc.mutation.SetViewCount(v)
	}
	if _, ok := pc.mutation.StarCount(); !ok {
		v := project.DefaultStarCount
		pc.mutation.SetStarCount(v)
	}
	if _, ok := pc.mutation.SortOrder(); !ok {
		v := project.DefaultSortOrder
		pc.mutation.SetSortOrder(v)
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := project.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := project.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := project.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProjectCreate) check() error {
	if _, ok := pc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Project.user_id"`)}
	}
	if _, ok := pc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Project.title"`)}
	}
	if v, ok := pc.mutation.Title(); ok {
		if err := project.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Project.title": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Project.slug"`)}
	}
	if v, ok := pc.mutation.Slug(); ok {
		if err := project.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Project.slug": %w`, err)}
		}
	}
	if _, ok := pc.mutation.ProjectType(); !ok {
		return &ValidationError{Name: "project_type", err: errors.New(`ent: missing required field "Project.project_type"`)}
	}
	if v, ok := pc.mutation.ProjectType(); ok {
		if err := project.ProjectTypeValidator(v); err != nil {
			return &ValidationError{Name: "project_type", err: fmt.Errorf(`ent: validator failed for field "Project.project_type": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Project.status"`)}
	}
	if v, ok := pc.mutation.Status(); ok {
		if err := project.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Project.status": %w`, err)}
		}
	}
	if v, ok := pc.mutation.GithubURL(); ok {
		if err := project.GithubURLValidator(v); err != nil {
			return &ValidationError{Name: "github_url", err: fmt.Errorf(`ent: validator failed for field "Project.github_url": %w`, err)}
		}
	}
	if v, ok := pc.mutation.DemoURL(); ok {
		if err := project.DemoURLValidator(v); err != nil {
			return &ValidationError{Name: "demo_url", err: fmt.Errorf(`ent: validator failed for field "Project.demo_url": %w`, err)}
		}
	}
	if v, ok := pc.mutation.DocumentationURL(); ok {
		if err := project.DocumentationURLValidator(v); err != nil {
			return &ValidationError{Name: "documentation_url", err: fmt.Errorf(`ent: validator failed for field "Project.documentation_url": %w`, err)}
		}
	}
	if v, ok := pc.mutation.ThumbnailURL(); ok {
		if err := project.ThumbnailURLValidator(v); err != nil {
			return &ValidationError{Name: "thumbnail_url", err: fmt.Errorf(`ent: validator failed for field "Project.thumbnail_url": %w`, err)}
		}
	}
	if _, ok := pc.mutation.IsFeatured(); !ok {
		return &ValidationError{Name: "is_featured", err: errors.New(`ent: missing required field "Project.is_featured"`)}
	}
	if _, ok := pc.mutation.IsPublic(); !ok {
		return &ValidationError{Name: "is_public", err: errors.New(`ent: missing required field "Project.is_public"`)}
	}
	if _, ok := pc.mutation.ViewCount(); !ok {
		return &ValidationError{Name: "view_count", err: errors.New(`ent: missing required field "Project.view_count"`)}
	}
	if _, ok := pc.mutation.StarCount(); !ok {
		return &ValidationError{Name: "star_count", err: errors.New(`ent: missing required field "Project.star_count"`)}
	}
	if _, ok := pc.mutation.SortOrder(); !ok {
		return &ValidationError{Name: "sort_order", err: errors.New(`ent: missing required field "Project.sort_order"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Project.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Project.updated_at"`)}
	}
	return nil
}

func (pc *ProjectCreate) sqlSave(ctx context.Context) (*Project, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProjectCreate) createSpec() (*Project, *sqlgraph.CreateSpec) {
	var (
		_node = &Project{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(project.Table, sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.UserID(); ok {
		_spec.SetField(project.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := pc.mutation.Title(); ok {
		_spec.SetField(project.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := pc.mutation.Slug(); ok {
		_spec.SetField(project.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(project.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.ProjectType(); ok {
		_spec.SetField(project.FieldProjectType, field.TypeString, value)
		_node.ProjectType = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(project.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := pc.mutation.StartDate(); ok {
		_spec.SetField(project.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := pc.mutation.EndDate(); ok {
		_spec.SetField(project.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := pc.mutation.GithubURL(); ok {
		_spec.SetField(project.FieldGithubURL, field.TypeString, value)
		_node.GithubURL = value
	}
	if value, ok := pc.mutation.DemoURL(); ok {
		_spec.SetField(project.FieldDemoURL, field.TypeString, value)
		_node.DemoURL = value
	}
	if value, ok := pc.mutation.DocumentationURL(); ok {
		_spec.SetField(project.FieldDocumentationURL, field.TypeString, value)
		_node.DocumentationURL = value
	}
	if value, ok := pc.mutation.ThumbnailURL(); ok {
		_spec.SetField(project.FieldThumbnailURL, field.TypeString, value)
		_node.ThumbnailURL = value
	}
	if value, ok := pc.mutation.IsFeatured(); ok {
		_spec.SetField(project.FieldIsFeatured, field.TypeBool, value)
		_node.IsFeatured = value
	}
	if value, ok := pc.mutation.IsPublic(); ok {
		_spec.SetField(project.FieldIsPublic, field.TypeBool, value)
		_node.IsPublic = value
	}
	if value, ok := pc.mutation.ViewCount(); ok {
		_spec.SetField(project.FieldViewCount, field.TypeInt, value)
		_node.ViewCount = value
	}
	if value, ok := pc.mutation.StarCount(); ok {
		_spec.SetField(project.FieldStarCount, field.TypeInt, value)
		_node.StarCount = value
	}
	if value, ok := pc.mutation.SortOrder(); ok {
		_spec.SetField(project.FieldSortOrder, field.TypeInt, value)
		_node.SortOrder = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(project.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.UserTable,
			Columns: []string{project.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_projects = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.TechnologiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.TechnologiesTable,
			Columns: []string{project.TechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttechnology.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.DetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   project.DetailTable,
			Columns: []string{project.DetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectdetail.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ImagesTable,
			Columns: []string{project.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectimage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProjectCreateBulk is the builder for creating many Project entities in bulk.
type ProjectCreateBulk struct {
	config
	err      error
	builders []*ProjectCreate
}

// Save creates the Project entities in the database.
func (pcb *ProjectCreateBulk) Save(ctx context.Context) ([]*Project, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Project, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProjectCreateBulk) SaveX(ctx context.Context) []*Project {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProjectCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProjectCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
