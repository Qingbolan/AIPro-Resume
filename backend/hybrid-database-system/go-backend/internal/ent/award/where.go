// Code generated by ent, DO NOT EDIT.

package award

import (
	"silan-backend/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Award {
	return predicate.Award(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Award {
	return predicate.Award(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Award {
	return predicate.Award(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Award {
	return predicate.Award(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Award {
	return predicate.Award(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Award {
	return predicate.Award(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Award {
	return predicate.Award(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldTitle, v))
}

// AwardingOrganization applies equality check predicate on the "awarding_organization" field. It's identical to AwardingOrganizationEQ.
func AwardingOrganization(v string) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldAwardingOrganization, v))
}

// AwardDate applies equality check predicate on the "award_date" field. It's identical to AwardDateEQ.
func AwardDate(v time.Time) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldAwardDate, v))
}

// AwardType applies equality check predicate on the "award_type" field. It's identical to AwardTypeEQ.
func AwardType(v string) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldAwardType, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldAmount, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldDescription, v))
}

// CertificateURL applies equality check predicate on the "certificate_url" field. It's identical to CertificateURLEQ.
func CertificateURL(v string) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldCertificateURL, v))
}

// SortOrder applies equality check predicate on the "sort_order" field. It's identical to SortOrderEQ.
func SortOrder(v int) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldSortOrder, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldUpdatedAt, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Award {
	return predicate.Award(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Award {
	return predicate.Award(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Award {
	return predicate.Award(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Award {
	return predicate.Award(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Award {
	return predicate.Award(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Award {
	return predicate.Award(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Award {
	return predicate.Award(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Award {
	return predicate.Award(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Award {
	return predicate.Award(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Award {
	return predicate.Award(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Award {
	return predicate.Award(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Award {
	return predicate.Award(sql.FieldContainsFold(FieldTitle, v))
}

// AwardingOrganizationEQ applies the EQ predicate on the "awarding_organization" field.
func AwardingOrganizationEQ(v string) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldAwardingOrganization, v))
}

// AwardingOrganizationNEQ applies the NEQ predicate on the "awarding_organization" field.
func AwardingOrganizationNEQ(v string) predicate.Award {
	return predicate.Award(sql.FieldNEQ(FieldAwardingOrganization, v))
}

// AwardingOrganizationIn applies the In predicate on the "awarding_organization" field.
func AwardingOrganizationIn(vs ...string) predicate.Award {
	return predicate.Award(sql.FieldIn(FieldAwardingOrganization, vs...))
}

// AwardingOrganizationNotIn applies the NotIn predicate on the "awarding_organization" field.
func AwardingOrganizationNotIn(vs ...string) predicate.Award {
	return predicate.Award(sql.FieldNotIn(FieldAwardingOrganization, vs...))
}

// AwardingOrganizationGT applies the GT predicate on the "awarding_organization" field.
func AwardingOrganizationGT(v string) predicate.Award {
	return predicate.Award(sql.FieldGT(FieldAwardingOrganization, v))
}

// AwardingOrganizationGTE applies the GTE predicate on the "awarding_organization" field.
func AwardingOrganizationGTE(v string) predicate.Award {
	return predicate.Award(sql.FieldGTE(FieldAwardingOrganization, v))
}

// AwardingOrganizationLT applies the LT predicate on the "awarding_organization" field.
func AwardingOrganizationLT(v string) predicate.Award {
	return predicate.Award(sql.FieldLT(FieldAwardingOrganization, v))
}

// AwardingOrganizationLTE applies the LTE predicate on the "awarding_organization" field.
func AwardingOrganizationLTE(v string) predicate.Award {
	return predicate.Award(sql.FieldLTE(FieldAwardingOrganization, v))
}

// AwardingOrganizationContains applies the Contains predicate on the "awarding_organization" field.
func AwardingOrganizationContains(v string) predicate.Award {
	return predicate.Award(sql.FieldContains(FieldAwardingOrganization, v))
}

// AwardingOrganizationHasPrefix applies the HasPrefix predicate on the "awarding_organization" field.
func AwardingOrganizationHasPrefix(v string) predicate.Award {
	return predicate.Award(sql.FieldHasPrefix(FieldAwardingOrganization, v))
}

// AwardingOrganizationHasSuffix applies the HasSuffix predicate on the "awarding_organization" field.
func AwardingOrganizationHasSuffix(v string) predicate.Award {
	return predicate.Award(sql.FieldHasSuffix(FieldAwardingOrganization, v))
}

// AwardingOrganizationEqualFold applies the EqualFold predicate on the "awarding_organization" field.
func AwardingOrganizationEqualFold(v string) predicate.Award {
	return predicate.Award(sql.FieldEqualFold(FieldAwardingOrganization, v))
}

// AwardingOrganizationContainsFold applies the ContainsFold predicate on the "awarding_organization" field.
func AwardingOrganizationContainsFold(v string) predicate.Award {
	return predicate.Award(sql.FieldContainsFold(FieldAwardingOrganization, v))
}

// AwardDateEQ applies the EQ predicate on the "award_date" field.
func AwardDateEQ(v time.Time) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldAwardDate, v))
}

// AwardDateNEQ applies the NEQ predicate on the "award_date" field.
func AwardDateNEQ(v time.Time) predicate.Award {
	return predicate.Award(sql.FieldNEQ(FieldAwardDate, v))
}

// AwardDateIn applies the In predicate on the "award_date" field.
func AwardDateIn(vs ...time.Time) predicate.Award {
	return predicate.Award(sql.FieldIn(FieldAwardDate, vs...))
}

// AwardDateNotIn applies the NotIn predicate on the "award_date" field.
func AwardDateNotIn(vs ...time.Time) predicate.Award {
	return predicate.Award(sql.FieldNotIn(FieldAwardDate, vs...))
}

// AwardDateGT applies the GT predicate on the "award_date" field.
func AwardDateGT(v time.Time) predicate.Award {
	return predicate.Award(sql.FieldGT(FieldAwardDate, v))
}

// AwardDateGTE applies the GTE predicate on the "award_date" field.
func AwardDateGTE(v time.Time) predicate.Award {
	return predicate.Award(sql.FieldGTE(FieldAwardDate, v))
}

// AwardDateLT applies the LT predicate on the "award_date" field.
func AwardDateLT(v time.Time) predicate.Award {
	return predicate.Award(sql.FieldLT(FieldAwardDate, v))
}

// AwardDateLTE applies the LTE predicate on the "award_date" field.
func AwardDateLTE(v time.Time) predicate.Award {
	return predicate.Award(sql.FieldLTE(FieldAwardDate, v))
}

// AwardDateIsNil applies the IsNil predicate on the "award_date" field.
func AwardDateIsNil() predicate.Award {
	return predicate.Award(sql.FieldIsNull(FieldAwardDate))
}

// AwardDateNotNil applies the NotNil predicate on the "award_date" field.
func AwardDateNotNil() predicate.Award {
	return predicate.Award(sql.FieldNotNull(FieldAwardDate))
}

// AwardTypeEQ applies the EQ predicate on the "award_type" field.
func AwardTypeEQ(v string) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldAwardType, v))
}

// AwardTypeNEQ applies the NEQ predicate on the "award_type" field.
func AwardTypeNEQ(v string) predicate.Award {
	return predicate.Award(sql.FieldNEQ(FieldAwardType, v))
}

// AwardTypeIn applies the In predicate on the "award_type" field.
func AwardTypeIn(vs ...string) predicate.Award {
	return predicate.Award(sql.FieldIn(FieldAwardType, vs...))
}

// AwardTypeNotIn applies the NotIn predicate on the "award_type" field.
func AwardTypeNotIn(vs ...string) predicate.Award {
	return predicate.Award(sql.FieldNotIn(FieldAwardType, vs...))
}

// AwardTypeGT applies the GT predicate on the "award_type" field.
func AwardTypeGT(v string) predicate.Award {
	return predicate.Award(sql.FieldGT(FieldAwardType, v))
}

// AwardTypeGTE applies the GTE predicate on the "award_type" field.
func AwardTypeGTE(v string) predicate.Award {
	return predicate.Award(sql.FieldGTE(FieldAwardType, v))
}

// AwardTypeLT applies the LT predicate on the "award_type" field.
func AwardTypeLT(v string) predicate.Award {
	return predicate.Award(sql.FieldLT(FieldAwardType, v))
}

// AwardTypeLTE applies the LTE predicate on the "award_type" field.
func AwardTypeLTE(v string) predicate.Award {
	return predicate.Award(sql.FieldLTE(FieldAwardType, v))
}

// AwardTypeContains applies the Contains predicate on the "award_type" field.
func AwardTypeContains(v string) predicate.Award {
	return predicate.Award(sql.FieldContains(FieldAwardType, v))
}

// AwardTypeHasPrefix applies the HasPrefix predicate on the "award_type" field.
func AwardTypeHasPrefix(v string) predicate.Award {
	return predicate.Award(sql.FieldHasPrefix(FieldAwardType, v))
}

// AwardTypeHasSuffix applies the HasSuffix predicate on the "award_type" field.
func AwardTypeHasSuffix(v string) predicate.Award {
	return predicate.Award(sql.FieldHasSuffix(FieldAwardType, v))
}

// AwardTypeIsNil applies the IsNil predicate on the "award_type" field.
func AwardTypeIsNil() predicate.Award {
	return predicate.Award(sql.FieldIsNull(FieldAwardType))
}

// AwardTypeNotNil applies the NotNil predicate on the "award_type" field.
func AwardTypeNotNil() predicate.Award {
	return predicate.Award(sql.FieldNotNull(FieldAwardType))
}

// AwardTypeEqualFold applies the EqualFold predicate on the "award_type" field.
func AwardTypeEqualFold(v string) predicate.Award {
	return predicate.Award(sql.FieldEqualFold(FieldAwardType, v))
}

// AwardTypeContainsFold applies the ContainsFold predicate on the "award_type" field.
func AwardTypeContainsFold(v string) predicate.Award {
	return predicate.Award(sql.FieldContainsFold(FieldAwardType, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.Award {
	return predicate.Award(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.Award {
	return predicate.Award(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.Award {
	return predicate.Award(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.Award {
	return predicate.Award(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.Award {
	return predicate.Award(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.Award {
	return predicate.Award(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.Award {
	return predicate.Award(sql.FieldLTE(FieldAmount, v))
}

// AmountIsNil applies the IsNil predicate on the "amount" field.
func AmountIsNil() predicate.Award {
	return predicate.Award(sql.FieldIsNull(FieldAmount))
}

// AmountNotNil applies the NotNil predicate on the "amount" field.
func AmountNotNil() predicate.Award {
	return predicate.Award(sql.FieldNotNull(FieldAmount))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Award {
	return predicate.Award(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Award {
	return predicate.Award(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Award {
	return predicate.Award(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Award {
	return predicate.Award(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Award {
	return predicate.Award(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Award {
	return predicate.Award(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Award {
	return predicate.Award(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Award {
	return predicate.Award(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Award {
	return predicate.Award(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Award {
	return predicate.Award(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Award {
	return predicate.Award(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Award {
	return predicate.Award(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Award {
	return predicate.Award(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Award {
	return predicate.Award(sql.FieldContainsFold(FieldDescription, v))
}

// CertificateURLEQ applies the EQ predicate on the "certificate_url" field.
func CertificateURLEQ(v string) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldCertificateURL, v))
}

// CertificateURLNEQ applies the NEQ predicate on the "certificate_url" field.
func CertificateURLNEQ(v string) predicate.Award {
	return predicate.Award(sql.FieldNEQ(FieldCertificateURL, v))
}

// CertificateURLIn applies the In predicate on the "certificate_url" field.
func CertificateURLIn(vs ...string) predicate.Award {
	return predicate.Award(sql.FieldIn(FieldCertificateURL, vs...))
}

// CertificateURLNotIn applies the NotIn predicate on the "certificate_url" field.
func CertificateURLNotIn(vs ...string) predicate.Award {
	return predicate.Award(sql.FieldNotIn(FieldCertificateURL, vs...))
}

// CertificateURLGT applies the GT predicate on the "certificate_url" field.
func CertificateURLGT(v string) predicate.Award {
	return predicate.Award(sql.FieldGT(FieldCertificateURL, v))
}

// CertificateURLGTE applies the GTE predicate on the "certificate_url" field.
func CertificateURLGTE(v string) predicate.Award {
	return predicate.Award(sql.FieldGTE(FieldCertificateURL, v))
}

// CertificateURLLT applies the LT predicate on the "certificate_url" field.
func CertificateURLLT(v string) predicate.Award {
	return predicate.Award(sql.FieldLT(FieldCertificateURL, v))
}

// CertificateURLLTE applies the LTE predicate on the "certificate_url" field.
func CertificateURLLTE(v string) predicate.Award {
	return predicate.Award(sql.FieldLTE(FieldCertificateURL, v))
}

// CertificateURLContains applies the Contains predicate on the "certificate_url" field.
func CertificateURLContains(v string) predicate.Award {
	return predicate.Award(sql.FieldContains(FieldCertificateURL, v))
}

// CertificateURLHasPrefix applies the HasPrefix predicate on the "certificate_url" field.
func CertificateURLHasPrefix(v string) predicate.Award {
	return predicate.Award(sql.FieldHasPrefix(FieldCertificateURL, v))
}

// CertificateURLHasSuffix applies the HasSuffix predicate on the "certificate_url" field.
func CertificateURLHasSuffix(v string) predicate.Award {
	return predicate.Award(sql.FieldHasSuffix(FieldCertificateURL, v))
}

// CertificateURLIsNil applies the IsNil predicate on the "certificate_url" field.
func CertificateURLIsNil() predicate.Award {
	return predicate.Award(sql.FieldIsNull(FieldCertificateURL))
}

// CertificateURLNotNil applies the NotNil predicate on the "certificate_url" field.
func CertificateURLNotNil() predicate.Award {
	return predicate.Award(sql.FieldNotNull(FieldCertificateURL))
}

// CertificateURLEqualFold applies the EqualFold predicate on the "certificate_url" field.
func CertificateURLEqualFold(v string) predicate.Award {
	return predicate.Award(sql.FieldEqualFold(FieldCertificateURL, v))
}

// CertificateURLContainsFold applies the ContainsFold predicate on the "certificate_url" field.
func CertificateURLContainsFold(v string) predicate.Award {
	return predicate.Award(sql.FieldContainsFold(FieldCertificateURL, v))
}

// SortOrderEQ applies the EQ predicate on the "sort_order" field.
func SortOrderEQ(v int) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldSortOrder, v))
}

// SortOrderNEQ applies the NEQ predicate on the "sort_order" field.
func SortOrderNEQ(v int) predicate.Award {
	return predicate.Award(sql.FieldNEQ(FieldSortOrder, v))
}

// SortOrderIn applies the In predicate on the "sort_order" field.
func SortOrderIn(vs ...int) predicate.Award {
	return predicate.Award(sql.FieldIn(FieldSortOrder, vs...))
}

// SortOrderNotIn applies the NotIn predicate on the "sort_order" field.
func SortOrderNotIn(vs ...int) predicate.Award {
	return predicate.Award(sql.FieldNotIn(FieldSortOrder, vs...))
}

// SortOrderGT applies the GT predicate on the "sort_order" field.
func SortOrderGT(v int) predicate.Award {
	return predicate.Award(sql.FieldGT(FieldSortOrder, v))
}

// SortOrderGTE applies the GTE predicate on the "sort_order" field.
func SortOrderGTE(v int) predicate.Award {
	return predicate.Award(sql.FieldGTE(FieldSortOrder, v))
}

// SortOrderLT applies the LT predicate on the "sort_order" field.
func SortOrderLT(v int) predicate.Award {
	return predicate.Award(sql.FieldLT(FieldSortOrder, v))
}

// SortOrderLTE applies the LTE predicate on the "sort_order" field.
func SortOrderLTE(v int) predicate.Award {
	return predicate.Award(sql.FieldLTE(FieldSortOrder, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Award {
	return predicate.Award(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Award {
	return predicate.Award(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Award {
	return predicate.Award(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Award {
	return predicate.Award(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Award {
	return predicate.Award(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Award {
	return predicate.Award(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Award {
	return predicate.Award(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Award {
	return predicate.Award(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Award {
	return predicate.Award(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Award {
	return predicate.Award(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Award {
	return predicate.Award(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Award {
	return predicate.Award(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Award {
	return predicate.Award(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Award {
	return predicate.Award(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Award {
	return predicate.Award(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Award {
	return predicate.Award(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Award {
	return predicate.Award(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Award) predicate.Award {
	return predicate.Award(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Award) predicate.Award {
	return predicate.Award(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Award) predicate.Award {
	return predicate.Award(sql.NotPredicates(p))
}
