// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"silan-backend/internal/ent/language"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LanguageCreate is the builder for creating a Language entity.
type LanguageCreate struct {
	config
	mutation *LanguageMutation
	hooks    []Hook
}

// SetCode sets the "code" field.
func (lc *LanguageCreate) SetCode(s string) *LanguageCreate {
	lc.mutation.SetCode(s)
	return lc
}

// SetName sets the "name" field.
func (lc *LanguageCreate) SetName(s string) *LanguageCreate {
	lc.mutation.SetName(s)
	return lc
}

// SetNativeName sets the "native_name" field.
func (lc *LanguageCreate) SetNativeName(s string) *LanguageCreate {
	lc.mutation.SetNativeName(s)
	return lc
}

// SetIsActive sets the "is_active" field.
func (lc *LanguageCreate) SetIsActive(b bool) *LanguageCreate {
	lc.mutation.SetIsActive(b)
	return lc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (lc *LanguageCreate) SetNillableIsActive(b *bool) *LanguageCreate {
	if b != nil {
		lc.SetIsActive(*b)
	}
	return lc
}

// SetCreatedAt sets the "created_at" field.
func (lc *LanguageCreate) SetCreatedAt(t time.Time) *LanguageCreate {
	lc.mutation.SetCreatedAt(t)
	return lc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lc *LanguageCreate) SetNillableCreatedAt(t *time.Time) *LanguageCreate {
	if t != nil {
		lc.SetCreatedAt(*t)
	}
	return lc
}

// Mutation returns the LanguageMutation object of the builder.
func (lc *LanguageCreate) Mutation() *LanguageMutation {
	return lc.mutation
}

// Save creates the Language in the database.
func (lc *LanguageCreate) Save(ctx context.Context) (*Language, error) {
	lc.defaults()
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LanguageCreate) SaveX(ctx context.Context) *Language {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LanguageCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LanguageCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LanguageCreate) defaults() {
	if _, ok := lc.mutation.IsActive(); !ok {
		v := language.DefaultIsActive
		lc.mutation.SetIsActive(v)
	}
	if _, ok := lc.mutation.CreatedAt(); !ok {
		v := language.DefaultCreatedAt()
		lc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LanguageCreate) check() error {
	if _, ok := lc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Language.code"`)}
	}
	if v, ok := lc.mutation.Code(); ok {
		if err := language.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Language.code": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Language.name"`)}
	}
	if v, ok := lc.mutation.Name(); ok {
		if err := language.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Language.name": %w`, err)}
		}
	}
	if _, ok := lc.mutation.NativeName(); !ok {
		return &ValidationError{Name: "native_name", err: errors.New(`ent: missing required field "Language.native_name"`)}
	}
	if v, ok := lc.mutation.NativeName(); ok {
		if err := language.NativeNameValidator(v); err != nil {
			return &ValidationError{Name: "native_name", err: fmt.Errorf(`ent: validator failed for field "Language.native_name": %w`, err)}
		}
	}
	if _, ok := lc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Language.is_active"`)}
	}
	if _, ok := lc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Language.created_at"`)}
	}
	return nil
}

func (lc *LanguageCreate) sqlSave(ctx context.Context) (*Language, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LanguageCreate) createSpec() (*Language, *sqlgraph.CreateSpec) {
	var (
		_node = &Language{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(language.Table, sqlgraph.NewFieldSpec(language.FieldID, field.TypeInt))
	)
	if value, ok := lc.mutation.Code(); ok {
		_spec.SetField(language.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := lc.mutation.Name(); ok {
		_spec.SetField(language.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := lc.mutation.NativeName(); ok {
		_spec.SetField(language.FieldNativeName, field.TypeString, value)
		_node.NativeName = value
	}
	if value, ok := lc.mutation.IsActive(); ok {
		_spec.SetField(language.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := lc.mutation.CreatedAt(); ok {
		_spec.SetField(language.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// LanguageCreateBulk is the builder for creating many Language entities in bulk.
type LanguageCreateBulk struct {
	config
	err      error
	builders []*LanguageCreate
}

// Save creates the Language entities in the database.
func (lcb *LanguageCreateBulk) Save(ctx context.Context) ([]*Language, error) {
	if lcb.err != nil {
		return nil, lcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Language, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LanguageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LanguageCreateBulk) SaveX(ctx context.Context) []*Language {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LanguageCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LanguageCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}
