version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: silan_mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root_password}
      MYSQL_DATABASE: silan_website
      MYSQL_USER: silan
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-silan_password}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/conf.d:/etc/mysql/conf.d
      - ./mysql/init:/docker-entrypoint-initdb.d
    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=256M
      --query-cache-type=1
      --query-cache-size=64M
      --max-connections=100
      --slow-query-log=1
      --long-query-time=2
      --innodb-file-per-table=1
    restart: unless-stopped
    networks:
      - silan_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: silan_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    networks:
      - silan_network

  # Go-Zero Backend
  backend:
    build:
      context: ./go-backend
      dockerfile: Dockerfile
    container_name: silan_backend
    environment:
      # Database
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: silan_website
      DB_USER: silan
      DB_PASSWORD: ${MYSQL_PASSWORD:-silan_password}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      
      # JWT
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_key_here}
      JWT_EXPIRE: 3600
      
      # Server
      PORT: 8080
      MODE: production
      
      # CORS
      CORS_ORIGINS: "*"
      
      # Rate Limiting
      RATE_LIMIT_RPS: 100
      RATE_LIMIT_BURST: 200
    ports:
      - "8080:8080"
    depends_on:
      - mysql
      - redis
    restart: unless-stopped
    networks:
      - silan_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Python CLI (development only)
  python-cli:
    build:
      context: ../simple-file-system
      dockerfile: Dockerfile
    container_name: silan_python_cli
    volumes:
      - ./content:/app/content
      - ./themes:/app/themes
      - ./dist:/app/dist
      - ./silan-config.json:/app/silan-config.json
    environment:
      API_ENDPOINT: http://backend:8080
      SYNC_ENABLED: "true"
    depends_on:
      - backend
    networks:
      - silan_network
    profiles:
      - dev

  # Nginx (optional - for production)
  nginx:
    image: nginx:alpine
    container_name: silan_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./dist:/usr/share/nginx/html
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - silan_network
    profiles:
      - production

  # Monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: silan_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - silan_network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: silan_grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - silan_network
    profiles:
      - monitoring

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  silan_network:
    driver: bridge